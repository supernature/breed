Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    GENERIC
    NEWLINE
    GOTO
    VAR
    LCOMMENT
    FUTURE
    ASS_SHRR
    REST
    OPERATOR
    INNER
    CAST
    MCOMMENT
    ASS_SHR
    ASS_SHL
    CONST
    OUTER
    OP_LE
    OP_SHRR
    OP_SHR
    OP_SHL
    OP_GE

Grammar

Rule 0     S' -> compilationUnit
Rule 1     compilationUnit -> annotations expr_1
Rule 2     compilationUnit -> packageDeclaration expt_1 expt_2
Rule 3     compilationUnit -> packageDeclaration expt_1 empty
Rule 4     compilationUnit -> packageDeclaration empty expt_2
Rule 5     compilationUnit -> packageDeclaration empty empty
Rule 6     compilationUnit -> empty expt_1 expt_2
Rule 7     compilationUnit -> empty expt_1 empty
Rule 8     compilationUnit -> empty empty expt_2
Rule 9     compilationUnit -> empty empty empty
Rule 10    packageDeclaration -> PACKAGE qualifiedName SEMI
Rule 11    importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI
Rule 12    importDeclaration -> IMPORT STATIC qualifiedName empty SEMI
Rule 13    importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI
Rule 14    importDeclaration -> IMPORT empty qualifiedName empty SEMI
Rule 15    typeDeclaration -> classOrInterfaceDeclaration
Rule 16    typeDeclaration -> SEMI
Rule 17    classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2
Rule 18    classOrInterfaceModifiers -> expt_3
Rule 19    classOrInterfaceModifiers -> empty
Rule 20    classOrInterfaceModifier -> annotation
Rule 21    classOrInterfaceModifier -> PUBLIC
Rule 22    classOrInterfaceModifier -> PROTECTED
Rule 23    classOrInterfaceModifier -> PRIVATE
Rule 24    classOrInterfaceModifier -> ABSTRACT
Rule 25    classOrInterfaceModifier -> STATIC
Rule 26    classOrInterfaceModifier -> FINAL
Rule 27    classOrInterfaceModifier -> STRICTFP
Rule 28    modifiers -> expt_4
Rule 29    modifiers -> empty
Rule 30    classDeclaration -> normalClassDeclaration
Rule 31    classDeclaration -> enumDeclaration
Rule 32    normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
Rule 33    normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody
Rule 34    normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody
Rule 35    normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody
Rule 36    normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody
Rule 37    normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody
Rule 38    normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody
Rule 39    normalClassDeclaration -> CLASS Identifier empty empty empty classBody
Rule 40    typeParameters -> LESS typeParameter expt_5 MORE
Rule 41    typeParameters -> LESS typeParameter empty MORE
Rule 42    typeParameter -> Identifier EXTENDS typeBound
Rule 43    typeParameter -> Identifier empty
Rule 44    typeBound -> type expt_6
Rule 45    typeBound -> type empty
Rule 46    enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody
Rule 47    enumDeclaration -> ENUM Identifier empty enumBody
Rule 48    enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN
Rule 49    enumBody -> BLPAREN enumConstants COMMA empty BRPAREN
Rule 50    enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN
Rule 51    enumBody -> BLPAREN enumConstants empty empty BRPAREN
Rule 52    enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN
Rule 53    enumBody -> BLPAREN empty COMMA empty BRPAREN
Rule 54    enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN
Rule 55    enumBody -> BLPAREN empty empty empty BRPAREN
Rule 56    enumConstants -> enumConstant expt_7
Rule 57    enumConstants -> enumConstant empty
Rule 58    enumConstant -> annotations Identifier arguments classBody
Rule 59    enumConstant -> annotations Identifier arguments empty
Rule 60    enumConstant -> annotations Identifier empty classBody
Rule 61    enumConstant -> annotations Identifier empty empty
Rule 62    enumConstant -> empty Identifier arguments classBody
Rule 63    enumConstant -> empty Identifier arguments empty
Rule 64    enumConstant -> empty Identifier empty classBody
Rule 65    enumConstant -> empty Identifier empty empty
Rule 66    enumBodyDeclarations -> SEMI expt_8
Rule 67    enumBodyDeclarations -> SEMI empty
Rule 68    interfaceDeclaration -> normalInterfaceDeclaration
Rule 69    interfaceDeclaration -> annotationTypeDeclaration
Rule 70    normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody
Rule 71    normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody
Rule 72    normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody
Rule 73    normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody
Rule 74    typeList -> type expt_9
Rule 75    typeList -> type empty
Rule 76    classBody -> BLPAREN expt_8 BRPAREN
Rule 77    classBody -> BLPAREN empty BRPAREN
Rule 78    interfaceBody -> BLPAREN expt_10 BRPAREN
Rule 79    interfaceBody -> BLPAREN empty BRPAREN
Rule 80    classBodyDeclaration -> SEMI
Rule 81    classBodyDeclaration -> STATIC block
Rule 82    classBodyDeclaration -> empty block
Rule 83    classBodyDeclaration -> modifiers memberDecl
Rule 84    memberDecl -> genericMethodOrConstructorDecl
Rule 85    memberDecl -> memberDeclaration
Rule 86    memberDecl -> VOID Identifier voidMethodDeclaratorRest
Rule 87    memberDecl -> Identifier constructorDeclaratorRest
Rule 88    memberDecl -> interfaceDeclaration
Rule 89    memberDecl -> classDeclaration
Rule 90    memberDeclaration -> type expr_3
Rule 91    genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest
Rule 92    genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest
Rule 93    genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest
Rule 94    methodDeclaration -> Identifier methodDeclaratorRest
Rule 95    fieldDeclaration -> variableDeclarators SEMI
Rule 96    interfaceBodyDeclaration -> modifiers interfaceMemberDecl
Rule 97    interfaceBodyDeclaration -> SEMI
Rule 98    interfaceMemberDecl -> interfaceMethodOrFieldDecl
Rule 99    interfaceMemberDecl -> interfaceGenericMethodDecl
Rule 100   interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest
Rule 101   interfaceMemberDecl -> interfaceDeclaration
Rule 102   interfaceMemberDecl -> classDeclaration
Rule 103   interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest
Rule 104   interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI
Rule 105   interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest
Rule 106   methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5
Rule 107   methodDeclaratorRest -> formalParameters expt_11 empty expr_5
Rule 108   methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5
Rule 109   methodDeclaratorRest -> formalParameters empty empty expr_5
Rule 110   voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6
Rule 111   voidMethodDeclaratorRest -> formalParameters empty expr_6
Rule 112   interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI
Rule 113   interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI
Rule 114   interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI
Rule 115   interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI
Rule 116   interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest
Rule 117   voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI
Rule 118   voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI
Rule 119   constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody
Rule 120   constructorDeclaratorRest -> formalParameters empty constructorBody
Rule 121   constantDeclarator -> Identifier constantDeclaratorRest
Rule 122   variableDeclarators -> variableDeclarator expt_12
Rule 123   variableDeclarators -> variableDeclarator empty
Rule 124   variableDeclarator -> variableDeclaratorId EQUALS variableInitializer
Rule 125   variableDeclarator -> variableDeclaratorId empty
Rule 126   constantDeclaratorsRest -> constantDeclaratorRest expt_13
Rule 127   constantDeclaratorsRest -> constantDeclaratorRest empty
Rule 128   constantDeclaratorRest -> expt_11 EQUALS variableInitializer
Rule 129   constantDeclaratorRest -> empty EQUALS variableInitializer
Rule 130   variableDeclaratorId -> Identifier expt_11
Rule 131   variableDeclaratorId -> Identifier empty
Rule 132   variableInitializer -> arrayInitializer
Rule 133   variableInitializer -> expression
Rule 134   arrayInitializer -> BLPAREN empty BRPAREN
Rule 135   arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN
Rule 136   arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN
Rule 137   arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN
Rule 138   arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN
Rule 139   modifier -> annotation
Rule 140   modifier -> PUBLIC
Rule 141   modifier -> PROTECTED
Rule 142   modifier -> PRIVATE
Rule 143   modifier -> STATIC
Rule 144   modifier -> ABSTRACT
Rule 145   modifier -> FINAL
Rule 146   modifier -> NATIVE
Rule 147   modifier -> SYNCHRONIZED
Rule 148   modifier -> TRANSIENT
Rule 149   modifier -> VOLATILE
Rule 150   modifier -> STRICTFP
Rule 151   packageOrTypeName -> qualifiedName
Rule 152   enumConstantName -> Identifier
Rule 153   typeName -> qualifiedName
Rule 154   type -> classOrInterfaceType expt_11
Rule 155   type -> classOrInterfaceType empty
Rule 156   type -> primitiveType expt_11
Rule 157   type -> primitiveType empty
Rule 158   classOrInterfaceType -> Identifier typeArguments expt_15
Rule 159   classOrInterfaceType -> Identifier typeArguments empty
Rule 160   classOrInterfaceType -> Identifier empty expt_15
Rule 161   classOrInterfaceType -> Identifier empty empty
Rule 162   primitiveType -> BOOLEAN
Rule 163   primitiveType -> CHAR
Rule 164   primitiveType -> BYTE
Rule 165   primitiveType -> SHORT
Rule 166   primitiveType -> INT
Rule 167   primitiveType -> LONG
Rule 168   primitiveType -> FLOAT
Rule 169   primitiveType -> DOUBLE
Rule 170   variableModifier -> FINAL
Rule 171   variableModifier -> annotation
Rule 172   typeArguments -> LESS typeArgument expt_16 MORE
Rule 173   typeArguments -> LESS typeArgument empty MORE
Rule 174   typeArgument -> type
Rule 175   typeArgument -> QUES expr_8 type
Rule 176   typeArgument -> QUES empty
Rule 177   qualifiedNameList -> qualifiedName expt_17
Rule 178   qualifiedNameList -> qualifiedName empty
Rule 179   formalParameters -> LPAREN formalParameterDecls RPAREN
Rule 180   formalParameters -> LPAREN empty RPAREN
Rule 181   formalParameterDecls -> variableModifiers type formalParameterDeclsRest
Rule 182   formalParameterDeclsRest -> variableDeclaratorId COMMA formalParameterDecls
Rule 183   formalParameterDeclsRest -> variableDeclaratorId empty
Rule 184   formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId
Rule 185   methodBody -> block
Rule 186   constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN
Rule 187   constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN
Rule 188   constructorBody -> BLPAREN empty expt_18 BRPAREN
Rule 189   constructorBody -> BLPAREN empty empty BRPAREN
Rule 190   explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI
Rule 191   explicitConstructorInvocation -> empty expr_9 arguments SEMI
Rule 192   explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI
Rule 193   explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI
Rule 194   qualifiedName -> Identifier expt_19
Rule 195   qualifiedName -> Identifier empty
Rule 196   literal -> integerLiteral
Rule 197   literal -> FloatingPointLiteral
Rule 198   literal -> CharacterLiteral
Rule 199   literal -> StringLiteral
Rule 200   literal -> booleanLiteral
Rule 201   literal -> NULL
Rule 202   booleanLiteral -> TRUE
Rule 203   booleanLiteral -> FALSE
Rule 204   annotations -> expr_10
Rule 205   annotation -> AT annotationName LPAREN expr_11 RPAREN
Rule 206   annotation -> AT annotationName empty
Rule 207   annotationName -> Identifier expt_19
Rule 208   annotationName -> Identifier empty
Rule 209   elementValuePairs -> elementValuePair expt_20
Rule 210   elementValuePairs -> elementValuePair empty
Rule 211   elementValuePair -> Identifier EQUALS elementValue
Rule 212   elementValue -> conditionalExpression
Rule 213   elementValue -> annotation
Rule 214   elementValue -> elementValueArrayInitializer
Rule 215   elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN
Rule 216   elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN
Rule 217   elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN
Rule 218   elementValueArrayInitializer -> BLPAREN empty empty BRPAREN
Rule 219   annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody
Rule 220   annotationTypeBody -> BLPAREN expt_22 BRPAREN
Rule 221   annotationTypeBody -> BLPAREN empty BRPAREN
Rule 222   annotationTypeElementDeclaration -> modifiers annotationTypeElementRest
Rule 223   annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI
Rule 224   annotationTypeElementRest -> normalClassDeclaration SEMI
Rule 225   annotationTypeElementRest -> normalClassDeclaration empty
Rule 226   annotationTypeElementRest -> normalInterfaceDeclaration SEMI
Rule 227   annotationTypeElementRest -> normalInterfaceDeclaration empty
Rule 228   annotationTypeElementRest -> enumDeclaration SEMI
Rule 229   annotationTypeElementRest -> enumDeclaration empty
Rule 230   annotationTypeElementRest -> annotationTypeDeclaration SEMI
Rule 231   annotationTypeElementRest -> annotationTypeDeclaration empty
Rule 232   annotationMethodOrConstantRest -> annotationMethodRest
Rule 233   annotationMethodOrConstantRest -> annotationConstantRest
Rule 234   annotationMethodRest -> Identifier LPAREN RPAREN defaultValue
Rule 235   annotationMethodRest -> Identifier LPAREN RPAREN empty
Rule 236   annotationConstantRest -> variableDeclarators
Rule 237   defaultValue -> DEFAULT elementValue
Rule 238   block -> BLPAREN expt_18 BRPAREN
Rule 239   block -> BLPAREN empty BRPAREN
Rule 240   blockStatement -> localVariableDeclarationStatement
Rule 241   blockStatement -> classOrInterfaceDeclaration
Rule 242   blockStatement -> statement
Rule 243   localVariableDeclarationStatement -> localVariableDeclaration SEMI
Rule 244   localVariableDeclaration -> variableModifiers type variableDeclarators
Rule 245   variableModifiers -> expt_23
Rule 246   variableModifiers -> empty
Rule 247   statement -> block
Rule 248   statement -> ASSERT expression COLON expression SEMI
Rule 249   statement -> ASSERT expression empty SEMI
Rule 250   statement -> IF parExpression statement ELSE statement
Rule 251   statement -> IF parExpression statement empty
Rule 252   statement -> FOR LPAREN forControl RPAREN statement
Rule 253   statement -> WHILE parExpression statement
Rule 254   statement -> DO statement WHILE parExpression SEMI
Rule 255   statement -> TRY block expr_12
Rule 256   statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
Rule 257   statement -> SYNCHRONIZED parExpression block
Rule 258   statement -> RETURN expression SEMI
Rule 259   statement -> RETURN empty SEMI
Rule 260   statement -> THROW expression SEMI
Rule 261   statement -> BREAK Identifier SEMI
Rule 262   statement -> BREAK empty SEMI
Rule 263   statement -> CONTINUE Identifier SEMI
Rule 264   statement -> CONTINUE empty SEMI
Rule 265   statement -> SEMI
Rule 266   statement -> statementExpression SEMI
Rule 267   statement -> Identifier COLON statement
Rule 268   catches -> catchClause expt_24
Rule 269   catches -> catchClause empty
Rule 270   catchClause -> CATCH LPAREN formalParameter RPAREN block
Rule 271   formalParameter -> variableModifiers type variableDeclaratorId
Rule 272   switchBlockStatementGroups -> expt_25
Rule 273   switchBlockStatementGroups -> empty
Rule 274   switchBlockStatementGroup -> expr_13 expt_18
Rule 275   switchBlockStatementGroup -> expr_13 empty
Rule 276   switchLabel -> CASE constantExpression COLON
Rule 277   switchLabel -> CASE enumConstantName COLON
Rule 278   switchLabel -> DEFAULT COLON
Rule 279   forControl -> enhancedForControl
Rule 280   forControl -> forInit SEMI expression SEMI forUpdate
Rule 281   forControl -> forInit SEMI expression SEMI empty
Rule 282   forControl -> forInit SEMI empty SEMI forUpdate
Rule 283   forControl -> forInit SEMI empty SEMI empty
Rule 284   forControl -> empty SEMI expression SEMI forUpdate
Rule 285   forControl -> empty SEMI expression SEMI empty
Rule 286   forControl -> empty SEMI empty SEMI forUpdate
Rule 287   forControl -> empty SEMI empty SEMI empty
Rule 288   forInit -> localVariableDeclaration
Rule 289   forInit -> expressionList
Rule 290   enhancedForControl -> variableModifiers type Identifier COLON expression
Rule 291   forUpdate -> expressionList
Rule 292   parExpression -> LPAREN expression RPAREN
Rule 293   expressionList -> expression expt_26
Rule 294   expressionList -> expression empty
Rule 295   statementExpression -> expression
Rule 296   constantExpression -> expression
Rule 297   expression -> conditionalExpression assignmentOperator expression
Rule 298   expression -> conditionalExpression empty
Rule 299   assignmentOperator -> EQUALS
Rule 300   assignmentOperator -> ASS_ADD
Rule 301   assignmentOperator -> ASS_SUB
Rule 302   assignmentOperator -> ASS_MUL
Rule 303   assignmentOperator -> ASS_DIV
Rule 304   assignmentOperator -> ASS_AND
Rule 305   assignmentOperator -> ASS_OR
Rule 306   assignmentOperator -> ASS_XOR
Rule 307   assignmentOperator -> ASS_MOD
Rule 308   assignmentOperator -> LESS LESS EQUALS
Rule 309   assignmentOperator -> MORE MORE MORE EQUALS
Rule 310   assignmentOperator -> MORE MORE EQUALS
Rule 311   conditionalExpression -> conditionalOrExpression QUES expression COLON expression
Rule 312   conditionalExpression -> conditionalOrExpression empty
Rule 313   conditionalOrExpression -> conditionalAndExpression expt_27
Rule 314   conditionalOrExpression -> conditionalAndExpression empty
Rule 315   conditionalAndExpression -> inclusiveOrExpression expt_28
Rule 316   conditionalAndExpression -> inclusiveOrExpression empty
Rule 317   inclusiveOrExpression -> exclusiveOrExpression expt_29
Rule 318   inclusiveOrExpression -> exclusiveOrExpression empty
Rule 319   exclusiveOrExpression -> andExpression expt_30
Rule 320   exclusiveOrExpression -> andExpression empty
Rule 321   andExpression -> equalityExpression expt_31
Rule 322   andExpression -> equalityExpression empty
Rule 323   equalityExpression -> instanceOfExpression expt_32
Rule 324   equalityExpression -> instanceOfExpression empty
Rule 325   instanceOfExpression -> relationalExpression INSTANCEOF type
Rule 326   instanceOfExpression -> relationalExpression empty
Rule 327   relationalExpression -> shiftExpression expt_33
Rule 328   relationalExpression -> shiftExpression empty
Rule 329   relationalOp -> LESS EQUALS
Rule 330   relationalOp -> MORE EQUALS
Rule 331   relationalOp -> LESS
Rule 332   relationalOp -> MORE
Rule 333   shiftExpression -> additiveExpression expt_34
Rule 334   shiftExpression -> additiveExpression empty
Rule 335   shiftOp -> LESS LESS
Rule 336   shiftOp -> MORE MORE MORE
Rule 337   shiftOp -> MORE MORE
Rule 338   additiveExpression -> multiplicativeExpression expt_35
Rule 339   additiveExpression -> multiplicativeExpression empty
Rule 340   multiplicativeExpression -> unaryExpression expt_36
Rule 341   multiplicativeExpression -> unaryExpression empty
Rule 342   unaryExpression -> PLUS unaryExpression
Rule 343   unaryExpression -> DASH unaryExpression
Rule 344   unaryExpression -> OP_INC unaryExpression
Rule 345   unaryExpression -> OP_DEC unaryExpression
Rule 346   unaryExpression -> unaryExpressionNotPlusMinus
Rule 347   unaryExpressionNotPlusMinus -> TILDE unaryExpression
Rule 348   unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression
Rule 349   unaryExpressionNotPlusMinus -> castExpression
Rule 350   unaryExpressionNotPlusMinus -> primary expt_37 expr_17
Rule 351   unaryExpressionNotPlusMinus -> primary empty expr_17
Rule 352   castExpression -> LPAREN primitiveType RPAREN unaryExpression
Rule 353   castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
Rule 354   primary -> parExpression
Rule 355   primary -> THIS expt_19 identifierSuffix
Rule 356   primary -> THIS expt_19 empty
Rule 357   primary -> THIS empty identifierSuffix
Rule 358   primary -> THIS empty empty
Rule 359   primary -> SUPER superSuffix
Rule 360   primary -> literal
Rule 361   primary -> NEW creator
Rule 362   primary -> Identifier expt_19 identifierSuffix
Rule 363   primary -> Identifier expt_19 empty
Rule 364   primary -> Identifier empty identifierSuffix
Rule 365   primary -> Identifier empty empty
Rule 366   primary -> primitiveType expt_11 DOT CLASS
Rule 367   primary -> primitiveType empty DOT CLASS
Rule 368   primary -> VOID DOT CLASS
Rule 369   identifierSuffix -> expr_19 DOT CLASS
Rule 370   identifierSuffix -> expr_20
Rule 371   identifierSuffix -> arguments
Rule 372   identifierSuffix -> DOT CLASS
Rule 373   identifierSuffix -> DOT explicitGenericInvocation
Rule 374   identifierSuffix -> DOT THIS
Rule 375   identifierSuffix -> DOT SUPER arguments
Rule 376   identifierSuffix -> DOT NEW innerCreator
Rule 377   creator -> nonWildcardTypeArguments createdName classCreatorRest
Rule 378   creator -> createdName expr_21
Rule 379   createdName -> classOrInterfaceType
Rule 380   createdName -> primitiveType
Rule 381   innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest
Rule 382   innerCreator -> empty Identifier classCreatorRest
Rule 383   arrayCreatorRest -> FLPAREN expr_22
Rule 384   classCreatorRest -> arguments classBody
Rule 385   classCreatorRest -> arguments empty
Rule 386   explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments
Rule 387   nonWildcardTypeArguments -> LESS typeList MORE
Rule 388   selector -> DOT Identifier arguments
Rule 389   selector -> DOT Identifier empty
Rule 390   selector -> DOT THIS
Rule 391   selector -> DOT SUPER superSuffix
Rule 392   selector -> DOT NEW innerCreator
Rule 393   selector -> FLPAREN expression FRPAREN
Rule 394   superSuffix -> arguments
Rule 395   superSuffix -> DOT Identifier arguments
Rule 396   superSuffix -> DOT Identifier empty
Rule 397   arguments -> LPAREN expressionList RPAREN
Rule 398   arguments -> LPAREN empty RPAREN
Rule 399   expt_38 -> FLPAREN expression FRPAREN
Rule 400   expt_38 -> expt_38 FLPAREN expression FRPAREN
Rule 401   expt_34 -> shiftOp additiveExpression
Rule 402   expt_34 -> expt_34 shiftOp additiveExpression
Rule 403   expt_35 -> expr_15 multiplicativeExpression
Rule 404   expt_35 -> expt_35 expr_15 multiplicativeExpression
Rule 405   expt_36 -> expr_16 unaryExpression
Rule 406   expt_36 -> expt_36 expr_16 unaryExpression
Rule 407   expt_37 -> selector
Rule 408   expt_37 -> expt_37 selector
Rule 409   expt_30 -> CARET andExpression
Rule 410   expt_30 -> expt_30 CARET andExpression
Rule 411   expt_31 -> AND equalityExpression
Rule 412   expt_31 -> expt_31 AND equalityExpression
Rule 413   expt_32 -> expr_14 instanceOfExpression
Rule 414   expt_32 -> expt_32 expr_14 instanceOfExpression
Rule 415   expt_33 -> relationalOp shiftExpression
Rule 416   expt_33 -> expt_33 relationalOp shiftExpression
Rule 417   expt_8 -> classBodyDeclaration
Rule 418   expt_8 -> expt_8 classBodyDeclaration
Rule 419   expt_9 -> COMMA type
Rule 420   expt_9 -> expt_9 COMMA type
Rule 421   expt_4 -> modifier
Rule 422   expt_4 -> expt_4 modifier
Rule 423   expt_5 -> COMMA typeParameter
Rule 424   expt_5 -> expt_5 COMMA typeParameter
Rule 425   expt_6 -> AND type
Rule 426   expt_6 -> expt_6 AND type
Rule 427   expt_7 -> COMMA enumConstant
Rule 428   expt_7 -> expt_7 COMMA enumConstant
Rule 429   expt_1 -> importDeclaration
Rule 430   expt_1 -> expt_1 importDeclaration
Rule 431   expt_2 -> typeDeclaration
Rule 432   expt_2 -> expt_2 typeDeclaration
Rule 433   expt_3 -> classOrInterfaceModifier
Rule 434   expt_3 -> expt_3 classOrInterfaceModifier
Rule 435   expt_29 -> VERTICAL exclusiveOrExpression
Rule 436   expt_29 -> expt_29 VERTICAL exclusiveOrExpression
Rule 437   expt_28 -> OP_LAND inclusiveOrExpression
Rule 438   expt_28 -> expt_28 OP_LAND inclusiveOrExpression
Rule 439   expt_27 -> OP_LOR conditionalAndExpression
Rule 440   expt_27 -> expt_27 OP_LOR conditionalAndExpression
Rule 441   expt_26 -> COMMA expression
Rule 442   expt_26 -> expt_26 COMMA expression
Rule 443   expt_25 -> switchBlockStatementGroup
Rule 444   expt_25 -> expt_25 switchBlockStatementGroup
Rule 445   expt_24 -> catchClause
Rule 446   expt_24 -> expt_24 catchClause
Rule 447   expt_23 -> variableModifier
Rule 448   expt_23 -> expt_23 variableModifier
Rule 449   expt_22 -> annotationTypeElementDeclaration
Rule 450   expt_22 -> expt_22 annotationTypeElementDeclaration
Rule 451   expt_21 -> COMMA elementValue
Rule 452   expt_21 -> expt_21 COMMA elementValue
Rule 453   expt_20 -> COMMA elementValuePair
Rule 454   expt_20 -> expt_20 COMMA elementValuePair
Rule 455   expt_16 -> COMMA typeArgument
Rule 456   expt_16 -> expt_16 COMMA typeArgument
Rule 457   expt_17 -> COMMA qualifiedName
Rule 458   expt_17 -> expt_17 COMMA qualifiedName
Rule 459   expt_14 -> COMMA variableInitializer
Rule 460   expt_14 -> expt_14 COMMA variableInitializer
Rule 461   expt_15 -> DOT Identifier typeArguments
Rule 462   expt_15 -> expt_15 DOT Identifier typeArguments
Rule 463   expt_12 -> COMMA variableDeclarator
Rule 464   expt_12 -> expt_12 COMMA variableDeclarator
Rule 465   expt_13 -> COMMA constantDeclarator
Rule 466   expt_13 -> expt_13 COMMA constantDeclarator
Rule 467   expt_10 -> interfaceBodyDeclaration
Rule 468   expt_10 -> expt_10 interfaceBodyDeclaration
Rule 469   expt_11 -> FLPAREN FRPAREN
Rule 470   expt_11 -> expt_11 FLPAREN FRPAREN
Rule 471   expt_18 -> blockStatement
Rule 472   expt_18 -> expt_18 blockStatement
Rule 473   expt_19 -> DOT Identifier
Rule 474   expt_19 -> expt_19 DOT Identifier
Rule 475   expr_21 -> arrayCreatorRest
Rule 476   expr_21 -> classCreatorRest
Rule 477   expr_20 -> FLPAREN expression FRPAREN
Rule 478   expr_20 -> expr_20 FLPAREN expression FRPAREN
Rule 479   expr_22 -> FRPAREN expt_11 arrayInitializer
Rule 480   expr_22 -> expression FRPAREN expt_38 expt_11
Rule 481   expr_8 -> EXTENDS
Rule 482   expr_8 -> SUPER
Rule 483   expr_9 -> THIS
Rule 484   expr_9 -> SUPER
Rule 485   expr_6 -> methodBody
Rule 486   expr_6 -> SEMI
Rule 487   expr_7 -> type
Rule 488   expr_7 -> VOID
Rule 489   expr_4 -> type
Rule 490   expr_4 -> VOID
Rule 491   expr_5 -> methodBody
Rule 492   expr_5 -> SEMI
Rule 493   expr_2 -> classDeclaration
Rule 494   expr_2 -> interfaceDeclaration
Rule 495   expr_3 -> methodDeclaration
Rule 496   expr_3 -> fieldDeclaration
Rule 497   expr_1 -> packageDeclaration expt_1 expt_2
Rule 498   expr_1 -> classOrInterfaceDeclaration expt_2
Rule 499   expr_18 -> type
Rule 500   expr_18 -> expression
Rule 501   expr_19 -> FLPAREN FRPAREN
Rule 502   expr_19 -> expr_19 FLPAREN FRPAREN
Rule 503   expr_14 -> OP_EQ
Rule 504   expr_14 -> OP_NE
Rule 505   expr_15 -> PLUS
Rule 506   expr_15 -> DASH
Rule 507   expr_16 -> MULT
Rule 508   expr_16 -> SLASH
Rule 509   expr_16 -> PERCENT
Rule 510   expr_17 -> OP_INC
Rule 511   expr_17 -> OP_DEC
Rule 512   expr_10 -> annotation
Rule 513   expr_10 -> expr_10 annotation
Rule 514   expr_11 -> elementValuePairs
Rule 515   expr_11 -> elementValue
Rule 516   expr_12 -> catches FINALLY block
Rule 517   expr_12 -> catches
Rule 518   expr_12 -> FINALLY block
Rule 519   expr_13 -> switchLabel
Rule 520   expr_13 -> expr_13 switchLabel
Rule 521   FloatingPointLiteral -> NON_INTEGER_1
Rule 522   FloatingPointLiteral -> NON_INTEGER_2
Rule 523   FloatingPointLiteral -> NON_INTEGER_3
Rule 524   integerLiteral -> NUMBER
Rule 525   integerLiteral -> HEX_NUMBER
Rule 526   integerLiteral -> LONG_NUMBER
Rule 527   integerLiteral -> LONG_HEX_NUMBER
Rule 528   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 24 144
AND                  : 411 412 425 426
ASSERT               : 248 249
ASS_ADD              : 300
ASS_AND              : 304
ASS_DIV              : 303
ASS_MOD              : 307
ASS_MUL              : 302
ASS_OR               : 305
ASS_SHL              : 
ASS_SHR              : 
ASS_SHRR             : 
ASS_SUB              : 301
ASS_XOR              : 306
AT                   : 205 206 219
BLPAREN              : 48 49 50 51 52 53 54 55 76 77 78 79 134 135 136 137 138 186 187 188 189 215 216 217 218 220 221 238 239 256
BOOLEAN              : 162
BREAK                : 261 262
BRPAREN              : 48 49 50 51 52 53 54 55 76 77 78 79 134 135 136 137 138 186 187 188 189 215 216 217 218 220 221 238 239 256
BYTE                 : 164
CARET                : 409 410
CASE                 : 276 277
CAST                 : 
CATCH                : 270
CHAR                 : 163
CLASS                : 32 33 34 35 36 37 38 39 366 367 368 369 372
COLON                : 248 267 276 277 278 290 311
COMMA                : 48 49 52 53 135 137 182 215 217 419 420 423 424 427 428 441 442 451 452 453 454 455 456 457 458 459 460 463 464 465 466
CONST                : 
CONTINUE             : 263 264
CharacterLiteral     : 198
DASH                 : 343 506
DEFAULT              : 237 278
DO                   : 254
DOT                  : 11 13 192 193 366 367 368 369 372 373 374 375 376 388 389 390 391 392 395 396 461 462 473 474
DOUBLE               : 169
ELSE                 : 250
ENUM                 : 46 47
EQUALS               : 124 128 129 211 299 308 309 310 329 330
EXCLAMATION          : 348
EXTENDS              : 32 33 36 37 42 70 72 481
FALSE                : 203
FINAL                : 26 145 170
FINALLY              : 516 518
FLOAT                : 168
FLPAREN              : 383 393 399 400 469 470 477 478 501 502
FOR                  : 252
FRPAREN              : 393 399 400 469 470 477 478 479 480 501 502
FUTURE               : 
GENERIC              : 
GOTO                 : 
HEX_NUMBER           : 525
IF                   : 250 251
IMPLEMENTS           : 32 34 36 38 46
IMPORT               : 11 12 13 14
INNER                : 
INSTANCEOF           : 325
INT                  : 166
INTERFACE            : 70 71 72 73 219
Identifier           : 32 33 34 35 36 37 38 39 42 43 46 47 58 59 60 61 62 63 64 65 70 71 72 73 86 87 92 93 94 100 103 116 121 130 131 152 158 159 160 161 194 195 207 208 211 219 234 235 261 263 267 290 362 363 364 365 381 382 386 388 389 395 396 461 462 473 474
LCOMMENT             : 
LESS                 : 40 41 172 173 308 308 329 331 335 335 387
LONG                 : 167
LONG_HEX_NUMBER      : 527
LONG_NUMBER          : 526
LPAREN               : 179 180 205 234 235 252 270 292 352 353 397 398
MCOMMENT             : 
MORE                 : 40 41 172 173 309 309 309 310 310 330 332 336 336 336 337 337 387
MULT                 : 11 13 507
NATIVE               : 146
NEW                  : 361 376 392
NEWLINE              : 
NON_INTEGER_1        : 521
NON_INTEGER_2        : 522
NON_INTEGER_3        : 523
NULL                 : 201
NUMBER               : 524
OPERATOR             : 
OP_ARRAY             : 184
OP_DEC               : 345 511
OP_EQ                : 503
OP_GE                : 
OP_INC               : 344 510
OP_LAND              : 437 438
OP_LE                : 
OP_LOR               : 439 440
OP_NE                : 504
OP_SHL               : 
OP_SHR               : 
OP_SHRR              : 
OUTER                : 
PACKAGE              : 10
PERCENT              : 509
PLUS                 : 342 505
PRIVATE              : 23 142
PROTECTED            : 22 141
PUBLIC               : 21 140
QUES                 : 175 176 311
REST                 : 
RETURN               : 258 259
RPAREN               : 179 180 205 234 235 252 270 292 352 353 397 398
SEMI                 : 10 11 12 13 14 16 66 67 80 95 97 104 112 113 114 115 117 118 190 191 192 193 223 224 226 228 230 243 248 249 254 258 259 260 261 262 263 264 265 266 280 280 281 281 282 282 283 283 284 284 285 285 286 286 287 287 486 492
SHORT                : 165
SLASH                : 508
STATIC               : 11 12 25 81 143
STRICTFP             : 27 150
SUPER                : 192 193 359 375 391 482 484
SWITCH               : 256
SYNCHRONIZED         : 147 257
StringLiteral        : 199
THIS                 : 355 356 357 358 374 390 483
THROW                : 260
THROWS               : 106 108 110 112 114 117 119
TILDE                : 347
TRANSIENT            : 148
TRUE                 : 202
TRY                  : 255
VAR                  : 
VERTICAL             : 435 436
VOID                 : 86 100 368 488 490
VOLATILE             : 149
WHILE                : 253 254
error                : 

Nonterminals, with rules where they appear

FloatingPointLiteral : 197
additiveExpression   : 333 334 401 402
andExpression        : 319 320 409 410
annotation           : 20 139 171 213 512 513
annotationConstantRest : 233
annotationMethodOrConstantRest : 223
annotationMethodRest : 232
annotationName       : 205 206
annotationTypeBody   : 219
annotationTypeDeclaration : 69 230 231
annotationTypeElementDeclaration : 449 450
annotationTypeElementRest : 222
annotations          : 1 58 59 60 61
arguments            : 58 59 62 63 190 191 192 193 371 375 384 385 386 388 394 395
arrayCreatorRest     : 475
arrayInitializer     : 132 479
assignmentOperator   : 297
block                : 81 82 185 247 255 257 270 516 518
blockStatement       : 471 472
booleanLiteral       : 200
castExpression       : 349
catchClause          : 268 269 445 446
catches              : 516 517
classBody            : 32 33 34 35 36 37 38 39 58 60 62 64 384
classBodyDeclaration : 417 418
classCreatorRest     : 377 381 382 476
classDeclaration     : 89 102 493
classOrInterfaceDeclaration : 15 241 498
classOrInterfaceModifier : 433 434
classOrInterfaceModifiers : 17
classOrInterfaceType : 154 155 379
compilationUnit      : 0
conditionalAndExpression : 313 314 439 440
conditionalExpression : 212 297 298
conditionalOrExpression : 311 312
constantDeclarator   : 465 466
constantDeclaratorRest : 121 126 127
constantDeclaratorsRest : 104
constantExpression   : 276
constructorBody      : 119 120
constructorDeclaratorRest : 87 93
createdName          : 377 378
creator              : 361
defaultValue         : 234
elementValue         : 211 215 216 237 451 452 515
elementValueArrayInitializer : 214
elementValuePair     : 209 210 453 454
elementValuePairs    : 514
empty                : 3 4 5 5 6 7 7 8 8 9 9 9 12 13 14 14 19 29 33 34 35 35 36 37 37 38 38 39 39 39 41 43 45 47 49 50 51 51 52 53 53 54 54 55 55 55 57 59 60 61 61 62 63 63 64 64 65 65 65 67 71 72 73 73 75 77 79 82 107 108 109 109 111 113 114 115 115 118 120 123 125 127 129 131 134 136 137 138 138 155 157 159 160 161 161 173 176 178 180 183 187 188 189 189 191 193 195 206 208 210 216 217 218 218 221 225 227 229 231 235 239 246 249 251 259 262 264 269 273 275 281 282 283 283 284 285 285 286 286 287 287 287 294 298 312 314 316 318 320 322 324 326 328 334 339 341 351 356 357 358 358 363 364 365 365 367 382 385 389 396 398
enhancedForControl   : 279
enumBody             : 46 47
enumBodyDeclarations : 48 50 52 54
enumConstant         : 56 57 427 428
enumConstantName     : 277
enumConstants        : 48 49 50 51
enumDeclaration      : 31 228 229
equalityExpression   : 321 322 411 412
exclusiveOrExpression : 317 318 435 436
explicitConstructorInvocation : 186 187
explicitGenericInvocation : 373
expr_1               : 1
expr_10              : 204 513
expr_11              : 205
expr_12              : 255
expr_13              : 274 275 520
expr_14              : 413 414
expr_15              : 403 404
expr_16              : 405 406
expr_17              : 350 351
expr_18              : 353
expr_19              : 369 502
expr_2               : 17
expr_20              : 370 478
expr_21              : 378
expr_22              : 383
expr_3               : 90
expr_4               : 92
expr_5               : 106 107 108 109
expr_6               : 110 111
expr_7               : 116
expr_8               : 175
expr_9               : 190 191
expression           : 133 248 248 249 258 260 280 281 284 285 290 292 293 294 295 296 297 311 311 393 399 400 441 442 477 478 480 500
expressionList       : 289 291 397
expt_1               : 2 3 6 7 430 497
expt_10              : 78 468
expt_11              : 106 107 112 113 128 130 154 156 366 470 479 480
expt_12              : 122 464
expt_13              : 126 466
expt_14              : 135 136 460
expt_15              : 158 160 462
expt_16              : 172 456
expt_17              : 177 458
expt_18              : 186 188 238 274 472
expt_19              : 194 207 355 356 362 363 474
expt_2               : 2 4 6 8 432 497 498
expt_20              : 209 454
expt_21              : 215 216 452
expt_22              : 220 450
expt_23              : 245 448
expt_24              : 268 446
expt_25              : 272 444
expt_26              : 293 442
expt_27              : 313 440
expt_28              : 315 438
expt_29              : 317 436
expt_3               : 18 434
expt_30              : 319 410
expt_31              : 321 412
expt_32              : 323 414
expt_33              : 327 416
expt_34              : 333 402
expt_35              : 338 404
expt_36              : 340 406
expt_37              : 350 408
expt_38              : 400 480
expt_4               : 28 422
expt_5               : 40 424
expt_6               : 44 426
expt_7               : 56 428
expt_8               : 66 76 418
expt_9               : 74 420
fieldDeclaration     : 496
forControl           : 252
forInit              : 280 281 282 283
forUpdate            : 280 282 284 286
formalParameter      : 270
formalParameterDecls : 179 182
formalParameterDeclsRest : 181
formalParameters     : 106 107 108 109 110 111 112 113 114 115 117 118 119 120
genericMethodOrConstructorDecl : 84
genericMethodOrConstructorRest : 91
identifierSuffix     : 355 357 362 364
importDeclaration    : 429 430
inclusiveOrExpression : 315 316 437 438
innerCreator         : 376 392
instanceOfExpression : 323 324 413 414
integerLiteral       : 196
interfaceBody        : 70 71 72 73
interfaceBodyDeclaration : 467 468
interfaceDeclaration : 88 101 494
interfaceGenericMethodDecl : 99
interfaceMemberDecl  : 96
interfaceMethodDeclaratorRest : 105 116
interfaceMethodOrFieldDecl : 98
interfaceMethodOrFieldRest : 103
literal              : 360
localVariableDeclaration : 243 288
localVariableDeclarationStatement : 240
memberDecl           : 83
memberDeclaration    : 85
methodBody           : 485 491
methodDeclaration    : 495
methodDeclaratorRest : 92 94
modifier             : 421 422
modifiers            : 83 96 222
multiplicativeExpression : 338 339 403 404
nonWildcardTypeArguments : 190 192 377 381 386
normalClassDeclaration : 30 224 225
normalInterfaceDeclaration : 68 226 227
packageDeclaration   : 2 3 4 5 497
packageOrTypeName    : 
parExpression        : 250 251 253 254 256 257 354
primary              : 192 193 350 351
primitiveType        : 156 157 352 366 367 380
qualifiedName        : 10 11 12 13 14 151 153 177 178 457 458
qualifiedNameList    : 106 108 110 112 114 117 119
relationalExpression : 325 326
relationalOp         : 415 416
selector             : 407 408
shiftExpression      : 327 328 415 416
shiftOp              : 401 402
statement            : 242 250 250 251 252 253 254 267
statementExpression  : 266
superSuffix          : 359 391
switchBlockStatementGroup : 443 444
switchBlockStatementGroups : 256
switchLabel          : 519 520
type                 : 32 33 36 37 44 45 74 75 90 103 174 175 181 223 244 271 290 325 419 420 425 426 487 489 499
typeArgument         : 172 173 455 456
typeArguments        : 158 159 461 462
typeBound            : 42
typeDeclaration      : 431 432
typeList             : 32 34 36 38 46 70 72 387
typeName             : 
typeParameter        : 40 41 423 424
typeParameters       : 32 33 34 35 70 71 91 116
unaryExpression      : 340 341 342 343 344 345 347 348 352 405 406
unaryExpressionNotPlusMinus : 346 353
variableDeclarator   : 122 123 463 464
variableDeclaratorId : 124 125 182 183 184 271
variableDeclarators  : 95 236 244
variableInitializer  : 124 128 129 135 136 137 138 459 460
variableModifier     : 447 448
variableModifiers    : 181 244 271 290
voidInterfaceMethodDeclaratorRest : 100
voidMethodDeclaratorRest : 86

Parsing method: LALR

state 0

    (0) S' -> . compilationUnit
    (1) compilationUnit -> . annotations expr_1
    (2) compilationUnit -> . packageDeclaration expt_1 expt_2
    (3) compilationUnit -> . packageDeclaration expt_1 empty
    (4) compilationUnit -> . packageDeclaration empty expt_2
    (5) compilationUnit -> . packageDeclaration empty empty
    (6) compilationUnit -> . empty expt_1 expt_2
    (7) compilationUnit -> . empty expt_1 empty
    (8) compilationUnit -> . empty empty expt_2
    (9) compilationUnit -> . empty empty empty
    (204) annotations -> . expr_10
    (10) packageDeclaration -> . PACKAGE qualifiedName SEMI
    (528) empty -> .
    (512) expr_10 -> . annotation
    (513) expr_10 -> . expr_10 annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    PACKAGE         shift and go to state 1
    IMPORT          reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    $end            reduce using rule 528 (empty -> .)
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    expr_10                        shift and go to state 2
    annotation                     shift and go to state 3
    packageDeclaration             shift and go to state 4
    compilationUnit                shift and go to state 6
    annotations                    shift and go to state 7
    empty                          shift and go to state 8

state 1

    (10) packageDeclaration -> PACKAGE . qualifiedName SEMI
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedName                  shift and go to state 9

state 2

    (204) annotations -> expr_10 .
    (513) expr_10 -> expr_10 . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    Identifier      reduce using rule 204 (annotations -> expr_10 .)
    PACKAGE         reduce using rule 204 (annotations -> expr_10 .)
    PUBLIC          reduce using rule 204 (annotations -> expr_10 .)
    PROTECTED       reduce using rule 204 (annotations -> expr_10 .)
    PRIVATE         reduce using rule 204 (annotations -> expr_10 .)
    ABSTRACT        reduce using rule 204 (annotations -> expr_10 .)
    STATIC          reduce using rule 204 (annotations -> expr_10 .)
    FINAL           reduce using rule 204 (annotations -> expr_10 .)
    STRICTFP        reduce using rule 204 (annotations -> expr_10 .)
    CLASS           reduce using rule 204 (annotations -> expr_10 .)
    ENUM            reduce using rule 204 (annotations -> expr_10 .)
    INTERFACE       reduce using rule 204 (annotations -> expr_10 .)
    AT              shift and go to state 5

  ! AT              [ reduce using rule 204 (annotations -> expr_10 .) ]

    annotation                     shift and go to state 11

state 3

    (512) expr_10 -> annotation .

    AT              reduce using rule 512 (expr_10 -> annotation .)
    Identifier      reduce using rule 512 (expr_10 -> annotation .)
    PACKAGE         reduce using rule 512 (expr_10 -> annotation .)
    PUBLIC          reduce using rule 512 (expr_10 -> annotation .)
    PROTECTED       reduce using rule 512 (expr_10 -> annotation .)
    PRIVATE         reduce using rule 512 (expr_10 -> annotation .)
    ABSTRACT        reduce using rule 512 (expr_10 -> annotation .)
    STATIC          reduce using rule 512 (expr_10 -> annotation .)
    FINAL           reduce using rule 512 (expr_10 -> annotation .)
    STRICTFP        reduce using rule 512 (expr_10 -> annotation .)
    CLASS           reduce using rule 512 (expr_10 -> annotation .)
    ENUM            reduce using rule 512 (expr_10 -> annotation .)
    INTERFACE       reduce using rule 512 (expr_10 -> annotation .)


state 4

    (2) compilationUnit -> packageDeclaration . expt_1 expt_2
    (3) compilationUnit -> packageDeclaration . expt_1 empty
    (4) compilationUnit -> packageDeclaration . empty expt_2
    (5) compilationUnit -> packageDeclaration . empty empty
    (429) expt_1 -> . importDeclaration
    (430) expt_1 -> . expt_1 importDeclaration
    (528) empty -> .
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI

    SEMI            reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    $end            reduce using rule 528 (empty -> .)
    IMPORT          shift and go to state 14

    importDeclaration              shift and go to state 12
    expt_1                         shift and go to state 13
    empty                          shift and go to state 15

state 5

    (205) annotation -> AT . annotationName LPAREN expr_11 RPAREN
    (206) annotation -> AT . annotationName empty
    (207) annotationName -> . Identifier expt_19
    (208) annotationName -> . Identifier empty

    Identifier      shift and go to state 17

    annotationName                 shift and go to state 16

state 6

    (0) S' -> compilationUnit .



state 7

    (1) compilationUnit -> annotations . expr_1
    (497) expr_1 -> . packageDeclaration expt_1 expt_2
    (498) expr_1 -> . classOrInterfaceDeclaration expt_2
    (10) packageDeclaration -> . PACKAGE qualifiedName SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    PACKAGE         shift and go to state 1
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceDeclaration    shift and go to state 27
    classOrInterfaceModifier       shift and go to state 30
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    packageDeclaration             shift and go to state 28
    annotation                     shift and go to state 29
    empty                          shift and go to state 25
    expr_1                         shift and go to state 26

state 8

    (6) compilationUnit -> empty . expt_1 expt_2
    (7) compilationUnit -> empty . expt_1 empty
    (8) compilationUnit -> empty . empty expt_2
    (9) compilationUnit -> empty . empty empty
    (429) expt_1 -> . importDeclaration
    (430) expt_1 -> . expt_1 importDeclaration
    (528) empty -> .
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI

    SEMI            reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    $end            reduce using rule 528 (empty -> .)
    IMPORT          shift and go to state 14

    importDeclaration              shift and go to state 12
    expt_1                         shift and go to state 33
    empty                          shift and go to state 34

state 9

    (10) packageDeclaration -> PACKAGE qualifiedName . SEMI

    SEMI            shift and go to state 35


state 10

    (194) qualifiedName -> Identifier . expt_19
    (195) qualifiedName -> Identifier . empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 36
    SEMI            reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 37
    expt_19                        shift and go to state 38

state 11

    (513) expr_10 -> expr_10 annotation .

    AT              reduce using rule 513 (expr_10 -> expr_10 annotation .)
    Identifier      reduce using rule 513 (expr_10 -> expr_10 annotation .)
    PACKAGE         reduce using rule 513 (expr_10 -> expr_10 annotation .)
    PUBLIC          reduce using rule 513 (expr_10 -> expr_10 annotation .)
    PROTECTED       reduce using rule 513 (expr_10 -> expr_10 annotation .)
    PRIVATE         reduce using rule 513 (expr_10 -> expr_10 annotation .)
    ABSTRACT        reduce using rule 513 (expr_10 -> expr_10 annotation .)
    STATIC          reduce using rule 513 (expr_10 -> expr_10 annotation .)
    FINAL           reduce using rule 513 (expr_10 -> expr_10 annotation .)
    STRICTFP        reduce using rule 513 (expr_10 -> expr_10 annotation .)
    CLASS           reduce using rule 513 (expr_10 -> expr_10 annotation .)
    ENUM            reduce using rule 513 (expr_10 -> expr_10 annotation .)
    INTERFACE       reduce using rule 513 (expr_10 -> expr_10 annotation .)


state 12

    (429) expt_1 -> importDeclaration .

    IMPORT          reduce using rule 429 (expt_1 -> importDeclaration .)
    SEMI            reduce using rule 429 (expt_1 -> importDeclaration .)
    PUBLIC          reduce using rule 429 (expt_1 -> importDeclaration .)
    PROTECTED       reduce using rule 429 (expt_1 -> importDeclaration .)
    PRIVATE         reduce using rule 429 (expt_1 -> importDeclaration .)
    ABSTRACT        reduce using rule 429 (expt_1 -> importDeclaration .)
    STATIC          reduce using rule 429 (expt_1 -> importDeclaration .)
    FINAL           reduce using rule 429 (expt_1 -> importDeclaration .)
    STRICTFP        reduce using rule 429 (expt_1 -> importDeclaration .)
    AT              reduce using rule 429 (expt_1 -> importDeclaration .)
    CLASS           reduce using rule 429 (expt_1 -> importDeclaration .)
    ENUM            reduce using rule 429 (expt_1 -> importDeclaration .)
    INTERFACE       reduce using rule 429 (expt_1 -> importDeclaration .)
    $end            reduce using rule 429 (expt_1 -> importDeclaration .)


state 13

    (2) compilationUnit -> packageDeclaration expt_1 . expt_2
    (3) compilationUnit -> packageDeclaration expt_1 . empty
    (430) expt_1 -> expt_1 . importDeclaration
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (528) empty -> .
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    IMPORT          shift and go to state 14
    SEMI            shift and go to state 42
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    importDeclaration              shift and go to state 40
    typeDeclaration                shift and go to state 39
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    expt_2                         shift and go to state 41
    annotation                     shift and go to state 29
    empty                          shift and go to state 43

state 14

    (11) importDeclaration -> IMPORT . STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> IMPORT . STATIC qualifiedName empty SEMI
    (13) importDeclaration -> IMPORT . empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> IMPORT . empty qualifiedName empty SEMI
    (528) empty -> .

    STATIC          shift and go to state 46
    Identifier      reduce using rule 528 (empty -> .)

    empty                          shift and go to state 45

state 15

    (4) compilationUnit -> packageDeclaration empty . expt_2
    (5) compilationUnit -> packageDeclaration empty . empty
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (528) empty -> .
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    SEMI            shift and go to state 42
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 39
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    expt_2                         shift and go to state 47
    annotation                     shift and go to state 29
    empty                          shift and go to state 48

state 16

    (205) annotation -> AT annotationName . LPAREN expr_11 RPAREN
    (206) annotation -> AT annotationName . empty
    (528) empty -> .

    LPAREN          shift and go to state 49
    AT              reduce using rule 528 (empty -> .)
    PACKAGE         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 50

state 17

    (207) annotationName -> Identifier . expt_19
    (208) annotationName -> Identifier . empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

    DOT             shift and go to state 36
    LPAREN          reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    PACKAGE         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 51
    expt_19                        shift and go to state 52

state 18

    (24) classOrInterfaceModifier -> ABSTRACT .

    PUBLIC          reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    PROTECTED       reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    PRIVATE         reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    STATIC          reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    FINAL           reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    STRICTFP        reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    AT              reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    CLASS           reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    ENUM            reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)
    INTERFACE       reduce using rule 24 (classOrInterfaceModifier -> ABSTRACT .)


state 19

    (22) classOrInterfaceModifier -> PROTECTED .

    PUBLIC          reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    PROTECTED       reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    PRIVATE         reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    ABSTRACT        reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    STATIC          reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    FINAL           reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    STRICTFP        reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    AT              reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    CLASS           reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    ENUM            reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)
    INTERFACE       reduce using rule 22 (classOrInterfaceModifier -> PROTECTED .)


state 20

    (25) classOrInterfaceModifier -> STATIC .

    PUBLIC          reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    PROTECTED       reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    PRIVATE         reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    ABSTRACT        reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    STATIC          reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    FINAL           reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    STRICTFP        reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    AT              reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    CLASS           reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    ENUM            reduce using rule 25 (classOrInterfaceModifier -> STATIC .)
    INTERFACE       reduce using rule 25 (classOrInterfaceModifier -> STATIC .)


state 21

    (23) classOrInterfaceModifier -> PRIVATE .

    PUBLIC          reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    PROTECTED       reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    PRIVATE         reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    ABSTRACT        reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    STATIC          reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    FINAL           reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    STRICTFP        reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    AT              reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    CLASS           reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    ENUM            reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)
    INTERFACE       reduce using rule 23 (classOrInterfaceModifier -> PRIVATE .)


state 22

    (26) classOrInterfaceModifier -> FINAL .

    PUBLIC          reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    PROTECTED       reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    PRIVATE         reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    ABSTRACT        reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    STATIC          reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    FINAL           reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    STRICTFP        reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    AT              reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    CLASS           reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    ENUM            reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    INTERFACE       reduce using rule 26 (classOrInterfaceModifier -> FINAL .)


state 23

    (18) classOrInterfaceModifiers -> expt_3 .
    (434) expt_3 -> expt_3 . classOrInterfaceModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    CLASS           reduce using rule 18 (classOrInterfaceModifiers -> expt_3 .)
    ENUM            reduce using rule 18 (classOrInterfaceModifiers -> expt_3 .)
    INTERFACE       reduce using rule 18 (classOrInterfaceModifiers -> expt_3 .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 18 (classOrInterfaceModifiers -> expt_3 .) ]

    classOrInterfaceModifier       shift and go to state 53
    annotation                     shift and go to state 29

state 24

    (27) classOrInterfaceModifier -> STRICTFP .

    PUBLIC          reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    PROTECTED       reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    PRIVATE         reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    ABSTRACT        reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    STATIC          reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    FINAL           reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    STRICTFP        reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    AT              reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    CLASS           reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    ENUM            reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)
    INTERFACE       reduce using rule 27 (classOrInterfaceModifier -> STRICTFP .)


state 25

    (19) classOrInterfaceModifiers -> empty .

    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)


state 26

    (1) compilationUnit -> annotations expr_1 .

    $end            reduce using rule 1 (compilationUnit -> annotations expr_1 .)


state 27

    (498) expr_1 -> classOrInterfaceDeclaration . expt_2
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 39
    expt_2                         shift and go to state 54
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 28

    (497) expr_1 -> packageDeclaration . expt_1 expt_2
    (429) expt_1 -> . importDeclaration
    (430) expt_1 -> . expt_1 importDeclaration
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI

    IMPORT          shift and go to state 14

    importDeclaration              shift and go to state 12
    expt_1                         shift and go to state 55

state 29

    (20) classOrInterfaceModifier -> annotation .

    PUBLIC          reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    PROTECTED       reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    PRIVATE         reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    ABSTRACT        reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    STATIC          reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    FINAL           reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    STRICTFP        reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    AT              reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    CLASS           reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    ENUM            reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    INTERFACE       reduce using rule 20 (classOrInterfaceModifier -> annotation .)


state 30

    (433) expt_3 -> classOrInterfaceModifier .

    PUBLIC          reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    PROTECTED       reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    PRIVATE         reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    ABSTRACT        reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    STATIC          reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    FINAL           reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    STRICTFP        reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    AT              reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    CLASS           reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    ENUM            reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)
    INTERFACE       reduce using rule 433 (expt_3 -> classOrInterfaceModifier .)


state 31

    (17) classOrInterfaceDeclaration -> classOrInterfaceModifiers . expr_2
    (493) expr_2 -> . classDeclaration
    (494) expr_2 -> . interfaceDeclaration
    (30) classDeclaration -> . normalClassDeclaration
    (31) classDeclaration -> . enumDeclaration
    (68) interfaceDeclaration -> . normalInterfaceDeclaration
    (69) interfaceDeclaration -> . annotationTypeDeclaration
    (32) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> . CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> . CLASS Identifier typeParameters empty empty classBody
    (36) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> . CLASS Identifier empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> . CLASS Identifier empty empty empty classBody
    (46) enumDeclaration -> . ENUM Identifier IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> . ENUM Identifier empty enumBody
    (70) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> . INTERFACE Identifier empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> . INTERFACE Identifier empty empty interfaceBody
    (219) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody

    CLASS           shift and go to state 59
    ENUM            shift and go to state 61
    INTERFACE       shift and go to state 66
    AT              shift and go to state 63

    enumDeclaration                shift and go to state 60
    normalClassDeclaration         shift and go to state 57
    normalInterfaceDeclaration     shift and go to state 56
    annotationTypeDeclaration      shift and go to state 65
    classDeclaration               shift and go to state 62
    interfaceDeclaration           shift and go to state 58
    expr_2                         shift and go to state 64

state 32

    (21) classOrInterfaceModifier -> PUBLIC .

    PUBLIC          reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    PROTECTED       reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    PRIVATE         reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    ABSTRACT        reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    STATIC          reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    FINAL           reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    STRICTFP        reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    AT              reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    CLASS           reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    ENUM            reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)
    INTERFACE       reduce using rule 21 (classOrInterfaceModifier -> PUBLIC .)


state 33

    (6) compilationUnit -> empty expt_1 . expt_2
    (7) compilationUnit -> empty expt_1 . empty
    (430) expt_1 -> expt_1 . importDeclaration
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (528) empty -> .
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    IMPORT          shift and go to state 14
    SEMI            shift and go to state 42
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    importDeclaration              shift and go to state 40
    typeDeclaration                shift and go to state 39
    expt_2                         shift and go to state 67
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 68

state 34

    (8) compilationUnit -> empty empty . expt_2
    (9) compilationUnit -> empty empty . empty
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (528) empty -> .
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    SEMI            shift and go to state 42
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 39
    expt_2                         shift and go to state 69
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 70

state 35

    (10) packageDeclaration -> PACKAGE qualifiedName SEMI .

    IMPORT          reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    SEMI            reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PUBLIC          reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PROTECTED       reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PRIVATE         reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    ABSTRACT        reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STATIC          reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    FINAL           reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STRICTFP        reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    AT              reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    CLASS           reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    ENUM            reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    INTERFACE       reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    $end            reduce using rule 10 (packageDeclaration -> PACKAGE qualifiedName SEMI .)


state 36

    (473) expt_19 -> DOT . Identifier

    Identifier      shift and go to state 71


state 37

    (195) qualifiedName -> Identifier empty .

    COMMA           reduce using rule 195 (qualifiedName -> Identifier empty .)
    SEMI            reduce using rule 195 (qualifiedName -> Identifier empty .)
    BLPAREN         reduce using rule 195 (qualifiedName -> Identifier empty .)
    DOT             reduce using rule 195 (qualifiedName -> Identifier empty .)


state 38

    (194) qualifiedName -> Identifier expt_19 .
    (474) expt_19 -> expt_19 . DOT Identifier

  ! shift/reduce conflict for DOT resolved as shift
    COMMA           reduce using rule 194 (qualifiedName -> Identifier expt_19 .)
    SEMI            reduce using rule 194 (qualifiedName -> Identifier expt_19 .)
    BLPAREN         reduce using rule 194 (qualifiedName -> Identifier expt_19 .)
    DOT             shift and go to state 72

  ! DOT             [ reduce using rule 194 (qualifiedName -> Identifier expt_19 .) ]


state 39

    (431) expt_2 -> typeDeclaration .

    SEMI            reduce using rule 431 (expt_2 -> typeDeclaration .)
    PUBLIC          reduce using rule 431 (expt_2 -> typeDeclaration .)
    PROTECTED       reduce using rule 431 (expt_2 -> typeDeclaration .)
    PRIVATE         reduce using rule 431 (expt_2 -> typeDeclaration .)
    ABSTRACT        reduce using rule 431 (expt_2 -> typeDeclaration .)
    STATIC          reduce using rule 431 (expt_2 -> typeDeclaration .)
    FINAL           reduce using rule 431 (expt_2 -> typeDeclaration .)
    STRICTFP        reduce using rule 431 (expt_2 -> typeDeclaration .)
    AT              reduce using rule 431 (expt_2 -> typeDeclaration .)
    CLASS           reduce using rule 431 (expt_2 -> typeDeclaration .)
    ENUM            reduce using rule 431 (expt_2 -> typeDeclaration .)
    INTERFACE       reduce using rule 431 (expt_2 -> typeDeclaration .)
    $end            reduce using rule 431 (expt_2 -> typeDeclaration .)


state 40

    (430) expt_1 -> expt_1 importDeclaration .

    IMPORT          reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    SEMI            reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    PUBLIC          reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    PROTECTED       reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    PRIVATE         reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    ABSTRACT        reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    STATIC          reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    FINAL           reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    STRICTFP        reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    AT              reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    CLASS           reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    ENUM            reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    INTERFACE       reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)
    $end            reduce using rule 430 (expt_1 -> expt_1 importDeclaration .)


state 41

    (2) compilationUnit -> packageDeclaration expt_1 expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 2 (compilationUnit -> packageDeclaration expt_1 expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 42

    (16) typeDeclaration -> SEMI .

    SEMI            reduce using rule 16 (typeDeclaration -> SEMI .)
    PUBLIC          reduce using rule 16 (typeDeclaration -> SEMI .)
    PROTECTED       reduce using rule 16 (typeDeclaration -> SEMI .)
    PRIVATE         reduce using rule 16 (typeDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 16 (typeDeclaration -> SEMI .)
    STATIC          reduce using rule 16 (typeDeclaration -> SEMI .)
    FINAL           reduce using rule 16 (typeDeclaration -> SEMI .)
    STRICTFP        reduce using rule 16 (typeDeclaration -> SEMI .)
    AT              reduce using rule 16 (typeDeclaration -> SEMI .)
    CLASS           reduce using rule 16 (typeDeclaration -> SEMI .)
    ENUM            reduce using rule 16 (typeDeclaration -> SEMI .)
    INTERFACE       reduce using rule 16 (typeDeclaration -> SEMI .)
    $end            reduce using rule 16 (typeDeclaration -> SEMI .)


state 43

    (3) compilationUnit -> packageDeclaration expt_1 empty .
    (19) classOrInterfaceModifiers -> empty .

    $end            reduce using rule 3 (compilationUnit -> packageDeclaration expt_1 empty .)
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)


state 44

    (15) typeDeclaration -> classOrInterfaceDeclaration .

    SEMI            reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    AT              reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    CLASS           reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    ENUM            reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    INTERFACE       reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)
    $end            reduce using rule 15 (typeDeclaration -> classOrInterfaceDeclaration .)


state 45

    (13) importDeclaration -> IMPORT empty . qualifiedName DOT MULT SEMI
    (14) importDeclaration -> IMPORT empty . qualifiedName empty SEMI
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedName                  shift and go to state 74

state 46

    (11) importDeclaration -> IMPORT STATIC . qualifiedName DOT MULT SEMI
    (12) importDeclaration -> IMPORT STATIC . qualifiedName empty SEMI
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedName                  shift and go to state 75

state 47

    (4) compilationUnit -> packageDeclaration empty expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 4 (compilationUnit -> packageDeclaration empty expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 48

    (5) compilationUnit -> packageDeclaration empty empty .
    (19) classOrInterfaceModifiers -> empty .

    $end            reduce using rule 5 (compilationUnit -> packageDeclaration empty empty .)
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)


state 49

    (205) annotation -> AT annotationName LPAREN . expr_11 RPAREN
    (514) expr_11 -> . elementValuePairs
    (515) expr_11 -> . elementValue
    (209) elementValuePairs -> . elementValuePair expt_20
    (210) elementValuePairs -> . elementValuePair empty
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (211) elementValuePair -> . Identifier EQUALS elementValue
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    Identifier      shift and go to state 94
    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    FloatingPointLiteral           shift and go to state 112
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    expr_11                        shift and go to state 114
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    elementValuePair               shift and go to state 92
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    elementValuePairs              shift and go to state 131
    annotation                     shift and go to state 132
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 135

state 50

    (206) annotation -> AT annotationName empty .

    AT              reduce using rule 206 (annotation -> AT annotationName empty .)
    Identifier      reduce using rule 206 (annotation -> AT annotationName empty .)
    PUBLIC          reduce using rule 206 (annotation -> AT annotationName empty .)
    PROTECTED       reduce using rule 206 (annotation -> AT annotationName empty .)
    PRIVATE         reduce using rule 206 (annotation -> AT annotationName empty .)
    ABSTRACT        reduce using rule 206 (annotation -> AT annotationName empty .)
    STATIC          reduce using rule 206 (annotation -> AT annotationName empty .)
    FINAL           reduce using rule 206 (annotation -> AT annotationName empty .)
    STRICTFP        reduce using rule 206 (annotation -> AT annotationName empty .)
    CLASS           reduce using rule 206 (annotation -> AT annotationName empty .)
    ENUM            reduce using rule 206 (annotation -> AT annotationName empty .)
    INTERFACE       reduce using rule 206 (annotation -> AT annotationName empty .)
    RPAREN          reduce using rule 206 (annotation -> AT annotationName empty .)
    BOOLEAN         reduce using rule 206 (annotation -> AT annotationName empty .)
    CHAR            reduce using rule 206 (annotation -> AT annotationName empty .)
    BYTE            reduce using rule 206 (annotation -> AT annotationName empty .)
    SHORT           reduce using rule 206 (annotation -> AT annotationName empty .)
    INT             reduce using rule 206 (annotation -> AT annotationName empty .)
    LONG            reduce using rule 206 (annotation -> AT annotationName empty .)
    FLOAT           reduce using rule 206 (annotation -> AT annotationName empty .)
    DOUBLE          reduce using rule 206 (annotation -> AT annotationName empty .)
    COMMA           reduce using rule 206 (annotation -> AT annotationName empty .)
    NATIVE          reduce using rule 206 (annotation -> AT annotationName empty .)
    SYNCHRONIZED    reduce using rule 206 (annotation -> AT annotationName empty .)
    TRANSIENT       reduce using rule 206 (annotation -> AT annotationName empty .)
    VOLATILE        reduce using rule 206 (annotation -> AT annotationName empty .)
    VOID            reduce using rule 206 (annotation -> AT annotationName empty .)
    LESS            reduce using rule 206 (annotation -> AT annotationName empty .)
    BRPAREN         reduce using rule 206 (annotation -> AT annotationName empty .)
    PACKAGE         reduce using rule 206 (annotation -> AT annotationName empty .)
    SEMI            reduce using rule 206 (annotation -> AT annotationName empty .)


state 51

    (208) annotationName -> Identifier empty .

    LPAREN          reduce using rule 208 (annotationName -> Identifier empty .)
    AT              reduce using rule 208 (annotationName -> Identifier empty .)
    PACKAGE         reduce using rule 208 (annotationName -> Identifier empty .)
    PUBLIC          reduce using rule 208 (annotationName -> Identifier empty .)
    PROTECTED       reduce using rule 208 (annotationName -> Identifier empty .)
    PRIVATE         reduce using rule 208 (annotationName -> Identifier empty .)
    ABSTRACT        reduce using rule 208 (annotationName -> Identifier empty .)
    STATIC          reduce using rule 208 (annotationName -> Identifier empty .)
    FINAL           reduce using rule 208 (annotationName -> Identifier empty .)
    STRICTFP        reduce using rule 208 (annotationName -> Identifier empty .)
    CLASS           reduce using rule 208 (annotationName -> Identifier empty .)
    ENUM            reduce using rule 208 (annotationName -> Identifier empty .)
    INTERFACE       reduce using rule 208 (annotationName -> Identifier empty .)
    Identifier      reduce using rule 208 (annotationName -> Identifier empty .)
    RPAREN          reduce using rule 208 (annotationName -> Identifier empty .)
    COMMA           reduce using rule 208 (annotationName -> Identifier empty .)
    BRPAREN         reduce using rule 208 (annotationName -> Identifier empty .)
    NATIVE          reduce using rule 208 (annotationName -> Identifier empty .)
    SYNCHRONIZED    reduce using rule 208 (annotationName -> Identifier empty .)
    TRANSIENT       reduce using rule 208 (annotationName -> Identifier empty .)
    VOLATILE        reduce using rule 208 (annotationName -> Identifier empty .)
    BOOLEAN         reduce using rule 208 (annotationName -> Identifier empty .)
    CHAR            reduce using rule 208 (annotationName -> Identifier empty .)
    BYTE            reduce using rule 208 (annotationName -> Identifier empty .)
    SHORT           reduce using rule 208 (annotationName -> Identifier empty .)
    INT             reduce using rule 208 (annotationName -> Identifier empty .)
    LONG            reduce using rule 208 (annotationName -> Identifier empty .)
    FLOAT           reduce using rule 208 (annotationName -> Identifier empty .)
    DOUBLE          reduce using rule 208 (annotationName -> Identifier empty .)
    VOID            reduce using rule 208 (annotationName -> Identifier empty .)
    LESS            reduce using rule 208 (annotationName -> Identifier empty .)
    SEMI            reduce using rule 208 (annotationName -> Identifier empty .)


state 52

    (207) annotationName -> Identifier expt_19 .
    (474) expt_19 -> expt_19 . DOT Identifier

    LPAREN          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    AT              reduce using rule 207 (annotationName -> Identifier expt_19 .)
    PACKAGE         reduce using rule 207 (annotationName -> Identifier expt_19 .)
    PUBLIC          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    PROTECTED       reduce using rule 207 (annotationName -> Identifier expt_19 .)
    PRIVATE         reduce using rule 207 (annotationName -> Identifier expt_19 .)
    ABSTRACT        reduce using rule 207 (annotationName -> Identifier expt_19 .)
    STATIC          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    FINAL           reduce using rule 207 (annotationName -> Identifier expt_19 .)
    STRICTFP        reduce using rule 207 (annotationName -> Identifier expt_19 .)
    CLASS           reduce using rule 207 (annotationName -> Identifier expt_19 .)
    ENUM            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    INTERFACE       reduce using rule 207 (annotationName -> Identifier expt_19 .)
    Identifier      reduce using rule 207 (annotationName -> Identifier expt_19 .)
    RPAREN          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    COMMA           reduce using rule 207 (annotationName -> Identifier expt_19 .)
    BRPAREN         reduce using rule 207 (annotationName -> Identifier expt_19 .)
    NATIVE          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    SYNCHRONIZED    reduce using rule 207 (annotationName -> Identifier expt_19 .)
    TRANSIENT       reduce using rule 207 (annotationName -> Identifier expt_19 .)
    VOLATILE        reduce using rule 207 (annotationName -> Identifier expt_19 .)
    BOOLEAN         reduce using rule 207 (annotationName -> Identifier expt_19 .)
    CHAR            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    BYTE            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    SHORT           reduce using rule 207 (annotationName -> Identifier expt_19 .)
    INT             reduce using rule 207 (annotationName -> Identifier expt_19 .)
    LONG            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    FLOAT           reduce using rule 207 (annotationName -> Identifier expt_19 .)
    DOUBLE          reduce using rule 207 (annotationName -> Identifier expt_19 .)
    VOID            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    LESS            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    SEMI            reduce using rule 207 (annotationName -> Identifier expt_19 .)
    DOT             shift and go to state 72


state 53

    (434) expt_3 -> expt_3 classOrInterfaceModifier .

    PUBLIC          reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    PROTECTED       reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    PRIVATE         reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    ABSTRACT        reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    STATIC          reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    FINAL           reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    STRICTFP        reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    AT              reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    CLASS           reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    ENUM            reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)
    INTERFACE       reduce using rule 434 (expt_3 -> expt_3 classOrInterfaceModifier .)


state 54

    (498) expr_1 -> classOrInterfaceDeclaration expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 498 (expr_1 -> classOrInterfaceDeclaration expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 55

    (497) expr_1 -> packageDeclaration expt_1 . expt_2
    (430) expt_1 -> expt_1 . importDeclaration
    (431) expt_2 -> . typeDeclaration
    (432) expt_2 -> . expt_2 typeDeclaration
    (11) importDeclaration -> . IMPORT STATIC qualifiedName DOT MULT SEMI
    (12) importDeclaration -> . IMPORT STATIC qualifiedName empty SEMI
    (13) importDeclaration -> . IMPORT empty qualifiedName DOT MULT SEMI
    (14) importDeclaration -> . IMPORT empty qualifiedName empty SEMI
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    IMPORT          shift and go to state 14
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    importDeclaration              shift and go to state 40
    typeDeclaration                shift and go to state 39
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    expt_2                         shift and go to state 137
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 56

    (68) interfaceDeclaration -> normalInterfaceDeclaration .

    BRPAREN         reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SEMI            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PUBLIC          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PROTECTED       reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PRIVATE         reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STATIC          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ABSTRACT        reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FINAL           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NATIVE          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRANSIENT       reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOLATILE        reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STRICTFP        reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    AT              reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOID            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LESS            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    INTERFACE       reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CLASS           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ENUM            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    Identifier      reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BOOLEAN         reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CHAR            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BYTE            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SHORT           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    INT             reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FLOAT           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DOUBLE          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BLPAREN         reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    $end            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ASSERT          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    IF              reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FOR             reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    WHILE           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DO              reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRY             reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SWITCH          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    RETURN          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THROW           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BREAK           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CONTINUE        reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PLUS            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DASH            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_INC          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_DEC          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TILDE           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LPAREN          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THIS            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SUPER           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NEW             reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CharacterLiteral reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    StringLiteral   reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NULL            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NUMBER          reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRUE            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FALSE           reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CASE            reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DEFAULT         reduce using rule 68 (interfaceDeclaration -> normalInterfaceDeclaration .)


state 57

    (30) classDeclaration -> normalClassDeclaration .

    BRPAREN         reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    SEMI            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    PUBLIC          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    PROTECTED       reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    PRIVATE         reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    STATIC          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    ABSTRACT        reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    FINAL           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NATIVE          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    SYNCHRONIZED    reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    TRANSIENT       reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    VOLATILE        reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    STRICTFP        reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    AT              reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    VOID            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    LESS            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    INTERFACE       reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    CLASS           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    ENUM            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    Identifier      reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    BOOLEAN         reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    CHAR            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    BYTE            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    SHORT           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    INT             reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    LONG            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    FLOAT           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    DOUBLE          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    $end            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    ASSERT          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    IF              reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    FOR             reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    WHILE           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    DO              reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    TRY             reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    SWITCH          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    RETURN          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    THROW           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    BREAK           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    CONTINUE        reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    BLPAREN         reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    PLUS            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    DASH            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    OP_INC          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    OP_DEC          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    TILDE           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    EXCLAMATION     reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    LPAREN          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    THIS            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    SUPER           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NEW             reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    CharacterLiteral reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    StringLiteral   reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NULL            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NUMBER          reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    HEX_NUMBER      reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    LONG_NUMBER     reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    LONG_HEX_NUMBER reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_1   reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_2   reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_3   reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    TRUE            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    FALSE           reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    CASE            reduce using rule 30 (classDeclaration -> normalClassDeclaration .)
    DEFAULT         reduce using rule 30 (classDeclaration -> normalClassDeclaration .)


state 58

    (494) expr_2 -> interfaceDeclaration .

    SEMI            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    PUBLIC          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    PROTECTED       reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    PRIVATE         reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    STATIC          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    FINAL           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    STRICTFP        reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    AT              reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    CLASS           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    ENUM            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    INTERFACE       reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    $end            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    BRPAREN         reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    ASSERT          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    IF              reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    FOR             reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    WHILE           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    DO              reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    TRY             reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    SWITCH          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    RETURN          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    THROW           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    BREAK           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    CONTINUE        reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    Identifier      reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    BLPAREN         reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    PLUS            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    DASH            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    OP_INC          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    OP_DEC          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    TILDE           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    EXCLAMATION     reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    LPAREN          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    THIS            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    SUPER           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NEW             reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    VOID            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    CharacterLiteral reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    StringLiteral   reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NULL            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    CHAR            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    BYTE            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    SHORT           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    INT             reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    LONG            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    FLOAT           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    DOUBLE          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NUMBER          reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    HEX_NUMBER      reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    LONG_NUMBER     reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    TRUE            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    FALSE           reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    CASE            reduce using rule 494 (expr_2 -> interfaceDeclaration .)
    DEFAULT         reduce using rule 494 (expr_2 -> interfaceDeclaration .)


state 59

    (32) normalClassDeclaration -> CLASS . Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> CLASS . Identifier typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> CLASS . Identifier typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> CLASS . Identifier typeParameters empty empty classBody
    (36) normalClassDeclaration -> CLASS . Identifier empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> CLASS . Identifier empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> CLASS . Identifier empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> CLASS . Identifier empty empty empty classBody

    Identifier      shift and go to state 138


state 60

    (31) classDeclaration -> enumDeclaration .

    BRPAREN         reduce using rule 31 (classDeclaration -> enumDeclaration .)
    SEMI            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    PUBLIC          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    PROTECTED       reduce using rule 31 (classDeclaration -> enumDeclaration .)
    PRIVATE         reduce using rule 31 (classDeclaration -> enumDeclaration .)
    STATIC          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    ABSTRACT        reduce using rule 31 (classDeclaration -> enumDeclaration .)
    FINAL           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NATIVE          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    SYNCHRONIZED    reduce using rule 31 (classDeclaration -> enumDeclaration .)
    TRANSIENT       reduce using rule 31 (classDeclaration -> enumDeclaration .)
    VOLATILE        reduce using rule 31 (classDeclaration -> enumDeclaration .)
    STRICTFP        reduce using rule 31 (classDeclaration -> enumDeclaration .)
    AT              reduce using rule 31 (classDeclaration -> enumDeclaration .)
    VOID            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    LESS            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    INTERFACE       reduce using rule 31 (classDeclaration -> enumDeclaration .)
    CLASS           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    ENUM            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    Identifier      reduce using rule 31 (classDeclaration -> enumDeclaration .)
    BOOLEAN         reduce using rule 31 (classDeclaration -> enumDeclaration .)
    CHAR            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    BYTE            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    SHORT           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    INT             reduce using rule 31 (classDeclaration -> enumDeclaration .)
    LONG            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    FLOAT           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    DOUBLE          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    $end            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    ASSERT          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    IF              reduce using rule 31 (classDeclaration -> enumDeclaration .)
    FOR             reduce using rule 31 (classDeclaration -> enumDeclaration .)
    WHILE           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    DO              reduce using rule 31 (classDeclaration -> enumDeclaration .)
    TRY             reduce using rule 31 (classDeclaration -> enumDeclaration .)
    SWITCH          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    RETURN          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    THROW           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    BREAK           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    CONTINUE        reduce using rule 31 (classDeclaration -> enumDeclaration .)
    BLPAREN         reduce using rule 31 (classDeclaration -> enumDeclaration .)
    PLUS            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    DASH            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    OP_INC          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    OP_DEC          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    TILDE           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    EXCLAMATION     reduce using rule 31 (classDeclaration -> enumDeclaration .)
    LPAREN          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    THIS            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    SUPER           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NEW             reduce using rule 31 (classDeclaration -> enumDeclaration .)
    CharacterLiteral reduce using rule 31 (classDeclaration -> enumDeclaration .)
    StringLiteral   reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NULL            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NUMBER          reduce using rule 31 (classDeclaration -> enumDeclaration .)
    HEX_NUMBER      reduce using rule 31 (classDeclaration -> enumDeclaration .)
    LONG_NUMBER     reduce using rule 31 (classDeclaration -> enumDeclaration .)
    LONG_HEX_NUMBER reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_1   reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_2   reduce using rule 31 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_3   reduce using rule 31 (classDeclaration -> enumDeclaration .)
    TRUE            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    FALSE           reduce using rule 31 (classDeclaration -> enumDeclaration .)
    CASE            reduce using rule 31 (classDeclaration -> enumDeclaration .)
    DEFAULT         reduce using rule 31 (classDeclaration -> enumDeclaration .)


state 61

    (46) enumDeclaration -> ENUM . Identifier IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> ENUM . Identifier empty enumBody

    Identifier      shift and go to state 139


state 62

    (493) expr_2 -> classDeclaration .

    SEMI            reduce using rule 493 (expr_2 -> classDeclaration .)
    PUBLIC          reduce using rule 493 (expr_2 -> classDeclaration .)
    PROTECTED       reduce using rule 493 (expr_2 -> classDeclaration .)
    PRIVATE         reduce using rule 493 (expr_2 -> classDeclaration .)
    ABSTRACT        reduce using rule 493 (expr_2 -> classDeclaration .)
    STATIC          reduce using rule 493 (expr_2 -> classDeclaration .)
    FINAL           reduce using rule 493 (expr_2 -> classDeclaration .)
    STRICTFP        reduce using rule 493 (expr_2 -> classDeclaration .)
    AT              reduce using rule 493 (expr_2 -> classDeclaration .)
    CLASS           reduce using rule 493 (expr_2 -> classDeclaration .)
    ENUM            reduce using rule 493 (expr_2 -> classDeclaration .)
    INTERFACE       reduce using rule 493 (expr_2 -> classDeclaration .)
    $end            reduce using rule 493 (expr_2 -> classDeclaration .)
    BRPAREN         reduce using rule 493 (expr_2 -> classDeclaration .)
    ASSERT          reduce using rule 493 (expr_2 -> classDeclaration .)
    IF              reduce using rule 493 (expr_2 -> classDeclaration .)
    FOR             reduce using rule 493 (expr_2 -> classDeclaration .)
    WHILE           reduce using rule 493 (expr_2 -> classDeclaration .)
    DO              reduce using rule 493 (expr_2 -> classDeclaration .)
    TRY             reduce using rule 493 (expr_2 -> classDeclaration .)
    SWITCH          reduce using rule 493 (expr_2 -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 493 (expr_2 -> classDeclaration .)
    RETURN          reduce using rule 493 (expr_2 -> classDeclaration .)
    THROW           reduce using rule 493 (expr_2 -> classDeclaration .)
    BREAK           reduce using rule 493 (expr_2 -> classDeclaration .)
    CONTINUE        reduce using rule 493 (expr_2 -> classDeclaration .)
    Identifier      reduce using rule 493 (expr_2 -> classDeclaration .)
    BLPAREN         reduce using rule 493 (expr_2 -> classDeclaration .)
    PLUS            reduce using rule 493 (expr_2 -> classDeclaration .)
    DASH            reduce using rule 493 (expr_2 -> classDeclaration .)
    OP_INC          reduce using rule 493 (expr_2 -> classDeclaration .)
    OP_DEC          reduce using rule 493 (expr_2 -> classDeclaration .)
    TILDE           reduce using rule 493 (expr_2 -> classDeclaration .)
    EXCLAMATION     reduce using rule 493 (expr_2 -> classDeclaration .)
    LPAREN          reduce using rule 493 (expr_2 -> classDeclaration .)
    THIS            reduce using rule 493 (expr_2 -> classDeclaration .)
    SUPER           reduce using rule 493 (expr_2 -> classDeclaration .)
    NEW             reduce using rule 493 (expr_2 -> classDeclaration .)
    VOID            reduce using rule 493 (expr_2 -> classDeclaration .)
    CharacterLiteral reduce using rule 493 (expr_2 -> classDeclaration .)
    StringLiteral   reduce using rule 493 (expr_2 -> classDeclaration .)
    NULL            reduce using rule 493 (expr_2 -> classDeclaration .)
    BOOLEAN         reduce using rule 493 (expr_2 -> classDeclaration .)
    CHAR            reduce using rule 493 (expr_2 -> classDeclaration .)
    BYTE            reduce using rule 493 (expr_2 -> classDeclaration .)
    SHORT           reduce using rule 493 (expr_2 -> classDeclaration .)
    INT             reduce using rule 493 (expr_2 -> classDeclaration .)
    LONG            reduce using rule 493 (expr_2 -> classDeclaration .)
    FLOAT           reduce using rule 493 (expr_2 -> classDeclaration .)
    DOUBLE          reduce using rule 493 (expr_2 -> classDeclaration .)
    NUMBER          reduce using rule 493 (expr_2 -> classDeclaration .)
    HEX_NUMBER      reduce using rule 493 (expr_2 -> classDeclaration .)
    LONG_NUMBER     reduce using rule 493 (expr_2 -> classDeclaration .)
    LONG_HEX_NUMBER reduce using rule 493 (expr_2 -> classDeclaration .)
    NON_INTEGER_1   reduce using rule 493 (expr_2 -> classDeclaration .)
    NON_INTEGER_2   reduce using rule 493 (expr_2 -> classDeclaration .)
    NON_INTEGER_3   reduce using rule 493 (expr_2 -> classDeclaration .)
    TRUE            reduce using rule 493 (expr_2 -> classDeclaration .)
    FALSE           reduce using rule 493 (expr_2 -> classDeclaration .)
    CASE            reduce using rule 493 (expr_2 -> classDeclaration .)
    DEFAULT         reduce using rule 493 (expr_2 -> classDeclaration .)


state 63

    (219) annotationTypeDeclaration -> AT . INTERFACE Identifier annotationTypeBody

    INTERFACE       shift and go to state 140


state 64

    (17) classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .

    SEMI            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    PUBLIC          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    PROTECTED       reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    PRIVATE         reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    ABSTRACT        reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    STATIC          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    FINAL           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    STRICTFP        reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    AT              reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    CLASS           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    ENUM            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    INTERFACE       reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    $end            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    BRPAREN         reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    ASSERT          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    IF              reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    FOR             reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    WHILE           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    DO              reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    TRY             reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    SWITCH          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    SYNCHRONIZED    reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    RETURN          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    THROW           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    BREAK           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    CONTINUE        reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    Identifier      reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    BLPAREN         reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    PLUS            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    DASH            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    OP_INC          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    OP_DEC          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    TILDE           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    EXCLAMATION     reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    LPAREN          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    THIS            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    SUPER           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NEW             reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    VOID            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    CharacterLiteral reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    StringLiteral   reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NULL            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    BOOLEAN         reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    CHAR            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    BYTE            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    SHORT           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    INT             reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    LONG            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    FLOAT           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    DOUBLE          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NUMBER          reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    HEX_NUMBER      reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    LONG_NUMBER     reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    LONG_HEX_NUMBER reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NON_INTEGER_1   reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NON_INTEGER_2   reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    NON_INTEGER_3   reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    TRUE            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    FALSE           reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    CASE            reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)
    DEFAULT         reduce using rule 17 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_2 .)


state 65

    (69) interfaceDeclaration -> annotationTypeDeclaration .

    BRPAREN         reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    SEMI            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    PUBLIC          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    PROTECTED       reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    PRIVATE         reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    STATIC          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    ABSTRACT        reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    FINAL           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NATIVE          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    SYNCHRONIZED    reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRANSIENT       reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOLATILE        reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    STRICTFP        reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    AT              reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOID            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    LESS            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    INTERFACE       reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    CLASS           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    ENUM            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    Identifier      reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    BOOLEAN         reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    CHAR            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    BYTE            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    SHORT           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    INT             reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    FLOAT           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    DOUBLE          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    BLPAREN         reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    $end            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    ASSERT          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    IF              reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    FOR             reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    WHILE           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    DO              reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRY             reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    SWITCH          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    RETURN          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    THROW           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    BREAK           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    CONTINUE        reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    PLUS            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    DASH            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_INC          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_DEC          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    TILDE           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    EXCLAMATION     reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    LPAREN          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    THIS            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    SUPER           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NEW             reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    CharacterLiteral reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    StringLiteral   reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NULL            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NUMBER          reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    HEX_NUMBER      reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_NUMBER     reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_HEX_NUMBER reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_1   reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_2   reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_3   reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRUE            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    FALSE           reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    CASE            reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)
    DEFAULT         reduce using rule 69 (interfaceDeclaration -> annotationTypeDeclaration .)


state 66

    (70) normalInterfaceDeclaration -> INTERFACE . Identifier typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> INTERFACE . Identifier typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> INTERFACE . Identifier empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> INTERFACE . Identifier empty empty interfaceBody

    Identifier      shift and go to state 141


state 67

    (6) compilationUnit -> empty expt_1 expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 6 (compilationUnit -> empty expt_1 expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 68

    (7) compilationUnit -> empty expt_1 empty .
    (19) classOrInterfaceModifiers -> empty .

    $end            reduce using rule 7 (compilationUnit -> empty expt_1 empty .)
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)


state 69

    (8) compilationUnit -> empty empty expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 8 (compilationUnit -> empty empty expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 70

    (9) compilationUnit -> empty empty empty .
    (19) classOrInterfaceModifiers -> empty .

    $end            reduce using rule 9 (compilationUnit -> empty empty empty .)
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)


state 71

    (473) expt_19 -> DOT Identifier .

    DOT             reduce using rule 473 (expt_19 -> DOT Identifier .)
    LPAREN          reduce using rule 473 (expt_19 -> DOT Identifier .)
    AT              reduce using rule 473 (expt_19 -> DOT Identifier .)
    PACKAGE         reduce using rule 473 (expt_19 -> DOT Identifier .)
    PUBLIC          reduce using rule 473 (expt_19 -> DOT Identifier .)
    PROTECTED       reduce using rule 473 (expt_19 -> DOT Identifier .)
    PRIVATE         reduce using rule 473 (expt_19 -> DOT Identifier .)
    ABSTRACT        reduce using rule 473 (expt_19 -> DOT Identifier .)
    STATIC          reduce using rule 473 (expt_19 -> DOT Identifier .)
    FINAL           reduce using rule 473 (expt_19 -> DOT Identifier .)
    STRICTFP        reduce using rule 473 (expt_19 -> DOT Identifier .)
    CLASS           reduce using rule 473 (expt_19 -> DOT Identifier .)
    ENUM            reduce using rule 473 (expt_19 -> DOT Identifier .)
    INTERFACE       reduce using rule 473 (expt_19 -> DOT Identifier .)
    Identifier      reduce using rule 473 (expt_19 -> DOT Identifier .)
    RPAREN          reduce using rule 473 (expt_19 -> DOT Identifier .)
    COMMA           reduce using rule 473 (expt_19 -> DOT Identifier .)
    BRPAREN         reduce using rule 473 (expt_19 -> DOT Identifier .)
    NATIVE          reduce using rule 473 (expt_19 -> DOT Identifier .)
    SYNCHRONIZED    reduce using rule 473 (expt_19 -> DOT Identifier .)
    TRANSIENT       reduce using rule 473 (expt_19 -> DOT Identifier .)
    VOLATILE        reduce using rule 473 (expt_19 -> DOT Identifier .)
    BOOLEAN         reduce using rule 473 (expt_19 -> DOT Identifier .)
    CHAR            reduce using rule 473 (expt_19 -> DOT Identifier .)
    BYTE            reduce using rule 473 (expt_19 -> DOT Identifier .)
    SHORT           reduce using rule 473 (expt_19 -> DOT Identifier .)
    INT             reduce using rule 473 (expt_19 -> DOT Identifier .)
    LONG            reduce using rule 473 (expt_19 -> DOT Identifier .)
    FLOAT           reduce using rule 473 (expt_19 -> DOT Identifier .)
    DOUBLE          reduce using rule 473 (expt_19 -> DOT Identifier .)
    VOID            reduce using rule 473 (expt_19 -> DOT Identifier .)
    LESS            reduce using rule 473 (expt_19 -> DOT Identifier .)
    SEMI            reduce using rule 473 (expt_19 -> DOT Identifier .)
    BLPAREN         reduce using rule 473 (expt_19 -> DOT Identifier .)
    FLPAREN         reduce using rule 473 (expt_19 -> DOT Identifier .)
    OP_INC          reduce using rule 473 (expt_19 -> DOT Identifier .)
    OP_DEC          reduce using rule 473 (expt_19 -> DOT Identifier .)


state 72

    (474) expt_19 -> expt_19 DOT . Identifier

    Identifier      shift and go to state 142


state 73

    (432) expt_2 -> expt_2 typeDeclaration .

    SEMI            reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    PUBLIC          reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    PROTECTED       reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    PRIVATE         reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    ABSTRACT        reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    STATIC          reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    FINAL           reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    STRICTFP        reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    AT              reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    CLASS           reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    ENUM            reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    INTERFACE       reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)
    $end            reduce using rule 432 (expt_2 -> expt_2 typeDeclaration .)


state 74

    (13) importDeclaration -> IMPORT empty qualifiedName . DOT MULT SEMI
    (14) importDeclaration -> IMPORT empty qualifiedName . empty SEMI
    (528) empty -> .

    DOT             shift and go to state 144
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 143

state 75

    (11) importDeclaration -> IMPORT STATIC qualifiedName . DOT MULT SEMI
    (12) importDeclaration -> IMPORT STATIC qualifiedName . empty SEMI
    (528) empty -> .

    DOT             shift and go to state 146
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 145

state 76

    (348) unaryExpressionNotPlusMinus -> EXCLAMATION . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 148
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 77

    (368) primary -> VOID . DOT CLASS

    DOT             shift and go to state 149


state 78

    (313) conditionalOrExpression -> conditionalAndExpression . expt_27
    (314) conditionalOrExpression -> conditionalAndExpression . empty
    (439) expt_27 -> . OP_LOR conditionalAndExpression
    (440) expt_27 -> . expt_27 OP_LOR conditionalAndExpression
    (528) empty -> .

    OP_LOR          shift and go to state 152
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    expt_27                        shift and go to state 150
    empty                          shift and go to state 151

state 79

    (202) booleanLiteral -> TRUE .

    DOT             reduce using rule 202 (booleanLiteral -> TRUE .)
    FLPAREN         reduce using rule 202 (booleanLiteral -> TRUE .)
    OP_INC          reduce using rule 202 (booleanLiteral -> TRUE .)
    OP_DEC          reduce using rule 202 (booleanLiteral -> TRUE .)


state 80

    (167) primitiveType -> LONG .

    FLPAREN         reduce using rule 167 (primitiveType -> LONG .)
    DOT             reduce using rule 167 (primitiveType -> LONG .)
    Identifier      reduce using rule 167 (primitiveType -> LONG .)
    COMMA           reduce using rule 167 (primitiveType -> LONG .)
    BLPAREN         reduce using rule 167 (primitiveType -> LONG .)
    RPAREN          reduce using rule 167 (primitiveType -> LONG .)
    MORE            reduce using rule 167 (primitiveType -> LONG .)
    AND             reduce using rule 167 (primitiveType -> LONG .)
    OP_EQ           reduce using rule 167 (primitiveType -> LONG .)
    OP_NE           reduce using rule 167 (primitiveType -> LONG .)
    CARET           reduce using rule 167 (primitiveType -> LONG .)
    VERTICAL        reduce using rule 167 (primitiveType -> LONG .)
    OP_LAND         reduce using rule 167 (primitiveType -> LONG .)
    OP_LOR          reduce using rule 167 (primitiveType -> LONG .)
    QUES            reduce using rule 167 (primitiveType -> LONG .)
    EQUALS          reduce using rule 167 (primitiveType -> LONG .)
    ASS_ADD         reduce using rule 167 (primitiveType -> LONG .)
    ASS_SUB         reduce using rule 167 (primitiveType -> LONG .)
    ASS_MUL         reduce using rule 167 (primitiveType -> LONG .)
    ASS_DIV         reduce using rule 167 (primitiveType -> LONG .)
    ASS_AND         reduce using rule 167 (primitiveType -> LONG .)
    ASS_OR          reduce using rule 167 (primitiveType -> LONG .)
    ASS_XOR         reduce using rule 167 (primitiveType -> LONG .)
    ASS_MOD         reduce using rule 167 (primitiveType -> LONG .)
    LESS            reduce using rule 167 (primitiveType -> LONG .)
    COLON           reduce using rule 167 (primitiveType -> LONG .)
    FRPAREN         reduce using rule 167 (primitiveType -> LONG .)
    BRPAREN         reduce using rule 167 (primitiveType -> LONG .)
    SEMI            reduce using rule 167 (primitiveType -> LONG .)
    OP_ARRAY        reduce using rule 167 (primitiveType -> LONG .)
    LPAREN          reduce using rule 167 (primitiveType -> LONG .)
    IMPLEMENTS      reduce using rule 167 (primitiveType -> LONG .)


state 81

    (200) literal -> booleanLiteral .

    DOT             reduce using rule 200 (literal -> booleanLiteral .)
    FLPAREN         reduce using rule 200 (literal -> booleanLiteral .)
    OP_INC          reduce using rule 200 (literal -> booleanLiteral .)
    OP_DEC          reduce using rule 200 (literal -> booleanLiteral .)


state 82

    (342) unaryExpression -> PLUS . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 153
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 83

    (343) unaryExpression -> DASH . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 154
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 84

    (325) instanceOfExpression -> relationalExpression . INSTANCEOF type
    (326) instanceOfExpression -> relationalExpression . empty
    (528) empty -> .

    INSTANCEOF      shift and go to state 155
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 156

state 85

    (323) equalityExpression -> instanceOfExpression . expt_32
    (324) equalityExpression -> instanceOfExpression . empty
    (413) expt_32 -> . expr_14 instanceOfExpression
    (414) expt_32 -> . expt_32 expr_14 instanceOfExpression
    (528) empty -> .
    (503) expr_14 -> . OP_EQ
    (504) expr_14 -> . OP_NE

    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    OP_EQ           shift and go to state 158
    OP_NE           shift and go to state 157

    expr_14                        shift and go to state 160
    empty                          shift and go to state 161
    expt_32                        shift and go to state 159

state 86

    (355) primary -> THIS . expt_19 identifierSuffix
    (356) primary -> THIS . expt_19 empty
    (357) primary -> THIS . empty identifierSuffix
    (358) primary -> THIS . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 162
    expt_19                        shift and go to state 163

state 87

    (169) primitiveType -> DOUBLE .

    FLPAREN         reduce using rule 169 (primitiveType -> DOUBLE .)
    DOT             reduce using rule 169 (primitiveType -> DOUBLE .)
    Identifier      reduce using rule 169 (primitiveType -> DOUBLE .)
    COMMA           reduce using rule 169 (primitiveType -> DOUBLE .)
    BLPAREN         reduce using rule 169 (primitiveType -> DOUBLE .)
    RPAREN          reduce using rule 169 (primitiveType -> DOUBLE .)
    MORE            reduce using rule 169 (primitiveType -> DOUBLE .)
    AND             reduce using rule 169 (primitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 169 (primitiveType -> DOUBLE .)
    OP_NE           reduce using rule 169 (primitiveType -> DOUBLE .)
    CARET           reduce using rule 169 (primitiveType -> DOUBLE .)
    VERTICAL        reduce using rule 169 (primitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 169 (primitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 169 (primitiveType -> DOUBLE .)
    QUES            reduce using rule 169 (primitiveType -> DOUBLE .)
    EQUALS          reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_ADD         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_SUB         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_MUL         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_DIV         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_AND         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_OR          reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_XOR         reduce using rule 169 (primitiveType -> DOUBLE .)
    ASS_MOD         reduce using rule 169 (primitiveType -> DOUBLE .)
    LESS            reduce using rule 169 (primitiveType -> DOUBLE .)
    COLON           reduce using rule 169 (primitiveType -> DOUBLE .)
    FRPAREN         reduce using rule 169 (primitiveType -> DOUBLE .)
    BRPAREN         reduce using rule 169 (primitiveType -> DOUBLE .)
    SEMI            reduce using rule 169 (primitiveType -> DOUBLE .)
    OP_ARRAY        reduce using rule 169 (primitiveType -> DOUBLE .)
    LPAREN          reduce using rule 169 (primitiveType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 169 (primitiveType -> DOUBLE .)


state 88

    (196) literal -> integerLiteral .

    DOT             reduce using rule 196 (literal -> integerLiteral .)
    FLPAREN         reduce using rule 196 (literal -> integerLiteral .)
    OP_INC          reduce using rule 196 (literal -> integerLiteral .)
    OP_DEC          reduce using rule 196 (literal -> integerLiteral .)


state 89

    (165) primitiveType -> SHORT .

    FLPAREN         reduce using rule 165 (primitiveType -> SHORT .)
    DOT             reduce using rule 165 (primitiveType -> SHORT .)
    Identifier      reduce using rule 165 (primitiveType -> SHORT .)
    COMMA           reduce using rule 165 (primitiveType -> SHORT .)
    BLPAREN         reduce using rule 165 (primitiveType -> SHORT .)
    RPAREN          reduce using rule 165 (primitiveType -> SHORT .)
    MORE            reduce using rule 165 (primitiveType -> SHORT .)
    AND             reduce using rule 165 (primitiveType -> SHORT .)
    OP_EQ           reduce using rule 165 (primitiveType -> SHORT .)
    OP_NE           reduce using rule 165 (primitiveType -> SHORT .)
    CARET           reduce using rule 165 (primitiveType -> SHORT .)
    VERTICAL        reduce using rule 165 (primitiveType -> SHORT .)
    OP_LAND         reduce using rule 165 (primitiveType -> SHORT .)
    OP_LOR          reduce using rule 165 (primitiveType -> SHORT .)
    QUES            reduce using rule 165 (primitiveType -> SHORT .)
    EQUALS          reduce using rule 165 (primitiveType -> SHORT .)
    ASS_ADD         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_SUB         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_MUL         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_DIV         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_AND         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_OR          reduce using rule 165 (primitiveType -> SHORT .)
    ASS_XOR         reduce using rule 165 (primitiveType -> SHORT .)
    ASS_MOD         reduce using rule 165 (primitiveType -> SHORT .)
    LESS            reduce using rule 165 (primitiveType -> SHORT .)
    COLON           reduce using rule 165 (primitiveType -> SHORT .)
    FRPAREN         reduce using rule 165 (primitiveType -> SHORT .)
    BRPAREN         reduce using rule 165 (primitiveType -> SHORT .)
    SEMI            reduce using rule 165 (primitiveType -> SHORT .)
    OP_ARRAY        reduce using rule 165 (primitiveType -> SHORT .)
    LPAREN          reduce using rule 165 (primitiveType -> SHORT .)
    IMPLEMENTS      reduce using rule 165 (primitiveType -> SHORT .)


state 90

    (315) conditionalAndExpression -> inclusiveOrExpression . expt_28
    (316) conditionalAndExpression -> inclusiveOrExpression . empty
    (437) expt_28 -> . OP_LAND inclusiveOrExpression
    (438) expt_28 -> . expt_28 OP_LAND inclusiveOrExpression
    (528) empty -> .

    OP_LAND         shift and go to state 164
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 165
    expt_28                        shift and go to state 166

state 91

    (526) integerLiteral -> LONG_NUMBER .

    DOT             reduce using rule 526 (integerLiteral -> LONG_NUMBER .)
    FLPAREN         reduce using rule 526 (integerLiteral -> LONG_NUMBER .)
    OP_INC          reduce using rule 526 (integerLiteral -> LONG_NUMBER .)
    OP_DEC          reduce using rule 526 (integerLiteral -> LONG_NUMBER .)


state 92

    (209) elementValuePairs -> elementValuePair . expt_20
    (210) elementValuePairs -> elementValuePair . empty
    (453) expt_20 -> . COMMA elementValuePair
    (454) expt_20 -> . expt_20 COMMA elementValuePair
    (528) empty -> .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 528 (empty -> .)

    expt_20                        shift and go to state 167
    empty                          shift and go to state 169

state 93

    (333) shiftExpression -> additiveExpression . expt_34
    (334) shiftExpression -> additiveExpression . empty
    (401) expt_34 -> . shiftOp additiveExpression
    (402) expt_34 -> . expt_34 shiftOp additiveExpression
    (528) empty -> .
    (335) shiftOp -> . LESS LESS
    (336) shiftOp -> . MORE MORE MORE
    (337) shiftOp -> . MORE MORE

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    INSTANCEOF      reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    LESS            shift and go to state 170
    MORE            shift and go to state 174

  ! LESS            [ reduce using rule 528 (empty -> .) ]
  ! MORE            [ reduce using rule 528 (empty -> .) ]

    expt_34                        shift and go to state 171
    shiftOp                        shift and go to state 172
    empty                          shift and go to state 173

state 94

    (211) elementValuePair -> Identifier . EQUALS elementValue
    (362) primary -> Identifier . expt_19 identifierSuffix
    (363) primary -> Identifier . expt_19 empty
    (364) primary -> Identifier . empty identifierSuffix
    (365) primary -> Identifier . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    EQUALS          shift and go to state 175
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    expt_19                        shift and go to state 177
    empty                          shift and go to state 176

state 95

    (198) literal -> CharacterLiteral .

    DOT             reduce using rule 198 (literal -> CharacterLiteral .)
    FLPAREN         reduce using rule 198 (literal -> CharacterLiteral .)
    OP_INC          reduce using rule 198 (literal -> CharacterLiteral .)
    OP_DEC          reduce using rule 198 (literal -> CharacterLiteral .)


state 96

    (166) primitiveType -> INT .

    FLPAREN         reduce using rule 166 (primitiveType -> INT .)
    DOT             reduce using rule 166 (primitiveType -> INT .)
    Identifier      reduce using rule 166 (primitiveType -> INT .)
    COMMA           reduce using rule 166 (primitiveType -> INT .)
    BLPAREN         reduce using rule 166 (primitiveType -> INT .)
    RPAREN          reduce using rule 166 (primitiveType -> INT .)
    MORE            reduce using rule 166 (primitiveType -> INT .)
    AND             reduce using rule 166 (primitiveType -> INT .)
    OP_EQ           reduce using rule 166 (primitiveType -> INT .)
    OP_NE           reduce using rule 166 (primitiveType -> INT .)
    CARET           reduce using rule 166 (primitiveType -> INT .)
    VERTICAL        reduce using rule 166 (primitiveType -> INT .)
    OP_LAND         reduce using rule 166 (primitiveType -> INT .)
    OP_LOR          reduce using rule 166 (primitiveType -> INT .)
    QUES            reduce using rule 166 (primitiveType -> INT .)
    EQUALS          reduce using rule 166 (primitiveType -> INT .)
    ASS_ADD         reduce using rule 166 (primitiveType -> INT .)
    ASS_SUB         reduce using rule 166 (primitiveType -> INT .)
    ASS_MUL         reduce using rule 166 (primitiveType -> INT .)
    ASS_DIV         reduce using rule 166 (primitiveType -> INT .)
    ASS_AND         reduce using rule 166 (primitiveType -> INT .)
    ASS_OR          reduce using rule 166 (primitiveType -> INT .)
    ASS_XOR         reduce using rule 166 (primitiveType -> INT .)
    ASS_MOD         reduce using rule 166 (primitiveType -> INT .)
    LESS            reduce using rule 166 (primitiveType -> INT .)
    COLON           reduce using rule 166 (primitiveType -> INT .)
    FRPAREN         reduce using rule 166 (primitiveType -> INT .)
    BRPAREN         reduce using rule 166 (primitiveType -> INT .)
    SEMI            reduce using rule 166 (primitiveType -> INT .)
    OP_ARRAY        reduce using rule 166 (primitiveType -> INT .)
    LPAREN          reduce using rule 166 (primitiveType -> INT .)
    IMPLEMENTS      reduce using rule 166 (primitiveType -> INT .)


state 97

    (346) unaryExpression -> unaryExpressionNotPlusMinus .

    MULT            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    AND             reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 346 (unaryExpression -> unaryExpressionNotPlusMinus .)


state 98

    (319) exclusiveOrExpression -> andExpression . expt_30
    (320) exclusiveOrExpression -> andExpression . empty
    (409) expt_30 -> . CARET andExpression
    (410) expt_30 -> . expt_30 CARET andExpression
    (528) empty -> .

    CARET           shift and go to state 178
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    expt_30                        shift and go to state 179
    empty                          shift and go to state 180

state 99

    (215) elementValueArrayInitializer -> BLPAREN . elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> BLPAREN . elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> BLPAREN . empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> BLPAREN . empty empty BRPAREN
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (528) empty -> .
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    COMMA           reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 132
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 181
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 182

state 100

    (321) andExpression -> equalityExpression . expt_31
    (322) andExpression -> equalityExpression . empty
    (411) expt_31 -> . AND equalityExpression
    (412) expt_31 -> . expt_31 AND equalityExpression
    (528) empty -> .

    AND             shift and go to state 183
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    expt_31                        shift and go to state 184
    empty                          shift and go to state 185

state 101

    (311) conditionalExpression -> conditionalOrExpression . QUES expression COLON expression
    (312) conditionalExpression -> conditionalOrExpression . empty
    (528) empty -> .

    QUES            shift and go to state 186
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 187

state 102

    (317) inclusiveOrExpression -> exclusiveOrExpression . expt_29
    (318) inclusiveOrExpression -> exclusiveOrExpression . empty
    (435) expt_29 -> . VERTICAL exclusiveOrExpression
    (436) expt_29 -> . expt_29 VERTICAL exclusiveOrExpression
    (528) empty -> .

    VERTICAL        shift and go to state 188
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 189
    expt_29                        shift and go to state 190

state 103

    (350) unaryExpressionNotPlusMinus -> primary . expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> primary . empty expr_17
    (407) expt_37 -> . selector
    (408) expt_37 -> . expt_37 selector
    (528) empty -> .
    (388) selector -> . DOT Identifier arguments
    (389) selector -> . DOT Identifier empty
    (390) selector -> . DOT THIS
    (391) selector -> . DOT SUPER superSuffix
    (392) selector -> . DOT NEW innerCreator
    (393) selector -> . FLPAREN expression FRPAREN

    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    DOT             shift and go to state 195
    FLPAREN         shift and go to state 191

    expt_37                        shift and go to state 192
    selector                       shift and go to state 193
    empty                          shift and go to state 194

state 104

    (163) primitiveType -> CHAR .

    FLPAREN         reduce using rule 163 (primitiveType -> CHAR .)
    DOT             reduce using rule 163 (primitiveType -> CHAR .)
    Identifier      reduce using rule 163 (primitiveType -> CHAR .)
    COMMA           reduce using rule 163 (primitiveType -> CHAR .)
    BLPAREN         reduce using rule 163 (primitiveType -> CHAR .)
    RPAREN          reduce using rule 163 (primitiveType -> CHAR .)
    MORE            reduce using rule 163 (primitiveType -> CHAR .)
    AND             reduce using rule 163 (primitiveType -> CHAR .)
    OP_EQ           reduce using rule 163 (primitiveType -> CHAR .)
    OP_NE           reduce using rule 163 (primitiveType -> CHAR .)
    CARET           reduce using rule 163 (primitiveType -> CHAR .)
    VERTICAL        reduce using rule 163 (primitiveType -> CHAR .)
    OP_LAND         reduce using rule 163 (primitiveType -> CHAR .)
    OP_LOR          reduce using rule 163 (primitiveType -> CHAR .)
    QUES            reduce using rule 163 (primitiveType -> CHAR .)
    EQUALS          reduce using rule 163 (primitiveType -> CHAR .)
    ASS_ADD         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_SUB         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_MUL         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_DIV         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_AND         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_OR          reduce using rule 163 (primitiveType -> CHAR .)
    ASS_XOR         reduce using rule 163 (primitiveType -> CHAR .)
    ASS_MOD         reduce using rule 163 (primitiveType -> CHAR .)
    LESS            reduce using rule 163 (primitiveType -> CHAR .)
    COLON           reduce using rule 163 (primitiveType -> CHAR .)
    FRPAREN         reduce using rule 163 (primitiveType -> CHAR .)
    BRPAREN         reduce using rule 163 (primitiveType -> CHAR .)
    SEMI            reduce using rule 163 (primitiveType -> CHAR .)
    OP_ARRAY        reduce using rule 163 (primitiveType -> CHAR .)
    LPAREN          reduce using rule 163 (primitiveType -> CHAR .)
    IMPLEMENTS      reduce using rule 163 (primitiveType -> CHAR .)


state 105

    (344) unaryExpression -> OP_INC . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 196
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 106

    (527) integerLiteral -> LONG_HEX_NUMBER .

    DOT             reduce using rule 527 (integerLiteral -> LONG_HEX_NUMBER .)
    FLPAREN         reduce using rule 527 (integerLiteral -> LONG_HEX_NUMBER .)
    OP_INC          reduce using rule 527 (integerLiteral -> LONG_HEX_NUMBER .)
    OP_DEC          reduce using rule 527 (integerLiteral -> LONG_HEX_NUMBER .)


state 107

    (345) unaryExpression -> OP_DEC . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 197
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 108

    (361) primary -> NEW . creator
    (377) creator -> . nonWildcardTypeArguments createdName classCreatorRest
    (378) creator -> . createdName expr_21
    (387) nonWildcardTypeArguments -> . LESS typeList MORE
    (379) createdName -> . classOrInterfaceType
    (380) createdName -> . primitiveType
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    LESS            shift and go to state 199
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    creator                        shift and go to state 198
    createdName                    shift and go to state 203
    classOrInterfaceType           shift and go to state 200
    primitiveType                  shift and go to state 204
    nonWildcardTypeArguments       shift and go to state 201

state 109

    (360) primary -> literal .

    DOT             reduce using rule 360 (primary -> literal .)
    FLPAREN         reduce using rule 360 (primary -> literal .)
    OP_INC          reduce using rule 360 (primary -> literal .)
    OP_DEC          reduce using rule 360 (primary -> literal .)


state 110

    (347) unaryExpressionNotPlusMinus -> TILDE . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 205
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 111

    (212) elementValue -> conditionalExpression .

    RPAREN          reduce using rule 212 (elementValue -> conditionalExpression .)
    COMMA           reduce using rule 212 (elementValue -> conditionalExpression .)
    BRPAREN         reduce using rule 212 (elementValue -> conditionalExpression .)
    SEMI            reduce using rule 212 (elementValue -> conditionalExpression .)


state 112

    (197) literal -> FloatingPointLiteral .

    DOT             reduce using rule 197 (literal -> FloatingPointLiteral .)
    FLPAREN         reduce using rule 197 (literal -> FloatingPointLiteral .)
    OP_INC          reduce using rule 197 (literal -> FloatingPointLiteral .)
    OP_DEC          reduce using rule 197 (literal -> FloatingPointLiteral .)


state 113

    (164) primitiveType -> BYTE .

    FLPAREN         reduce using rule 164 (primitiveType -> BYTE .)
    DOT             reduce using rule 164 (primitiveType -> BYTE .)
    Identifier      reduce using rule 164 (primitiveType -> BYTE .)
    COMMA           reduce using rule 164 (primitiveType -> BYTE .)
    BLPAREN         reduce using rule 164 (primitiveType -> BYTE .)
    RPAREN          reduce using rule 164 (primitiveType -> BYTE .)
    MORE            reduce using rule 164 (primitiveType -> BYTE .)
    AND             reduce using rule 164 (primitiveType -> BYTE .)
    OP_EQ           reduce using rule 164 (primitiveType -> BYTE .)
    OP_NE           reduce using rule 164 (primitiveType -> BYTE .)
    CARET           reduce using rule 164 (primitiveType -> BYTE .)
    VERTICAL        reduce using rule 164 (primitiveType -> BYTE .)
    OP_LAND         reduce using rule 164 (primitiveType -> BYTE .)
    OP_LOR          reduce using rule 164 (primitiveType -> BYTE .)
    QUES            reduce using rule 164 (primitiveType -> BYTE .)
    EQUALS          reduce using rule 164 (primitiveType -> BYTE .)
    ASS_ADD         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_SUB         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_MUL         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_DIV         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_AND         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_OR          reduce using rule 164 (primitiveType -> BYTE .)
    ASS_XOR         reduce using rule 164 (primitiveType -> BYTE .)
    ASS_MOD         reduce using rule 164 (primitiveType -> BYTE .)
    LESS            reduce using rule 164 (primitiveType -> BYTE .)
    COLON           reduce using rule 164 (primitiveType -> BYTE .)
    FRPAREN         reduce using rule 164 (primitiveType -> BYTE .)
    BRPAREN         reduce using rule 164 (primitiveType -> BYTE .)
    SEMI            reduce using rule 164 (primitiveType -> BYTE .)
    OP_ARRAY        reduce using rule 164 (primitiveType -> BYTE .)
    LPAREN          reduce using rule 164 (primitiveType -> BYTE .)
    IMPLEMENTS      reduce using rule 164 (primitiveType -> BYTE .)


state 114

    (205) annotation -> AT annotationName LPAREN expr_11 . RPAREN

    RPAREN          shift and go to state 206


state 115

    (203) booleanLiteral -> FALSE .

    DOT             reduce using rule 203 (booleanLiteral -> FALSE .)
    FLPAREN         reduce using rule 203 (booleanLiteral -> FALSE .)
    OP_INC          reduce using rule 203 (booleanLiteral -> FALSE .)
    OP_DEC          reduce using rule 203 (booleanLiteral -> FALSE .)


state 116

    (199) literal -> StringLiteral .

    DOT             reduce using rule 199 (literal -> StringLiteral .)
    FLPAREN         reduce using rule 199 (literal -> StringLiteral .)
    OP_INC          reduce using rule 199 (literal -> StringLiteral .)
    OP_DEC          reduce using rule 199 (literal -> StringLiteral .)


state 117

    (366) primary -> primitiveType . expt_11 DOT CLASS
    (367) primary -> primitiveType . empty DOT CLASS
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    DOT             reduce using rule 528 (empty -> .)

    empty                          shift and go to state 209
    expt_11                        shift and go to state 208

state 118

    (162) primitiveType -> BOOLEAN .

    FLPAREN         reduce using rule 162 (primitiveType -> BOOLEAN .)
    DOT             reduce using rule 162 (primitiveType -> BOOLEAN .)
    Identifier      reduce using rule 162 (primitiveType -> BOOLEAN .)
    COMMA           reduce using rule 162 (primitiveType -> BOOLEAN .)
    BLPAREN         reduce using rule 162 (primitiveType -> BOOLEAN .)
    RPAREN          reduce using rule 162 (primitiveType -> BOOLEAN .)
    MORE            reduce using rule 162 (primitiveType -> BOOLEAN .)
    AND             reduce using rule 162 (primitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 162 (primitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 162 (primitiveType -> BOOLEAN .)
    CARET           reduce using rule 162 (primitiveType -> BOOLEAN .)
    VERTICAL        reduce using rule 162 (primitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 162 (primitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 162 (primitiveType -> BOOLEAN .)
    QUES            reduce using rule 162 (primitiveType -> BOOLEAN .)
    EQUALS          reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_ADD         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_SUB         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_MUL         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_DIV         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_AND         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_OR          reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_XOR         reduce using rule 162 (primitiveType -> BOOLEAN .)
    ASS_MOD         reduce using rule 162 (primitiveType -> BOOLEAN .)
    LESS            reduce using rule 162 (primitiveType -> BOOLEAN .)
    COLON           reduce using rule 162 (primitiveType -> BOOLEAN .)
    FRPAREN         reduce using rule 162 (primitiveType -> BOOLEAN .)
    BRPAREN         reduce using rule 162 (primitiveType -> BOOLEAN .)
    SEMI            reduce using rule 162 (primitiveType -> BOOLEAN .)
    OP_ARRAY        reduce using rule 162 (primitiveType -> BOOLEAN .)
    LPAREN          reduce using rule 162 (primitiveType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 162 (primitiveType -> BOOLEAN .)


state 119

    (214) elementValue -> elementValueArrayInitializer .

    RPAREN          reduce using rule 214 (elementValue -> elementValueArrayInitializer .)
    COMMA           reduce using rule 214 (elementValue -> elementValueArrayInitializer .)
    BRPAREN         reduce using rule 214 (elementValue -> elementValueArrayInitializer .)
    SEMI            reduce using rule 214 (elementValue -> elementValueArrayInitializer .)


state 120

    (525) integerLiteral -> HEX_NUMBER .

    DOT             reduce using rule 525 (integerLiteral -> HEX_NUMBER .)
    FLPAREN         reduce using rule 525 (integerLiteral -> HEX_NUMBER .)
    OP_INC          reduce using rule 525 (integerLiteral -> HEX_NUMBER .)
    OP_DEC          reduce using rule 525 (integerLiteral -> HEX_NUMBER .)


state 121

    (522) FloatingPointLiteral -> NON_INTEGER_2 .

    DOT             reduce using rule 522 (FloatingPointLiteral -> NON_INTEGER_2 .)
    FLPAREN         reduce using rule 522 (FloatingPointLiteral -> NON_INTEGER_2 .)
    OP_INC          reduce using rule 522 (FloatingPointLiteral -> NON_INTEGER_2 .)
    OP_DEC          reduce using rule 522 (FloatingPointLiteral -> NON_INTEGER_2 .)


state 122

    (523) FloatingPointLiteral -> NON_INTEGER_3 .

    DOT             reduce using rule 523 (FloatingPointLiteral -> NON_INTEGER_3 .)
    FLPAREN         reduce using rule 523 (FloatingPointLiteral -> NON_INTEGER_3 .)
    OP_INC          reduce using rule 523 (FloatingPointLiteral -> NON_INTEGER_3 .)
    OP_DEC          reduce using rule 523 (FloatingPointLiteral -> NON_INTEGER_3 .)


state 123

    (521) FloatingPointLiteral -> NON_INTEGER_1 .

    DOT             reduce using rule 521 (FloatingPointLiteral -> NON_INTEGER_1 .)
    FLPAREN         reduce using rule 521 (FloatingPointLiteral -> NON_INTEGER_1 .)
    OP_INC          reduce using rule 521 (FloatingPointLiteral -> NON_INTEGER_1 .)
    OP_DEC          reduce using rule 521 (FloatingPointLiteral -> NON_INTEGER_1 .)


state 124

    (338) additiveExpression -> multiplicativeExpression . expt_35
    (339) additiveExpression -> multiplicativeExpression . empty
    (403) expt_35 -> . expr_15 multiplicativeExpression
    (404) expt_35 -> . expt_35 expr_15 multiplicativeExpression
    (528) empty -> .
    (505) expr_15 -> . PLUS
    (506) expr_15 -> . DASH

    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    INSTANCEOF      reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 212
    DASH            shift and go to state 211

    expt_35                        shift and go to state 210
    empty                          shift and go to state 214
    expr_15                        shift and go to state 213

state 125

    (524) integerLiteral -> NUMBER .

    DOT             reduce using rule 524 (integerLiteral -> NUMBER .)
    FLPAREN         reduce using rule 524 (integerLiteral -> NUMBER .)
    OP_INC          reduce using rule 524 (integerLiteral -> NUMBER .)
    OP_DEC          reduce using rule 524 (integerLiteral -> NUMBER .)


state 126

    (201) literal -> NULL .

    DOT             reduce using rule 201 (literal -> NULL .)
    FLPAREN         reduce using rule 201 (literal -> NULL .)
    OP_INC          reduce using rule 201 (literal -> NULL .)
    OP_DEC          reduce using rule 201 (literal -> NULL .)


state 127

    (327) relationalExpression -> shiftExpression . expt_33
    (328) relationalExpression -> shiftExpression . empty
    (415) expt_33 -> . relationalOp shiftExpression
    (416) expt_33 -> . expt_33 relationalOp shiftExpression
    (528) empty -> .
    (329) relationalOp -> . LESS EQUALS
    (330) relationalOp -> . MORE EQUALS
    (331) relationalOp -> . LESS
    (332) relationalOp -> . MORE

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    INSTANCEOF      reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    LESS            shift and go to state 215
    MORE            shift and go to state 219

  ! LESS            [ reduce using rule 528 (empty -> .) ]
  ! MORE            [ reduce using rule 528 (empty -> .) ]

    relationalOp                   shift and go to state 218
    empty                          shift and go to state 217
    expt_33                        shift and go to state 216

state 128

    (340) multiplicativeExpression -> unaryExpression . expt_36
    (341) multiplicativeExpression -> unaryExpression . empty
    (405) expt_36 -> . expr_16 unaryExpression
    (406) expt_36 -> . expt_36 expr_16 unaryExpression
    (528) empty -> .
    (507) expr_16 -> . MULT
    (508) expr_16 -> . SLASH
    (509) expr_16 -> . PERCENT

    PLUS            reduce using rule 528 (empty -> .)
    DASH            reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    INSTANCEOF      reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    MULT            shift and go to state 225
    SLASH           shift and go to state 223
    PERCENT         shift and go to state 221

    expt_36                        shift and go to state 220
    expr_16                        shift and go to state 224
    empty                          shift and go to state 222

state 129

    (354) primary -> parExpression .

    DOT             reduce using rule 354 (primary -> parExpression .)
    FLPAREN         reduce using rule 354 (primary -> parExpression .)
    OP_INC          reduce using rule 354 (primary -> parExpression .)
    OP_DEC          reduce using rule 354 (primary -> parExpression .)


state 130

    (352) castExpression -> LPAREN . primitiveType RPAREN unaryExpression
    (353) castExpression -> LPAREN . expr_18 RPAREN unaryExpressionNotPlusMinus
    (292) parExpression -> LPAREN . expression RPAREN
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (499) expr_18 -> . type
    (500) expr_18 -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    Identifier      shift and go to state 230
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceType           shift and go to state 226
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    type                           shift and go to state 227
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    expr_18                        shift and go to state 229
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 231
    andExpression                  shift and go to state 98
    expression                     shift and go to state 232

state 131

    (514) expr_11 -> elementValuePairs .

    RPAREN          reduce using rule 514 (expr_11 -> elementValuePairs .)


state 132

    (213) elementValue -> annotation .

    RPAREN          reduce using rule 213 (elementValue -> annotation .)
    COMMA           reduce using rule 213 (elementValue -> annotation .)
    BRPAREN         reduce using rule 213 (elementValue -> annotation .)
    SEMI            reduce using rule 213 (elementValue -> annotation .)


state 133

    (349) unaryExpressionNotPlusMinus -> castExpression .

    MULT            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    SLASH           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    PERCENT         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    PLUS            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    DASH            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    LESS            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    MORE            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    INSTANCEOF      reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_EQ           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_NE           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    AND             reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    CARET           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    VERTICAL        reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LAND         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LOR          reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    QUES            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    RPAREN          reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    COMMA           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    EQUALS          reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_ADD         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_SUB         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MUL         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_DIV         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_AND         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_OR          reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_XOR         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MOD         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    COLON           reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    FRPAREN         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    BRPAREN         reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)
    SEMI            reduce using rule 349 (unaryExpressionNotPlusMinus -> castExpression .)


state 134

    (168) primitiveType -> FLOAT .

    FLPAREN         reduce using rule 168 (primitiveType -> FLOAT .)
    DOT             reduce using rule 168 (primitiveType -> FLOAT .)
    Identifier      reduce using rule 168 (primitiveType -> FLOAT .)
    COMMA           reduce using rule 168 (primitiveType -> FLOAT .)
    BLPAREN         reduce using rule 168 (primitiveType -> FLOAT .)
    RPAREN          reduce using rule 168 (primitiveType -> FLOAT .)
    MORE            reduce using rule 168 (primitiveType -> FLOAT .)
    AND             reduce using rule 168 (primitiveType -> FLOAT .)
    OP_EQ           reduce using rule 168 (primitiveType -> FLOAT .)
    OP_NE           reduce using rule 168 (primitiveType -> FLOAT .)
    CARET           reduce using rule 168 (primitiveType -> FLOAT .)
    VERTICAL        reduce using rule 168 (primitiveType -> FLOAT .)
    OP_LAND         reduce using rule 168 (primitiveType -> FLOAT .)
    OP_LOR          reduce using rule 168 (primitiveType -> FLOAT .)
    QUES            reduce using rule 168 (primitiveType -> FLOAT .)
    EQUALS          reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_ADD         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_SUB         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_MUL         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_DIV         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_AND         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_OR          reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_XOR         reduce using rule 168 (primitiveType -> FLOAT .)
    ASS_MOD         reduce using rule 168 (primitiveType -> FLOAT .)
    LESS            reduce using rule 168 (primitiveType -> FLOAT .)
    COLON           reduce using rule 168 (primitiveType -> FLOAT .)
    FRPAREN         reduce using rule 168 (primitiveType -> FLOAT .)
    BRPAREN         reduce using rule 168 (primitiveType -> FLOAT .)
    SEMI            reduce using rule 168 (primitiveType -> FLOAT .)
    OP_ARRAY        reduce using rule 168 (primitiveType -> FLOAT .)
    LPAREN          reduce using rule 168 (primitiveType -> FLOAT .)
    IMPLEMENTS      reduce using rule 168 (primitiveType -> FLOAT .)


state 135

    (515) expr_11 -> elementValue .

    RPAREN          reduce using rule 515 (expr_11 -> elementValue .)


state 136

    (359) primary -> SUPER . superSuffix
    (394) superSuffix -> . arguments
    (395) superSuffix -> . DOT Identifier arguments
    (396) superSuffix -> . DOT Identifier empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    DOT             shift and go to state 234
    LPAREN          shift and go to state 236

    superSuffix                    shift and go to state 233
    arguments                      shift and go to state 235

state 137

    (497) expr_1 -> packageDeclaration expt_1 expt_2 .
    (432) expt_2 -> expt_2 . typeDeclaration
    (15) typeDeclaration -> . classOrInterfaceDeclaration
    (16) typeDeclaration -> . SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    $end            reduce using rule 497 (expr_1 -> packageDeclaration expt_1 expt_2 .)
    SEMI            shift and go to state 42
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 30
    classOrInterfaceDeclaration    shift and go to state 44
    typeDeclaration                shift and go to state 73
    expt_3                         shift and go to state 23
    classOrInterfaceModifiers      shift and go to state 31
    annotation                     shift and go to state 29
    empty                          shift and go to state 25

state 138

    (32) normalClassDeclaration -> CLASS Identifier . typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> CLASS Identifier . typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> CLASS Identifier . typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> CLASS Identifier . typeParameters empty empty classBody
    (36) normalClassDeclaration -> CLASS Identifier . empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> CLASS Identifier . empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> CLASS Identifier . empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> CLASS Identifier . empty empty empty classBody
    (40) typeParameters -> . LESS typeParameter expt_5 MORE
    (41) typeParameters -> . LESS typeParameter empty MORE
    (528) empty -> .

    LESS            shift and go to state 237
    EXTENDS         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    typeParameters                 shift and go to state 238
    empty                          shift and go to state 239

state 139

    (46) enumDeclaration -> ENUM Identifier . IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> ENUM Identifier . empty enumBody
    (528) empty -> .

    IMPLEMENTS      shift and go to state 240
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 241

state 140

    (219) annotationTypeDeclaration -> AT INTERFACE . Identifier annotationTypeBody

    Identifier      shift and go to state 242


state 141

    (70) normalInterfaceDeclaration -> INTERFACE Identifier . typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> INTERFACE Identifier . typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> INTERFACE Identifier . empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> INTERFACE Identifier . empty empty interfaceBody
    (40) typeParameters -> . LESS typeParameter expt_5 MORE
    (41) typeParameters -> . LESS typeParameter empty MORE
    (528) empty -> .

    LESS            shift and go to state 237
    EXTENDS         reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    typeParameters                 shift and go to state 243
    empty                          shift and go to state 244

state 142

    (474) expt_19 -> expt_19 DOT Identifier .

    DOT             reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    LPAREN          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    AT              reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    PACKAGE         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    PUBLIC          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    PROTECTED       reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    PRIVATE         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    ABSTRACT        reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    STATIC          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    FINAL           reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    STRICTFP        reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    CLASS           reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    ENUM            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    INTERFACE       reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    Identifier      reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    RPAREN          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    COMMA           reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    BRPAREN         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    NATIVE          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    SYNCHRONIZED    reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    TRANSIENT       reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    VOLATILE        reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    BOOLEAN         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    CHAR            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    BYTE            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    SHORT           reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    INT             reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    LONG            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    FLOAT           reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    DOUBLE          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    VOID            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    LESS            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    SEMI            reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    BLPAREN         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    FLPAREN         reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    OP_INC          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)
    OP_DEC          reduce using rule 474 (expt_19 -> expt_19 DOT Identifier .)


state 143

    (14) importDeclaration -> IMPORT empty qualifiedName empty . SEMI

    SEMI            shift and go to state 245


state 144

    (13) importDeclaration -> IMPORT empty qualifiedName DOT . MULT SEMI

    MULT            shift and go to state 246


state 145

    (12) importDeclaration -> IMPORT STATIC qualifiedName empty . SEMI

    SEMI            shift and go to state 247


state 146

    (11) importDeclaration -> IMPORT STATIC qualifiedName DOT . MULT SEMI

    MULT            shift and go to state 248


state 147

    (362) primary -> Identifier . expt_19 identifierSuffix
    (363) primary -> Identifier . expt_19 empty
    (364) primary -> Identifier . empty identifierSuffix
    (365) primary -> Identifier . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 176
    expt_19                        shift and go to state 177

state 148

    (348) unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .

    MULT            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SLASH           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PERCENT         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    DASH            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    MORE            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    INSTANCEOF      reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_EQ           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_NE           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    AND             reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    CARET           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    VERTICAL        reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LAND         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LOR          reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    QUES            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    EQUALS          reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_ADD         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_SUB         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MUL         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_DIV         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_AND         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_OR          reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_XOR         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MOD         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    FRPAREN         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    BRPAREN         reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SEMI            reduce using rule 348 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)


state 149

    (368) primary -> VOID DOT . CLASS

    CLASS           shift and go to state 249


state 150

    (313) conditionalOrExpression -> conditionalAndExpression expt_27 .
    (440) expt_27 -> expt_27 . OP_LOR conditionalAndExpression

    QUES            reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    EQUALS          reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_ADD         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_SUB         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_MUL         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_DIV         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_AND         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_OR          reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_XOR         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    ASS_MOD         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    LESS            reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    MORE            reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    SEMI            reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    COMMA           reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    RPAREN          reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    FRPAREN         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    BRPAREN         reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    COLON           reduce using rule 313 (conditionalOrExpression -> conditionalAndExpression expt_27 .)
    OP_LOR          shift and go to state 250


state 151

    (314) conditionalOrExpression -> conditionalAndExpression empty .

    QUES            reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    EQUALS          reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_ADD         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_SUB         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_MUL         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_DIV         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_AND         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_OR          reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_XOR         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    ASS_MOD         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    LESS            reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    MORE            reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    SEMI            reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    COMMA           reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    RPAREN          reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    FRPAREN         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    BRPAREN         reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)
    COLON           reduce using rule 314 (conditionalOrExpression -> conditionalAndExpression empty .)


state 152

    (439) expt_27 -> OP_LOR . conditionalAndExpression
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    conditionalAndExpression       shift and go to state 251
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    exclusiveOrExpression          shift and go to state 102
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 153

    (342) unaryExpression -> PLUS unaryExpression .

    MULT            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    SLASH           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    PERCENT         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    PLUS            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    DASH            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    LESS            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    MORE            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    INSTANCEOF      reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    OP_EQ           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    OP_NE           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    AND             reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    CARET           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    VERTICAL        reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    OP_LAND         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    OP_LOR          reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    QUES            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    RPAREN          reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    COMMA           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    EQUALS          reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_ADD         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_SUB         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_MUL         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_DIV         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_AND         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_OR          reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_XOR         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    ASS_MOD         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    COLON           reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    FRPAREN         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    BRPAREN         reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)
    SEMI            reduce using rule 342 (unaryExpression -> PLUS unaryExpression .)


state 154

    (343) unaryExpression -> DASH unaryExpression .

    MULT            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    SLASH           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    PERCENT         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    PLUS            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    DASH            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    LESS            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    MORE            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    INSTANCEOF      reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    OP_EQ           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    OP_NE           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    AND             reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    CARET           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    VERTICAL        reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    OP_LAND         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    OP_LOR          reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    QUES            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    RPAREN          reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    COMMA           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    EQUALS          reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_ADD         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_SUB         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_MUL         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_DIV         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_AND         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_OR          reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_XOR         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    ASS_MOD         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    COLON           reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    FRPAREN         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    BRPAREN         reduce using rule 343 (unaryExpression -> DASH unaryExpression .)
    SEMI            reduce using rule 343 (unaryExpression -> DASH unaryExpression .)


state 155

    (325) instanceOfExpression -> relationalExpression INSTANCEOF . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 253

state 156

    (326) instanceOfExpression -> relationalExpression empty .

    OP_EQ           reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    OP_NE           reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    AND             reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    CARET           reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    VERTICAL        reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    OP_LAND         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    OP_LOR          reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    QUES            reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    EQUALS          reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_ADD         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_SUB         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_MUL         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_DIV         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_AND         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_OR          reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_XOR         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    ASS_MOD         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    LESS            reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    MORE            reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    COMMA           reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    BRPAREN         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    RPAREN          reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    COLON           reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    FRPAREN         reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)
    SEMI            reduce using rule 326 (instanceOfExpression -> relationalExpression empty .)


state 157

    (504) expr_14 -> OP_NE .

    PLUS            reduce using rule 504 (expr_14 -> OP_NE .)
    DASH            reduce using rule 504 (expr_14 -> OP_NE .)
    OP_INC          reduce using rule 504 (expr_14 -> OP_NE .)
    OP_DEC          reduce using rule 504 (expr_14 -> OP_NE .)
    TILDE           reduce using rule 504 (expr_14 -> OP_NE .)
    EXCLAMATION     reduce using rule 504 (expr_14 -> OP_NE .)
    LPAREN          reduce using rule 504 (expr_14 -> OP_NE .)
    THIS            reduce using rule 504 (expr_14 -> OP_NE .)
    SUPER           reduce using rule 504 (expr_14 -> OP_NE .)
    NEW             reduce using rule 504 (expr_14 -> OP_NE .)
    Identifier      reduce using rule 504 (expr_14 -> OP_NE .)
    VOID            reduce using rule 504 (expr_14 -> OP_NE .)
    CharacterLiteral reduce using rule 504 (expr_14 -> OP_NE .)
    StringLiteral   reduce using rule 504 (expr_14 -> OP_NE .)
    NULL            reduce using rule 504 (expr_14 -> OP_NE .)
    BOOLEAN         reduce using rule 504 (expr_14 -> OP_NE .)
    CHAR            reduce using rule 504 (expr_14 -> OP_NE .)
    BYTE            reduce using rule 504 (expr_14 -> OP_NE .)
    SHORT           reduce using rule 504 (expr_14 -> OP_NE .)
    INT             reduce using rule 504 (expr_14 -> OP_NE .)
    LONG            reduce using rule 504 (expr_14 -> OP_NE .)
    FLOAT           reduce using rule 504 (expr_14 -> OP_NE .)
    DOUBLE          reduce using rule 504 (expr_14 -> OP_NE .)
    NUMBER          reduce using rule 504 (expr_14 -> OP_NE .)
    HEX_NUMBER      reduce using rule 504 (expr_14 -> OP_NE .)
    LONG_NUMBER     reduce using rule 504 (expr_14 -> OP_NE .)
    LONG_HEX_NUMBER reduce using rule 504 (expr_14 -> OP_NE .)
    NON_INTEGER_1   reduce using rule 504 (expr_14 -> OP_NE .)
    NON_INTEGER_2   reduce using rule 504 (expr_14 -> OP_NE .)
    NON_INTEGER_3   reduce using rule 504 (expr_14 -> OP_NE .)
    TRUE            reduce using rule 504 (expr_14 -> OP_NE .)
    FALSE           reduce using rule 504 (expr_14 -> OP_NE .)


state 158

    (503) expr_14 -> OP_EQ .

    PLUS            reduce using rule 503 (expr_14 -> OP_EQ .)
    DASH            reduce using rule 503 (expr_14 -> OP_EQ .)
    OP_INC          reduce using rule 503 (expr_14 -> OP_EQ .)
    OP_DEC          reduce using rule 503 (expr_14 -> OP_EQ .)
    TILDE           reduce using rule 503 (expr_14 -> OP_EQ .)
    EXCLAMATION     reduce using rule 503 (expr_14 -> OP_EQ .)
    LPAREN          reduce using rule 503 (expr_14 -> OP_EQ .)
    THIS            reduce using rule 503 (expr_14 -> OP_EQ .)
    SUPER           reduce using rule 503 (expr_14 -> OP_EQ .)
    NEW             reduce using rule 503 (expr_14 -> OP_EQ .)
    Identifier      reduce using rule 503 (expr_14 -> OP_EQ .)
    VOID            reduce using rule 503 (expr_14 -> OP_EQ .)
    CharacterLiteral reduce using rule 503 (expr_14 -> OP_EQ .)
    StringLiteral   reduce using rule 503 (expr_14 -> OP_EQ .)
    NULL            reduce using rule 503 (expr_14 -> OP_EQ .)
    BOOLEAN         reduce using rule 503 (expr_14 -> OP_EQ .)
    CHAR            reduce using rule 503 (expr_14 -> OP_EQ .)
    BYTE            reduce using rule 503 (expr_14 -> OP_EQ .)
    SHORT           reduce using rule 503 (expr_14 -> OP_EQ .)
    INT             reduce using rule 503 (expr_14 -> OP_EQ .)
    LONG            reduce using rule 503 (expr_14 -> OP_EQ .)
    FLOAT           reduce using rule 503 (expr_14 -> OP_EQ .)
    DOUBLE          reduce using rule 503 (expr_14 -> OP_EQ .)
    NUMBER          reduce using rule 503 (expr_14 -> OP_EQ .)
    HEX_NUMBER      reduce using rule 503 (expr_14 -> OP_EQ .)
    LONG_NUMBER     reduce using rule 503 (expr_14 -> OP_EQ .)
    LONG_HEX_NUMBER reduce using rule 503 (expr_14 -> OP_EQ .)
    NON_INTEGER_1   reduce using rule 503 (expr_14 -> OP_EQ .)
    NON_INTEGER_2   reduce using rule 503 (expr_14 -> OP_EQ .)
    NON_INTEGER_3   reduce using rule 503 (expr_14 -> OP_EQ .)
    TRUE            reduce using rule 503 (expr_14 -> OP_EQ .)
    FALSE           reduce using rule 503 (expr_14 -> OP_EQ .)


state 159

    (323) equalityExpression -> instanceOfExpression expt_32 .
    (414) expt_32 -> expt_32 . expr_14 instanceOfExpression
    (503) expr_14 -> . OP_EQ
    (504) expr_14 -> . OP_NE

    AND             reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    CARET           reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    VERTICAL        reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    OP_LAND         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    OP_LOR          reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    QUES            reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    EQUALS          reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_ADD         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_SUB         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_MUL         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_DIV         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_AND         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_OR          reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_XOR         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    ASS_MOD         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    LESS            reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    MORE            reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    SEMI            reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    COMMA           reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    RPAREN          reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    COLON           reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    FRPAREN         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    BRPAREN         reduce using rule 323 (equalityExpression -> instanceOfExpression expt_32 .)
    OP_EQ           shift and go to state 158
    OP_NE           shift and go to state 157

    expr_14                        shift and go to state 254

state 160

    (413) expt_32 -> expr_14 . instanceOfExpression
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 255
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 161

    (324) equalityExpression -> instanceOfExpression empty .

    AND             reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    CARET           reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    VERTICAL        reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    OP_LAND         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    OP_LOR          reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    QUES            reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    EQUALS          reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_ADD         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_SUB         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_MUL         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_DIV         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_AND         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_OR          reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_XOR         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    ASS_MOD         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    LESS            reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    MORE            reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    SEMI            reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    COMMA           reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    RPAREN          reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    COLON           reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    FRPAREN         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)
    BRPAREN         reduce using rule 324 (equalityExpression -> instanceOfExpression empty .)


state 162

    (357) primary -> THIS empty . identifierSuffix
    (358) primary -> THIS empty . empty
    (369) identifierSuffix -> . expr_19 DOT CLASS
    (370) identifierSuffix -> . expr_20
    (371) identifierSuffix -> . arguments
    (372) identifierSuffix -> . DOT CLASS
    (373) identifierSuffix -> . DOT explicitGenericInvocation
    (374) identifierSuffix -> . DOT THIS
    (375) identifierSuffix -> . DOT SUPER arguments
    (376) identifierSuffix -> . DOT NEW innerCreator
    (528) empty -> .
    (501) expr_19 -> . FLPAREN FRPAREN
    (502) expr_19 -> . expr_19 FLPAREN FRPAREN
    (477) expr_20 -> . FLPAREN expression FRPAREN
    (478) expr_20 -> . expr_20 FLPAREN expression FRPAREN
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             shift and go to state 261
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    FLPAREN         shift and go to state 257
    LPAREN          shift and go to state 236

  ! DOT             [ reduce using rule 528 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 528 (empty -> .) ]

    identifierSuffix               shift and go to state 256
    expr_19                        shift and go to state 259
    expr_20                        shift and go to state 260
    empty                          shift and go to state 258
    arguments                      shift and go to state 262

state 163

    (355) primary -> THIS expt_19 . identifierSuffix
    (356) primary -> THIS expt_19 . empty
    (474) expt_19 -> expt_19 . DOT Identifier
    (369) identifierSuffix -> . expr_19 DOT CLASS
    (370) identifierSuffix -> . expr_20
    (371) identifierSuffix -> . arguments
    (372) identifierSuffix -> . DOT CLASS
    (373) identifierSuffix -> . DOT explicitGenericInvocation
    (374) identifierSuffix -> . DOT THIS
    (375) identifierSuffix -> . DOT SUPER arguments
    (376) identifierSuffix -> . DOT NEW innerCreator
    (528) empty -> .
    (501) expr_19 -> . FLPAREN FRPAREN
    (502) expr_19 -> . expr_19 FLPAREN FRPAREN
    (477) expr_20 -> . FLPAREN expression FRPAREN
    (478) expr_20 -> . expr_20 FLPAREN expression FRPAREN
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             shift and go to state 265
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    FLPAREN         shift and go to state 257
    LPAREN          shift and go to state 236

  ! DOT             [ reduce using rule 528 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 528 (empty -> .) ]

    identifierSuffix               shift and go to state 263
    arguments                      shift and go to state 262
    expr_20                        shift and go to state 260
    empty                          shift and go to state 264
    expr_19                        shift and go to state 259

state 164

    (437) expt_28 -> OP_LAND . inclusiveOrExpression
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 266
    exclusiveOrExpression          shift and go to state 102
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 165

    (316) conditionalAndExpression -> inclusiveOrExpression empty .

    OP_LOR          reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    QUES            reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    COMMA           reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    BRPAREN         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    EQUALS          reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_ADD         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_SUB         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_MUL         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_DIV         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_AND         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_OR          reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_XOR         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    ASS_MOD         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    LESS            reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    MORE            reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    SEMI            reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    RPAREN          reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    COLON           reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)
    FRPAREN         reduce using rule 316 (conditionalAndExpression -> inclusiveOrExpression empty .)


state 166

    (315) conditionalAndExpression -> inclusiveOrExpression expt_28 .
    (438) expt_28 -> expt_28 . OP_LAND inclusiveOrExpression

    OP_LOR          reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    QUES            reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    COMMA           reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    BRPAREN         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    EQUALS          reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_ADD         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_SUB         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_MUL         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_DIV         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_AND         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_OR          reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_XOR         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    ASS_MOD         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    LESS            reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    MORE            reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    SEMI            reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    RPAREN          reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    COLON           reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    FRPAREN         reduce using rule 315 (conditionalAndExpression -> inclusiveOrExpression expt_28 .)
    OP_LAND         shift and go to state 267


state 167

    (209) elementValuePairs -> elementValuePair expt_20 .
    (454) expt_20 -> expt_20 . COMMA elementValuePair

    RPAREN          reduce using rule 209 (elementValuePairs -> elementValuePair expt_20 .)
    COMMA           shift and go to state 268


state 168

    (453) expt_20 -> COMMA . elementValuePair
    (211) elementValuePair -> . Identifier EQUALS elementValue

    Identifier      shift and go to state 269

    elementValuePair               shift and go to state 270

state 169

    (210) elementValuePairs -> elementValuePair empty .

    RPAREN          reduce using rule 210 (elementValuePairs -> elementValuePair empty .)


state 170

    (335) shiftOp -> LESS . LESS

    LESS            shift and go to state 271


state 171

    (333) shiftExpression -> additiveExpression expt_34 .
    (402) expt_34 -> expt_34 . shiftOp additiveExpression
    (335) shiftOp -> . LESS LESS
    (336) shiftOp -> . MORE MORE MORE
    (337) shiftOp -> . MORE MORE

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    INSTANCEOF      reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    OP_EQ           reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    OP_NE           reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    AND             reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    CARET           reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    VERTICAL        reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    OP_LAND         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    OP_LOR          reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    QUES            reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    COMMA           reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    BRPAREN         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    EQUALS          reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_ADD         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_SUB         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_MUL         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_DIV         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_AND         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_OR          reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_XOR         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    ASS_MOD         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    FRPAREN         reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    RPAREN          reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    COLON           reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    SEMI            reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .)
    LESS            shift and go to state 170
    MORE            shift and go to state 174

  ! LESS            [ reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .) ]
  ! MORE            [ reduce using rule 333 (shiftExpression -> additiveExpression expt_34 .) ]

    shiftOp                        shift and go to state 272

state 172

    (401) expt_34 -> shiftOp . additiveExpression
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    multiplicativeExpression       shift and go to state 124
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 273
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 173

    (334) shiftExpression -> additiveExpression empty .

    LESS            reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    MORE            reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    INSTANCEOF      reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    OP_EQ           reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    OP_NE           reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    AND             reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    CARET           reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    VERTICAL        reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    OP_LAND         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    OP_LOR          reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    QUES            reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    COMMA           reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    BRPAREN         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    EQUALS          reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_ADD         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_SUB         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_MUL         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_DIV         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_AND         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_OR          reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_XOR         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    ASS_MOD         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    FRPAREN         reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    RPAREN          reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    COLON           reduce using rule 334 (shiftExpression -> additiveExpression empty .)
    SEMI            reduce using rule 334 (shiftExpression -> additiveExpression empty .)


state 174

    (336) shiftOp -> MORE . MORE MORE
    (337) shiftOp -> MORE . MORE

    MORE            shift and go to state 274


state 175

    (211) elementValuePair -> Identifier EQUALS . elementValue
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 132
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 275

state 176

    (364) primary -> Identifier empty . identifierSuffix
    (365) primary -> Identifier empty . empty
    (369) identifierSuffix -> . expr_19 DOT CLASS
    (370) identifierSuffix -> . expr_20
    (371) identifierSuffix -> . arguments
    (372) identifierSuffix -> . DOT CLASS
    (373) identifierSuffix -> . DOT explicitGenericInvocation
    (374) identifierSuffix -> . DOT THIS
    (375) identifierSuffix -> . DOT SUPER arguments
    (376) identifierSuffix -> . DOT NEW innerCreator
    (528) empty -> .
    (501) expr_19 -> . FLPAREN FRPAREN
    (502) expr_19 -> . expr_19 FLPAREN FRPAREN
    (477) expr_20 -> . FLPAREN expression FRPAREN
    (478) expr_20 -> . expr_20 FLPAREN expression FRPAREN
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             shift and go to state 261
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    FLPAREN         shift and go to state 257
    LPAREN          shift and go to state 236

  ! DOT             [ reduce using rule 528 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 528 (empty -> .) ]

    identifierSuffix               shift and go to state 276
    expr_19                        shift and go to state 259
    expr_20                        shift and go to state 260
    empty                          shift and go to state 277
    arguments                      shift and go to state 262

state 177

    (362) primary -> Identifier expt_19 . identifierSuffix
    (363) primary -> Identifier expt_19 . empty
    (474) expt_19 -> expt_19 . DOT Identifier
    (369) identifierSuffix -> . expr_19 DOT CLASS
    (370) identifierSuffix -> . expr_20
    (371) identifierSuffix -> . arguments
    (372) identifierSuffix -> . DOT CLASS
    (373) identifierSuffix -> . DOT explicitGenericInvocation
    (374) identifierSuffix -> . DOT THIS
    (375) identifierSuffix -> . DOT SUPER arguments
    (376) identifierSuffix -> . DOT NEW innerCreator
    (528) empty -> .
    (501) expr_19 -> . FLPAREN FRPAREN
    (502) expr_19 -> . expr_19 FLPAREN FRPAREN
    (477) expr_20 -> . FLPAREN expression FRPAREN
    (478) expr_20 -> . expr_20 FLPAREN expression FRPAREN
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             shift and go to state 265
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    FLPAREN         shift and go to state 257
    LPAREN          shift and go to state 236

  ! DOT             [ reduce using rule 528 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 528 (empty -> .) ]

    identifierSuffix               shift and go to state 278
    arguments                      shift and go to state 262
    expr_20                        shift and go to state 260
    empty                          shift and go to state 279
    expr_19                        shift and go to state 259

state 178

    (409) expt_30 -> CARET . andExpression
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 280

state 179

    (319) exclusiveOrExpression -> andExpression expt_30 .
    (410) expt_30 -> expt_30 . CARET andExpression

    VERTICAL        reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    OP_LAND         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    OP_LOR          reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    QUES            reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    COMMA           reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    EQUALS          reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_ADD         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_SUB         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_MUL         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_DIV         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_AND         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_OR          reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_XOR         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    ASS_MOD         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    LESS            reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    MORE            reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    RPAREN          reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    FRPAREN         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    SEMI            reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    BRPAREN         reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    COLON           reduce using rule 319 (exclusiveOrExpression -> andExpression expt_30 .)
    CARET           shift and go to state 281


state 180

    (320) exclusiveOrExpression -> andExpression empty .

    VERTICAL        reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    OP_LAND         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    OP_LOR          reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    QUES            reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    COMMA           reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    EQUALS          reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_ADD         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_SUB         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_MUL         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_DIV         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_AND         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_OR          reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_XOR         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    ASS_MOD         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    LESS            reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    MORE            reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    RPAREN          reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    FRPAREN         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    SEMI            reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    BRPAREN         reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)
    COLON           reduce using rule 320 (exclusiveOrExpression -> andExpression empty .)


state 181

    (217) elementValueArrayInitializer -> BLPAREN empty . COMMA BRPAREN
    (218) elementValueArrayInitializer -> BLPAREN empty . empty BRPAREN
    (528) empty -> .

    COMMA           shift and go to state 282
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 283

state 182

    (215) elementValueArrayInitializer -> BLPAREN elementValue . expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> BLPAREN elementValue . expt_21 empty BRPAREN
    (451) expt_21 -> . COMMA elementValue
    (452) expt_21 -> . expt_21 COMMA elementValue

    COMMA           shift and go to state 285

    expt_21                        shift and go to state 284

state 183

    (411) expt_31 -> AND . equalityExpression
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 286
    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 184

    (321) andExpression -> equalityExpression expt_31 .
    (412) expt_31 -> expt_31 . AND equalityExpression

    CARET           reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    VERTICAL        reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    OP_LAND         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    OP_LOR          reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    QUES            reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    EQUALS          reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_ADD         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_SUB         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_MUL         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_DIV         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_AND         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_OR          reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_XOR         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    ASS_MOD         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    LESS            reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    MORE            reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    COMMA           reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    RPAREN          reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    SEMI            reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    COLON           reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    FRPAREN         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    BRPAREN         reduce using rule 321 (andExpression -> equalityExpression expt_31 .)
    AND             shift and go to state 287


state 185

    (322) andExpression -> equalityExpression empty .

    CARET           reduce using rule 322 (andExpression -> equalityExpression empty .)
    VERTICAL        reduce using rule 322 (andExpression -> equalityExpression empty .)
    OP_LAND         reduce using rule 322 (andExpression -> equalityExpression empty .)
    OP_LOR          reduce using rule 322 (andExpression -> equalityExpression empty .)
    QUES            reduce using rule 322 (andExpression -> equalityExpression empty .)
    EQUALS          reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_ADD         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_SUB         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_MUL         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_DIV         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_AND         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_OR          reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_XOR         reduce using rule 322 (andExpression -> equalityExpression empty .)
    ASS_MOD         reduce using rule 322 (andExpression -> equalityExpression empty .)
    LESS            reduce using rule 322 (andExpression -> equalityExpression empty .)
    MORE            reduce using rule 322 (andExpression -> equalityExpression empty .)
    COMMA           reduce using rule 322 (andExpression -> equalityExpression empty .)
    RPAREN          reduce using rule 322 (andExpression -> equalityExpression empty .)
    SEMI            reduce using rule 322 (andExpression -> equalityExpression empty .)
    COLON           reduce using rule 322 (andExpression -> equalityExpression empty .)
    FRPAREN         reduce using rule 322 (andExpression -> equalityExpression empty .)
    BRPAREN         reduce using rule 322 (andExpression -> equalityExpression empty .)


state 186

    (311) conditionalExpression -> conditionalOrExpression QUES . expression COLON expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 288

state 187

    (312) conditionalExpression -> conditionalOrExpression empty .

    EQUALS          reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_ADD         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_SUB         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_MUL         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_DIV         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_AND         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_OR          reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_XOR         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    ASS_MOD         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    LESS            reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    MORE            reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    RPAREN          reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    COLON           reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    FRPAREN         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    COMMA           reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    BRPAREN         reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)
    SEMI            reduce using rule 312 (conditionalExpression -> conditionalOrExpression empty .)


state 188

    (435) expt_29 -> VERTICAL . exclusiveOrExpression
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    exclusiveOrExpression          shift and go to state 289
    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 189

    (318) inclusiveOrExpression -> exclusiveOrExpression empty .

    OP_LAND         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    OP_LOR          reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    QUES            reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    EQUALS          reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_ADD         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_SUB         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_MUL         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_DIV         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_AND         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_OR          reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_XOR         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    ASS_MOD         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    LESS            reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    MORE            reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    COLON           reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    SEMI            reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    RPAREN          reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    COMMA           reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    FRPAREN         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)
    BRPAREN         reduce using rule 318 (inclusiveOrExpression -> exclusiveOrExpression empty .)


state 190

    (317) inclusiveOrExpression -> exclusiveOrExpression expt_29 .
    (436) expt_29 -> expt_29 . VERTICAL exclusiveOrExpression

    OP_LAND         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    OP_LOR          reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    QUES            reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    EQUALS          reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_ADD         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_SUB         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_MUL         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_DIV         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_AND         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_OR          reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_XOR         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    ASS_MOD         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    LESS            reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    MORE            reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    COLON           reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    SEMI            reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    RPAREN          reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    COMMA           reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    FRPAREN         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    BRPAREN         reduce using rule 317 (inclusiveOrExpression -> exclusiveOrExpression expt_29 .)
    VERTICAL        shift and go to state 290


state 191

    (393) selector -> FLPAREN . expression FRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 291

state 192

    (350) unaryExpressionNotPlusMinus -> primary expt_37 . expr_17
    (408) expt_37 -> expt_37 . selector
    (510) expr_17 -> . OP_INC
    (511) expr_17 -> . OP_DEC
    (388) selector -> . DOT Identifier arguments
    (389) selector -> . DOT Identifier empty
    (390) selector -> . DOT THIS
    (391) selector -> . DOT SUPER superSuffix
    (392) selector -> . DOT NEW innerCreator
    (393) selector -> . FLPAREN expression FRPAREN

    OP_INC          shift and go to state 293
    OP_DEC          shift and go to state 294
    DOT             shift and go to state 195
    FLPAREN         shift and go to state 191

    selector                       shift and go to state 292
    expr_17                        shift and go to state 295

state 193

    (407) expt_37 -> selector .

    OP_INC          reduce using rule 407 (expt_37 -> selector .)
    OP_DEC          reduce using rule 407 (expt_37 -> selector .)
    DOT             reduce using rule 407 (expt_37 -> selector .)
    FLPAREN         reduce using rule 407 (expt_37 -> selector .)


state 194

    (351) unaryExpressionNotPlusMinus -> primary empty . expr_17
    (510) expr_17 -> . OP_INC
    (511) expr_17 -> . OP_DEC

    OP_INC          shift and go to state 293
    OP_DEC          shift and go to state 294

    expr_17                        shift and go to state 296

state 195

    (388) selector -> DOT . Identifier arguments
    (389) selector -> DOT . Identifier empty
    (390) selector -> DOT . THIS
    (391) selector -> DOT . SUPER superSuffix
    (392) selector -> DOT . NEW innerCreator

    Identifier      shift and go to state 299
    THIS            shift and go to state 297
    SUPER           shift and go to state 300
    NEW             shift and go to state 298


state 196

    (344) unaryExpression -> OP_INC unaryExpression .

    MULT            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    SLASH           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    PERCENT         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    PLUS            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    DASH            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    LESS            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    MORE            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    INSTANCEOF      reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    OP_EQ           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    OP_NE           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    AND             reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    CARET           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    VERTICAL        reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    OP_LAND         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    OP_LOR          reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    QUES            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    RPAREN          reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    COMMA           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    EQUALS          reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_ADD         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_SUB         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MUL         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_DIV         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_AND         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_OR          reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_XOR         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MOD         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    COLON           reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    FRPAREN         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    BRPAREN         reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)
    SEMI            reduce using rule 344 (unaryExpression -> OP_INC unaryExpression .)


state 197

    (345) unaryExpression -> OP_DEC unaryExpression .

    MULT            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    SLASH           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    PERCENT         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    PLUS            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    DASH            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    LESS            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    MORE            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    INSTANCEOF      reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    OP_EQ           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    OP_NE           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    AND             reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    CARET           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    VERTICAL        reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LAND         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LOR          reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    QUES            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    RPAREN          reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    COMMA           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    EQUALS          reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_ADD         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_SUB         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MUL         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_DIV         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_AND         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_OR          reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_XOR         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MOD         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    COLON           reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    FRPAREN         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    BRPAREN         reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)
    SEMI            reduce using rule 345 (unaryExpression -> OP_DEC unaryExpression .)


state 198

    (361) primary -> NEW creator .

    DOT             reduce using rule 361 (primary -> NEW creator .)
    FLPAREN         reduce using rule 361 (primary -> NEW creator .)
    OP_INC          reduce using rule 361 (primary -> NEW creator .)
    OP_DEC          reduce using rule 361 (primary -> NEW creator .)


state 199

    (387) nonWildcardTypeArguments -> LESS . typeList MORE
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 301
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 200

    (379) createdName -> classOrInterfaceType .

    LPAREN          reduce using rule 379 (createdName -> classOrInterfaceType .)
    FLPAREN         reduce using rule 379 (createdName -> classOrInterfaceType .)


state 201

    (377) creator -> nonWildcardTypeArguments . createdName classCreatorRest
    (379) createdName -> . classOrInterfaceType
    (380) createdName -> . primitiveType
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    createdName                    shift and go to state 303
    classOrInterfaceType           shift and go to state 200
    primitiveType                  shift and go to state 204

state 202

    (158) classOrInterfaceType -> Identifier . typeArguments expt_15
    (159) classOrInterfaceType -> Identifier . typeArguments empty
    (160) classOrInterfaceType -> Identifier . empty expt_15
    (161) classOrInterfaceType -> Identifier . empty empty
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE
    (528) empty -> .

  ! shift/reduce conflict for LESS resolved as shift
    LESS            shift and go to state 304
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    OP_ARRAY        reduce using rule 528 (empty -> .)

  ! LESS            [ reduce using rule 528 (empty -> .) ]

    typeArguments                  shift and go to state 305
    empty                          shift and go to state 306

state 203

    (378) creator -> createdName . expr_21
    (475) expr_21 -> . arrayCreatorRest
    (476) expr_21 -> . classCreatorRest
    (383) arrayCreatorRest -> . FLPAREN expr_22
    (384) classCreatorRest -> . arguments classBody
    (385) classCreatorRest -> . arguments empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    FLPAREN         shift and go to state 307
    LPAREN          shift and go to state 236

    classCreatorRest               shift and go to state 308
    arguments                      shift and go to state 309
    expr_21                        shift and go to state 310
    arrayCreatorRest               shift and go to state 311

state 204

    (380) createdName -> primitiveType .

    LPAREN          reduce using rule 380 (createdName -> primitiveType .)
    FLPAREN         reduce using rule 380 (createdName -> primitiveType .)


state 205

    (347) unaryExpressionNotPlusMinus -> TILDE unaryExpression .

    MULT            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SLASH           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PERCENT         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PLUS            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    DASH            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    LESS            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    MORE            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    INSTANCEOF      reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_EQ           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_NE           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    AND             reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    CARET           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    VERTICAL        reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LAND         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LOR          reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    QUES            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    RPAREN          reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COMMA           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    EQUALS          reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_ADD         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_SUB         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MUL         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_DIV         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_AND         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_OR          reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_XOR         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MOD         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COLON           reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    FRPAREN         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    BRPAREN         reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SEMI            reduce using rule 347 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)


state 206

    (205) annotation -> AT annotationName LPAREN expr_11 RPAREN .

    AT              reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    Identifier      reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    PUBLIC          reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    PROTECTED       reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    PRIVATE         reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    ABSTRACT        reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    STATIC          reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    FINAL           reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    STRICTFP        reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    CLASS           reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    ENUM            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    INTERFACE       reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    RPAREN          reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    BOOLEAN         reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    CHAR            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    BYTE            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    SHORT           reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    INT             reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    LONG            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    FLOAT           reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    DOUBLE          reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    COMMA           reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    NATIVE          reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    SYNCHRONIZED    reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    TRANSIENT       reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    VOLATILE        reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    VOID            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    LESS            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    BRPAREN         reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    PACKAGE         reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)
    SEMI            reduce using rule 205 (annotation -> AT annotationName LPAREN expr_11 RPAREN .)


state 207

    (469) expt_11 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 312


state 208

    (366) primary -> primitiveType expt_11 . DOT CLASS
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    DOT             shift and go to state 314
    FLPAREN         shift and go to state 313


state 209

    (367) primary -> primitiveType empty . DOT CLASS

    DOT             shift and go to state 315


state 210

    (338) additiveExpression -> multiplicativeExpression expt_35 .
    (404) expt_35 -> expt_35 . expr_15 multiplicativeExpression
    (505) expr_15 -> . PLUS
    (506) expr_15 -> . DASH

    LESS            reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    MORE            reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    INSTANCEOF      reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    OP_EQ           reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    OP_NE           reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    AND             reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    CARET           reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    VERTICAL        reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    OP_LAND         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    OP_LOR          reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    QUES            reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    EQUALS          reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_ADD         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_SUB         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_MUL         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_DIV         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_AND         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_OR          reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_XOR         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    ASS_MOD         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    FRPAREN         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    COMMA           reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    BRPAREN         reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    SEMI            reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    RPAREN          reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    COLON           reduce using rule 338 (additiveExpression -> multiplicativeExpression expt_35 .)
    PLUS            shift and go to state 212
    DASH            shift and go to state 211

    expr_15                        shift and go to state 316

state 211

    (506) expr_15 -> DASH .

    PLUS            reduce using rule 506 (expr_15 -> DASH .)
    DASH            reduce using rule 506 (expr_15 -> DASH .)
    OP_INC          reduce using rule 506 (expr_15 -> DASH .)
    OP_DEC          reduce using rule 506 (expr_15 -> DASH .)
    TILDE           reduce using rule 506 (expr_15 -> DASH .)
    EXCLAMATION     reduce using rule 506 (expr_15 -> DASH .)
    LPAREN          reduce using rule 506 (expr_15 -> DASH .)
    THIS            reduce using rule 506 (expr_15 -> DASH .)
    SUPER           reduce using rule 506 (expr_15 -> DASH .)
    NEW             reduce using rule 506 (expr_15 -> DASH .)
    Identifier      reduce using rule 506 (expr_15 -> DASH .)
    VOID            reduce using rule 506 (expr_15 -> DASH .)
    CharacterLiteral reduce using rule 506 (expr_15 -> DASH .)
    StringLiteral   reduce using rule 506 (expr_15 -> DASH .)
    NULL            reduce using rule 506 (expr_15 -> DASH .)
    BOOLEAN         reduce using rule 506 (expr_15 -> DASH .)
    CHAR            reduce using rule 506 (expr_15 -> DASH .)
    BYTE            reduce using rule 506 (expr_15 -> DASH .)
    SHORT           reduce using rule 506 (expr_15 -> DASH .)
    INT             reduce using rule 506 (expr_15 -> DASH .)
    LONG            reduce using rule 506 (expr_15 -> DASH .)
    FLOAT           reduce using rule 506 (expr_15 -> DASH .)
    DOUBLE          reduce using rule 506 (expr_15 -> DASH .)
    NUMBER          reduce using rule 506 (expr_15 -> DASH .)
    HEX_NUMBER      reduce using rule 506 (expr_15 -> DASH .)
    LONG_NUMBER     reduce using rule 506 (expr_15 -> DASH .)
    LONG_HEX_NUMBER reduce using rule 506 (expr_15 -> DASH .)
    NON_INTEGER_1   reduce using rule 506 (expr_15 -> DASH .)
    NON_INTEGER_2   reduce using rule 506 (expr_15 -> DASH .)
    NON_INTEGER_3   reduce using rule 506 (expr_15 -> DASH .)
    TRUE            reduce using rule 506 (expr_15 -> DASH .)
    FALSE           reduce using rule 506 (expr_15 -> DASH .)


state 212

    (505) expr_15 -> PLUS .

    PLUS            reduce using rule 505 (expr_15 -> PLUS .)
    DASH            reduce using rule 505 (expr_15 -> PLUS .)
    OP_INC          reduce using rule 505 (expr_15 -> PLUS .)
    OP_DEC          reduce using rule 505 (expr_15 -> PLUS .)
    TILDE           reduce using rule 505 (expr_15 -> PLUS .)
    EXCLAMATION     reduce using rule 505 (expr_15 -> PLUS .)
    LPAREN          reduce using rule 505 (expr_15 -> PLUS .)
    THIS            reduce using rule 505 (expr_15 -> PLUS .)
    SUPER           reduce using rule 505 (expr_15 -> PLUS .)
    NEW             reduce using rule 505 (expr_15 -> PLUS .)
    Identifier      reduce using rule 505 (expr_15 -> PLUS .)
    VOID            reduce using rule 505 (expr_15 -> PLUS .)
    CharacterLiteral reduce using rule 505 (expr_15 -> PLUS .)
    StringLiteral   reduce using rule 505 (expr_15 -> PLUS .)
    NULL            reduce using rule 505 (expr_15 -> PLUS .)
    BOOLEAN         reduce using rule 505 (expr_15 -> PLUS .)
    CHAR            reduce using rule 505 (expr_15 -> PLUS .)
    BYTE            reduce using rule 505 (expr_15 -> PLUS .)
    SHORT           reduce using rule 505 (expr_15 -> PLUS .)
    INT             reduce using rule 505 (expr_15 -> PLUS .)
    LONG            reduce using rule 505 (expr_15 -> PLUS .)
    FLOAT           reduce using rule 505 (expr_15 -> PLUS .)
    DOUBLE          reduce using rule 505 (expr_15 -> PLUS .)
    NUMBER          reduce using rule 505 (expr_15 -> PLUS .)
    HEX_NUMBER      reduce using rule 505 (expr_15 -> PLUS .)
    LONG_NUMBER     reduce using rule 505 (expr_15 -> PLUS .)
    LONG_HEX_NUMBER reduce using rule 505 (expr_15 -> PLUS .)
    NON_INTEGER_1   reduce using rule 505 (expr_15 -> PLUS .)
    NON_INTEGER_2   reduce using rule 505 (expr_15 -> PLUS .)
    NON_INTEGER_3   reduce using rule 505 (expr_15 -> PLUS .)
    TRUE            reduce using rule 505 (expr_15 -> PLUS .)
    FALSE           reduce using rule 505 (expr_15 -> PLUS .)


state 213

    (403) expt_35 -> expr_15 . multiplicativeExpression
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    multiplicativeExpression       shift and go to state 317
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 214

    (339) additiveExpression -> multiplicativeExpression empty .

    LESS            reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    MORE            reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    INSTANCEOF      reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    OP_EQ           reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    OP_NE           reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    AND             reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    CARET           reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    VERTICAL        reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    OP_LAND         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    OP_LOR          reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    QUES            reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    EQUALS          reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_ADD         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_SUB         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_MUL         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_DIV         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_AND         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_OR          reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_XOR         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    ASS_MOD         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    FRPAREN         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    COMMA           reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    BRPAREN         reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    SEMI            reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    RPAREN          reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)
    COLON           reduce using rule 339 (additiveExpression -> multiplicativeExpression empty .)


state 215

    (329) relationalOp -> LESS . EQUALS
    (331) relationalOp -> LESS .

    EQUALS          shift and go to state 318
    PLUS            reduce using rule 331 (relationalOp -> LESS .)
    DASH            reduce using rule 331 (relationalOp -> LESS .)
    OP_INC          reduce using rule 331 (relationalOp -> LESS .)
    OP_DEC          reduce using rule 331 (relationalOp -> LESS .)
    TILDE           reduce using rule 331 (relationalOp -> LESS .)
    EXCLAMATION     reduce using rule 331 (relationalOp -> LESS .)
    LPAREN          reduce using rule 331 (relationalOp -> LESS .)
    THIS            reduce using rule 331 (relationalOp -> LESS .)
    SUPER           reduce using rule 331 (relationalOp -> LESS .)
    NEW             reduce using rule 331 (relationalOp -> LESS .)
    Identifier      reduce using rule 331 (relationalOp -> LESS .)
    VOID            reduce using rule 331 (relationalOp -> LESS .)
    CharacterLiteral reduce using rule 331 (relationalOp -> LESS .)
    StringLiteral   reduce using rule 331 (relationalOp -> LESS .)
    NULL            reduce using rule 331 (relationalOp -> LESS .)
    BOOLEAN         reduce using rule 331 (relationalOp -> LESS .)
    CHAR            reduce using rule 331 (relationalOp -> LESS .)
    BYTE            reduce using rule 331 (relationalOp -> LESS .)
    SHORT           reduce using rule 331 (relationalOp -> LESS .)
    INT             reduce using rule 331 (relationalOp -> LESS .)
    LONG            reduce using rule 331 (relationalOp -> LESS .)
    FLOAT           reduce using rule 331 (relationalOp -> LESS .)
    DOUBLE          reduce using rule 331 (relationalOp -> LESS .)
    NUMBER          reduce using rule 331 (relationalOp -> LESS .)
    HEX_NUMBER      reduce using rule 331 (relationalOp -> LESS .)
    LONG_NUMBER     reduce using rule 331 (relationalOp -> LESS .)
    LONG_HEX_NUMBER reduce using rule 331 (relationalOp -> LESS .)
    NON_INTEGER_1   reduce using rule 331 (relationalOp -> LESS .)
    NON_INTEGER_2   reduce using rule 331 (relationalOp -> LESS .)
    NON_INTEGER_3   reduce using rule 331 (relationalOp -> LESS .)
    TRUE            reduce using rule 331 (relationalOp -> LESS .)
    FALSE           reduce using rule 331 (relationalOp -> LESS .)


state 216

    (327) relationalExpression -> shiftExpression expt_33 .
    (416) expt_33 -> expt_33 . relationalOp shiftExpression
    (329) relationalOp -> . LESS EQUALS
    (330) relationalOp -> . MORE EQUALS
    (331) relationalOp -> . LESS
    (332) relationalOp -> . MORE

  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    INSTANCEOF      reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    OP_EQ           reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    OP_NE           reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    AND             reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    CARET           reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    VERTICAL        reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    OP_LAND         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    OP_LOR          reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    QUES            reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    EQUALS          reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_ADD         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_SUB         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_MUL         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_DIV         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_AND         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_OR          reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_XOR         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    ASS_MOD         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    FRPAREN         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    SEMI            reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    COMMA           reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    RPAREN          reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    BRPAREN         reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    COLON           reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .)
    LESS            shift and go to state 215
    MORE            shift and go to state 219

  ! LESS            [ reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .) ]
  ! MORE            [ reduce using rule 327 (relationalExpression -> shiftExpression expt_33 .) ]

    relationalOp                   shift and go to state 319

state 217

    (328) relationalExpression -> shiftExpression empty .

    INSTANCEOF      reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    OP_EQ           reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    OP_NE           reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    AND             reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    CARET           reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    VERTICAL        reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    OP_LAND         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    OP_LOR          reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    QUES            reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    EQUALS          reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_ADD         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_SUB         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_MUL         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_DIV         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_AND         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_OR          reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_XOR         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    ASS_MOD         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    LESS            reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    MORE            reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    FRPAREN         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    SEMI            reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    COMMA           reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    RPAREN          reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    BRPAREN         reduce using rule 328 (relationalExpression -> shiftExpression empty .)
    COLON           reduce using rule 328 (relationalExpression -> shiftExpression empty .)


state 218

    (415) expt_33 -> relationalOp . shiftExpression
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    shiftExpression                shift and go to state 320
    literal                        shift and go to state 109
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 219

    (330) relationalOp -> MORE . EQUALS
    (332) relationalOp -> MORE .

    EQUALS          shift and go to state 321
    PLUS            reduce using rule 332 (relationalOp -> MORE .)
    DASH            reduce using rule 332 (relationalOp -> MORE .)
    OP_INC          reduce using rule 332 (relationalOp -> MORE .)
    OP_DEC          reduce using rule 332 (relationalOp -> MORE .)
    TILDE           reduce using rule 332 (relationalOp -> MORE .)
    EXCLAMATION     reduce using rule 332 (relationalOp -> MORE .)
    LPAREN          reduce using rule 332 (relationalOp -> MORE .)
    THIS            reduce using rule 332 (relationalOp -> MORE .)
    SUPER           reduce using rule 332 (relationalOp -> MORE .)
    NEW             reduce using rule 332 (relationalOp -> MORE .)
    Identifier      reduce using rule 332 (relationalOp -> MORE .)
    VOID            reduce using rule 332 (relationalOp -> MORE .)
    CharacterLiteral reduce using rule 332 (relationalOp -> MORE .)
    StringLiteral   reduce using rule 332 (relationalOp -> MORE .)
    NULL            reduce using rule 332 (relationalOp -> MORE .)
    BOOLEAN         reduce using rule 332 (relationalOp -> MORE .)
    CHAR            reduce using rule 332 (relationalOp -> MORE .)
    BYTE            reduce using rule 332 (relationalOp -> MORE .)
    SHORT           reduce using rule 332 (relationalOp -> MORE .)
    INT             reduce using rule 332 (relationalOp -> MORE .)
    LONG            reduce using rule 332 (relationalOp -> MORE .)
    FLOAT           reduce using rule 332 (relationalOp -> MORE .)
    DOUBLE          reduce using rule 332 (relationalOp -> MORE .)
    NUMBER          reduce using rule 332 (relationalOp -> MORE .)
    HEX_NUMBER      reduce using rule 332 (relationalOp -> MORE .)
    LONG_NUMBER     reduce using rule 332 (relationalOp -> MORE .)
    LONG_HEX_NUMBER reduce using rule 332 (relationalOp -> MORE .)
    NON_INTEGER_1   reduce using rule 332 (relationalOp -> MORE .)
    NON_INTEGER_2   reduce using rule 332 (relationalOp -> MORE .)
    NON_INTEGER_3   reduce using rule 332 (relationalOp -> MORE .)
    TRUE            reduce using rule 332 (relationalOp -> MORE .)
    FALSE           reduce using rule 332 (relationalOp -> MORE .)


state 220

    (340) multiplicativeExpression -> unaryExpression expt_36 .
    (406) expt_36 -> expt_36 . expr_16 unaryExpression
    (507) expr_16 -> . MULT
    (508) expr_16 -> . SLASH
    (509) expr_16 -> . PERCENT

    PLUS            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    DASH            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    LESS            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    MORE            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    INSTANCEOF      reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    OP_EQ           reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    OP_NE           reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    AND             reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    CARET           reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    VERTICAL        reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    OP_LAND         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    OP_LOR          reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    QUES            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    EQUALS          reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_ADD         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_SUB         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_MUL         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_DIV         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_AND         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_OR          reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_XOR         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    ASS_MOD         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    SEMI            reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    FRPAREN         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    RPAREN          reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    COMMA           reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    COLON           reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    BRPAREN         reduce using rule 340 (multiplicativeExpression -> unaryExpression expt_36 .)
    MULT            shift and go to state 225
    SLASH           shift and go to state 223
    PERCENT         shift and go to state 221

    expr_16                        shift and go to state 322

state 221

    (509) expr_16 -> PERCENT .

    PLUS            reduce using rule 509 (expr_16 -> PERCENT .)
    DASH            reduce using rule 509 (expr_16 -> PERCENT .)
    OP_INC          reduce using rule 509 (expr_16 -> PERCENT .)
    OP_DEC          reduce using rule 509 (expr_16 -> PERCENT .)
    TILDE           reduce using rule 509 (expr_16 -> PERCENT .)
    EXCLAMATION     reduce using rule 509 (expr_16 -> PERCENT .)
    LPAREN          reduce using rule 509 (expr_16 -> PERCENT .)
    THIS            reduce using rule 509 (expr_16 -> PERCENT .)
    SUPER           reduce using rule 509 (expr_16 -> PERCENT .)
    NEW             reduce using rule 509 (expr_16 -> PERCENT .)
    Identifier      reduce using rule 509 (expr_16 -> PERCENT .)
    VOID            reduce using rule 509 (expr_16 -> PERCENT .)
    CharacterLiteral reduce using rule 509 (expr_16 -> PERCENT .)
    StringLiteral   reduce using rule 509 (expr_16 -> PERCENT .)
    NULL            reduce using rule 509 (expr_16 -> PERCENT .)
    BOOLEAN         reduce using rule 509 (expr_16 -> PERCENT .)
    CHAR            reduce using rule 509 (expr_16 -> PERCENT .)
    BYTE            reduce using rule 509 (expr_16 -> PERCENT .)
    SHORT           reduce using rule 509 (expr_16 -> PERCENT .)
    INT             reduce using rule 509 (expr_16 -> PERCENT .)
    LONG            reduce using rule 509 (expr_16 -> PERCENT .)
    FLOAT           reduce using rule 509 (expr_16 -> PERCENT .)
    DOUBLE          reduce using rule 509 (expr_16 -> PERCENT .)
    NUMBER          reduce using rule 509 (expr_16 -> PERCENT .)
    HEX_NUMBER      reduce using rule 509 (expr_16 -> PERCENT .)
    LONG_NUMBER     reduce using rule 509 (expr_16 -> PERCENT .)
    LONG_HEX_NUMBER reduce using rule 509 (expr_16 -> PERCENT .)
    NON_INTEGER_1   reduce using rule 509 (expr_16 -> PERCENT .)
    NON_INTEGER_2   reduce using rule 509 (expr_16 -> PERCENT .)
    NON_INTEGER_3   reduce using rule 509 (expr_16 -> PERCENT .)
    TRUE            reduce using rule 509 (expr_16 -> PERCENT .)
    FALSE           reduce using rule 509 (expr_16 -> PERCENT .)


state 222

    (341) multiplicativeExpression -> unaryExpression empty .

    PLUS            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    DASH            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    LESS            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    MORE            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    INSTANCEOF      reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    OP_EQ           reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    OP_NE           reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    AND             reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    CARET           reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    VERTICAL        reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    OP_LAND         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    OP_LOR          reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    QUES            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    EQUALS          reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_ADD         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_SUB         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_MUL         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_DIV         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_AND         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_OR          reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_XOR         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    ASS_MOD         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    SEMI            reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    FRPAREN         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    RPAREN          reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    COMMA           reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    COLON           reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)
    BRPAREN         reduce using rule 341 (multiplicativeExpression -> unaryExpression empty .)


state 223

    (508) expr_16 -> SLASH .

    PLUS            reduce using rule 508 (expr_16 -> SLASH .)
    DASH            reduce using rule 508 (expr_16 -> SLASH .)
    OP_INC          reduce using rule 508 (expr_16 -> SLASH .)
    OP_DEC          reduce using rule 508 (expr_16 -> SLASH .)
    TILDE           reduce using rule 508 (expr_16 -> SLASH .)
    EXCLAMATION     reduce using rule 508 (expr_16 -> SLASH .)
    LPAREN          reduce using rule 508 (expr_16 -> SLASH .)
    THIS            reduce using rule 508 (expr_16 -> SLASH .)
    SUPER           reduce using rule 508 (expr_16 -> SLASH .)
    NEW             reduce using rule 508 (expr_16 -> SLASH .)
    Identifier      reduce using rule 508 (expr_16 -> SLASH .)
    VOID            reduce using rule 508 (expr_16 -> SLASH .)
    CharacterLiteral reduce using rule 508 (expr_16 -> SLASH .)
    StringLiteral   reduce using rule 508 (expr_16 -> SLASH .)
    NULL            reduce using rule 508 (expr_16 -> SLASH .)
    BOOLEAN         reduce using rule 508 (expr_16 -> SLASH .)
    CHAR            reduce using rule 508 (expr_16 -> SLASH .)
    BYTE            reduce using rule 508 (expr_16 -> SLASH .)
    SHORT           reduce using rule 508 (expr_16 -> SLASH .)
    INT             reduce using rule 508 (expr_16 -> SLASH .)
    LONG            reduce using rule 508 (expr_16 -> SLASH .)
    FLOAT           reduce using rule 508 (expr_16 -> SLASH .)
    DOUBLE          reduce using rule 508 (expr_16 -> SLASH .)
    NUMBER          reduce using rule 508 (expr_16 -> SLASH .)
    HEX_NUMBER      reduce using rule 508 (expr_16 -> SLASH .)
    LONG_NUMBER     reduce using rule 508 (expr_16 -> SLASH .)
    LONG_HEX_NUMBER reduce using rule 508 (expr_16 -> SLASH .)
    NON_INTEGER_1   reduce using rule 508 (expr_16 -> SLASH .)
    NON_INTEGER_2   reduce using rule 508 (expr_16 -> SLASH .)
    NON_INTEGER_3   reduce using rule 508 (expr_16 -> SLASH .)
    TRUE            reduce using rule 508 (expr_16 -> SLASH .)
    FALSE           reduce using rule 508 (expr_16 -> SLASH .)


state 224

    (405) expt_36 -> expr_16 . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 323
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 225

    (507) expr_16 -> MULT .

    PLUS            reduce using rule 507 (expr_16 -> MULT .)
    DASH            reduce using rule 507 (expr_16 -> MULT .)
    OP_INC          reduce using rule 507 (expr_16 -> MULT .)
    OP_DEC          reduce using rule 507 (expr_16 -> MULT .)
    TILDE           reduce using rule 507 (expr_16 -> MULT .)
    EXCLAMATION     reduce using rule 507 (expr_16 -> MULT .)
    LPAREN          reduce using rule 507 (expr_16 -> MULT .)
    THIS            reduce using rule 507 (expr_16 -> MULT .)
    SUPER           reduce using rule 507 (expr_16 -> MULT .)
    NEW             reduce using rule 507 (expr_16 -> MULT .)
    Identifier      reduce using rule 507 (expr_16 -> MULT .)
    VOID            reduce using rule 507 (expr_16 -> MULT .)
    CharacterLiteral reduce using rule 507 (expr_16 -> MULT .)
    StringLiteral   reduce using rule 507 (expr_16 -> MULT .)
    NULL            reduce using rule 507 (expr_16 -> MULT .)
    BOOLEAN         reduce using rule 507 (expr_16 -> MULT .)
    CHAR            reduce using rule 507 (expr_16 -> MULT .)
    BYTE            reduce using rule 507 (expr_16 -> MULT .)
    SHORT           reduce using rule 507 (expr_16 -> MULT .)
    INT             reduce using rule 507 (expr_16 -> MULT .)
    LONG            reduce using rule 507 (expr_16 -> MULT .)
    FLOAT           reduce using rule 507 (expr_16 -> MULT .)
    DOUBLE          reduce using rule 507 (expr_16 -> MULT .)
    NUMBER          reduce using rule 507 (expr_16 -> MULT .)
    HEX_NUMBER      reduce using rule 507 (expr_16 -> MULT .)
    LONG_NUMBER     reduce using rule 507 (expr_16 -> MULT .)
    LONG_HEX_NUMBER reduce using rule 507 (expr_16 -> MULT .)
    NON_INTEGER_1   reduce using rule 507 (expr_16 -> MULT .)
    NON_INTEGER_2   reduce using rule 507 (expr_16 -> MULT .)
    NON_INTEGER_3   reduce using rule 507 (expr_16 -> MULT .)
    TRUE            reduce using rule 507 (expr_16 -> MULT .)
    FALSE           reduce using rule 507 (expr_16 -> MULT .)


state 226

    (154) type -> classOrInterfaceType . expt_11
    (155) type -> classOrInterfaceType . empty
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    RPAREN          reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    OP_ARRAY        reduce using rule 528 (empty -> .)

    empty                          shift and go to state 324
    expt_11                        shift and go to state 325

state 227

    (499) expr_18 -> type .

    RPAREN          reduce using rule 499 (expr_18 -> type .)


state 228

    (297) expression -> conditionalExpression . assignmentOperator expression
    (298) expression -> conditionalExpression . empty
    (299) assignmentOperator -> . EQUALS
    (300) assignmentOperator -> . ASS_ADD
    (301) assignmentOperator -> . ASS_SUB
    (302) assignmentOperator -> . ASS_MUL
    (303) assignmentOperator -> . ASS_DIV
    (304) assignmentOperator -> . ASS_AND
    (305) assignmentOperator -> . ASS_OR
    (306) assignmentOperator -> . ASS_XOR
    (307) assignmentOperator -> . ASS_MOD
    (308) assignmentOperator -> . LESS LESS EQUALS
    (309) assignmentOperator -> . MORE MORE MORE EQUALS
    (310) assignmentOperator -> . MORE MORE EQUALS
    (528) empty -> .

  ! shift/reduce conflict for EQUALS resolved as shift
  ! shift/reduce conflict for ASS_ADD resolved as shift
  ! shift/reduce conflict for ASS_SUB resolved as shift
  ! shift/reduce conflict for ASS_MUL resolved as shift
  ! shift/reduce conflict for ASS_DIV resolved as shift
  ! shift/reduce conflict for ASS_AND resolved as shift
  ! shift/reduce conflict for ASS_OR resolved as shift
  ! shift/reduce conflict for ASS_XOR resolved as shift
  ! shift/reduce conflict for ASS_MOD resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for MORE resolved as shift
    EQUALS          shift and go to state 332
    ASS_ADD         shift and go to state 327
    ASS_SUB         shift and go to state 335
    ASS_MUL         shift and go to state 333
    ASS_DIV         shift and go to state 326
    ASS_AND         shift and go to state 334
    ASS_OR          shift and go to state 330
    ASS_XOR         shift and go to state 328
    ASS_MOD         shift and go to state 338
    LESS            shift and go to state 329
    MORE            shift and go to state 336
    RPAREN          reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

  ! EQUALS          [ reduce using rule 528 (empty -> .) ]
  ! ASS_ADD         [ reduce using rule 528 (empty -> .) ]
  ! ASS_SUB         [ reduce using rule 528 (empty -> .) ]
  ! ASS_MUL         [ reduce using rule 528 (empty -> .) ]
  ! ASS_DIV         [ reduce using rule 528 (empty -> .) ]
  ! ASS_AND         [ reduce using rule 528 (empty -> .) ]
  ! ASS_OR          [ reduce using rule 528 (empty -> .) ]
  ! ASS_XOR         [ reduce using rule 528 (empty -> .) ]
  ! ASS_MOD         [ reduce using rule 528 (empty -> .) ]
  ! LESS            [ reduce using rule 528 (empty -> .) ]
  ! MORE            [ reduce using rule 528 (empty -> .) ]

    assignmentOperator             shift and go to state 331
    empty                          shift and go to state 337

state 229

    (353) castExpression -> LPAREN expr_18 . RPAREN unaryExpressionNotPlusMinus

    RPAREN          shift and go to state 339


state 230

    (158) classOrInterfaceType -> Identifier . typeArguments expt_15
    (159) classOrInterfaceType -> Identifier . typeArguments empty
    (160) classOrInterfaceType -> Identifier . empty expt_15
    (161) classOrInterfaceType -> Identifier . empty empty
    (362) primary -> Identifier . expt_19 identifierSuffix
    (363) primary -> Identifier . expt_19 empty
    (364) primary -> Identifier . empty identifierSuffix
    (365) primary -> Identifier . empty empty
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE
    (528) empty -> .
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier

  ! shift/reduce conflict for DOT resolved as shift
    LESS            shift and go to state 304
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    DOT             shift and go to state 36

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    typeArguments                  shift and go to state 305
    empty                          shift and go to state 340
    expt_19                        shift and go to state 177

state 231

    (352) castExpression -> LPAREN primitiveType . RPAREN unaryExpression
    (156) type -> primitiveType . expt_11
    (157) type -> primitiveType . empty
    (366) primary -> primitiveType . expt_11 DOT CLASS
    (367) primary -> primitiveType . empty DOT CLASS
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 342
    FLPAREN         shift and go to state 207
    DOT             reduce using rule 528 (empty -> .)

  ! RPAREN          [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 343
    expt_11                        shift and go to state 341

state 232

    (292) parExpression -> LPAREN expression . RPAREN
    (500) expr_18 -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 344

  ! RPAREN          [ reduce using rule 500 (expr_18 -> expression .) ]


state 233

    (359) primary -> SUPER superSuffix .

    DOT             reduce using rule 359 (primary -> SUPER superSuffix .)
    FLPAREN         reduce using rule 359 (primary -> SUPER superSuffix .)
    OP_INC          reduce using rule 359 (primary -> SUPER superSuffix .)
    OP_DEC          reduce using rule 359 (primary -> SUPER superSuffix .)


state 234

    (395) superSuffix -> DOT . Identifier arguments
    (396) superSuffix -> DOT . Identifier empty

    Identifier      shift and go to state 345


state 235

    (394) superSuffix -> arguments .

    DOT             reduce using rule 394 (superSuffix -> arguments .)
    FLPAREN         reduce using rule 394 (superSuffix -> arguments .)
    OP_INC          reduce using rule 394 (superSuffix -> arguments .)
    OP_DEC          reduce using rule 394 (superSuffix -> arguments .)


state 236

    (397) arguments -> LPAREN . expressionList RPAREN
    (398) arguments -> LPAREN . empty RPAREN
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (528) empty -> .
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 346
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 347
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 237

    (40) typeParameters -> LESS . typeParameter expt_5 MORE
    (41) typeParameters -> LESS . typeParameter empty MORE
    (42) typeParameter -> . Identifier EXTENDS typeBound
    (43) typeParameter -> . Identifier empty

    Identifier      shift and go to state 350

    typeParameter                  shift and go to state 349

state 238

    (32) normalClassDeclaration -> CLASS Identifier typeParameters . EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> CLASS Identifier typeParameters . EXTENDS type empty classBody
    (34) normalClassDeclaration -> CLASS Identifier typeParameters . empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> CLASS Identifier typeParameters . empty empty classBody
    (528) empty -> .

    EXTENDS         shift and go to state 351
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 352

state 239

    (36) normalClassDeclaration -> CLASS Identifier empty . EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> CLASS Identifier empty . EXTENDS type empty classBody
    (38) normalClassDeclaration -> CLASS Identifier empty . empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> CLASS Identifier empty . empty empty classBody
    (528) empty -> .

    EXTENDS         shift and go to state 353
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 354

state 240

    (46) enumDeclaration -> ENUM Identifier IMPLEMENTS . typeList enumBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 355
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 241

    (47) enumDeclaration -> ENUM Identifier empty . enumBody
    (48) enumBody -> . BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN
    (49) enumBody -> . BLPAREN enumConstants COMMA empty BRPAREN
    (50) enumBody -> . BLPAREN enumConstants empty enumBodyDeclarations BRPAREN
    (51) enumBody -> . BLPAREN enumConstants empty empty BRPAREN
    (52) enumBody -> . BLPAREN empty COMMA enumBodyDeclarations BRPAREN
    (53) enumBody -> . BLPAREN empty COMMA empty BRPAREN
    (54) enumBody -> . BLPAREN empty empty enumBodyDeclarations BRPAREN
    (55) enumBody -> . BLPAREN empty empty empty BRPAREN

    BLPAREN         shift and go to state 357

    enumBody                       shift and go to state 356

state 242

    (219) annotationTypeDeclaration -> AT INTERFACE Identifier . annotationTypeBody
    (220) annotationTypeBody -> . BLPAREN expt_22 BRPAREN
    (221) annotationTypeBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 359

    annotationTypeBody             shift and go to state 358

state 243

    (70) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters . EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters . empty interfaceBody
    (528) empty -> .

    EXTENDS         shift and go to state 360
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 361

state 244

    (72) normalInterfaceDeclaration -> INTERFACE Identifier empty . EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> INTERFACE Identifier empty . empty interfaceBody
    (528) empty -> .

    EXTENDS         shift and go to state 362
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 363

state 245

    (14) importDeclaration -> IMPORT empty qualifiedName empty SEMI .

    IMPORT          reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    SEMI            reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    PUBLIC          reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    PROTECTED       reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    PRIVATE         reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    ABSTRACT        reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    STATIC          reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    FINAL           reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    STRICTFP        reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    AT              reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    CLASS           reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    ENUM            reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    INTERFACE       reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)
    $end            reduce using rule 14 (importDeclaration -> IMPORT empty qualifiedName empty SEMI .)


state 246

    (13) importDeclaration -> IMPORT empty qualifiedName DOT MULT . SEMI

    SEMI            shift and go to state 364


state 247

    (12) importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .

    IMPORT          reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    SEMI            reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    PUBLIC          reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    PROTECTED       reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    PRIVATE         reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    ABSTRACT        reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    STATIC          reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    FINAL           reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    STRICTFP        reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    AT              reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    CLASS           reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    ENUM            reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    INTERFACE       reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)
    $end            reduce using rule 12 (importDeclaration -> IMPORT STATIC qualifiedName empty SEMI .)


state 248

    (11) importDeclaration -> IMPORT STATIC qualifiedName DOT MULT . SEMI

    SEMI            shift and go to state 365


state 249

    (368) primary -> VOID DOT CLASS .

    DOT             reduce using rule 368 (primary -> VOID DOT CLASS .)
    FLPAREN         reduce using rule 368 (primary -> VOID DOT CLASS .)
    OP_INC          reduce using rule 368 (primary -> VOID DOT CLASS .)
    OP_DEC          reduce using rule 368 (primary -> VOID DOT CLASS .)


state 250

    (440) expt_27 -> expt_27 OP_LOR . conditionalAndExpression
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    conditionalAndExpression       shift and go to state 366
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    exclusiveOrExpression          shift and go to state 102
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 251

    (439) expt_27 -> OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 439 (expt_27 -> OP_LOR conditionalAndExpression .)


state 252

    (156) type -> primitiveType . expt_11
    (157) type -> primitiveType . empty
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    OP_ARRAY        reduce using rule 528 (empty -> .)

    empty                          shift and go to state 367
    expt_11                        shift and go to state 368

state 253

    (325) instanceOfExpression -> relationalExpression INSTANCEOF type .

    OP_EQ           reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    OP_NE           reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    AND             reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    CARET           reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    VERTICAL        reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    OP_LAND         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    OP_LOR          reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    QUES            reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    EQUALS          reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_ADD         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_SUB         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_MUL         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_DIV         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_AND         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_OR          reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_XOR         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    ASS_MOD         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    LESS            reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    MORE            reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    COMMA           reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    BRPAREN         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    RPAREN          reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    COLON           reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    FRPAREN         reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)
    SEMI            reduce using rule 325 (instanceOfExpression -> relationalExpression INSTANCEOF type .)


state 254

    (414) expt_32 -> expt_32 expr_14 . instanceOfExpression
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 369
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 255

    (413) expt_32 -> expr_14 instanceOfExpression .

    OP_EQ           reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    OP_NE           reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    AND             reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    CARET           reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    VERTICAL        reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    OP_LAND         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    OP_LOR          reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    QUES            reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    RPAREN          reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    COMMA           reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    EQUALS          reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_ADD         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_SUB         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_MUL         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_DIV         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_AND         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_OR          reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_XOR         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    ASS_MOD         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    LESS            reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    MORE            reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    COLON           reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    FRPAREN         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    BRPAREN         reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)
    SEMI            reduce using rule 413 (expt_32 -> expr_14 instanceOfExpression .)


state 256

    (357) primary -> THIS empty identifierSuffix .

    DOT             reduce using rule 357 (primary -> THIS empty identifierSuffix .)
    FLPAREN         reduce using rule 357 (primary -> THIS empty identifierSuffix .)
    OP_INC          reduce using rule 357 (primary -> THIS empty identifierSuffix .)
    OP_DEC          reduce using rule 357 (primary -> THIS empty identifierSuffix .)


state 257

    (501) expr_19 -> FLPAREN . FRPAREN
    (477) expr_20 -> FLPAREN . expression FRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 370
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 371

state 258

    (358) primary -> THIS empty empty .

    DOT             reduce using rule 358 (primary -> THIS empty empty .)
    FLPAREN         reduce using rule 358 (primary -> THIS empty empty .)
    OP_INC          reduce using rule 358 (primary -> THIS empty empty .)
    OP_DEC          reduce using rule 358 (primary -> THIS empty empty .)


state 259

    (369) identifierSuffix -> expr_19 . DOT CLASS
    (502) expr_19 -> expr_19 . FLPAREN FRPAREN

    DOT             shift and go to state 373
    FLPAREN         shift and go to state 372


state 260

    (370) identifierSuffix -> expr_20 .
    (478) expr_20 -> expr_20 . FLPAREN expression FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             reduce using rule 370 (identifierSuffix -> expr_20 .)
    OP_INC          reduce using rule 370 (identifierSuffix -> expr_20 .)
    OP_DEC          reduce using rule 370 (identifierSuffix -> expr_20 .)
    FLPAREN         shift and go to state 374

  ! FLPAREN         [ reduce using rule 370 (identifierSuffix -> expr_20 .) ]


state 261

    (372) identifierSuffix -> DOT . CLASS
    (373) identifierSuffix -> DOT . explicitGenericInvocation
    (374) identifierSuffix -> DOT . THIS
    (375) identifierSuffix -> DOT . SUPER arguments
    (376) identifierSuffix -> DOT . NEW innerCreator
    (386) explicitGenericInvocation -> . nonWildcardTypeArguments Identifier arguments
    (387) nonWildcardTypeArguments -> . LESS typeList MORE

    CLASS           shift and go to state 380
    THIS            shift and go to state 375
    SUPER           shift and go to state 379
    NEW             shift and go to state 378
    LESS            shift and go to state 199

    explicitGenericInvocation      shift and go to state 376
    nonWildcardTypeArguments       shift and go to state 377

state 262

    (371) identifierSuffix -> arguments .

    DOT             reduce using rule 371 (identifierSuffix -> arguments .)
    FLPAREN         reduce using rule 371 (identifierSuffix -> arguments .)
    OP_INC          reduce using rule 371 (identifierSuffix -> arguments .)
    OP_DEC          reduce using rule 371 (identifierSuffix -> arguments .)


state 263

    (355) primary -> THIS expt_19 identifierSuffix .

    DOT             reduce using rule 355 (primary -> THIS expt_19 identifierSuffix .)
    FLPAREN         reduce using rule 355 (primary -> THIS expt_19 identifierSuffix .)
    OP_INC          reduce using rule 355 (primary -> THIS expt_19 identifierSuffix .)
    OP_DEC          reduce using rule 355 (primary -> THIS expt_19 identifierSuffix .)


state 264

    (356) primary -> THIS expt_19 empty .

    DOT             reduce using rule 356 (primary -> THIS expt_19 empty .)
    FLPAREN         reduce using rule 356 (primary -> THIS expt_19 empty .)
    OP_INC          reduce using rule 356 (primary -> THIS expt_19 empty .)
    OP_DEC          reduce using rule 356 (primary -> THIS expt_19 empty .)


state 265

    (474) expt_19 -> expt_19 DOT . Identifier
    (372) identifierSuffix -> DOT . CLASS
    (373) identifierSuffix -> DOT . explicitGenericInvocation
    (374) identifierSuffix -> DOT . THIS
    (375) identifierSuffix -> DOT . SUPER arguments
    (376) identifierSuffix -> DOT . NEW innerCreator
    (386) explicitGenericInvocation -> . nonWildcardTypeArguments Identifier arguments
    (387) nonWildcardTypeArguments -> . LESS typeList MORE

    Identifier      shift and go to state 142
    CLASS           shift and go to state 380
    THIS            shift and go to state 375
    SUPER           shift and go to state 379
    NEW             shift and go to state 378
    LESS            shift and go to state 199

    explicitGenericInvocation      shift and go to state 376
    nonWildcardTypeArguments       shift and go to state 377

state 266

    (437) expt_28 -> OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 437 (expt_28 -> OP_LAND inclusiveOrExpression .)


state 267

    (438) expt_28 -> expt_28 OP_LAND . inclusiveOrExpression
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 381
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    exclusiveOrExpression          shift and go to state 102
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 268

    (454) expt_20 -> expt_20 COMMA . elementValuePair
    (211) elementValuePair -> . Identifier EQUALS elementValue

    Identifier      shift and go to state 269

    elementValuePair               shift and go to state 382

state 269

    (211) elementValuePair -> Identifier . EQUALS elementValue

    EQUALS          shift and go to state 175


state 270

    (453) expt_20 -> COMMA elementValuePair .

    COMMA           reduce using rule 453 (expt_20 -> COMMA elementValuePair .)
    RPAREN          reduce using rule 453 (expt_20 -> COMMA elementValuePair .)


state 271

    (335) shiftOp -> LESS LESS .

    PLUS            reduce using rule 335 (shiftOp -> LESS LESS .)
    DASH            reduce using rule 335 (shiftOp -> LESS LESS .)
    OP_INC          reduce using rule 335 (shiftOp -> LESS LESS .)
    OP_DEC          reduce using rule 335 (shiftOp -> LESS LESS .)
    TILDE           reduce using rule 335 (shiftOp -> LESS LESS .)
    EXCLAMATION     reduce using rule 335 (shiftOp -> LESS LESS .)
    LPAREN          reduce using rule 335 (shiftOp -> LESS LESS .)
    THIS            reduce using rule 335 (shiftOp -> LESS LESS .)
    SUPER           reduce using rule 335 (shiftOp -> LESS LESS .)
    NEW             reduce using rule 335 (shiftOp -> LESS LESS .)
    Identifier      reduce using rule 335 (shiftOp -> LESS LESS .)
    VOID            reduce using rule 335 (shiftOp -> LESS LESS .)
    CharacterLiteral reduce using rule 335 (shiftOp -> LESS LESS .)
    StringLiteral   reduce using rule 335 (shiftOp -> LESS LESS .)
    NULL            reduce using rule 335 (shiftOp -> LESS LESS .)
    BOOLEAN         reduce using rule 335 (shiftOp -> LESS LESS .)
    CHAR            reduce using rule 335 (shiftOp -> LESS LESS .)
    BYTE            reduce using rule 335 (shiftOp -> LESS LESS .)
    SHORT           reduce using rule 335 (shiftOp -> LESS LESS .)
    INT             reduce using rule 335 (shiftOp -> LESS LESS .)
    LONG            reduce using rule 335 (shiftOp -> LESS LESS .)
    FLOAT           reduce using rule 335 (shiftOp -> LESS LESS .)
    DOUBLE          reduce using rule 335 (shiftOp -> LESS LESS .)
    NUMBER          reduce using rule 335 (shiftOp -> LESS LESS .)
    HEX_NUMBER      reduce using rule 335 (shiftOp -> LESS LESS .)
    LONG_NUMBER     reduce using rule 335 (shiftOp -> LESS LESS .)
    LONG_HEX_NUMBER reduce using rule 335 (shiftOp -> LESS LESS .)
    NON_INTEGER_1   reduce using rule 335 (shiftOp -> LESS LESS .)
    NON_INTEGER_2   reduce using rule 335 (shiftOp -> LESS LESS .)
    NON_INTEGER_3   reduce using rule 335 (shiftOp -> LESS LESS .)
    TRUE            reduce using rule 335 (shiftOp -> LESS LESS .)
    FALSE           reduce using rule 335 (shiftOp -> LESS LESS .)


state 272

    (402) expt_34 -> expt_34 shiftOp . additiveExpression
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    literal                        shift and go to state 109
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 383
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 273

    (401) expt_34 -> shiftOp additiveExpression .

    LESS            reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    MORE            reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    OP_EQ           reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    OP_NE           reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    AND             reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    CARET           reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    VERTICAL        reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    OP_LAND         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    OP_LOR          reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    QUES            reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    RPAREN          reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    COMMA           reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    EQUALS          reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_AND         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_OR          reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    COLON           reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    FRPAREN         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    BRPAREN         reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)
    SEMI            reduce using rule 401 (expt_34 -> shiftOp additiveExpression .)


state 274

    (336) shiftOp -> MORE MORE . MORE
    (337) shiftOp -> MORE MORE .

    MORE            shift and go to state 384
    PLUS            reduce using rule 337 (shiftOp -> MORE MORE .)
    DASH            reduce using rule 337 (shiftOp -> MORE MORE .)
    OP_INC          reduce using rule 337 (shiftOp -> MORE MORE .)
    OP_DEC          reduce using rule 337 (shiftOp -> MORE MORE .)
    TILDE           reduce using rule 337 (shiftOp -> MORE MORE .)
    EXCLAMATION     reduce using rule 337 (shiftOp -> MORE MORE .)
    LPAREN          reduce using rule 337 (shiftOp -> MORE MORE .)
    THIS            reduce using rule 337 (shiftOp -> MORE MORE .)
    SUPER           reduce using rule 337 (shiftOp -> MORE MORE .)
    NEW             reduce using rule 337 (shiftOp -> MORE MORE .)
    Identifier      reduce using rule 337 (shiftOp -> MORE MORE .)
    VOID            reduce using rule 337 (shiftOp -> MORE MORE .)
    CharacterLiteral reduce using rule 337 (shiftOp -> MORE MORE .)
    StringLiteral   reduce using rule 337 (shiftOp -> MORE MORE .)
    NULL            reduce using rule 337 (shiftOp -> MORE MORE .)
    BOOLEAN         reduce using rule 337 (shiftOp -> MORE MORE .)
    CHAR            reduce using rule 337 (shiftOp -> MORE MORE .)
    BYTE            reduce using rule 337 (shiftOp -> MORE MORE .)
    SHORT           reduce using rule 337 (shiftOp -> MORE MORE .)
    INT             reduce using rule 337 (shiftOp -> MORE MORE .)
    LONG            reduce using rule 337 (shiftOp -> MORE MORE .)
    FLOAT           reduce using rule 337 (shiftOp -> MORE MORE .)
    DOUBLE          reduce using rule 337 (shiftOp -> MORE MORE .)
    NUMBER          reduce using rule 337 (shiftOp -> MORE MORE .)
    HEX_NUMBER      reduce using rule 337 (shiftOp -> MORE MORE .)
    LONG_NUMBER     reduce using rule 337 (shiftOp -> MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 337 (shiftOp -> MORE MORE .)
    NON_INTEGER_1   reduce using rule 337 (shiftOp -> MORE MORE .)
    NON_INTEGER_2   reduce using rule 337 (shiftOp -> MORE MORE .)
    NON_INTEGER_3   reduce using rule 337 (shiftOp -> MORE MORE .)
    TRUE            reduce using rule 337 (shiftOp -> MORE MORE .)
    FALSE           reduce using rule 337 (shiftOp -> MORE MORE .)


state 275

    (211) elementValuePair -> Identifier EQUALS elementValue .

    COMMA           reduce using rule 211 (elementValuePair -> Identifier EQUALS elementValue .)
    RPAREN          reduce using rule 211 (elementValuePair -> Identifier EQUALS elementValue .)


state 276

    (364) primary -> Identifier empty identifierSuffix .

    DOT             reduce using rule 364 (primary -> Identifier empty identifierSuffix .)
    FLPAREN         reduce using rule 364 (primary -> Identifier empty identifierSuffix .)
    OP_INC          reduce using rule 364 (primary -> Identifier empty identifierSuffix .)
    OP_DEC          reduce using rule 364 (primary -> Identifier empty identifierSuffix .)


state 277

    (365) primary -> Identifier empty empty .

    DOT             reduce using rule 365 (primary -> Identifier empty empty .)
    FLPAREN         reduce using rule 365 (primary -> Identifier empty empty .)
    OP_INC          reduce using rule 365 (primary -> Identifier empty empty .)
    OP_DEC          reduce using rule 365 (primary -> Identifier empty empty .)


state 278

    (362) primary -> Identifier expt_19 identifierSuffix .

    DOT             reduce using rule 362 (primary -> Identifier expt_19 identifierSuffix .)
    FLPAREN         reduce using rule 362 (primary -> Identifier expt_19 identifierSuffix .)
    OP_INC          reduce using rule 362 (primary -> Identifier expt_19 identifierSuffix .)
    OP_DEC          reduce using rule 362 (primary -> Identifier expt_19 identifierSuffix .)


state 279

    (363) primary -> Identifier expt_19 empty .

    DOT             reduce using rule 363 (primary -> Identifier expt_19 empty .)
    FLPAREN         reduce using rule 363 (primary -> Identifier expt_19 empty .)
    OP_INC          reduce using rule 363 (primary -> Identifier expt_19 empty .)
    OP_DEC          reduce using rule 363 (primary -> Identifier expt_19 empty .)


state 280

    (409) expt_30 -> CARET andExpression .

    CARET           reduce using rule 409 (expt_30 -> CARET andExpression .)
    VERTICAL        reduce using rule 409 (expt_30 -> CARET andExpression .)
    OP_LAND         reduce using rule 409 (expt_30 -> CARET andExpression .)
    OP_LOR          reduce using rule 409 (expt_30 -> CARET andExpression .)
    QUES            reduce using rule 409 (expt_30 -> CARET andExpression .)
    RPAREN          reduce using rule 409 (expt_30 -> CARET andExpression .)
    COMMA           reduce using rule 409 (expt_30 -> CARET andExpression .)
    EQUALS          reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_ADD         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_SUB         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_MUL         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_DIV         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_AND         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_OR          reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_XOR         reduce using rule 409 (expt_30 -> CARET andExpression .)
    ASS_MOD         reduce using rule 409 (expt_30 -> CARET andExpression .)
    LESS            reduce using rule 409 (expt_30 -> CARET andExpression .)
    MORE            reduce using rule 409 (expt_30 -> CARET andExpression .)
    COLON           reduce using rule 409 (expt_30 -> CARET andExpression .)
    FRPAREN         reduce using rule 409 (expt_30 -> CARET andExpression .)
    BRPAREN         reduce using rule 409 (expt_30 -> CARET andExpression .)
    SEMI            reduce using rule 409 (expt_30 -> CARET andExpression .)


state 281

    (410) expt_30 -> expt_30 CARET . andExpression
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 385

state 282

    (217) elementValueArrayInitializer -> BLPAREN empty COMMA . BRPAREN

    BRPAREN         shift and go to state 386


state 283

    (218) elementValueArrayInitializer -> BLPAREN empty empty . BRPAREN

    BRPAREN         shift and go to state 387


state 284

    (215) elementValueArrayInitializer -> BLPAREN elementValue expt_21 . COMMA BRPAREN
    (216) elementValueArrayInitializer -> BLPAREN elementValue expt_21 . empty BRPAREN
    (452) expt_21 -> expt_21 . COMMA elementValue
    (528) empty -> .

    COMMA           shift and go to state 388
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 389

state 285

    (451) expt_21 -> COMMA . elementValue
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 132
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 390

state 286

    (411) expt_31 -> AND equalityExpression .

    AND             reduce using rule 411 (expt_31 -> AND equalityExpression .)
    CARET           reduce using rule 411 (expt_31 -> AND equalityExpression .)
    VERTICAL        reduce using rule 411 (expt_31 -> AND equalityExpression .)
    OP_LAND         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    OP_LOR          reduce using rule 411 (expt_31 -> AND equalityExpression .)
    QUES            reduce using rule 411 (expt_31 -> AND equalityExpression .)
    RPAREN          reduce using rule 411 (expt_31 -> AND equalityExpression .)
    COMMA           reduce using rule 411 (expt_31 -> AND equalityExpression .)
    EQUALS          reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_ADD         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_SUB         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_MUL         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_DIV         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_AND         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_OR          reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_XOR         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    ASS_MOD         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    LESS            reduce using rule 411 (expt_31 -> AND equalityExpression .)
    MORE            reduce using rule 411 (expt_31 -> AND equalityExpression .)
    COLON           reduce using rule 411 (expt_31 -> AND equalityExpression .)
    FRPAREN         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    BRPAREN         reduce using rule 411 (expt_31 -> AND equalityExpression .)
    SEMI            reduce using rule 411 (expt_31 -> AND equalityExpression .)


state 287

    (412) expt_31 -> expt_31 AND . equalityExpression
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 391
    primary                        shift and go to state 103
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 288

    (311) conditionalExpression -> conditionalOrExpression QUES expression . COLON expression

    COLON           shift and go to state 392


state 289

    (435) expt_29 -> VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 435 (expt_29 -> VERTICAL exclusiveOrExpression .)


state 290

    (436) expt_29 -> expt_29 VERTICAL . exclusiveOrExpression
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    exclusiveOrExpression          shift and go to state 393
    shiftExpression                shift and go to state 127
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98

state 291

    (393) selector -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 394


state 292

    (408) expt_37 -> expt_37 selector .

    OP_INC          reduce using rule 408 (expt_37 -> expt_37 selector .)
    OP_DEC          reduce using rule 408 (expt_37 -> expt_37 selector .)
    DOT             reduce using rule 408 (expt_37 -> expt_37 selector .)
    FLPAREN         reduce using rule 408 (expt_37 -> expt_37 selector .)


state 293

    (510) expr_17 -> OP_INC .

    MULT            reduce using rule 510 (expr_17 -> OP_INC .)
    SLASH           reduce using rule 510 (expr_17 -> OP_INC .)
    PERCENT         reduce using rule 510 (expr_17 -> OP_INC .)
    PLUS            reduce using rule 510 (expr_17 -> OP_INC .)
    DASH            reduce using rule 510 (expr_17 -> OP_INC .)
    LESS            reduce using rule 510 (expr_17 -> OP_INC .)
    MORE            reduce using rule 510 (expr_17 -> OP_INC .)
    INSTANCEOF      reduce using rule 510 (expr_17 -> OP_INC .)
    OP_EQ           reduce using rule 510 (expr_17 -> OP_INC .)
    OP_NE           reduce using rule 510 (expr_17 -> OP_INC .)
    AND             reduce using rule 510 (expr_17 -> OP_INC .)
    CARET           reduce using rule 510 (expr_17 -> OP_INC .)
    VERTICAL        reduce using rule 510 (expr_17 -> OP_INC .)
    OP_LAND         reduce using rule 510 (expr_17 -> OP_INC .)
    OP_LOR          reduce using rule 510 (expr_17 -> OP_INC .)
    QUES            reduce using rule 510 (expr_17 -> OP_INC .)
    RPAREN          reduce using rule 510 (expr_17 -> OP_INC .)
    COMMA           reduce using rule 510 (expr_17 -> OP_INC .)
    EQUALS          reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_ADD         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_SUB         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_MUL         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_DIV         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_AND         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_OR          reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_XOR         reduce using rule 510 (expr_17 -> OP_INC .)
    ASS_MOD         reduce using rule 510 (expr_17 -> OP_INC .)
    COLON           reduce using rule 510 (expr_17 -> OP_INC .)
    FRPAREN         reduce using rule 510 (expr_17 -> OP_INC .)
    BRPAREN         reduce using rule 510 (expr_17 -> OP_INC .)
    SEMI            reduce using rule 510 (expr_17 -> OP_INC .)


state 294

    (511) expr_17 -> OP_DEC .

    MULT            reduce using rule 511 (expr_17 -> OP_DEC .)
    SLASH           reduce using rule 511 (expr_17 -> OP_DEC .)
    PERCENT         reduce using rule 511 (expr_17 -> OP_DEC .)
    PLUS            reduce using rule 511 (expr_17 -> OP_DEC .)
    DASH            reduce using rule 511 (expr_17 -> OP_DEC .)
    LESS            reduce using rule 511 (expr_17 -> OP_DEC .)
    MORE            reduce using rule 511 (expr_17 -> OP_DEC .)
    INSTANCEOF      reduce using rule 511 (expr_17 -> OP_DEC .)
    OP_EQ           reduce using rule 511 (expr_17 -> OP_DEC .)
    OP_NE           reduce using rule 511 (expr_17 -> OP_DEC .)
    AND             reduce using rule 511 (expr_17 -> OP_DEC .)
    CARET           reduce using rule 511 (expr_17 -> OP_DEC .)
    VERTICAL        reduce using rule 511 (expr_17 -> OP_DEC .)
    OP_LAND         reduce using rule 511 (expr_17 -> OP_DEC .)
    OP_LOR          reduce using rule 511 (expr_17 -> OP_DEC .)
    QUES            reduce using rule 511 (expr_17 -> OP_DEC .)
    RPAREN          reduce using rule 511 (expr_17 -> OP_DEC .)
    COMMA           reduce using rule 511 (expr_17 -> OP_DEC .)
    EQUALS          reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_ADD         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_SUB         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_MUL         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_DIV         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_AND         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_OR          reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_XOR         reduce using rule 511 (expr_17 -> OP_DEC .)
    ASS_MOD         reduce using rule 511 (expr_17 -> OP_DEC .)
    COLON           reduce using rule 511 (expr_17 -> OP_DEC .)
    FRPAREN         reduce using rule 511 (expr_17 -> OP_DEC .)
    BRPAREN         reduce using rule 511 (expr_17 -> OP_DEC .)
    SEMI            reduce using rule 511 (expr_17 -> OP_DEC .)


state 295

    (350) unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .

    MULT            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    SLASH           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    PERCENT         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    PLUS            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    DASH            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    LESS            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    MORE            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    INSTANCEOF      reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    OP_EQ           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    OP_NE           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    AND             reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    CARET           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    VERTICAL        reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    OP_LAND         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    OP_LOR          reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    QUES            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    RPAREN          reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    COMMA           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    EQUALS          reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_ADD         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_SUB         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_MUL         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_DIV         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_AND         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_OR          reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_XOR         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    ASS_MOD         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    COLON           reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    FRPAREN         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    BRPAREN         reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)
    SEMI            reduce using rule 350 (unaryExpressionNotPlusMinus -> primary expt_37 expr_17 .)


state 296

    (351) unaryExpressionNotPlusMinus -> primary empty expr_17 .

    MULT            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    SLASH           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    PERCENT         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    PLUS            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    DASH            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    LESS            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    MORE            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    INSTANCEOF      reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    OP_EQ           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    OP_NE           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    AND             reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    CARET           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    VERTICAL        reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    OP_LAND         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    OP_LOR          reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    QUES            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    RPAREN          reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    COMMA           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    EQUALS          reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_ADD         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_SUB         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_MUL         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_DIV         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_AND         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_OR          reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_XOR         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    ASS_MOD         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    COLON           reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    FRPAREN         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    BRPAREN         reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)
    SEMI            reduce using rule 351 (unaryExpressionNotPlusMinus -> primary empty expr_17 .)


state 297

    (390) selector -> DOT THIS .

    OP_INC          reduce using rule 390 (selector -> DOT THIS .)
    OP_DEC          reduce using rule 390 (selector -> DOT THIS .)
    DOT             reduce using rule 390 (selector -> DOT THIS .)
    FLPAREN         reduce using rule 390 (selector -> DOT THIS .)


state 298

    (392) selector -> DOT NEW . innerCreator
    (381) innerCreator -> . nonWildcardTypeArguments Identifier classCreatorRest
    (382) innerCreator -> . empty Identifier classCreatorRest
    (387) nonWildcardTypeArguments -> . LESS typeList MORE
    (528) empty -> .

    LESS            shift and go to state 199
    Identifier      reduce using rule 528 (empty -> .)

    nonWildcardTypeArguments       shift and go to state 395
    innerCreator                   shift and go to state 397
    empty                          shift and go to state 396

state 299

    (388) selector -> DOT Identifier . arguments
    (389) selector -> DOT Identifier . empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN
    (528) empty -> .

    LPAREN          shift and go to state 236
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)

    arguments                      shift and go to state 398
    empty                          shift and go to state 399

state 300

    (391) selector -> DOT SUPER . superSuffix
    (394) superSuffix -> . arguments
    (395) superSuffix -> . DOT Identifier arguments
    (396) superSuffix -> . DOT Identifier empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    DOT             shift and go to state 234
    LPAREN          shift and go to state 236

    superSuffix                    shift and go to state 400
    arguments                      shift and go to state 235

state 301

    (387) nonWildcardTypeArguments -> LESS typeList . MORE

    MORE            shift and go to state 401


state 302

    (74) typeList -> type . expt_9
    (75) typeList -> type . empty
    (419) expt_9 -> . COMMA type
    (420) expt_9 -> . expt_9 COMMA type
    (528) empty -> .

    COMMA           shift and go to state 402
    MORE            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    expt_9                         shift and go to state 403
    empty                          shift and go to state 404

state 303

    (377) creator -> nonWildcardTypeArguments createdName . classCreatorRest
    (384) classCreatorRest -> . arguments classBody
    (385) classCreatorRest -> . arguments empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    classCreatorRest               shift and go to state 405
    arguments                      shift and go to state 309

state 304

    (172) typeArguments -> LESS . typeArgument expt_16 MORE
    (173) typeArguments -> LESS . typeArgument empty MORE
    (174) typeArgument -> . type
    (175) typeArgument -> . QUES expr_8 type
    (176) typeArgument -> . QUES empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    QUES            shift and go to state 408
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    typeArgument                   shift and go to state 407
    type                           shift and go to state 406

state 305

    (158) classOrInterfaceType -> Identifier typeArguments . expt_15
    (159) classOrInterfaceType -> Identifier typeArguments . empty
    (461) expt_15 -> . DOT Identifier typeArguments
    (462) expt_15 -> . expt_15 DOT Identifier typeArguments
    (528) empty -> .

    DOT             shift and go to state 409
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    OP_ARRAY        reduce using rule 528 (empty -> .)

    expt_15                        shift and go to state 411
    empty                          shift and go to state 410

state 306

    (160) classOrInterfaceType -> Identifier empty . expt_15
    (161) classOrInterfaceType -> Identifier empty . empty
    (461) expt_15 -> . DOT Identifier typeArguments
    (462) expt_15 -> . expt_15 DOT Identifier typeArguments
    (528) empty -> .

    DOT             shift and go to state 409
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_EQ           reduce using rule 528 (empty -> .)
    OP_NE           reduce using rule 528 (empty -> .)
    AND             reduce using rule 528 (empty -> .)
    CARET           reduce using rule 528 (empty -> .)
    VERTICAL        reduce using rule 528 (empty -> .)
    OP_LAND         reduce using rule 528 (empty -> .)
    OP_LOR          reduce using rule 528 (empty -> .)
    QUES            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    EQUALS          reduce using rule 528 (empty -> .)
    ASS_ADD         reduce using rule 528 (empty -> .)
    ASS_SUB         reduce using rule 528 (empty -> .)
    ASS_MUL         reduce using rule 528 (empty -> .)
    ASS_DIV         reduce using rule 528 (empty -> .)
    ASS_AND         reduce using rule 528 (empty -> .)
    ASS_OR          reduce using rule 528 (empty -> .)
    ASS_XOR         reduce using rule 528 (empty -> .)
    ASS_MOD         reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)
    COLON           reduce using rule 528 (empty -> .)
    FRPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    IMPLEMENTS      reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    OP_ARRAY        reduce using rule 528 (empty -> .)

    expt_15                        shift and go to state 413
    empty                          shift and go to state 412

state 307

    (383) arrayCreatorRest -> FLPAREN . expr_22
    (479) expr_22 -> . FRPAREN expt_11 arrayInitializer
    (480) expr_22 -> . expression FRPAREN expt_38 expt_11
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 414
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    expr_22                        shift and go to state 416
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 415

state 308

    (476) expr_21 -> classCreatorRest .

    DOT             reduce using rule 476 (expr_21 -> classCreatorRest .)
    FLPAREN         reduce using rule 476 (expr_21 -> classCreatorRest .)
    OP_INC          reduce using rule 476 (expr_21 -> classCreatorRest .)
    OP_DEC          reduce using rule 476 (expr_21 -> classCreatorRest .)


state 309

    (384) classCreatorRest -> arguments . classBody
    (385) classCreatorRest -> arguments . empty
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN
    (528) empty -> .

    BLPAREN         shift and go to state 418
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 419
    classBody                      shift and go to state 417

state 310

    (378) creator -> createdName expr_21 .

    DOT             reduce using rule 378 (creator -> createdName expr_21 .)
    FLPAREN         reduce using rule 378 (creator -> createdName expr_21 .)
    OP_INC          reduce using rule 378 (creator -> createdName expr_21 .)
    OP_DEC          reduce using rule 378 (creator -> createdName expr_21 .)


state 311

    (475) expr_21 -> arrayCreatorRest .

    DOT             reduce using rule 475 (expr_21 -> arrayCreatorRest .)
    FLPAREN         reduce using rule 475 (expr_21 -> arrayCreatorRest .)
    OP_INC          reduce using rule 475 (expr_21 -> arrayCreatorRest .)
    OP_DEC          reduce using rule 475 (expr_21 -> arrayCreatorRest .)


state 312

    (469) expt_11 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    EQUALS          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_NE           reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    AND             reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    CARET           reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    QUES            reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    LESS            reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    MORE            reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    COLON           reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    Identifier      reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    THROWS          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    DOT             reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_INC          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 469 (expt_11 -> FLPAREN FRPAREN .)


state 313

    (470) expt_11 -> expt_11 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 420


state 314

    (366) primary -> primitiveType expt_11 DOT . CLASS

    CLASS           shift and go to state 421


state 315

    (367) primary -> primitiveType empty DOT . CLASS

    CLASS           shift and go to state 422


state 316

    (404) expt_35 -> expt_35 expr_15 . multiplicativeExpression
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    multiplicativeExpression       shift and go to state 423
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 317

    (403) expt_35 -> expr_15 multiplicativeExpression .

    PLUS            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    DASH            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    LESS            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    MORE            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    OP_EQ           reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    OP_NE           reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    AND             reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    CARET           reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    VERTICAL        reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    OP_LAND         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    OP_LOR          reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    QUES            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    RPAREN          reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    COMMA           reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    EQUALS          reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_ADD         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_SUB         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_MUL         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_DIV         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_AND         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_OR          reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_XOR         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    ASS_MOD         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    COLON           reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    FRPAREN         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    BRPAREN         reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)
    SEMI            reduce using rule 403 (expt_35 -> expr_15 multiplicativeExpression .)


state 318

    (329) relationalOp -> LESS EQUALS .

    PLUS            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    DASH            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    OP_INC          reduce using rule 329 (relationalOp -> LESS EQUALS .)
    OP_DEC          reduce using rule 329 (relationalOp -> LESS EQUALS .)
    TILDE           reduce using rule 329 (relationalOp -> LESS EQUALS .)
    EXCLAMATION     reduce using rule 329 (relationalOp -> LESS EQUALS .)
    LPAREN          reduce using rule 329 (relationalOp -> LESS EQUALS .)
    THIS            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    SUPER           reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NEW             reduce using rule 329 (relationalOp -> LESS EQUALS .)
    Identifier      reduce using rule 329 (relationalOp -> LESS EQUALS .)
    VOID            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    CharacterLiteral reduce using rule 329 (relationalOp -> LESS EQUALS .)
    StringLiteral   reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NULL            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    BOOLEAN         reduce using rule 329 (relationalOp -> LESS EQUALS .)
    CHAR            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    BYTE            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    SHORT           reduce using rule 329 (relationalOp -> LESS EQUALS .)
    INT             reduce using rule 329 (relationalOp -> LESS EQUALS .)
    LONG            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    FLOAT           reduce using rule 329 (relationalOp -> LESS EQUALS .)
    DOUBLE          reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NUMBER          reduce using rule 329 (relationalOp -> LESS EQUALS .)
    HEX_NUMBER      reduce using rule 329 (relationalOp -> LESS EQUALS .)
    LONG_NUMBER     reduce using rule 329 (relationalOp -> LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 329 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 329 (relationalOp -> LESS EQUALS .)
    TRUE            reduce using rule 329 (relationalOp -> LESS EQUALS .)
    FALSE           reduce using rule 329 (relationalOp -> LESS EQUALS .)


state 319

    (416) expt_33 -> expt_33 relationalOp . shiftExpression
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    shiftExpression                shift and go to state 424
    literal                        shift and go to state 109
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    unaryExpression                shift and go to state 128
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 320

    (415) expt_33 -> relationalOp shiftExpression .

    LESS            reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    MORE            reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    OP_EQ           reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    OP_NE           reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    AND             reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    CARET           reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    VERTICAL        reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    OP_LAND         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    OP_LOR          reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    QUES            reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    RPAREN          reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    COMMA           reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    EQUALS          reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_AND         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_OR          reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    COLON           reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    FRPAREN         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    BRPAREN         reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)
    SEMI            reduce using rule 415 (expt_33 -> relationalOp shiftExpression .)


state 321

    (330) relationalOp -> MORE EQUALS .

    PLUS            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    DASH            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    OP_INC          reduce using rule 330 (relationalOp -> MORE EQUALS .)
    OP_DEC          reduce using rule 330 (relationalOp -> MORE EQUALS .)
    TILDE           reduce using rule 330 (relationalOp -> MORE EQUALS .)
    EXCLAMATION     reduce using rule 330 (relationalOp -> MORE EQUALS .)
    LPAREN          reduce using rule 330 (relationalOp -> MORE EQUALS .)
    THIS            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    SUPER           reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NEW             reduce using rule 330 (relationalOp -> MORE EQUALS .)
    Identifier      reduce using rule 330 (relationalOp -> MORE EQUALS .)
    VOID            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    CharacterLiteral reduce using rule 330 (relationalOp -> MORE EQUALS .)
    StringLiteral   reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NULL            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    BOOLEAN         reduce using rule 330 (relationalOp -> MORE EQUALS .)
    CHAR            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    BYTE            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    SHORT           reduce using rule 330 (relationalOp -> MORE EQUALS .)
    INT             reduce using rule 330 (relationalOp -> MORE EQUALS .)
    LONG            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    FLOAT           reduce using rule 330 (relationalOp -> MORE EQUALS .)
    DOUBLE          reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NUMBER          reduce using rule 330 (relationalOp -> MORE EQUALS .)
    HEX_NUMBER      reduce using rule 330 (relationalOp -> MORE EQUALS .)
    LONG_NUMBER     reduce using rule 330 (relationalOp -> MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 330 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 330 (relationalOp -> MORE EQUALS .)
    TRUE            reduce using rule 330 (relationalOp -> MORE EQUALS .)
    FALSE           reduce using rule 330 (relationalOp -> MORE EQUALS .)


state 322

    (406) expt_36 -> expt_36 expr_16 . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    unaryExpression                shift and go to state 425
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117

state 323

    (405) expt_36 -> expr_16 unaryExpression .

    MULT            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    SLASH           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    PERCENT         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    PLUS            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    DASH            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    LESS            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    MORE            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    INSTANCEOF      reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    OP_EQ           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    OP_NE           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    AND             reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    CARET           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    VERTICAL        reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    OP_LAND         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    OP_LOR          reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    QUES            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    RPAREN          reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    COMMA           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    EQUALS          reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_ADD         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_SUB         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_MUL         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_DIV         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_AND         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_OR          reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_XOR         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    ASS_MOD         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    COLON           reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    FRPAREN         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    BRPAREN         reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)
    SEMI            reduce using rule 405 (expt_36 -> expr_16 unaryExpression .)


state 324

    (155) type -> classOrInterfaceType empty .

    OP_ARRAY        reduce using rule 155 (type -> classOrInterfaceType empty .)
    Identifier      reduce using rule 155 (type -> classOrInterfaceType empty .)
    COMMA           reduce using rule 155 (type -> classOrInterfaceType empty .)
    BLPAREN         reduce using rule 155 (type -> classOrInterfaceType empty .)
    MORE            reduce using rule 155 (type -> classOrInterfaceType empty .)
    AND             reduce using rule 155 (type -> classOrInterfaceType empty .)
    IMPLEMENTS      reduce using rule 155 (type -> classOrInterfaceType empty .)
    RPAREN          reduce using rule 155 (type -> classOrInterfaceType empty .)
    OP_EQ           reduce using rule 155 (type -> classOrInterfaceType empty .)
    OP_NE           reduce using rule 155 (type -> classOrInterfaceType empty .)
    CARET           reduce using rule 155 (type -> classOrInterfaceType empty .)
    VERTICAL        reduce using rule 155 (type -> classOrInterfaceType empty .)
    OP_LAND         reduce using rule 155 (type -> classOrInterfaceType empty .)
    OP_LOR          reduce using rule 155 (type -> classOrInterfaceType empty .)
    QUES            reduce using rule 155 (type -> classOrInterfaceType empty .)
    EQUALS          reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_ADD         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_SUB         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_MUL         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_DIV         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_AND         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_OR          reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_XOR         reduce using rule 155 (type -> classOrInterfaceType empty .)
    ASS_MOD         reduce using rule 155 (type -> classOrInterfaceType empty .)
    LESS            reduce using rule 155 (type -> classOrInterfaceType empty .)
    COLON           reduce using rule 155 (type -> classOrInterfaceType empty .)
    FRPAREN         reduce using rule 155 (type -> classOrInterfaceType empty .)
    BRPAREN         reduce using rule 155 (type -> classOrInterfaceType empty .)
    SEMI            reduce using rule 155 (type -> classOrInterfaceType empty .)


state 325

    (154) type -> classOrInterfaceType expt_11 .
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    OP_ARRAY        reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    Identifier      reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    COMMA           reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    BLPAREN         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    MORE            reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    AND             reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    IMPLEMENTS      reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    RPAREN          reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    OP_EQ           reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    OP_NE           reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    CARET           reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    VERTICAL        reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    OP_LAND         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    OP_LOR          reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    QUES            reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    EQUALS          reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_ADD         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_SUB         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_MUL         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_DIV         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_AND         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_OR          reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_XOR         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    ASS_MOD         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    LESS            reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    COLON           reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    FRPAREN         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    BRPAREN         reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    SEMI            reduce using rule 154 (type -> classOrInterfaceType expt_11 .)
    FLPAREN         shift and go to state 313


state 326

    (303) assignmentOperator -> ASS_DIV .

    PLUS            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    DASH            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    OP_INC          reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    OP_DEC          reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    TILDE           reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    EXCLAMATION     reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    LPAREN          reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    THIS            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    SUPER           reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NEW             reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    Identifier      reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    VOID            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    CharacterLiteral reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    StringLiteral   reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NULL            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    BOOLEAN         reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    CHAR            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    BYTE            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    SHORT           reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    INT             reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    LONG            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    DOUBLE          reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NUMBER          reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    HEX_NUMBER      reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    LONG_NUMBER     reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    LONG_HEX_NUMBER reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_1   reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_2   reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_3   reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    TRUE            reduce using rule 303 (assignmentOperator -> ASS_DIV .)
    FALSE           reduce using rule 303 (assignmentOperator -> ASS_DIV .)


state 327

    (300) assignmentOperator -> ASS_ADD .

    PLUS            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    DASH            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    OP_INC          reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    TILDE           reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    EXCLAMATION     reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    LPAREN          reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    Identifier      reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    CharacterLiteral reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    StringLiteral   reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    INT             reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NUMBER          reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    HEX_NUMBER      reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    LONG_NUMBER     reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    LONG_HEX_NUMBER reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_1   reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_2   reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_3   reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    TRUE            reduce using rule 300 (assignmentOperator -> ASS_ADD .)
    FALSE           reduce using rule 300 (assignmentOperator -> ASS_ADD .)


state 328

    (306) assignmentOperator -> ASS_XOR .

    PLUS            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    DASH            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    OP_INC          reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    OP_DEC          reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    TILDE           reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    EXCLAMATION     reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    LPAREN          reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    THIS            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    SUPER           reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NEW             reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    Identifier      reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    VOID            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    CharacterLiteral reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    StringLiteral   reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NULL            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    BOOLEAN         reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    CHAR            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    BYTE            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    SHORT           reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    INT             reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    LONG            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    FLOAT           reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    DOUBLE          reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NUMBER          reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    HEX_NUMBER      reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    LONG_NUMBER     reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    LONG_HEX_NUMBER reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_1   reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_2   reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_3   reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    TRUE            reduce using rule 306 (assignmentOperator -> ASS_XOR .)
    FALSE           reduce using rule 306 (assignmentOperator -> ASS_XOR .)


state 329

    (308) assignmentOperator -> LESS . LESS EQUALS

    LESS            shift and go to state 426


state 330

    (305) assignmentOperator -> ASS_OR .

    PLUS            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    DASH            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    OP_INC          reduce using rule 305 (assignmentOperator -> ASS_OR .)
    OP_DEC          reduce using rule 305 (assignmentOperator -> ASS_OR .)
    TILDE           reduce using rule 305 (assignmentOperator -> ASS_OR .)
    EXCLAMATION     reduce using rule 305 (assignmentOperator -> ASS_OR .)
    LPAREN          reduce using rule 305 (assignmentOperator -> ASS_OR .)
    THIS            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    SUPER           reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NEW             reduce using rule 305 (assignmentOperator -> ASS_OR .)
    Identifier      reduce using rule 305 (assignmentOperator -> ASS_OR .)
    VOID            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    CharacterLiteral reduce using rule 305 (assignmentOperator -> ASS_OR .)
    StringLiteral   reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NULL            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    BOOLEAN         reduce using rule 305 (assignmentOperator -> ASS_OR .)
    CHAR            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    BYTE            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    SHORT           reduce using rule 305 (assignmentOperator -> ASS_OR .)
    INT             reduce using rule 305 (assignmentOperator -> ASS_OR .)
    LONG            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    FLOAT           reduce using rule 305 (assignmentOperator -> ASS_OR .)
    DOUBLE          reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NUMBER          reduce using rule 305 (assignmentOperator -> ASS_OR .)
    HEX_NUMBER      reduce using rule 305 (assignmentOperator -> ASS_OR .)
    LONG_NUMBER     reduce using rule 305 (assignmentOperator -> ASS_OR .)
    LONG_HEX_NUMBER reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_1   reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_2   reduce using rule 305 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_3   reduce using rule 305 (assignmentOperator -> ASS_OR .)
    TRUE            reduce using rule 305 (assignmentOperator -> ASS_OR .)
    FALSE           reduce using rule 305 (assignmentOperator -> ASS_OR .)


state 331

    (297) expression -> conditionalExpression assignmentOperator . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 427

state 332

    (299) assignmentOperator -> EQUALS .

    PLUS            reduce using rule 299 (assignmentOperator -> EQUALS .)
    DASH            reduce using rule 299 (assignmentOperator -> EQUALS .)
    OP_INC          reduce using rule 299 (assignmentOperator -> EQUALS .)
    OP_DEC          reduce using rule 299 (assignmentOperator -> EQUALS .)
    TILDE           reduce using rule 299 (assignmentOperator -> EQUALS .)
    EXCLAMATION     reduce using rule 299 (assignmentOperator -> EQUALS .)
    LPAREN          reduce using rule 299 (assignmentOperator -> EQUALS .)
    THIS            reduce using rule 299 (assignmentOperator -> EQUALS .)
    SUPER           reduce using rule 299 (assignmentOperator -> EQUALS .)
    NEW             reduce using rule 299 (assignmentOperator -> EQUALS .)
    Identifier      reduce using rule 299 (assignmentOperator -> EQUALS .)
    VOID            reduce using rule 299 (assignmentOperator -> EQUALS .)
    CharacterLiteral reduce using rule 299 (assignmentOperator -> EQUALS .)
    StringLiteral   reduce using rule 299 (assignmentOperator -> EQUALS .)
    NULL            reduce using rule 299 (assignmentOperator -> EQUALS .)
    BOOLEAN         reduce using rule 299 (assignmentOperator -> EQUALS .)
    CHAR            reduce using rule 299 (assignmentOperator -> EQUALS .)
    BYTE            reduce using rule 299 (assignmentOperator -> EQUALS .)
    SHORT           reduce using rule 299 (assignmentOperator -> EQUALS .)
    INT             reduce using rule 299 (assignmentOperator -> EQUALS .)
    LONG            reduce using rule 299 (assignmentOperator -> EQUALS .)
    FLOAT           reduce using rule 299 (assignmentOperator -> EQUALS .)
    DOUBLE          reduce using rule 299 (assignmentOperator -> EQUALS .)
    NUMBER          reduce using rule 299 (assignmentOperator -> EQUALS .)
    HEX_NUMBER      reduce using rule 299 (assignmentOperator -> EQUALS .)
    LONG_NUMBER     reduce using rule 299 (assignmentOperator -> EQUALS .)
    LONG_HEX_NUMBER reduce using rule 299 (assignmentOperator -> EQUALS .)
    NON_INTEGER_1   reduce using rule 299 (assignmentOperator -> EQUALS .)
    NON_INTEGER_2   reduce using rule 299 (assignmentOperator -> EQUALS .)
    NON_INTEGER_3   reduce using rule 299 (assignmentOperator -> EQUALS .)
    TRUE            reduce using rule 299 (assignmentOperator -> EQUALS .)
    FALSE           reduce using rule 299 (assignmentOperator -> EQUALS .)


state 333

    (302) assignmentOperator -> ASS_MUL .

    PLUS            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    DASH            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    OP_INC          reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    TILDE           reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    EXCLAMATION     reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    LPAREN          reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    Identifier      reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    CharacterLiteral reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    StringLiteral   reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    INT             reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NUMBER          reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    HEX_NUMBER      reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    LONG_NUMBER     reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    LONG_HEX_NUMBER reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_1   reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_2   reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_3   reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    TRUE            reduce using rule 302 (assignmentOperator -> ASS_MUL .)
    FALSE           reduce using rule 302 (assignmentOperator -> ASS_MUL .)


state 334

    (304) assignmentOperator -> ASS_AND .

    PLUS            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    DASH            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    OP_INC          reduce using rule 304 (assignmentOperator -> ASS_AND .)
    OP_DEC          reduce using rule 304 (assignmentOperator -> ASS_AND .)
    TILDE           reduce using rule 304 (assignmentOperator -> ASS_AND .)
    EXCLAMATION     reduce using rule 304 (assignmentOperator -> ASS_AND .)
    LPAREN          reduce using rule 304 (assignmentOperator -> ASS_AND .)
    THIS            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    SUPER           reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NEW             reduce using rule 304 (assignmentOperator -> ASS_AND .)
    Identifier      reduce using rule 304 (assignmentOperator -> ASS_AND .)
    VOID            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    CharacterLiteral reduce using rule 304 (assignmentOperator -> ASS_AND .)
    StringLiteral   reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NULL            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    BOOLEAN         reduce using rule 304 (assignmentOperator -> ASS_AND .)
    CHAR            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    BYTE            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    SHORT           reduce using rule 304 (assignmentOperator -> ASS_AND .)
    INT             reduce using rule 304 (assignmentOperator -> ASS_AND .)
    LONG            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    FLOAT           reduce using rule 304 (assignmentOperator -> ASS_AND .)
    DOUBLE          reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NUMBER          reduce using rule 304 (assignmentOperator -> ASS_AND .)
    HEX_NUMBER      reduce using rule 304 (assignmentOperator -> ASS_AND .)
    LONG_NUMBER     reduce using rule 304 (assignmentOperator -> ASS_AND .)
    LONG_HEX_NUMBER reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_1   reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_2   reduce using rule 304 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_3   reduce using rule 304 (assignmentOperator -> ASS_AND .)
    TRUE            reduce using rule 304 (assignmentOperator -> ASS_AND .)
    FALSE           reduce using rule 304 (assignmentOperator -> ASS_AND .)


state 335

    (301) assignmentOperator -> ASS_SUB .

    PLUS            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    DASH            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    OP_INC          reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    TILDE           reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    EXCLAMATION     reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    LPAREN          reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    Identifier      reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    CharacterLiteral reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    StringLiteral   reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    INT             reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NUMBER          reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    HEX_NUMBER      reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    LONG_NUMBER     reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    LONG_HEX_NUMBER reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_1   reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_2   reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_3   reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    TRUE            reduce using rule 301 (assignmentOperator -> ASS_SUB .)
    FALSE           reduce using rule 301 (assignmentOperator -> ASS_SUB .)


state 336

    (309) assignmentOperator -> MORE . MORE MORE EQUALS
    (310) assignmentOperator -> MORE . MORE EQUALS

    MORE            shift and go to state 428


state 337

    (298) expression -> conditionalExpression empty .

    RPAREN          reduce using rule 298 (expression -> conditionalExpression empty .)
    COMMA           reduce using rule 298 (expression -> conditionalExpression empty .)
    BRPAREN         reduce using rule 298 (expression -> conditionalExpression empty .)
    FRPAREN         reduce using rule 298 (expression -> conditionalExpression empty .)
    SEMI            reduce using rule 298 (expression -> conditionalExpression empty .)
    EQUALS          reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_ADD         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_SUB         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_MUL         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_DIV         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_AND         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_OR          reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_XOR         reduce using rule 298 (expression -> conditionalExpression empty .)
    ASS_MOD         reduce using rule 298 (expression -> conditionalExpression empty .)
    LESS            reduce using rule 298 (expression -> conditionalExpression empty .)
    MORE            reduce using rule 298 (expression -> conditionalExpression empty .)
    COLON           reduce using rule 298 (expression -> conditionalExpression empty .)


state 338

    (307) assignmentOperator -> ASS_MOD .

    PLUS            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    DASH            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    OP_INC          reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    OP_DEC          reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    TILDE           reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    EXCLAMATION     reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    LPAREN          reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    THIS            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    SUPER           reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NEW             reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    Identifier      reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    VOID            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    CharacterLiteral reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    StringLiteral   reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NULL            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    BOOLEAN         reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    CHAR            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    BYTE            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    SHORT           reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    INT             reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    LONG            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    FLOAT           reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    DOUBLE          reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NUMBER          reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    HEX_NUMBER      reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    LONG_NUMBER     reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    LONG_HEX_NUMBER reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_1   reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_2   reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_3   reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    TRUE            reduce using rule 307 (assignmentOperator -> ASS_MOD .)
    FALSE           reduce using rule 307 (assignmentOperator -> ASS_MOD .)


state 339

    (353) castExpression -> LPAREN expr_18 RPAREN . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 429
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 340

    (160) classOrInterfaceType -> Identifier empty . expt_15
    (161) classOrInterfaceType -> Identifier empty . empty
    (364) primary -> Identifier empty . identifierSuffix
    (365) primary -> Identifier empty . empty
    (461) expt_15 -> . DOT Identifier typeArguments
    (462) expt_15 -> . expt_15 DOT Identifier typeArguments
    (528) empty -> .
    (369) identifierSuffix -> . expr_19 DOT CLASS
    (370) identifierSuffix -> . expr_20
    (371) identifierSuffix -> . arguments
    (372) identifierSuffix -> . DOT CLASS
    (373) identifierSuffix -> . DOT explicitGenericInvocation
    (374) identifierSuffix -> . DOT THIS
    (375) identifierSuffix -> . DOT SUPER arguments
    (376) identifierSuffix -> . DOT NEW innerCreator
    (501) expr_19 -> . FLPAREN FRPAREN
    (502) expr_19 -> . expr_19 FLPAREN FRPAREN
    (477) expr_20 -> . FLPAREN expression FRPAREN
    (478) expr_20 -> . expr_20 FLPAREN expression FRPAREN
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for DOT resolved as shift
  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             shift and go to state 431
    RPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    FLPAREN         shift and go to state 257
    LPAREN          shift and go to state 236

  ! FLPAREN         [ reduce using rule 528 (empty -> .) ]
  ! DOT             [ reduce using rule 528 (empty -> .) ]

    identifierSuffix               shift and go to state 276
    expt_15                        shift and go to state 413
    expr_19                        shift and go to state 259
    expr_20                        shift and go to state 260
    empty                          shift and go to state 430
    arguments                      shift and go to state 262

state 341

    (156) type -> primitiveType expt_11 .
    (366) primary -> primitiveType expt_11 . DOT CLASS
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    RPAREN          reduce using rule 156 (type -> primitiveType expt_11 .)
    DOT             shift and go to state 314
    FLPAREN         shift and go to state 313


state 342

    (352) castExpression -> LPAREN primitiveType RPAREN . unaryExpression
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    unaryExpression                shift and go to state 432
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    parExpression                  shift and go to state 129
    primary                        shift and go to state 103
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88

state 343

    (157) type -> primitiveType empty .
    (367) primary -> primitiveType empty . DOT CLASS

    RPAREN          reduce using rule 157 (type -> primitiveType empty .)
    DOT             shift and go to state 315


state 344

    (292) parExpression -> LPAREN expression RPAREN .

    BLPAREN         reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    DOT             reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    FLPAREN         reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    OP_INC          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    OP_DEC          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    TRY             reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    SYNCHRONIZED    reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    THROW           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    Identifier      reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    DASH            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    SUPER           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NEW             reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    CharacterLiteral reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    StringLiteral   reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    BYTE            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    INT             reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    HEX_NUMBER      reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    LONG_NUMBER     reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    LONG_HEX_NUMBER reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_1   reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_2   reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_3   reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 292 (parExpression -> LPAREN expression RPAREN .)


state 345

    (395) superSuffix -> DOT Identifier . arguments
    (396) superSuffix -> DOT Identifier . empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN
    (528) empty -> .

    LPAREN          shift and go to state 236
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

    arguments                      shift and go to state 433
    empty                          shift and go to state 434

state 346

    (397) arguments -> LPAREN expressionList . RPAREN

    RPAREN          shift and go to state 435


state 347

    (398) arguments -> LPAREN empty . RPAREN

    RPAREN          shift and go to state 436


state 348

    (293) expressionList -> expression . expt_26
    (294) expressionList -> expression . empty
    (441) expt_26 -> . COMMA expression
    (442) expt_26 -> . expt_26 COMMA expression
    (528) empty -> .

    COMMA           shift and go to state 438
    RPAREN          reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    expt_26                        shift and go to state 437
    empty                          shift and go to state 439

state 349

    (40) typeParameters -> LESS typeParameter . expt_5 MORE
    (41) typeParameters -> LESS typeParameter . empty MORE
    (423) expt_5 -> . COMMA typeParameter
    (424) expt_5 -> . expt_5 COMMA typeParameter
    (528) empty -> .

    COMMA           shift and go to state 441
    MORE            reduce using rule 528 (empty -> .)

    expt_5                         shift and go to state 440
    empty                          shift and go to state 442

state 350

    (42) typeParameter -> Identifier . EXTENDS typeBound
    (43) typeParameter -> Identifier . empty
    (528) empty -> .

    EXTENDS         shift and go to state 443
    COMMA           reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 444

state 351

    (32) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS . type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS . type empty classBody
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 445

state 352

    (34) normalClassDeclaration -> CLASS Identifier typeParameters empty . IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> CLASS Identifier typeParameters empty . empty classBody
    (528) empty -> .

    IMPLEMENTS      shift and go to state 446
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 447

state 353

    (36) normalClassDeclaration -> CLASS Identifier empty EXTENDS . type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> CLASS Identifier empty EXTENDS . type empty classBody
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 448

state 354

    (38) normalClassDeclaration -> CLASS Identifier empty empty . IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> CLASS Identifier empty empty . empty classBody
    (528) empty -> .

    IMPLEMENTS      shift and go to state 449
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 450

state 355

    (46) enumDeclaration -> ENUM Identifier IMPLEMENTS typeList . enumBody
    (48) enumBody -> . BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN
    (49) enumBody -> . BLPAREN enumConstants COMMA empty BRPAREN
    (50) enumBody -> . BLPAREN enumConstants empty enumBodyDeclarations BRPAREN
    (51) enumBody -> . BLPAREN enumConstants empty empty BRPAREN
    (52) enumBody -> . BLPAREN empty COMMA enumBodyDeclarations BRPAREN
    (53) enumBody -> . BLPAREN empty COMMA empty BRPAREN
    (54) enumBody -> . BLPAREN empty empty enumBodyDeclarations BRPAREN
    (55) enumBody -> . BLPAREN empty empty empty BRPAREN

    BLPAREN         shift and go to state 357

    enumBody                       shift and go to state 451

state 356

    (47) enumDeclaration -> ENUM Identifier empty enumBody .

    SEMI            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    BRPAREN         reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    PUBLIC          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    PROTECTED       reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    PRIVATE         reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    STATIC          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    ABSTRACT        reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    FINAL           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NATIVE          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    SYNCHRONIZED    reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    TRANSIENT       reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    VOLATILE        reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    STRICTFP        reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    AT              reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    CLASS           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    INTERFACE       reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    ENUM            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    Identifier      reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    BOOLEAN         reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    CHAR            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    BYTE            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    SHORT           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    INT             reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    LONG            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    FLOAT           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    DOUBLE          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    $end            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    ASSERT          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    IF              reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    FOR             reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    WHILE           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    DO              reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    TRY             reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    SWITCH          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    RETURN          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    THROW           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    BREAK           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    CONTINUE        reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    BLPAREN         reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    PLUS            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    DASH            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    OP_INC          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    OP_DEC          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    TILDE           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    EXCLAMATION     reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    LPAREN          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    THIS            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    SUPER           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NEW             reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    VOID            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    CharacterLiteral reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    StringLiteral   reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NULL            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NUMBER          reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    HEX_NUMBER      reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    LONG_NUMBER     reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    LONG_HEX_NUMBER reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NON_INTEGER_1   reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NON_INTEGER_2   reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    NON_INTEGER_3   reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    TRUE            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    FALSE           reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    CASE            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    DEFAULT         reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)
    LESS            reduce using rule 47 (enumDeclaration -> ENUM Identifier empty enumBody .)


state 357

    (48) enumBody -> BLPAREN . enumConstants COMMA enumBodyDeclarations BRPAREN
    (49) enumBody -> BLPAREN . enumConstants COMMA empty BRPAREN
    (50) enumBody -> BLPAREN . enumConstants empty enumBodyDeclarations BRPAREN
    (51) enumBody -> BLPAREN . enumConstants empty empty BRPAREN
    (52) enumBody -> BLPAREN . empty COMMA enumBodyDeclarations BRPAREN
    (53) enumBody -> BLPAREN . empty COMMA empty BRPAREN
    (54) enumBody -> BLPAREN . empty empty enumBodyDeclarations BRPAREN
    (55) enumBody -> BLPAREN . empty empty empty BRPAREN
    (56) enumConstants -> . enumConstant expt_7
    (57) enumConstants -> . enumConstant empty
    (528) empty -> .
    (58) enumConstant -> . annotations Identifier arguments classBody
    (59) enumConstant -> . annotations Identifier arguments empty
    (60) enumConstant -> . annotations Identifier empty classBody
    (61) enumConstant -> . annotations Identifier empty empty
    (62) enumConstant -> . empty Identifier arguments classBody
    (63) enumConstant -> . empty Identifier arguments empty
    (64) enumConstant -> . empty Identifier empty classBody
    (65) enumConstant -> . empty Identifier empty empty
    (204) annotations -> . expr_10
    (512) expr_10 -> . annotation
    (513) expr_10 -> . expr_10 annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    COMMA           reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    AT              shift and go to state 5

    enumConstant                   shift and go to state 452
    annotation                     shift and go to state 3
    enumConstants                  shift and go to state 454
    expr_10                        shift and go to state 2
    annotations                    shift and go to state 453
    empty                          shift and go to state 455

state 358

    (219) annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .

    SEMI            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PUBLIC          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PROTECTED       reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PRIVATE         reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ABSTRACT        reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    STATIC          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FINAL           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    STRICTFP        reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    AT              reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CLASS           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ENUM            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    INTERFACE       reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    $end            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BRPAREN         reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ASSERT          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    IF              reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FOR             reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    WHILE           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DO              reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRY             reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SWITCH          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SYNCHRONIZED    reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    RETURN          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    THROW           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BREAK           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CONTINUE        reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    Identifier      reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BLPAREN         reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PLUS            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DASH            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    OP_INC          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    OP_DEC          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TILDE           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    EXCLAMATION     reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LPAREN          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    THIS            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SUPER           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NEW             reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    VOID            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CharacterLiteral reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    StringLiteral   reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NULL            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BOOLEAN         reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CHAR            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BYTE            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SHORT           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    INT             reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FLOAT           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DOUBLE          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NUMBER          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    HEX_NUMBER      reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG_NUMBER     reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG_HEX_NUMBER reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_1   reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_2   reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_3   reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRUE            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FALSE           reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CASE            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DEFAULT         reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NATIVE          reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRANSIENT       reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    VOLATILE        reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LESS            reduce using rule 219 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)


state 359

    (220) annotationTypeBody -> BLPAREN . expt_22 BRPAREN
    (221) annotationTypeBody -> BLPAREN . empty BRPAREN
    (449) expt_22 -> . annotationTypeElementDeclaration
    (450) expt_22 -> . expt_22 annotationTypeElementDeclaration
    (528) empty -> .
    (222) annotationTypeElementDeclaration -> . modifiers annotationTypeElementRest
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    STATIC          shift and go to state 459
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 469
    expt_4                         shift and go to state 462
    expt_22                        shift and go to state 466
    annotationTypeElementDeclaration shift and go to state 468
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 465

state 360

    (70) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS . typeList interfaceBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 474
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 361

    (71) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty . interfaceBody
    (78) interfaceBody -> . BLPAREN expt_10 BRPAREN
    (79) interfaceBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 476

    interfaceBody                  shift and go to state 475

state 362

    (72) normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS . typeList interfaceBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 477
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 363

    (73) normalInterfaceDeclaration -> INTERFACE Identifier empty empty . interfaceBody
    (78) interfaceBody -> . BLPAREN expt_10 BRPAREN
    (79) interfaceBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 476

    interfaceBody                  shift and go to state 478

state 364

    (13) importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .

    IMPORT          reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    SEMI            reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    PUBLIC          reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    PROTECTED       reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    PRIVATE         reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    ABSTRACT        reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    STATIC          reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    FINAL           reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    STRICTFP        reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    AT              reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    CLASS           reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    ENUM            reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    INTERFACE       reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)
    $end            reduce using rule 13 (importDeclaration -> IMPORT empty qualifiedName DOT MULT SEMI .)


state 365

    (11) importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .

    IMPORT          reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    SEMI            reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    PUBLIC          reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    PROTECTED       reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    PRIVATE         reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    ABSTRACT        reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    STATIC          reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    FINAL           reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    STRICTFP        reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    AT              reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    CLASS           reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    ENUM            reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    INTERFACE       reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)
    $end            reduce using rule 11 (importDeclaration -> IMPORT STATIC qualifiedName DOT MULT SEMI .)


state 366

    (440) expt_27 -> expt_27 OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 440 (expt_27 -> expt_27 OP_LOR conditionalAndExpression .)


state 367

    (157) type -> primitiveType empty .

    OP_ARRAY        reduce using rule 157 (type -> primitiveType empty .)
    Identifier      reduce using rule 157 (type -> primitiveType empty .)
    COMMA           reduce using rule 157 (type -> primitiveType empty .)
    BLPAREN         reduce using rule 157 (type -> primitiveType empty .)
    MORE            reduce using rule 157 (type -> primitiveType empty .)
    AND             reduce using rule 157 (type -> primitiveType empty .)
    IMPLEMENTS      reduce using rule 157 (type -> primitiveType empty .)
    OP_EQ           reduce using rule 157 (type -> primitiveType empty .)
    OP_NE           reduce using rule 157 (type -> primitiveType empty .)
    CARET           reduce using rule 157 (type -> primitiveType empty .)
    VERTICAL        reduce using rule 157 (type -> primitiveType empty .)
    OP_LAND         reduce using rule 157 (type -> primitiveType empty .)
    OP_LOR          reduce using rule 157 (type -> primitiveType empty .)
    QUES            reduce using rule 157 (type -> primitiveType empty .)
    RPAREN          reduce using rule 157 (type -> primitiveType empty .)
    EQUALS          reduce using rule 157 (type -> primitiveType empty .)
    ASS_ADD         reduce using rule 157 (type -> primitiveType empty .)
    ASS_SUB         reduce using rule 157 (type -> primitiveType empty .)
    ASS_MUL         reduce using rule 157 (type -> primitiveType empty .)
    ASS_DIV         reduce using rule 157 (type -> primitiveType empty .)
    ASS_AND         reduce using rule 157 (type -> primitiveType empty .)
    ASS_OR          reduce using rule 157 (type -> primitiveType empty .)
    ASS_XOR         reduce using rule 157 (type -> primitiveType empty .)
    ASS_MOD         reduce using rule 157 (type -> primitiveType empty .)
    LESS            reduce using rule 157 (type -> primitiveType empty .)
    COLON           reduce using rule 157 (type -> primitiveType empty .)
    FRPAREN         reduce using rule 157 (type -> primitiveType empty .)
    BRPAREN         reduce using rule 157 (type -> primitiveType empty .)
    SEMI            reduce using rule 157 (type -> primitiveType empty .)


state 368

    (156) type -> primitiveType expt_11 .
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    OP_ARRAY        reduce using rule 156 (type -> primitiveType expt_11 .)
    Identifier      reduce using rule 156 (type -> primitiveType expt_11 .)
    COMMA           reduce using rule 156 (type -> primitiveType expt_11 .)
    BLPAREN         reduce using rule 156 (type -> primitiveType expt_11 .)
    MORE            reduce using rule 156 (type -> primitiveType expt_11 .)
    AND             reduce using rule 156 (type -> primitiveType expt_11 .)
    IMPLEMENTS      reduce using rule 156 (type -> primitiveType expt_11 .)
    OP_EQ           reduce using rule 156 (type -> primitiveType expt_11 .)
    OP_NE           reduce using rule 156 (type -> primitiveType expt_11 .)
    CARET           reduce using rule 156 (type -> primitiveType expt_11 .)
    VERTICAL        reduce using rule 156 (type -> primitiveType expt_11 .)
    OP_LAND         reduce using rule 156 (type -> primitiveType expt_11 .)
    OP_LOR          reduce using rule 156 (type -> primitiveType expt_11 .)
    QUES            reduce using rule 156 (type -> primitiveType expt_11 .)
    RPAREN          reduce using rule 156 (type -> primitiveType expt_11 .)
    EQUALS          reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_ADD         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_SUB         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_MUL         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_DIV         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_AND         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_OR          reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_XOR         reduce using rule 156 (type -> primitiveType expt_11 .)
    ASS_MOD         reduce using rule 156 (type -> primitiveType expt_11 .)
    LESS            reduce using rule 156 (type -> primitiveType expt_11 .)
    COLON           reduce using rule 156 (type -> primitiveType expt_11 .)
    FRPAREN         reduce using rule 156 (type -> primitiveType expt_11 .)
    BRPAREN         reduce using rule 156 (type -> primitiveType expt_11 .)
    SEMI            reduce using rule 156 (type -> primitiveType expt_11 .)
    FLPAREN         shift and go to state 313


state 369

    (414) expt_32 -> expt_32 expr_14 instanceOfExpression .

    OP_EQ           reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    OP_NE           reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    AND             reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    CARET           reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    VERTICAL        reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    OP_LAND         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    OP_LOR          reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    QUES            reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    RPAREN          reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    COMMA           reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    EQUALS          reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_ADD         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_SUB         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_MUL         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_DIV         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_AND         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_OR          reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_XOR         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    ASS_MOD         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    LESS            reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    MORE            reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    COLON           reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    FRPAREN         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    BRPAREN         reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)
    SEMI            reduce using rule 414 (expt_32 -> expt_32 expr_14 instanceOfExpression .)


state 370

    (501) expr_19 -> FLPAREN FRPAREN .

    DOT             reduce using rule 501 (expr_19 -> FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 501 (expr_19 -> FLPAREN FRPAREN .)


state 371

    (477) expr_20 -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 479


state 372

    (502) expr_19 -> expr_19 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 480


state 373

    (369) identifierSuffix -> expr_19 DOT . CLASS

    CLASS           shift and go to state 481


state 374

    (478) expr_20 -> expr_20 FLPAREN . expression FRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 482

state 375

    (374) identifierSuffix -> DOT THIS .

    DOT             reduce using rule 374 (identifierSuffix -> DOT THIS .)
    FLPAREN         reduce using rule 374 (identifierSuffix -> DOT THIS .)
    OP_INC          reduce using rule 374 (identifierSuffix -> DOT THIS .)
    OP_DEC          reduce using rule 374 (identifierSuffix -> DOT THIS .)


state 376

    (373) identifierSuffix -> DOT explicitGenericInvocation .

    DOT             reduce using rule 373 (identifierSuffix -> DOT explicitGenericInvocation .)
    FLPAREN         reduce using rule 373 (identifierSuffix -> DOT explicitGenericInvocation .)
    OP_INC          reduce using rule 373 (identifierSuffix -> DOT explicitGenericInvocation .)
    OP_DEC          reduce using rule 373 (identifierSuffix -> DOT explicitGenericInvocation .)


state 377

    (386) explicitGenericInvocation -> nonWildcardTypeArguments . Identifier arguments

    Identifier      shift and go to state 483


state 378

    (376) identifierSuffix -> DOT NEW . innerCreator
    (381) innerCreator -> . nonWildcardTypeArguments Identifier classCreatorRest
    (382) innerCreator -> . empty Identifier classCreatorRest
    (387) nonWildcardTypeArguments -> . LESS typeList MORE
    (528) empty -> .

    LESS            shift and go to state 199
    Identifier      reduce using rule 528 (empty -> .)

    nonWildcardTypeArguments       shift and go to state 395
    innerCreator                   shift and go to state 484
    empty                          shift and go to state 396

state 379

    (375) identifierSuffix -> DOT SUPER . arguments
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 485

state 380

    (372) identifierSuffix -> DOT CLASS .

    DOT             reduce using rule 372 (identifierSuffix -> DOT CLASS .)
    FLPAREN         reduce using rule 372 (identifierSuffix -> DOT CLASS .)
    OP_INC          reduce using rule 372 (identifierSuffix -> DOT CLASS .)
    OP_DEC          reduce using rule 372 (identifierSuffix -> DOT CLASS .)


state 381

    (438) expt_28 -> expt_28 OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 438 (expt_28 -> expt_28 OP_LAND inclusiveOrExpression .)


state 382

    (454) expt_20 -> expt_20 COMMA elementValuePair .

    COMMA           reduce using rule 454 (expt_20 -> expt_20 COMMA elementValuePair .)
    RPAREN          reduce using rule 454 (expt_20 -> expt_20 COMMA elementValuePair .)


state 383

    (402) expt_34 -> expt_34 shiftOp additiveExpression .

    LESS            reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    MORE            reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    OP_EQ           reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    OP_NE           reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    AND             reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    CARET           reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    VERTICAL        reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    OP_LAND         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    OP_LOR          reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    QUES            reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    RPAREN          reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    COMMA           reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    EQUALS          reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_AND         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_OR          reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    COLON           reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    FRPAREN         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    BRPAREN         reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)
    SEMI            reduce using rule 402 (expt_34 -> expt_34 shiftOp additiveExpression .)


state 384

    (336) shiftOp -> MORE MORE MORE .

    PLUS            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    DASH            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    OP_INC          reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    OP_DEC          reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    TILDE           reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    EXCLAMATION     reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    LPAREN          reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    THIS            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    SUPER           reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NEW             reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    Identifier      reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    VOID            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    CharacterLiteral reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    StringLiteral   reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NULL            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    BOOLEAN         reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    CHAR            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    BYTE            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    SHORT           reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    INT             reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    LONG            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    FLOAT           reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    DOUBLE          reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NUMBER          reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    HEX_NUMBER      reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    LONG_NUMBER     reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_1   reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_2   reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_3   reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    TRUE            reduce using rule 336 (shiftOp -> MORE MORE MORE .)
    FALSE           reduce using rule 336 (shiftOp -> MORE MORE MORE .)


state 385

    (410) expt_30 -> expt_30 CARET andExpression .

    CARET           reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    VERTICAL        reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    OP_LAND         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    OP_LOR          reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    QUES            reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    RPAREN          reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    COMMA           reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    EQUALS          reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_ADD         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_SUB         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_MUL         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_DIV         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_AND         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_OR          reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_XOR         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    ASS_MOD         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    LESS            reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    MORE            reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    COLON           reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    FRPAREN         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    BRPAREN         reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)
    SEMI            reduce using rule 410 (expt_30 -> expt_30 CARET andExpression .)


state 386

    (217) elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN .

    COMMA           reduce using rule 217 (elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN .)
    RPAREN          reduce using rule 217 (elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN .)
    BRPAREN         reduce using rule 217 (elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN .)
    SEMI            reduce using rule 217 (elementValueArrayInitializer -> BLPAREN empty COMMA BRPAREN .)


state 387

    (218) elementValueArrayInitializer -> BLPAREN empty empty BRPAREN .

    COMMA           reduce using rule 218 (elementValueArrayInitializer -> BLPAREN empty empty BRPAREN .)
    RPAREN          reduce using rule 218 (elementValueArrayInitializer -> BLPAREN empty empty BRPAREN .)
    BRPAREN         reduce using rule 218 (elementValueArrayInitializer -> BLPAREN empty empty BRPAREN .)
    SEMI            reduce using rule 218 (elementValueArrayInitializer -> BLPAREN empty empty BRPAREN .)


state 388

    (215) elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA . BRPAREN
    (452) expt_21 -> expt_21 COMMA . elementValue
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BRPAREN         shift and go to state 486
    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 132
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 487

state 389

    (216) elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty . BRPAREN

    BRPAREN         shift and go to state 488


state 390

    (451) expt_21 -> COMMA elementValue .

    COMMA           reduce using rule 451 (expt_21 -> COMMA elementValue .)
    BRPAREN         reduce using rule 451 (expt_21 -> COMMA elementValue .)


state 391

    (412) expt_31 -> expt_31 AND equalityExpression .

    AND             reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    CARET           reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    VERTICAL        reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    OP_LAND         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    OP_LOR          reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    QUES            reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    RPAREN          reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    COMMA           reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    EQUALS          reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_ADD         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_SUB         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_MUL         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_DIV         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_AND         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_OR          reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_XOR         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    ASS_MOD         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    LESS            reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    MORE            reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    COLON           reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    FRPAREN         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    BRPAREN         reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)
    SEMI            reduce using rule 412 (expt_31 -> expt_31 AND equalityExpression .)


state 392

    (311) conditionalExpression -> conditionalOrExpression QUES expression COLON . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 489

state 393

    (436) expt_29 -> expt_29 VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 436 (expt_29 -> expt_29 VERTICAL exclusiveOrExpression .)


state 394

    (393) selector -> FLPAREN expression FRPAREN .

    OP_INC          reduce using rule 393 (selector -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 393 (selector -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 393 (selector -> FLPAREN expression FRPAREN .)
    FLPAREN         reduce using rule 393 (selector -> FLPAREN expression FRPAREN .)


state 395

    (381) innerCreator -> nonWildcardTypeArguments . Identifier classCreatorRest

    Identifier      shift and go to state 490


state 396

    (382) innerCreator -> empty . Identifier classCreatorRest

    Identifier      shift and go to state 491


state 397

    (392) selector -> DOT NEW innerCreator .

    OP_INC          reduce using rule 392 (selector -> DOT NEW innerCreator .)
    OP_DEC          reduce using rule 392 (selector -> DOT NEW innerCreator .)
    DOT             reduce using rule 392 (selector -> DOT NEW innerCreator .)
    FLPAREN         reduce using rule 392 (selector -> DOT NEW innerCreator .)


state 398

    (388) selector -> DOT Identifier arguments .

    OP_INC          reduce using rule 388 (selector -> DOT Identifier arguments .)
    OP_DEC          reduce using rule 388 (selector -> DOT Identifier arguments .)
    DOT             reduce using rule 388 (selector -> DOT Identifier arguments .)
    FLPAREN         reduce using rule 388 (selector -> DOT Identifier arguments .)


state 399

    (389) selector -> DOT Identifier empty .

    OP_INC          reduce using rule 389 (selector -> DOT Identifier empty .)
    OP_DEC          reduce using rule 389 (selector -> DOT Identifier empty .)
    DOT             reduce using rule 389 (selector -> DOT Identifier empty .)
    FLPAREN         reduce using rule 389 (selector -> DOT Identifier empty .)


state 400

    (391) selector -> DOT SUPER superSuffix .

    OP_INC          reduce using rule 391 (selector -> DOT SUPER superSuffix .)
    OP_DEC          reduce using rule 391 (selector -> DOT SUPER superSuffix .)
    DOT             reduce using rule 391 (selector -> DOT SUPER superSuffix .)
    FLPAREN         reduce using rule 391 (selector -> DOT SUPER superSuffix .)


state 401

    (387) nonWildcardTypeArguments -> LESS typeList MORE .

    THIS            reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    SUPER           reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    Identifier      reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    BOOLEAN         reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    CHAR            reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    BYTE            reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    SHORT           reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    INT             reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    LONG            reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    FLOAT           reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)
    DOUBLE          reduce using rule 387 (nonWildcardTypeArguments -> LESS typeList MORE .)


state 402

    (419) expt_9 -> COMMA . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 492

state 403

    (74) typeList -> type expt_9 .
    (420) expt_9 -> expt_9 . COMMA type

    BLPAREN         reduce using rule 74 (typeList -> type expt_9 .)
    MORE            reduce using rule 74 (typeList -> type expt_9 .)
    COMMA           shift and go to state 493


state 404

    (75) typeList -> type empty .

    BLPAREN         reduce using rule 75 (typeList -> type empty .)
    MORE            reduce using rule 75 (typeList -> type empty .)


state 405

    (377) creator -> nonWildcardTypeArguments createdName classCreatorRest .

    DOT             reduce using rule 377 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    FLPAREN         reduce using rule 377 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    OP_INC          reduce using rule 377 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    OP_DEC          reduce using rule 377 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)


state 406

    (174) typeArgument -> type .

    MORE            reduce using rule 174 (typeArgument -> type .)
    COMMA           reduce using rule 174 (typeArgument -> type .)


state 407

    (172) typeArguments -> LESS typeArgument . expt_16 MORE
    (173) typeArguments -> LESS typeArgument . empty MORE
    (455) expt_16 -> . COMMA typeArgument
    (456) expt_16 -> . expt_16 COMMA typeArgument
    (528) empty -> .

    COMMA           shift and go to state 495
    MORE            reduce using rule 528 (empty -> .)

    expt_16                        shift and go to state 494
    empty                          shift and go to state 496

state 408

    (175) typeArgument -> QUES . expr_8 type
    (176) typeArgument -> QUES . empty
    (481) expr_8 -> . EXTENDS
    (482) expr_8 -> . SUPER
    (528) empty -> .

    EXTENDS         shift and go to state 498
    SUPER           shift and go to state 497
    COMMA           reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 500
    expr_8                         shift and go to state 499

state 409

    (461) expt_15 -> DOT . Identifier typeArguments

    Identifier      shift and go to state 501


state 410

    (159) classOrInterfaceType -> Identifier typeArguments empty .

    FLPAREN         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    COMMA           reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    BLPAREN         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    Identifier      reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    MORE            reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    IMPLEMENTS      reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    LPAREN          reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    OP_EQ           reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    OP_NE           reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    AND             reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    CARET           reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    VERTICAL        reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    OP_LAND         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    OP_LOR          reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    QUES            reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    RPAREN          reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    EQUALS          reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_ADD         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_SUB         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_MUL         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_DIV         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_AND         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_OR          reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_XOR         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    ASS_MOD         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    LESS            reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    COLON           reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    FRPAREN         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    BRPAREN         reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    SEMI            reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)
    OP_ARRAY        reduce using rule 159 (classOrInterfaceType -> Identifier typeArguments empty .)


state 411

    (158) classOrInterfaceType -> Identifier typeArguments expt_15 .
    (462) expt_15 -> expt_15 . DOT Identifier typeArguments

    FLPAREN         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    COMMA           reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    BLPAREN         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    Identifier      reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    MORE            reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    IMPLEMENTS      reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    LPAREN          reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    OP_EQ           reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    OP_NE           reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    AND             reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    CARET           reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    VERTICAL        reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    OP_LAND         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    OP_LOR          reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    QUES            reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    RPAREN          reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    EQUALS          reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_ADD         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_SUB         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_MUL         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_DIV         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_AND         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_OR          reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_XOR         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    ASS_MOD         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    LESS            reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    COLON           reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    FRPAREN         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    BRPAREN         reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    SEMI            reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    OP_ARRAY        reduce using rule 158 (classOrInterfaceType -> Identifier typeArguments expt_15 .)
    DOT             shift and go to state 502


state 412

    (161) classOrInterfaceType -> Identifier empty empty .

    FLPAREN         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    COMMA           reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    BLPAREN         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    Identifier      reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    MORE            reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    IMPLEMENTS      reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    LPAREN          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    OP_EQ           reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    OP_NE           reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    AND             reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    CARET           reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    VERTICAL        reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    OP_LAND         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    OP_LOR          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    QUES            reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    RPAREN          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    EQUALS          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_ADD         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_SUB         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_MUL         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_DIV         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_AND         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_OR          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_XOR         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    ASS_MOD         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    LESS            reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    COLON           reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    FRPAREN         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    BRPAREN         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    SEMI            reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    OP_ARRAY        reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)


state 413

    (160) classOrInterfaceType -> Identifier empty expt_15 .
    (462) expt_15 -> expt_15 . DOT Identifier typeArguments

    FLPAREN         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    COMMA           reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    BLPAREN         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    Identifier      reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    MORE            reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    IMPLEMENTS      reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    LPAREN          reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    OP_EQ           reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    OP_NE           reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    AND             reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    CARET           reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    VERTICAL        reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    OP_LAND         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    OP_LOR          reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    QUES            reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    RPAREN          reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    EQUALS          reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_ADD         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_SUB         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_MUL         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_DIV         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_AND         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_OR          reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_XOR         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    ASS_MOD         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    LESS            reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    COLON           reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    FRPAREN         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    BRPAREN         reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    SEMI            reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    OP_ARRAY        reduce using rule 160 (classOrInterfaceType -> Identifier empty expt_15 .)
    DOT             shift and go to state 502


state 414

    (479) expr_22 -> FRPAREN . expt_11 arrayInitializer
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN

    FLPAREN         shift and go to state 207

    expt_11                        shift and go to state 503

state 415

    (480) expr_22 -> expression . FRPAREN expt_38 expt_11

    FRPAREN         shift and go to state 504


state 416

    (383) arrayCreatorRest -> FLPAREN expr_22 .

    DOT             reduce using rule 383 (arrayCreatorRest -> FLPAREN expr_22 .)
    FLPAREN         reduce using rule 383 (arrayCreatorRest -> FLPAREN expr_22 .)
    OP_INC          reduce using rule 383 (arrayCreatorRest -> FLPAREN expr_22 .)
    OP_DEC          reduce using rule 383 (arrayCreatorRest -> FLPAREN expr_22 .)


state 417

    (384) classCreatorRest -> arguments classBody .

    OP_INC          reduce using rule 384 (classCreatorRest -> arguments classBody .)
    OP_DEC          reduce using rule 384 (classCreatorRest -> arguments classBody .)
    DOT             reduce using rule 384 (classCreatorRest -> arguments classBody .)
    FLPAREN         reduce using rule 384 (classCreatorRest -> arguments classBody .)


state 418

    (76) classBody -> BLPAREN . expt_8 BRPAREN
    (77) classBody -> BLPAREN . empty BRPAREN
    (417) expt_8 -> . classBodyDeclaration
    (418) expt_8 -> . expt_8 classBodyDeclaration
    (528) empty -> .
    (80) classBodyDeclaration -> . SEMI
    (81) classBodyDeclaration -> . STATIC block
    (82) classBodyDeclaration -> . empty block
    (83) classBodyDeclaration -> . modifiers memberDecl
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    SEMI            shift and go to state 507
    STATIC          shift and go to state 505
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 510
    expt_8                         shift and go to state 506
    expt_4                         shift and go to state 462
    classBodyDeclaration           shift and go to state 509
    empty                          shift and go to state 508
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467

state 419

    (385) classCreatorRest -> arguments empty .

    OP_INC          reduce using rule 385 (classCreatorRest -> arguments empty .)
    OP_DEC          reduce using rule 385 (classCreatorRest -> arguments empty .)
    DOT             reduce using rule 385 (classCreatorRest -> arguments empty .)
    FLPAREN         reduce using rule 385 (classCreatorRest -> arguments empty .)


state 420

    (470) expt_11 -> expt_11 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    EQUALS          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_NE           reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    AND             reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    CARET           reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    QUES            reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    COMMA           reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    LESS            reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    MORE            reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    COLON           reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    SEMI            reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    Identifier      reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    THROWS          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    DOT             reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_INC          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 470 (expt_11 -> expt_11 FLPAREN FRPAREN .)


state 421

    (366) primary -> primitiveType expt_11 DOT CLASS .

    DOT             reduce using rule 366 (primary -> primitiveType expt_11 DOT CLASS .)
    FLPAREN         reduce using rule 366 (primary -> primitiveType expt_11 DOT CLASS .)
    OP_INC          reduce using rule 366 (primary -> primitiveType expt_11 DOT CLASS .)
    OP_DEC          reduce using rule 366 (primary -> primitiveType expt_11 DOT CLASS .)


state 422

    (367) primary -> primitiveType empty DOT CLASS .

    DOT             reduce using rule 367 (primary -> primitiveType empty DOT CLASS .)
    FLPAREN         reduce using rule 367 (primary -> primitiveType empty DOT CLASS .)
    OP_INC          reduce using rule 367 (primary -> primitiveType empty DOT CLASS .)
    OP_DEC          reduce using rule 367 (primary -> primitiveType empty DOT CLASS .)


state 423

    (404) expt_35 -> expt_35 expr_15 multiplicativeExpression .

    PLUS            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    DASH            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    LESS            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    MORE            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    OP_EQ           reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    OP_NE           reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    AND             reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    CARET           reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    VERTICAL        reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    OP_LAND         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    OP_LOR          reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    QUES            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    RPAREN          reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    COMMA           reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    EQUALS          reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_ADD         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_SUB         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_MUL         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_DIV         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_AND         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_OR          reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_XOR         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    ASS_MOD         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    COLON           reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    FRPAREN         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    BRPAREN         reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)
    SEMI            reduce using rule 404 (expt_35 -> expt_35 expr_15 multiplicativeExpression .)


state 424

    (416) expt_33 -> expt_33 relationalOp shiftExpression .

    LESS            reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    MORE            reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    OP_EQ           reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    OP_NE           reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    AND             reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    CARET           reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    VERTICAL        reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    OP_LAND         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    OP_LOR          reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    QUES            reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    RPAREN          reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    COMMA           reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    EQUALS          reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_AND         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_OR          reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    COLON           reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    FRPAREN         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    BRPAREN         reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)
    SEMI            reduce using rule 416 (expt_33 -> expt_33 relationalOp shiftExpression .)


state 425

    (406) expt_36 -> expt_36 expr_16 unaryExpression .

    MULT            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    SLASH           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    PERCENT         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    PLUS            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    DASH            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    LESS            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    MORE            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    INSTANCEOF      reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    OP_EQ           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    OP_NE           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    AND             reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    CARET           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    VERTICAL        reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    OP_LAND         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    OP_LOR          reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    QUES            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    RPAREN          reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    COMMA           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    EQUALS          reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_ADD         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_SUB         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_MUL         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_DIV         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_AND         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_OR          reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_XOR         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    ASS_MOD         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    COLON           reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    FRPAREN         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    BRPAREN         reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)
    SEMI            reduce using rule 406 (expt_36 -> expt_36 expr_16 unaryExpression .)


state 426

    (308) assignmentOperator -> LESS LESS . EQUALS

    EQUALS          shift and go to state 511


state 427

    (297) expression -> conditionalExpression assignmentOperator expression .

    RPAREN          reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    COMMA           reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    BRPAREN         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    FRPAREN         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    SEMI            reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    EQUALS          reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_ADD         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_SUB         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_MUL         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_DIV         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_AND         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_OR          reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_XOR         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    ASS_MOD         reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    LESS            reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    MORE            reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)
    COLON           reduce using rule 297 (expression -> conditionalExpression assignmentOperator expression .)


state 428

    (309) assignmentOperator -> MORE MORE . MORE EQUALS
    (310) assignmentOperator -> MORE MORE . EQUALS

    MORE            shift and go to state 513
    EQUALS          shift and go to state 512


state 429

    (353) castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .

    MULT            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    AND             reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 353 (castExpression -> LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus .)


state 430

    (161) classOrInterfaceType -> Identifier empty empty .
    (365) primary -> Identifier empty empty .

  ! reduce/reduce conflict for FLPAREN resolved using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    FLPAREN         reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    RPAREN          reduce using rule 161 (classOrInterfaceType -> Identifier empty empty .)
    DOT             reduce using rule 365 (primary -> Identifier empty empty .)
    OP_INC          reduce using rule 365 (primary -> Identifier empty empty .)
    OP_DEC          reduce using rule 365 (primary -> Identifier empty empty .)

  ! FLPAREN         [ reduce using rule 365 (primary -> Identifier empty empty .) ]


state 431

    (461) expt_15 -> DOT . Identifier typeArguments
    (372) identifierSuffix -> DOT . CLASS
    (373) identifierSuffix -> DOT . explicitGenericInvocation
    (374) identifierSuffix -> DOT . THIS
    (375) identifierSuffix -> DOT . SUPER arguments
    (376) identifierSuffix -> DOT . NEW innerCreator
    (386) explicitGenericInvocation -> . nonWildcardTypeArguments Identifier arguments
    (387) nonWildcardTypeArguments -> . LESS typeList MORE

    Identifier      shift and go to state 501
    CLASS           shift and go to state 380
    THIS            shift and go to state 375
    SUPER           shift and go to state 379
    NEW             shift and go to state 378
    LESS            shift and go to state 199

    explicitGenericInvocation      shift and go to state 376
    nonWildcardTypeArguments       shift and go to state 377

state 432

    (352) castExpression -> LPAREN primitiveType RPAREN unaryExpression .

    MULT            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SLASH           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PERCENT         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PLUS            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    DASH            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    LESS            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    MORE            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    INSTANCEOF      reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_EQ           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_NE           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    AND             reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    CARET           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    VERTICAL        reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LAND         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LOR          reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    QUES            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COMMA           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    EQUALS          reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_ADD         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_SUB         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MUL         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_DIV         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_AND         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_OR          reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_XOR         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MOD         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SEMI            reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    FRPAREN         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    RPAREN          reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COLON           reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    BRPAREN         reduce using rule 352 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)


state 433

    (395) superSuffix -> DOT Identifier arguments .

    DOT             reduce using rule 395 (superSuffix -> DOT Identifier arguments .)
    FLPAREN         reduce using rule 395 (superSuffix -> DOT Identifier arguments .)
    OP_INC          reduce using rule 395 (superSuffix -> DOT Identifier arguments .)
    OP_DEC          reduce using rule 395 (superSuffix -> DOT Identifier arguments .)


state 434

    (396) superSuffix -> DOT Identifier empty .

    DOT             reduce using rule 396 (superSuffix -> DOT Identifier empty .)
    FLPAREN         reduce using rule 396 (superSuffix -> DOT Identifier empty .)
    OP_INC          reduce using rule 396 (superSuffix -> DOT Identifier empty .)
    OP_DEC          reduce using rule 396 (superSuffix -> DOT Identifier empty .)


state 435

    (397) arguments -> LPAREN expressionList RPAREN .

    DOT             reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    FLPAREN         reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    OP_INC          reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    OP_DEC          reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    SEMI            reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    BLPAREN         reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    COMMA           reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)
    BRPAREN         reduce using rule 397 (arguments -> LPAREN expressionList RPAREN .)


state 436

    (398) arguments -> LPAREN empty RPAREN .

    DOT             reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    FLPAREN         reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    OP_INC          reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    OP_DEC          reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    SEMI            reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    BLPAREN         reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    COMMA           reduce using rule 398 (arguments -> LPAREN empty RPAREN .)
    BRPAREN         reduce using rule 398 (arguments -> LPAREN empty RPAREN .)


state 437

    (293) expressionList -> expression expt_26 .
    (442) expt_26 -> expt_26 . COMMA expression

    SEMI            reduce using rule 293 (expressionList -> expression expt_26 .)
    RPAREN          reduce using rule 293 (expressionList -> expression expt_26 .)
    COMMA           shift and go to state 514


state 438

    (441) expt_26 -> COMMA . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 515

state 439

    (294) expressionList -> expression empty .

    SEMI            reduce using rule 294 (expressionList -> expression empty .)
    RPAREN          reduce using rule 294 (expressionList -> expression empty .)


state 440

    (40) typeParameters -> LESS typeParameter expt_5 . MORE
    (424) expt_5 -> expt_5 . COMMA typeParameter

    MORE            shift and go to state 516
    COMMA           shift and go to state 517


state 441

    (423) expt_5 -> COMMA . typeParameter
    (42) typeParameter -> . Identifier EXTENDS typeBound
    (43) typeParameter -> . Identifier empty

    Identifier      shift and go to state 350

    typeParameter                  shift and go to state 518

state 442

    (41) typeParameters -> LESS typeParameter empty . MORE

    MORE            shift and go to state 519


state 443

    (42) typeParameter -> Identifier EXTENDS . typeBound
    (44) typeBound -> . type expt_6
    (45) typeBound -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    typeBound                      shift and go to state 520
    type                           shift and go to state 521

state 444

    (43) typeParameter -> Identifier empty .

    MORE            reduce using rule 43 (typeParameter -> Identifier empty .)
    COMMA           reduce using rule 43 (typeParameter -> Identifier empty .)


state 445

    (32) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type . IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type . empty classBody
    (528) empty -> .

    IMPLEMENTS      shift and go to state 522
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 523

state 446

    (34) normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS . typeList classBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 524
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 447

    (35) normalClassDeclaration -> CLASS Identifier typeParameters empty empty . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 525

state 448

    (36) normalClassDeclaration -> CLASS Identifier empty EXTENDS type . IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> CLASS Identifier empty EXTENDS type . empty classBody
    (528) empty -> .

    IMPLEMENTS      shift and go to state 526
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 527

state 449

    (38) normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS . typeList classBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 528
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 450

    (39) normalClassDeclaration -> CLASS Identifier empty empty empty . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 529

state 451

    (46) enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .

    SEMI            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    BRPAREN         reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    PUBLIC          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    PROTECTED       reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    PRIVATE         reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    STATIC          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    ABSTRACT        reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    FINAL           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NATIVE          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    SYNCHRONIZED    reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    TRANSIENT       reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    VOLATILE        reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    STRICTFP        reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    AT              reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    CLASS           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    INTERFACE       reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    ENUM            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    Identifier      reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    BOOLEAN         reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    CHAR            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    BYTE            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    SHORT           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    INT             reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    LONG            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    FLOAT           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    DOUBLE          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    $end            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    ASSERT          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    IF              reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    FOR             reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    WHILE           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    DO              reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    TRY             reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    SWITCH          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    RETURN          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    THROW           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    BREAK           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    CONTINUE        reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    BLPAREN         reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    PLUS            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    DASH            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    OP_INC          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    OP_DEC          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    TILDE           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    EXCLAMATION     reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    LPAREN          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    THIS            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    SUPER           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NEW             reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    VOID            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    CharacterLiteral reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    StringLiteral   reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NULL            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NUMBER          reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    HEX_NUMBER      reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    LONG_NUMBER     reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    LONG_HEX_NUMBER reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NON_INTEGER_1   reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NON_INTEGER_2   reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    NON_INTEGER_3   reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    TRUE            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    FALSE           reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    CASE            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    DEFAULT         reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)
    LESS            reduce using rule 46 (enumDeclaration -> ENUM Identifier IMPLEMENTS typeList enumBody .)


state 452

    (56) enumConstants -> enumConstant . expt_7
    (57) enumConstants -> enumConstant . empty
    (427) expt_7 -> . COMMA enumConstant
    (428) expt_7 -> . expt_7 COMMA enumConstant
    (528) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 530
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

  ! COMMA           [ reduce using rule 528 (empty -> .) ]

    expt_7                         shift and go to state 531
    empty                          shift and go to state 532

state 453

    (58) enumConstant -> annotations . Identifier arguments classBody
    (59) enumConstant -> annotations . Identifier arguments empty
    (60) enumConstant -> annotations . Identifier empty classBody
    (61) enumConstant -> annotations . Identifier empty empty

    Identifier      shift and go to state 533


state 454

    (48) enumBody -> BLPAREN enumConstants . COMMA enumBodyDeclarations BRPAREN
    (49) enumBody -> BLPAREN enumConstants . COMMA empty BRPAREN
    (50) enumBody -> BLPAREN enumConstants . empty enumBodyDeclarations BRPAREN
    (51) enumBody -> BLPAREN enumConstants . empty empty BRPAREN
    (528) empty -> .

    COMMA           shift and go to state 534
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 535

state 455

    (52) enumBody -> BLPAREN empty . COMMA enumBodyDeclarations BRPAREN
    (53) enumBody -> BLPAREN empty . COMMA empty BRPAREN
    (54) enumBody -> BLPAREN empty . empty enumBodyDeclarations BRPAREN
    (55) enumBody -> BLPAREN empty . empty empty BRPAREN
    (62) enumConstant -> empty . Identifier arguments classBody
    (63) enumConstant -> empty . Identifier arguments empty
    (64) enumConstant -> empty . Identifier empty classBody
    (65) enumConstant -> empty . Identifier empty empty
    (528) empty -> .

    COMMA           shift and go to state 536
    Identifier      shift and go to state 537
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 538

state 456

    (147) modifier -> SYNCHRONIZED .

    PUBLIC          reduce using rule 147 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 147 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 147 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 147 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 147 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 147 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 147 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 147 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 147 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 147 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 147 (modifier -> SYNCHRONIZED .)
    AT              reduce using rule 147 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    LESS            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 147 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 147 (modifier -> SYNCHRONIZED .)
    ENUM            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    Identifier      reduce using rule 147 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 147 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 147 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 147 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 147 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 147 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 147 (modifier -> SYNCHRONIZED .)


state 457

    (144) modifier -> ABSTRACT .

    PUBLIC          reduce using rule 144 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 144 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 144 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 144 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 144 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 144 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 144 (modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 144 (modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 144 (modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 144 (modifier -> ABSTRACT .)
    STRICTFP        reduce using rule 144 (modifier -> ABSTRACT .)
    AT              reduce using rule 144 (modifier -> ABSTRACT .)
    VOID            reduce using rule 144 (modifier -> ABSTRACT .)
    LESS            reduce using rule 144 (modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 144 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 144 (modifier -> ABSTRACT .)
    ENUM            reduce using rule 144 (modifier -> ABSTRACT .)
    Identifier      reduce using rule 144 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 144 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 144 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 144 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 144 (modifier -> ABSTRACT .)
    INT             reduce using rule 144 (modifier -> ABSTRACT .)
    LONG            reduce using rule 144 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 144 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 144 (modifier -> ABSTRACT .)


state 458

    (141) modifier -> PROTECTED .

    PUBLIC          reduce using rule 141 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 141 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 141 (modifier -> PROTECTED .)
    STATIC          reduce using rule 141 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 141 (modifier -> PROTECTED .)
    FINAL           reduce using rule 141 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 141 (modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 141 (modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 141 (modifier -> PROTECTED .)
    VOLATILE        reduce using rule 141 (modifier -> PROTECTED .)
    STRICTFP        reduce using rule 141 (modifier -> PROTECTED .)
    AT              reduce using rule 141 (modifier -> PROTECTED .)
    VOID            reduce using rule 141 (modifier -> PROTECTED .)
    LESS            reduce using rule 141 (modifier -> PROTECTED .)
    INTERFACE       reduce using rule 141 (modifier -> PROTECTED .)
    CLASS           reduce using rule 141 (modifier -> PROTECTED .)
    ENUM            reduce using rule 141 (modifier -> PROTECTED .)
    Identifier      reduce using rule 141 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 141 (modifier -> PROTECTED .)
    CHAR            reduce using rule 141 (modifier -> PROTECTED .)
    BYTE            reduce using rule 141 (modifier -> PROTECTED .)
    SHORT           reduce using rule 141 (modifier -> PROTECTED .)
    INT             reduce using rule 141 (modifier -> PROTECTED .)
    LONG            reduce using rule 141 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 141 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 141 (modifier -> PROTECTED .)


state 459

    (143) modifier -> STATIC .

    PUBLIC          reduce using rule 143 (modifier -> STATIC .)
    PROTECTED       reduce using rule 143 (modifier -> STATIC .)
    PRIVATE         reduce using rule 143 (modifier -> STATIC .)
    STATIC          reduce using rule 143 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 143 (modifier -> STATIC .)
    FINAL           reduce using rule 143 (modifier -> STATIC .)
    NATIVE          reduce using rule 143 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 143 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 143 (modifier -> STATIC .)
    VOLATILE        reduce using rule 143 (modifier -> STATIC .)
    STRICTFP        reduce using rule 143 (modifier -> STATIC .)
    AT              reduce using rule 143 (modifier -> STATIC .)
    VOID            reduce using rule 143 (modifier -> STATIC .)
    LESS            reduce using rule 143 (modifier -> STATIC .)
    INTERFACE       reduce using rule 143 (modifier -> STATIC .)
    CLASS           reduce using rule 143 (modifier -> STATIC .)
    ENUM            reduce using rule 143 (modifier -> STATIC .)
    Identifier      reduce using rule 143 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 143 (modifier -> STATIC .)
    CHAR            reduce using rule 143 (modifier -> STATIC .)
    BYTE            reduce using rule 143 (modifier -> STATIC .)
    SHORT           reduce using rule 143 (modifier -> STATIC .)
    INT             reduce using rule 143 (modifier -> STATIC .)
    LONG            reduce using rule 143 (modifier -> STATIC .)
    FLOAT           reduce using rule 143 (modifier -> STATIC .)
    DOUBLE          reduce using rule 143 (modifier -> STATIC .)


state 460

    (145) modifier -> FINAL .

    PUBLIC          reduce using rule 145 (modifier -> FINAL .)
    PROTECTED       reduce using rule 145 (modifier -> FINAL .)
    PRIVATE         reduce using rule 145 (modifier -> FINAL .)
    STATIC          reduce using rule 145 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 145 (modifier -> FINAL .)
    FINAL           reduce using rule 145 (modifier -> FINAL .)
    NATIVE          reduce using rule 145 (modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 145 (modifier -> FINAL .)
    TRANSIENT       reduce using rule 145 (modifier -> FINAL .)
    VOLATILE        reduce using rule 145 (modifier -> FINAL .)
    STRICTFP        reduce using rule 145 (modifier -> FINAL .)
    AT              reduce using rule 145 (modifier -> FINAL .)
    VOID            reduce using rule 145 (modifier -> FINAL .)
    LESS            reduce using rule 145 (modifier -> FINAL .)
    INTERFACE       reduce using rule 145 (modifier -> FINAL .)
    CLASS           reduce using rule 145 (modifier -> FINAL .)
    ENUM            reduce using rule 145 (modifier -> FINAL .)
    Identifier      reduce using rule 145 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 145 (modifier -> FINAL .)
    CHAR            reduce using rule 145 (modifier -> FINAL .)
    BYTE            reduce using rule 145 (modifier -> FINAL .)
    SHORT           reduce using rule 145 (modifier -> FINAL .)
    INT             reduce using rule 145 (modifier -> FINAL .)
    LONG            reduce using rule 145 (modifier -> FINAL .)
    FLOAT           reduce using rule 145 (modifier -> FINAL .)
    DOUBLE          reduce using rule 145 (modifier -> FINAL .)


state 461

    (146) modifier -> NATIVE .

    PUBLIC          reduce using rule 146 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 146 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 146 (modifier -> NATIVE .)
    STATIC          reduce using rule 146 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 146 (modifier -> NATIVE .)
    FINAL           reduce using rule 146 (modifier -> NATIVE .)
    NATIVE          reduce using rule 146 (modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 146 (modifier -> NATIVE .)
    TRANSIENT       reduce using rule 146 (modifier -> NATIVE .)
    VOLATILE        reduce using rule 146 (modifier -> NATIVE .)
    STRICTFP        reduce using rule 146 (modifier -> NATIVE .)
    AT              reduce using rule 146 (modifier -> NATIVE .)
    VOID            reduce using rule 146 (modifier -> NATIVE .)
    LESS            reduce using rule 146 (modifier -> NATIVE .)
    INTERFACE       reduce using rule 146 (modifier -> NATIVE .)
    CLASS           reduce using rule 146 (modifier -> NATIVE .)
    ENUM            reduce using rule 146 (modifier -> NATIVE .)
    Identifier      reduce using rule 146 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 146 (modifier -> NATIVE .)
    CHAR            reduce using rule 146 (modifier -> NATIVE .)
    BYTE            reduce using rule 146 (modifier -> NATIVE .)
    SHORT           reduce using rule 146 (modifier -> NATIVE .)
    INT             reduce using rule 146 (modifier -> NATIVE .)
    LONG            reduce using rule 146 (modifier -> NATIVE .)
    FLOAT           reduce using rule 146 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 146 (modifier -> NATIVE .)


state 462

    (28) modifiers -> expt_4 .
    (422) expt_4 -> expt_4 . modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    CLASS           reduce using rule 28 (modifiers -> expt_4 .)
    INTERFACE       reduce using rule 28 (modifiers -> expt_4 .)
    ENUM            reduce using rule 28 (modifiers -> expt_4 .)
    Identifier      reduce using rule 28 (modifiers -> expt_4 .)
    BOOLEAN         reduce using rule 28 (modifiers -> expt_4 .)
    CHAR            reduce using rule 28 (modifiers -> expt_4 .)
    BYTE            reduce using rule 28 (modifiers -> expt_4 .)
    SHORT           reduce using rule 28 (modifiers -> expt_4 .)
    INT             reduce using rule 28 (modifiers -> expt_4 .)
    LONG            reduce using rule 28 (modifiers -> expt_4 .)
    FLOAT           reduce using rule 28 (modifiers -> expt_4 .)
    DOUBLE          reduce using rule 28 (modifiers -> expt_4 .)
    VOID            reduce using rule 28 (modifiers -> expt_4 .)
    LESS            reduce using rule 28 (modifiers -> expt_4 .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    STATIC          shift and go to state 459
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 28 (modifiers -> expt_4 .) ]

    modifier                       shift and go to state 539
    annotation                     shift and go to state 467

state 463

    (142) modifier -> PRIVATE .

    PUBLIC          reduce using rule 142 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 142 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 142 (modifier -> PRIVATE .)
    STATIC          reduce using rule 142 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 142 (modifier -> PRIVATE .)
    FINAL           reduce using rule 142 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 142 (modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 142 (modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 142 (modifier -> PRIVATE .)
    VOLATILE        reduce using rule 142 (modifier -> PRIVATE .)
    STRICTFP        reduce using rule 142 (modifier -> PRIVATE .)
    AT              reduce using rule 142 (modifier -> PRIVATE .)
    VOID            reduce using rule 142 (modifier -> PRIVATE .)
    LESS            reduce using rule 142 (modifier -> PRIVATE .)
    INTERFACE       reduce using rule 142 (modifier -> PRIVATE .)
    CLASS           reduce using rule 142 (modifier -> PRIVATE .)
    ENUM            reduce using rule 142 (modifier -> PRIVATE .)
    Identifier      reduce using rule 142 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 142 (modifier -> PRIVATE .)
    CHAR            reduce using rule 142 (modifier -> PRIVATE .)
    BYTE            reduce using rule 142 (modifier -> PRIVATE .)
    SHORT           reduce using rule 142 (modifier -> PRIVATE .)
    INT             reduce using rule 142 (modifier -> PRIVATE .)
    LONG            reduce using rule 142 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 142 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 142 (modifier -> PRIVATE .)


state 464

    (150) modifier -> STRICTFP .

    PUBLIC          reduce using rule 150 (modifier -> STRICTFP .)
    PROTECTED       reduce using rule 150 (modifier -> STRICTFP .)
    PRIVATE         reduce using rule 150 (modifier -> STRICTFP .)
    STATIC          reduce using rule 150 (modifier -> STRICTFP .)
    ABSTRACT        reduce using rule 150 (modifier -> STRICTFP .)
    FINAL           reduce using rule 150 (modifier -> STRICTFP .)
    NATIVE          reduce using rule 150 (modifier -> STRICTFP .)
    SYNCHRONIZED    reduce using rule 150 (modifier -> STRICTFP .)
    TRANSIENT       reduce using rule 150 (modifier -> STRICTFP .)
    VOLATILE        reduce using rule 150 (modifier -> STRICTFP .)
    STRICTFP        reduce using rule 150 (modifier -> STRICTFP .)
    AT              reduce using rule 150 (modifier -> STRICTFP .)
    VOID            reduce using rule 150 (modifier -> STRICTFP .)
    LESS            reduce using rule 150 (modifier -> STRICTFP .)
    INTERFACE       reduce using rule 150 (modifier -> STRICTFP .)
    CLASS           reduce using rule 150 (modifier -> STRICTFP .)
    ENUM            reduce using rule 150 (modifier -> STRICTFP .)
    Identifier      reduce using rule 150 (modifier -> STRICTFP .)
    BOOLEAN         reduce using rule 150 (modifier -> STRICTFP .)
    CHAR            reduce using rule 150 (modifier -> STRICTFP .)
    BYTE            reduce using rule 150 (modifier -> STRICTFP .)
    SHORT           reduce using rule 150 (modifier -> STRICTFP .)
    INT             reduce using rule 150 (modifier -> STRICTFP .)
    LONG            reduce using rule 150 (modifier -> STRICTFP .)
    FLOAT           reduce using rule 150 (modifier -> STRICTFP .)
    DOUBLE          reduce using rule 150 (modifier -> STRICTFP .)


state 465

    (221) annotationTypeBody -> BLPAREN empty . BRPAREN
    (29) modifiers -> empty .

    BRPAREN         shift and go to state 540
    CLASS           reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)


state 466

    (220) annotationTypeBody -> BLPAREN expt_22 . BRPAREN
    (450) expt_22 -> expt_22 . annotationTypeElementDeclaration
    (222) annotationTypeElementDeclaration -> . modifiers annotationTypeElementRest
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (528) empty -> .
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         shift and go to state 542
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    STATIC          shift and go to state 459
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 469
    expt_4                         shift and go to state 462
    annotationTypeElementDeclaration shift and go to state 543
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 541

state 467

    (139) modifier -> annotation .

    PUBLIC          reduce using rule 139 (modifier -> annotation .)
    PROTECTED       reduce using rule 139 (modifier -> annotation .)
    PRIVATE         reduce using rule 139 (modifier -> annotation .)
    STATIC          reduce using rule 139 (modifier -> annotation .)
    ABSTRACT        reduce using rule 139 (modifier -> annotation .)
    FINAL           reduce using rule 139 (modifier -> annotation .)
    NATIVE          reduce using rule 139 (modifier -> annotation .)
    SYNCHRONIZED    reduce using rule 139 (modifier -> annotation .)
    TRANSIENT       reduce using rule 139 (modifier -> annotation .)
    VOLATILE        reduce using rule 139 (modifier -> annotation .)
    STRICTFP        reduce using rule 139 (modifier -> annotation .)
    AT              reduce using rule 139 (modifier -> annotation .)
    VOID            reduce using rule 139 (modifier -> annotation .)
    LESS            reduce using rule 139 (modifier -> annotation .)
    INTERFACE       reduce using rule 139 (modifier -> annotation .)
    CLASS           reduce using rule 139 (modifier -> annotation .)
    ENUM            reduce using rule 139 (modifier -> annotation .)
    Identifier      reduce using rule 139 (modifier -> annotation .)
    BOOLEAN         reduce using rule 139 (modifier -> annotation .)
    CHAR            reduce using rule 139 (modifier -> annotation .)
    BYTE            reduce using rule 139 (modifier -> annotation .)
    SHORT           reduce using rule 139 (modifier -> annotation .)
    INT             reduce using rule 139 (modifier -> annotation .)
    LONG            reduce using rule 139 (modifier -> annotation .)
    FLOAT           reduce using rule 139 (modifier -> annotation .)
    DOUBLE          reduce using rule 139 (modifier -> annotation .)


state 468

    (449) expt_22 -> annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    STATIC          reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    FINAL           reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    AT              reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    CLASS           reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    INTERFACE       reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    ENUM            reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    Identifier      reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    BOOLEAN         reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    CHAR            reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    BYTE            reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    SHORT           reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    INT             reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    LONG            reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    FLOAT           reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)
    DOUBLE          reduce using rule 449 (expt_22 -> annotationTypeElementDeclaration .)


state 469

    (222) annotationTypeElementDeclaration -> modifiers . annotationTypeElementRest
    (223) annotationTypeElementRest -> . type annotationMethodOrConstantRest SEMI
    (224) annotationTypeElementRest -> . normalClassDeclaration SEMI
    (225) annotationTypeElementRest -> . normalClassDeclaration empty
    (226) annotationTypeElementRest -> . normalInterfaceDeclaration SEMI
    (227) annotationTypeElementRest -> . normalInterfaceDeclaration empty
    (228) annotationTypeElementRest -> . enumDeclaration SEMI
    (229) annotationTypeElementRest -> . enumDeclaration empty
    (230) annotationTypeElementRest -> . annotationTypeDeclaration SEMI
    (231) annotationTypeElementRest -> . annotationTypeDeclaration empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (32) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> . CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> . CLASS Identifier typeParameters empty empty classBody
    (36) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> . CLASS Identifier empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> . CLASS Identifier empty empty empty classBody
    (70) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> . INTERFACE Identifier empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> . INTERFACE Identifier empty empty interfaceBody
    (46) enumDeclaration -> . ENUM Identifier IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> . ENUM Identifier empty enumBody
    (219) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    CLASS           shift and go to state 59
    INTERFACE       shift and go to state 66
    ENUM            shift and go to state 61
    AT              shift and go to state 63
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    enumDeclaration                shift and go to state 547
    normalClassDeclaration         shift and go to state 545
    normalInterfaceDeclaration     shift and go to state 544
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    annotationTypeDeclaration      shift and go to state 549
    annotationTypeElementRest      shift and go to state 548
    type                           shift and go to state 546

state 470

    (148) modifier -> TRANSIENT .

    PUBLIC          reduce using rule 148 (modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 148 (modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 148 (modifier -> TRANSIENT .)
    STATIC          reduce using rule 148 (modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 148 (modifier -> TRANSIENT .)
    FINAL           reduce using rule 148 (modifier -> TRANSIENT .)
    NATIVE          reduce using rule 148 (modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 148 (modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 148 (modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 148 (modifier -> TRANSIENT .)
    STRICTFP        reduce using rule 148 (modifier -> TRANSIENT .)
    AT              reduce using rule 148 (modifier -> TRANSIENT .)
    VOID            reduce using rule 148 (modifier -> TRANSIENT .)
    LESS            reduce using rule 148 (modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 148 (modifier -> TRANSIENT .)
    CLASS           reduce using rule 148 (modifier -> TRANSIENT .)
    ENUM            reduce using rule 148 (modifier -> TRANSIENT .)
    Identifier      reduce using rule 148 (modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 148 (modifier -> TRANSIENT .)
    CHAR            reduce using rule 148 (modifier -> TRANSIENT .)
    BYTE            reduce using rule 148 (modifier -> TRANSIENT .)
    SHORT           reduce using rule 148 (modifier -> TRANSIENT .)
    INT             reduce using rule 148 (modifier -> TRANSIENT .)
    LONG            reduce using rule 148 (modifier -> TRANSIENT .)
    FLOAT           reduce using rule 148 (modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 148 (modifier -> TRANSIENT .)


state 471

    (149) modifier -> VOLATILE .

    PUBLIC          reduce using rule 149 (modifier -> VOLATILE .)
    PROTECTED       reduce using rule 149 (modifier -> VOLATILE .)
    PRIVATE         reduce using rule 149 (modifier -> VOLATILE .)
    STATIC          reduce using rule 149 (modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 149 (modifier -> VOLATILE .)
    FINAL           reduce using rule 149 (modifier -> VOLATILE .)
    NATIVE          reduce using rule 149 (modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 149 (modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 149 (modifier -> VOLATILE .)
    VOLATILE        reduce using rule 149 (modifier -> VOLATILE .)
    STRICTFP        reduce using rule 149 (modifier -> VOLATILE .)
    AT              reduce using rule 149 (modifier -> VOLATILE .)
    VOID            reduce using rule 149 (modifier -> VOLATILE .)
    LESS            reduce using rule 149 (modifier -> VOLATILE .)
    INTERFACE       reduce using rule 149 (modifier -> VOLATILE .)
    CLASS           reduce using rule 149 (modifier -> VOLATILE .)
    ENUM            reduce using rule 149 (modifier -> VOLATILE .)
    Identifier      reduce using rule 149 (modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 149 (modifier -> VOLATILE .)
    CHAR            reduce using rule 149 (modifier -> VOLATILE .)
    BYTE            reduce using rule 149 (modifier -> VOLATILE .)
    SHORT           reduce using rule 149 (modifier -> VOLATILE .)
    INT             reduce using rule 149 (modifier -> VOLATILE .)
    LONG            reduce using rule 149 (modifier -> VOLATILE .)
    FLOAT           reduce using rule 149 (modifier -> VOLATILE .)
    DOUBLE          reduce using rule 149 (modifier -> VOLATILE .)


state 472

    (421) expt_4 -> modifier .

    PUBLIC          reduce using rule 421 (expt_4 -> modifier .)
    PROTECTED       reduce using rule 421 (expt_4 -> modifier .)
    PRIVATE         reduce using rule 421 (expt_4 -> modifier .)
    STATIC          reduce using rule 421 (expt_4 -> modifier .)
    ABSTRACT        reduce using rule 421 (expt_4 -> modifier .)
    FINAL           reduce using rule 421 (expt_4 -> modifier .)
    NATIVE          reduce using rule 421 (expt_4 -> modifier .)
    SYNCHRONIZED    reduce using rule 421 (expt_4 -> modifier .)
    TRANSIENT       reduce using rule 421 (expt_4 -> modifier .)
    VOLATILE        reduce using rule 421 (expt_4 -> modifier .)
    STRICTFP        reduce using rule 421 (expt_4 -> modifier .)
    AT              reduce using rule 421 (expt_4 -> modifier .)
    VOID            reduce using rule 421 (expt_4 -> modifier .)
    Identifier      reduce using rule 421 (expt_4 -> modifier .)
    LESS            reduce using rule 421 (expt_4 -> modifier .)
    INTERFACE       reduce using rule 421 (expt_4 -> modifier .)
    CLASS           reduce using rule 421 (expt_4 -> modifier .)
    ENUM            reduce using rule 421 (expt_4 -> modifier .)
    BOOLEAN         reduce using rule 421 (expt_4 -> modifier .)
    CHAR            reduce using rule 421 (expt_4 -> modifier .)
    BYTE            reduce using rule 421 (expt_4 -> modifier .)
    SHORT           reduce using rule 421 (expt_4 -> modifier .)
    INT             reduce using rule 421 (expt_4 -> modifier .)
    LONG            reduce using rule 421 (expt_4 -> modifier .)
    FLOAT           reduce using rule 421 (expt_4 -> modifier .)
    DOUBLE          reduce using rule 421 (expt_4 -> modifier .)


state 473

    (140) modifier -> PUBLIC .

    PUBLIC          reduce using rule 140 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 140 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 140 (modifier -> PUBLIC .)
    STATIC          reduce using rule 140 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 140 (modifier -> PUBLIC .)
    FINAL           reduce using rule 140 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 140 (modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 140 (modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 140 (modifier -> PUBLIC .)
    VOLATILE        reduce using rule 140 (modifier -> PUBLIC .)
    STRICTFP        reduce using rule 140 (modifier -> PUBLIC .)
    AT              reduce using rule 140 (modifier -> PUBLIC .)
    VOID            reduce using rule 140 (modifier -> PUBLIC .)
    LESS            reduce using rule 140 (modifier -> PUBLIC .)
    INTERFACE       reduce using rule 140 (modifier -> PUBLIC .)
    CLASS           reduce using rule 140 (modifier -> PUBLIC .)
    ENUM            reduce using rule 140 (modifier -> PUBLIC .)
    Identifier      reduce using rule 140 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 140 (modifier -> PUBLIC .)
    CHAR            reduce using rule 140 (modifier -> PUBLIC .)
    BYTE            reduce using rule 140 (modifier -> PUBLIC .)
    SHORT           reduce using rule 140 (modifier -> PUBLIC .)
    INT             reduce using rule 140 (modifier -> PUBLIC .)
    LONG            reduce using rule 140 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 140 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 140 (modifier -> PUBLIC .)


state 474

    (70) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList . interfaceBody
    (78) interfaceBody -> . BLPAREN expt_10 BRPAREN
    (79) interfaceBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 476

    interfaceBody                  shift and go to state 550

state 475

    (71) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .

    BRPAREN         reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    SEMI            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    PUBLIC          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    PROTECTED       reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    PRIVATE         reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    STATIC          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    ABSTRACT        reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    FINAL           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NATIVE          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    SYNCHRONIZED    reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    TRANSIENT       reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    VOLATILE        reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    STRICTFP        reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    AT              reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    VOID            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    LESS            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    INTERFACE       reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    CLASS           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    ENUM            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    Identifier      reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    BOOLEAN         reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    CHAR            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    BYTE            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    SHORT           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    INT             reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    LONG            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    FLOAT           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    DOUBLE          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    $end            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    ASSERT          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    IF              reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    FOR             reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    WHILE           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    DO              reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    TRY             reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    SWITCH          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    RETURN          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    THROW           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    BREAK           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    CONTINUE        reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    BLPAREN         reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    PLUS            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    DASH            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    OP_INC          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    OP_DEC          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    TILDE           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    EXCLAMATION     reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    LPAREN          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    THIS            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    SUPER           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NEW             reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    CharacterLiteral reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    StringLiteral   reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NULL            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NUMBER          reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    HEX_NUMBER      reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    LONG_NUMBER     reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NON_INTEGER_1   reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NON_INTEGER_2   reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    NON_INTEGER_3   reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    TRUE            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    FALSE           reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    CASE            reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)
    DEFAULT         reduce using rule 71 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters empty interfaceBody .)


state 476

    (78) interfaceBody -> BLPAREN . expt_10 BRPAREN
    (79) interfaceBody -> BLPAREN . empty BRPAREN
    (467) expt_10 -> . interfaceBodyDeclaration
    (468) expt_10 -> . expt_10 interfaceBodyDeclaration
    (528) empty -> .
    (96) interfaceBodyDeclaration -> . modifiers interfaceMemberDecl
    (97) interfaceBodyDeclaration -> . SEMI
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    SEMI            shift and go to state 551
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    STATIC          shift and go to state 459
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 554
    expt_4                         shift and go to state 462
    expt_10                        shift and go to state 555
    interfaceBodyDeclaration       shift and go to state 553
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 552

state 477

    (72) normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList . interfaceBody
    (78) interfaceBody -> . BLPAREN expt_10 BRPAREN
    (79) interfaceBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 476

    interfaceBody                  shift and go to state 556

state 478

    (73) normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .

    BRPAREN         reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    SEMI            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    PUBLIC          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    PROTECTED       reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    PRIVATE         reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    STATIC          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    ABSTRACT        reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    FINAL           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NATIVE          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    SYNCHRONIZED    reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    TRANSIENT       reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    VOLATILE        reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    STRICTFP        reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    AT              reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    VOID            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    LESS            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    INTERFACE       reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    CLASS           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    ENUM            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    Identifier      reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    BOOLEAN         reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    CHAR            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    BYTE            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    SHORT           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    INT             reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    LONG            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    FLOAT           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    DOUBLE          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    $end            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    ASSERT          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    IF              reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    FOR             reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    WHILE           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    DO              reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    TRY             reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    SWITCH          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    RETURN          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    THROW           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    BREAK           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    CONTINUE        reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    BLPAREN         reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    PLUS            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    DASH            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    OP_INC          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    OP_DEC          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    TILDE           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    EXCLAMATION     reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    LPAREN          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    THIS            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    SUPER           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NEW             reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    CharacterLiteral reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    StringLiteral   reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NULL            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NUMBER          reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    HEX_NUMBER      reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    LONG_NUMBER     reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NON_INTEGER_1   reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NON_INTEGER_2   reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    NON_INTEGER_3   reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    TRUE            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    FALSE           reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    CASE            reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)
    DEFAULT         reduce using rule 73 (normalInterfaceDeclaration -> INTERFACE Identifier empty empty interfaceBody .)


state 479

    (477) expr_20 -> FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 477 (expr_20 -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 477 (expr_20 -> FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 477 (expr_20 -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 477 (expr_20 -> FLPAREN expression FRPAREN .)


state 480

    (502) expr_19 -> expr_19 FLPAREN FRPAREN .

    DOT             reduce using rule 502 (expr_19 -> expr_19 FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 502 (expr_19 -> expr_19 FLPAREN FRPAREN .)


state 481

    (369) identifierSuffix -> expr_19 DOT CLASS .

    DOT             reduce using rule 369 (identifierSuffix -> expr_19 DOT CLASS .)
    FLPAREN         reduce using rule 369 (identifierSuffix -> expr_19 DOT CLASS .)
    OP_INC          reduce using rule 369 (identifierSuffix -> expr_19 DOT CLASS .)
    OP_DEC          reduce using rule 369 (identifierSuffix -> expr_19 DOT CLASS .)


state 482

    (478) expr_20 -> expr_20 FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 557


state 483

    (386) explicitGenericInvocation -> nonWildcardTypeArguments Identifier . arguments
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 558

state 484

    (376) identifierSuffix -> DOT NEW innerCreator .

    DOT             reduce using rule 376 (identifierSuffix -> DOT NEW innerCreator .)
    FLPAREN         reduce using rule 376 (identifierSuffix -> DOT NEW innerCreator .)
    OP_INC          reduce using rule 376 (identifierSuffix -> DOT NEW innerCreator .)
    OP_DEC          reduce using rule 376 (identifierSuffix -> DOT NEW innerCreator .)


state 485

    (375) identifierSuffix -> DOT SUPER arguments .

    DOT             reduce using rule 375 (identifierSuffix -> DOT SUPER arguments .)
    FLPAREN         reduce using rule 375 (identifierSuffix -> DOT SUPER arguments .)
    OP_INC          reduce using rule 375 (identifierSuffix -> DOT SUPER arguments .)
    OP_DEC          reduce using rule 375 (identifierSuffix -> DOT SUPER arguments .)


state 486

    (215) elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN .

    COMMA           reduce using rule 215 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN .)
    RPAREN          reduce using rule 215 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN .)
    BRPAREN         reduce using rule 215 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN .)
    SEMI            reduce using rule 215 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 COMMA BRPAREN .)


state 487

    (452) expt_21 -> expt_21 COMMA elementValue .

    COMMA           reduce using rule 452 (expt_21 -> expt_21 COMMA elementValue .)
    BRPAREN         reduce using rule 452 (expt_21 -> expt_21 COMMA elementValue .)


state 488

    (216) elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN .

    COMMA           reduce using rule 216 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN .)
    RPAREN          reduce using rule 216 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN .)
    BRPAREN         reduce using rule 216 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN .)
    SEMI            reduce using rule 216 (elementValueArrayInitializer -> BLPAREN elementValue expt_21 empty BRPAREN .)


state 489

    (311) conditionalExpression -> conditionalOrExpression QUES expression COLON expression .

    EQUALS          reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_ADD         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_SUB         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_MUL         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_DIV         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_AND         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_OR          reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_XOR         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    ASS_MOD         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    LESS            reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    MORE            reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    RPAREN          reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    COLON           reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    FRPAREN         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    COMMA           reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    BRPAREN         reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)
    SEMI            reduce using rule 311 (conditionalExpression -> conditionalOrExpression QUES expression COLON expression .)


state 490

    (381) innerCreator -> nonWildcardTypeArguments Identifier . classCreatorRest
    (384) classCreatorRest -> . arguments classBody
    (385) classCreatorRest -> . arguments empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    classCreatorRest               shift and go to state 559
    arguments                      shift and go to state 309

state 491

    (382) innerCreator -> empty Identifier . classCreatorRest
    (384) classCreatorRest -> . arguments classBody
    (385) classCreatorRest -> . arguments empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    classCreatorRest               shift and go to state 560
    arguments                      shift and go to state 309

state 492

    (419) expt_9 -> COMMA type .

    COMMA           reduce using rule 419 (expt_9 -> COMMA type .)
    MORE            reduce using rule 419 (expt_9 -> COMMA type .)
    BLPAREN         reduce using rule 419 (expt_9 -> COMMA type .)


state 493

    (420) expt_9 -> expt_9 COMMA . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 561

state 494

    (172) typeArguments -> LESS typeArgument expt_16 . MORE
    (456) expt_16 -> expt_16 . COMMA typeArgument

    MORE            shift and go to state 562
    COMMA           shift and go to state 563


state 495

    (455) expt_16 -> COMMA . typeArgument
    (174) typeArgument -> . type
    (175) typeArgument -> . QUES expr_8 type
    (176) typeArgument -> . QUES empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    QUES            shift and go to state 408
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    typeArgument                   shift and go to state 564
    type                           shift and go to state 406

state 496

    (173) typeArguments -> LESS typeArgument empty . MORE

    MORE            shift and go to state 565


state 497

    (482) expr_8 -> SUPER .

    Identifier      reduce using rule 482 (expr_8 -> SUPER .)
    BOOLEAN         reduce using rule 482 (expr_8 -> SUPER .)
    CHAR            reduce using rule 482 (expr_8 -> SUPER .)
    BYTE            reduce using rule 482 (expr_8 -> SUPER .)
    SHORT           reduce using rule 482 (expr_8 -> SUPER .)
    INT             reduce using rule 482 (expr_8 -> SUPER .)
    LONG            reduce using rule 482 (expr_8 -> SUPER .)
    FLOAT           reduce using rule 482 (expr_8 -> SUPER .)
    DOUBLE          reduce using rule 482 (expr_8 -> SUPER .)


state 498

    (481) expr_8 -> EXTENDS .

    Identifier      reduce using rule 481 (expr_8 -> EXTENDS .)
    BOOLEAN         reduce using rule 481 (expr_8 -> EXTENDS .)
    CHAR            reduce using rule 481 (expr_8 -> EXTENDS .)
    BYTE            reduce using rule 481 (expr_8 -> EXTENDS .)
    SHORT           reduce using rule 481 (expr_8 -> EXTENDS .)
    INT             reduce using rule 481 (expr_8 -> EXTENDS .)
    LONG            reduce using rule 481 (expr_8 -> EXTENDS .)
    FLOAT           reduce using rule 481 (expr_8 -> EXTENDS .)
    DOUBLE          reduce using rule 481 (expr_8 -> EXTENDS .)


state 499

    (175) typeArgument -> QUES expr_8 . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 566

state 500

    (176) typeArgument -> QUES empty .

    MORE            reduce using rule 176 (typeArgument -> QUES empty .)
    COMMA           reduce using rule 176 (typeArgument -> QUES empty .)


state 501

    (461) expt_15 -> DOT Identifier . typeArguments
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE

    LESS            shift and go to state 304

    typeArguments                  shift and go to state 567

state 502

    (462) expt_15 -> expt_15 DOT . Identifier typeArguments

    Identifier      shift and go to state 568


state 503

    (479) expr_22 -> FRPAREN expt_11 . arrayInitializer
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN

    FLPAREN         shift and go to state 313
    BLPAREN         shift and go to state 570

    arrayInitializer               shift and go to state 569

state 504

    (480) expr_22 -> expression FRPAREN . expt_38 expt_11
    (399) expt_38 -> . FLPAREN expression FRPAREN
    (400) expt_38 -> . expt_38 FLPAREN expression FRPAREN

    FLPAREN         shift and go to state 572

    expt_38                        shift and go to state 571

state 505

    (81) classBodyDeclaration -> STATIC . block
    (143) modifier -> STATIC .
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    PUBLIC          reduce using rule 143 (modifier -> STATIC .)
    PROTECTED       reduce using rule 143 (modifier -> STATIC .)
    PRIVATE         reduce using rule 143 (modifier -> STATIC .)
    STATIC          reduce using rule 143 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 143 (modifier -> STATIC .)
    FINAL           reduce using rule 143 (modifier -> STATIC .)
    NATIVE          reduce using rule 143 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 143 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 143 (modifier -> STATIC .)
    VOLATILE        reduce using rule 143 (modifier -> STATIC .)
    STRICTFP        reduce using rule 143 (modifier -> STATIC .)
    AT              reduce using rule 143 (modifier -> STATIC .)
    VOID            reduce using rule 143 (modifier -> STATIC .)
    Identifier      reduce using rule 143 (modifier -> STATIC .)
    LESS            reduce using rule 143 (modifier -> STATIC .)
    INTERFACE       reduce using rule 143 (modifier -> STATIC .)
    CLASS           reduce using rule 143 (modifier -> STATIC .)
    ENUM            reduce using rule 143 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 143 (modifier -> STATIC .)
    CHAR            reduce using rule 143 (modifier -> STATIC .)
    BYTE            reduce using rule 143 (modifier -> STATIC .)
    SHORT           reduce using rule 143 (modifier -> STATIC .)
    INT             reduce using rule 143 (modifier -> STATIC .)
    LONG            reduce using rule 143 (modifier -> STATIC .)
    FLOAT           reduce using rule 143 (modifier -> STATIC .)
    DOUBLE          reduce using rule 143 (modifier -> STATIC .)
    BLPAREN         shift and go to state 574

    block                          shift and go to state 573

state 506

    (76) classBody -> BLPAREN expt_8 . BRPAREN
    (418) expt_8 -> expt_8 . classBodyDeclaration
    (80) classBodyDeclaration -> . SEMI
    (81) classBodyDeclaration -> . STATIC block
    (82) classBodyDeclaration -> . empty block
    (83) classBodyDeclaration -> . modifiers memberDecl
    (528) empty -> .
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         shift and go to state 576
    SEMI            shift and go to state 507
    STATIC          shift and go to state 505
    BLPAREN         reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 510
    expt_4                         shift and go to state 462
    classBodyDeclaration           shift and go to state 577
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 575

state 507

    (80) classBodyDeclaration -> SEMI .

    SEMI            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 80 (classBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 80 (classBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 80 (classBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 80 (classBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 80 (classBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 80 (classBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 80 (classBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 80 (classBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 80 (classBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 80 (classBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 80 (classBodyDeclaration -> SEMI .)
    AT              reduce using rule 80 (classBodyDeclaration -> SEMI .)
    BLPAREN         reduce using rule 80 (classBodyDeclaration -> SEMI .)
    VOID            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    Identifier      reduce using rule 80 (classBodyDeclaration -> SEMI .)
    LESS            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    INTERFACE       reduce using rule 80 (classBodyDeclaration -> SEMI .)
    CLASS           reduce using rule 80 (classBodyDeclaration -> SEMI .)
    ENUM            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    BOOLEAN         reduce using rule 80 (classBodyDeclaration -> SEMI .)
    CHAR            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    BYTE            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    SHORT           reduce using rule 80 (classBodyDeclaration -> SEMI .)
    INT             reduce using rule 80 (classBodyDeclaration -> SEMI .)
    LONG            reduce using rule 80 (classBodyDeclaration -> SEMI .)
    FLOAT           reduce using rule 80 (classBodyDeclaration -> SEMI .)
    DOUBLE          reduce using rule 80 (classBodyDeclaration -> SEMI .)
    BRPAREN         reduce using rule 80 (classBodyDeclaration -> SEMI .)


state 508

    (77) classBody -> BLPAREN empty . BRPAREN
    (82) classBodyDeclaration -> empty . block
    (29) modifiers -> empty .
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BRPAREN         shift and go to state 579
    VOID            reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    LESS            reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    CLASS           reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)
    BLPAREN         shift and go to state 574

    block                          shift and go to state 578

state 509

    (417) expt_8 -> classBodyDeclaration .

    SEMI            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    STATIC          reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    PUBLIC          reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    PROTECTED       reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    PRIVATE         reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    ABSTRACT        reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    FINAL           reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    NATIVE          reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    TRANSIENT       reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    VOLATILE        reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    STRICTFP        reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    AT              reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    BLPAREN         reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    VOID            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    Identifier      reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    LESS            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    INTERFACE       reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    CLASS           reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    ENUM            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    BOOLEAN         reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    CHAR            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    BYTE            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    SHORT           reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    INT             reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    LONG            reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    FLOAT           reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    DOUBLE          reduce using rule 417 (expt_8 -> classBodyDeclaration .)
    BRPAREN         reduce using rule 417 (expt_8 -> classBodyDeclaration .)


state 510

    (83) classBodyDeclaration -> modifiers . memberDecl
    (84) memberDecl -> . genericMethodOrConstructorDecl
    (85) memberDecl -> . memberDeclaration
    (86) memberDecl -> . VOID Identifier voidMethodDeclaratorRest
    (87) memberDecl -> . Identifier constructorDeclaratorRest
    (88) memberDecl -> . interfaceDeclaration
    (89) memberDecl -> . classDeclaration
    (91) genericMethodOrConstructorDecl -> . typeParameters genericMethodOrConstructorRest
    (90) memberDeclaration -> . type expr_3
    (68) interfaceDeclaration -> . normalInterfaceDeclaration
    (69) interfaceDeclaration -> . annotationTypeDeclaration
    (30) classDeclaration -> . normalClassDeclaration
    (31) classDeclaration -> . enumDeclaration
    (40) typeParameters -> . LESS typeParameter expt_5 MORE
    (41) typeParameters -> . LESS typeParameter empty MORE
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (70) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> . INTERFACE Identifier empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> . INTERFACE Identifier empty empty interfaceBody
    (219) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (32) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> . CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> . CLASS Identifier typeParameters empty empty classBody
    (36) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> . CLASS Identifier empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> . CLASS Identifier empty empty empty classBody
    (46) enumDeclaration -> . ENUM Identifier IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> . ENUM Identifier empty enumBody
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    VOID            shift and go to state 580
    Identifier      shift and go to state 587
    LESS            shift and go to state 237
    INTERFACE       shift and go to state 66
    AT              shift and go to state 63
    CLASS           shift and go to state 59
    ENUM            shift and go to state 61
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    memberDecl                     shift and go to state 581
    typeParameters                 shift and go to state 582
    normalInterfaceDeclaration     shift and go to state 56
    memberDeclaration              shift and go to state 583
    classOrInterfaceType           shift and go to state 226
    type                           shift and go to state 584
    enumDeclaration                shift and go to state 60
    genericMethodOrConstructorDecl shift and go to state 585
    classDeclaration               shift and go to state 586
    normalClassDeclaration         shift and go to state 57
    primitiveType                  shift and go to state 252
    annotationTypeDeclaration      shift and go to state 65
    interfaceDeclaration           shift and go to state 588

state 511

    (308) assignmentOperator -> LESS LESS EQUALS .

    PLUS            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    DASH            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    OP_INC          reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    OP_DEC          reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    TILDE           reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    EXCLAMATION     reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    LPAREN          reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    THIS            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    SUPER           reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NEW             reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    Identifier      reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    VOID            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    CharacterLiteral reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    StringLiteral   reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NULL            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    BOOLEAN         reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    CHAR            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    BYTE            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    SHORT           reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    INT             reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    LONG            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    FLOAT           reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    DOUBLE          reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NUMBER          reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    HEX_NUMBER      reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_NUMBER     reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    TRUE            reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)
    FALSE           reduce using rule 308 (assignmentOperator -> LESS LESS EQUALS .)


state 512

    (310) assignmentOperator -> MORE MORE EQUALS .

    PLUS            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    DASH            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    OP_INC          reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    OP_DEC          reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    TILDE           reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    LPAREN          reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    THIS            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    SUPER           reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NEW             reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    Identifier      reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    VOID            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    CharacterLiteral reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    StringLiteral   reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NULL            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    CHAR            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    BYTE            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    SHORT           reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    INT             reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    LONG            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    FLOAT           reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    DOUBLE          reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NUMBER          reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    TRUE            reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)
    FALSE           reduce using rule 310 (assignmentOperator -> MORE MORE EQUALS .)


state 513

    (309) assignmentOperator -> MORE MORE MORE . EQUALS

    EQUALS          shift and go to state 589


state 514

    (442) expt_26 -> expt_26 COMMA . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 590

state 515

    (441) expt_26 -> COMMA expression .

    COMMA           reduce using rule 441 (expt_26 -> COMMA expression .)
    RPAREN          reduce using rule 441 (expt_26 -> COMMA expression .)
    SEMI            reduce using rule 441 (expt_26 -> COMMA expression .)


state 516

    (40) typeParameters -> LESS typeParameter expt_5 MORE .

    EXTENDS         reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    IMPLEMENTS      reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    BLPAREN         reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    VOID            reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    Identifier      reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    BOOLEAN         reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    CHAR            reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    BYTE            reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    SHORT           reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    INT             reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    LONG            reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    FLOAT           reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)
    DOUBLE          reduce using rule 40 (typeParameters -> LESS typeParameter expt_5 MORE .)


state 517

    (424) expt_5 -> expt_5 COMMA . typeParameter
    (42) typeParameter -> . Identifier EXTENDS typeBound
    (43) typeParameter -> . Identifier empty

    Identifier      shift and go to state 350

    typeParameter                  shift and go to state 591

state 518

    (423) expt_5 -> COMMA typeParameter .

    MORE            reduce using rule 423 (expt_5 -> COMMA typeParameter .)
    COMMA           reduce using rule 423 (expt_5 -> COMMA typeParameter .)


state 519

    (41) typeParameters -> LESS typeParameter empty MORE .

    EXTENDS         reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    IMPLEMENTS      reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    BLPAREN         reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    VOID            reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    Identifier      reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    BOOLEAN         reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    CHAR            reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    BYTE            reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    SHORT           reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    INT             reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    LONG            reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    FLOAT           reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)
    DOUBLE          reduce using rule 41 (typeParameters -> LESS typeParameter empty MORE .)


state 520

    (42) typeParameter -> Identifier EXTENDS typeBound .

    MORE            reduce using rule 42 (typeParameter -> Identifier EXTENDS typeBound .)
    COMMA           reduce using rule 42 (typeParameter -> Identifier EXTENDS typeBound .)


state 521

    (44) typeBound -> type . expt_6
    (45) typeBound -> type . empty
    (425) expt_6 -> . AND type
    (426) expt_6 -> . expt_6 AND type
    (528) empty -> .

    AND             shift and go to state 592
    COMMA           reduce using rule 528 (empty -> .)
    MORE            reduce using rule 528 (empty -> .)

    expt_6                         shift and go to state 593
    empty                          shift and go to state 594

state 522

    (32) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS . typeList classBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 595
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 523

    (33) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 596

state 524

    (34) normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 597

state 525

    (35) normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .

    SEMI            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    PUBLIC          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    PROTECTED       reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    PRIVATE         reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    ABSTRACT        reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    STATIC          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    FINAL           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    STRICTFP        reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    AT              reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    CLASS           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    ENUM            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    INTERFACE       reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    $end            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    BRPAREN         reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    ASSERT          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    IF              reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    FOR             reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    WHILE           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    DO              reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    TRY             reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    SWITCH          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    SYNCHRONIZED    reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    RETURN          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    THROW           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    BREAK           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    CONTINUE        reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    Identifier      reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    BLPAREN         reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    PLUS            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    DASH            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    OP_INC          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    OP_DEC          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    TILDE           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    EXCLAMATION     reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    LPAREN          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    THIS            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    SUPER           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NEW             reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    VOID            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    CharacterLiteral reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    StringLiteral   reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NULL            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    BOOLEAN         reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    CHAR            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    BYTE            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    SHORT           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    INT             reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    LONG            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    FLOAT           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    DOUBLE          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NUMBER          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    HEX_NUMBER      reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    LONG_NUMBER     reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    LONG_HEX_NUMBER reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NON_INTEGER_1   reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NON_INTEGER_2   reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NON_INTEGER_3   reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    TRUE            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    FALSE           reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    CASE            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    DEFAULT         reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    NATIVE          reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    TRANSIENT       reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    VOLATILE        reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)
    LESS            reduce using rule 35 (normalClassDeclaration -> CLASS Identifier typeParameters empty empty classBody .)


state 526

    (36) normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS . typeList classBody
    (74) typeList -> . type expt_9
    (75) typeList -> . type empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    typeList                       shift and go to state 598
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 302

state 527

    (37) normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 599

state 528

    (38) normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 600

state 529

    (39) normalClassDeclaration -> CLASS Identifier empty empty empty classBody .

    SEMI            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    PUBLIC          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    PROTECTED       reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    PRIVATE         reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    ABSTRACT        reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    STATIC          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    FINAL           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    STRICTFP        reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    AT              reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    CLASS           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    ENUM            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    INTERFACE       reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    $end            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    BRPAREN         reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    ASSERT          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    IF              reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    FOR             reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    WHILE           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    DO              reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    TRY             reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    SWITCH          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    SYNCHRONIZED    reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    RETURN          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    THROW           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    BREAK           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    CONTINUE        reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    Identifier      reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    BLPAREN         reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    PLUS            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    DASH            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    OP_INC          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    OP_DEC          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    TILDE           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    EXCLAMATION     reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    LPAREN          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    THIS            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    SUPER           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NEW             reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    VOID            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    CharacterLiteral reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    StringLiteral   reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NULL            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    BOOLEAN         reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    CHAR            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    BYTE            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    SHORT           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    INT             reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    LONG            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    FLOAT           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    DOUBLE          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NUMBER          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    HEX_NUMBER      reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    LONG_NUMBER     reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    LONG_HEX_NUMBER reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NON_INTEGER_1   reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NON_INTEGER_2   reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NON_INTEGER_3   reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    TRUE            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    FALSE           reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    CASE            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    DEFAULT         reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    NATIVE          reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    TRANSIENT       reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    VOLATILE        reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)
    LESS            reduce using rule 39 (normalClassDeclaration -> CLASS Identifier empty empty empty classBody .)


state 530

    (427) expt_7 -> COMMA . enumConstant
    (58) enumConstant -> . annotations Identifier arguments classBody
    (59) enumConstant -> . annotations Identifier arguments empty
    (60) enumConstant -> . annotations Identifier empty classBody
    (61) enumConstant -> . annotations Identifier empty empty
    (62) enumConstant -> . empty Identifier arguments classBody
    (63) enumConstant -> . empty Identifier arguments empty
    (64) enumConstant -> . empty Identifier empty classBody
    (65) enumConstant -> . empty Identifier empty empty
    (204) annotations -> . expr_10
    (528) empty -> .
    (512) expr_10 -> . annotation
    (513) expr_10 -> . expr_10 annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    Identifier      reduce using rule 528 (empty -> .)
    AT              shift and go to state 5

    enumConstant                   shift and go to state 601
    annotation                     shift and go to state 3
    expr_10                        shift and go to state 2
    annotations                    shift and go to state 453
    empty                          shift and go to state 602

state 531

    (56) enumConstants -> enumConstant expt_7 .
    (428) expt_7 -> expt_7 . COMMA enumConstant

  ! shift/reduce conflict for COMMA resolved as shift
    SEMI            reduce using rule 56 (enumConstants -> enumConstant expt_7 .)
    BRPAREN         reduce using rule 56 (enumConstants -> enumConstant expt_7 .)
    COMMA           shift and go to state 603

  ! COMMA           [ reduce using rule 56 (enumConstants -> enumConstant expt_7 .) ]


state 532

    (57) enumConstants -> enumConstant empty .

    COMMA           reduce using rule 57 (enumConstants -> enumConstant empty .)
    SEMI            reduce using rule 57 (enumConstants -> enumConstant empty .)
    BRPAREN         reduce using rule 57 (enumConstants -> enumConstant empty .)


state 533

    (58) enumConstant -> annotations Identifier . arguments classBody
    (59) enumConstant -> annotations Identifier . arguments empty
    (60) enumConstant -> annotations Identifier . empty classBody
    (61) enumConstant -> annotations Identifier . empty empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN
    (528) empty -> .

    LPAREN          shift and go to state 236
    BLPAREN         reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 604
    arguments                      shift and go to state 605

state 534

    (48) enumBody -> BLPAREN enumConstants COMMA . enumBodyDeclarations BRPAREN
    (49) enumBody -> BLPAREN enumConstants COMMA . empty BRPAREN
    (66) enumBodyDeclarations -> . SEMI expt_8
    (67) enumBodyDeclarations -> . SEMI empty
    (528) empty -> .

    SEMI            shift and go to state 606
    BRPAREN         reduce using rule 528 (empty -> .)

    enumBodyDeclarations           shift and go to state 607
    empty                          shift and go to state 608

state 535

    (50) enumBody -> BLPAREN enumConstants empty . enumBodyDeclarations BRPAREN
    (51) enumBody -> BLPAREN enumConstants empty . empty BRPAREN
    (66) enumBodyDeclarations -> . SEMI expt_8
    (67) enumBodyDeclarations -> . SEMI empty
    (528) empty -> .

    SEMI            shift and go to state 606
    BRPAREN         reduce using rule 528 (empty -> .)

    enumBodyDeclarations           shift and go to state 609
    empty                          shift and go to state 610

state 536

    (52) enumBody -> BLPAREN empty COMMA . enumBodyDeclarations BRPAREN
    (53) enumBody -> BLPAREN empty COMMA . empty BRPAREN
    (66) enumBodyDeclarations -> . SEMI expt_8
    (67) enumBodyDeclarations -> . SEMI empty
    (528) empty -> .

    SEMI            shift and go to state 606
    BRPAREN         reduce using rule 528 (empty -> .)

    enumBodyDeclarations           shift and go to state 611
    empty                          shift and go to state 612

state 537

    (62) enumConstant -> empty Identifier . arguments classBody
    (63) enumConstant -> empty Identifier . arguments empty
    (64) enumConstant -> empty Identifier . empty classBody
    (65) enumConstant -> empty Identifier . empty empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN
    (528) empty -> .

    LPAREN          shift and go to state 236
    BLPAREN         reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    arguments                      shift and go to state 613
    empty                          shift and go to state 614

state 538

    (54) enumBody -> BLPAREN empty empty . enumBodyDeclarations BRPAREN
    (55) enumBody -> BLPAREN empty empty . empty BRPAREN
    (66) enumBodyDeclarations -> . SEMI expt_8
    (67) enumBodyDeclarations -> . SEMI empty
    (528) empty -> .

    SEMI            shift and go to state 606
    BRPAREN         reduce using rule 528 (empty -> .)

    enumBodyDeclarations           shift and go to state 615
    empty                          shift and go to state 616

state 539

    (422) expt_4 -> expt_4 modifier .

    PUBLIC          reduce using rule 422 (expt_4 -> expt_4 modifier .)
    PROTECTED       reduce using rule 422 (expt_4 -> expt_4 modifier .)
    PRIVATE         reduce using rule 422 (expt_4 -> expt_4 modifier .)
    STATIC          reduce using rule 422 (expt_4 -> expt_4 modifier .)
    ABSTRACT        reduce using rule 422 (expt_4 -> expt_4 modifier .)
    FINAL           reduce using rule 422 (expt_4 -> expt_4 modifier .)
    NATIVE          reduce using rule 422 (expt_4 -> expt_4 modifier .)
    SYNCHRONIZED    reduce using rule 422 (expt_4 -> expt_4 modifier .)
    TRANSIENT       reduce using rule 422 (expt_4 -> expt_4 modifier .)
    VOLATILE        reduce using rule 422 (expt_4 -> expt_4 modifier .)
    STRICTFP        reduce using rule 422 (expt_4 -> expt_4 modifier .)
    AT              reduce using rule 422 (expt_4 -> expt_4 modifier .)
    VOID            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    Identifier      reduce using rule 422 (expt_4 -> expt_4 modifier .)
    LESS            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    INTERFACE       reduce using rule 422 (expt_4 -> expt_4 modifier .)
    CLASS           reduce using rule 422 (expt_4 -> expt_4 modifier .)
    ENUM            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    BOOLEAN         reduce using rule 422 (expt_4 -> expt_4 modifier .)
    CHAR            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    BYTE            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    SHORT           reduce using rule 422 (expt_4 -> expt_4 modifier .)
    INT             reduce using rule 422 (expt_4 -> expt_4 modifier .)
    LONG            reduce using rule 422 (expt_4 -> expt_4 modifier .)
    FLOAT           reduce using rule 422 (expt_4 -> expt_4 modifier .)
    DOUBLE          reduce using rule 422 (expt_4 -> expt_4 modifier .)


state 540

    (221) annotationTypeBody -> BLPAREN empty BRPAREN .

    SEMI            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    PUBLIC          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    PROTECTED       reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    PRIVATE         reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    ABSTRACT        reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    STATIC          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    FINAL           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    STRICTFP        reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    AT              reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    CLASS           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    ENUM            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    INTERFACE       reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    $end            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    BRPAREN         reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    ASSERT          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    IF              reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    FOR             reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    WHILE           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    DO              reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    TRY             reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    SWITCH          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    RETURN          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    THROW           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    BREAK           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    CONTINUE        reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    Identifier      reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    BLPAREN         reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    PLUS            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    DASH            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    OP_INC          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    OP_DEC          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    TILDE           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    EXCLAMATION     reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    LPAREN          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    THIS            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    SUPER           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NEW             reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    VOID            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    CharacterLiteral reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    StringLiteral   reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NULL            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    BOOLEAN         reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    CHAR            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    BYTE            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    SHORT           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    INT             reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    LONG            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    FLOAT           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    DOUBLE          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NUMBER          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    HEX_NUMBER      reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    LONG_NUMBER     reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    TRUE            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    FALSE           reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    CASE            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    DEFAULT         reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    NATIVE          reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    TRANSIENT       reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    VOLATILE        reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)
    LESS            reduce using rule 221 (annotationTypeBody -> BLPAREN empty BRPAREN .)


state 541

    (29) modifiers -> empty .

    VOID            reduce using rule 29 (modifiers -> empty .)
    LESS            reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    CLASS           reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)


state 542

    (220) annotationTypeBody -> BLPAREN expt_22 BRPAREN .

    SEMI            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    PUBLIC          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    PROTECTED       reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    PRIVATE         reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    ABSTRACT        reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    STATIC          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    FINAL           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    STRICTFP        reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    AT              reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    CLASS           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    ENUM            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    INTERFACE       reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    $end            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    BRPAREN         reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    ASSERT          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    IF              reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    FOR             reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    WHILE           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    DO              reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    TRY             reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    SWITCH          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    SYNCHRONIZED    reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    RETURN          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    THROW           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    BREAK           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    CONTINUE        reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    Identifier      reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    BLPAREN         reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    PLUS            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    DASH            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    OP_INC          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    OP_DEC          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    TILDE           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    EXCLAMATION     reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    LPAREN          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    THIS            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    SUPER           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NEW             reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    VOID            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    CharacterLiteral reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    StringLiteral   reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NULL            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    BOOLEAN         reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    CHAR            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    BYTE            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    SHORT           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    INT             reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    LONG            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    FLOAT           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    DOUBLE          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NUMBER          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    HEX_NUMBER      reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    LONG_NUMBER     reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NON_INTEGER_1   reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NON_INTEGER_2   reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NON_INTEGER_3   reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    TRUE            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    FALSE           reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    CASE            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    DEFAULT         reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    NATIVE          reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    TRANSIENT       reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    VOLATILE        reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)
    LESS            reduce using rule 220 (annotationTypeBody -> BLPAREN expt_22 BRPAREN .)


state 543

    (450) expt_22 -> expt_22 annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    STATIC          reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    FINAL           reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    AT              reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    CLASS           reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    INTERFACE       reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    ENUM            reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    Identifier      reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    BOOLEAN         reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    CHAR            reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    BYTE            reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    SHORT           reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    INT             reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    LONG            reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    FLOAT           reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)
    DOUBLE          reduce using rule 450 (expt_22 -> expt_22 annotationTypeElementDeclaration .)


state 544

    (226) annotationTypeElementRest -> normalInterfaceDeclaration . SEMI
    (227) annotationTypeElementRest -> normalInterfaceDeclaration . empty
    (528) empty -> .

    SEMI            shift and go to state 618
    BRPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 617

state 545

    (224) annotationTypeElementRest -> normalClassDeclaration . SEMI
    (225) annotationTypeElementRest -> normalClassDeclaration . empty
    (528) empty -> .

    SEMI            shift and go to state 620
    BRPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 619

state 546

    (223) annotationTypeElementRest -> type . annotationMethodOrConstantRest SEMI
    (232) annotationMethodOrConstantRest -> . annotationMethodRest
    (233) annotationMethodOrConstantRest -> . annotationConstantRest
    (234) annotationMethodRest -> . Identifier LPAREN RPAREN defaultValue
    (235) annotationMethodRest -> . Identifier LPAREN RPAREN empty
    (236) annotationConstantRest -> . variableDeclarators
    (122) variableDeclarators -> . variableDeclarator expt_12
    (123) variableDeclarators -> . variableDeclarator empty
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 625

    annotationMethodOrConstantRest shift and go to state 621
    variableDeclarators            shift and go to state 622
    annotationConstantRest         shift and go to state 623
    annotationMethodRest           shift and go to state 626
    variableDeclaratorId           shift and go to state 624
    variableDeclarator             shift and go to state 627

state 547

    (228) annotationTypeElementRest -> enumDeclaration . SEMI
    (229) annotationTypeElementRest -> enumDeclaration . empty
    (528) empty -> .

    SEMI            shift and go to state 629
    BRPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 628

state 548

    (222) annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .

    BRPAREN         reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PUBLIC          reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PROTECTED       reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PRIVATE         reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    STATIC          reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    ABSTRACT        reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    FINAL           reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    NATIVE          reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    SYNCHRONIZED    reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    TRANSIENT       reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    VOLATILE        reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    STRICTFP        reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    AT              reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    CLASS           reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    INTERFACE       reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    ENUM            reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    Identifier      reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    BOOLEAN         reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    CHAR            reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    BYTE            reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    SHORT           reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    INT             reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    LONG            reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    FLOAT           reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    DOUBLE          reduce using rule 222 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)


state 549

    (230) annotationTypeElementRest -> annotationTypeDeclaration . SEMI
    (231) annotationTypeElementRest -> annotationTypeDeclaration . empty
    (528) empty -> .

    SEMI            shift and go to state 631
    BRPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    NATIVE          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    TRANSIENT       reduce using rule 528 (empty -> .)
    VOLATILE        reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 630

state 550

    (70) normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .

    BRPAREN         reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    SEMI            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    PUBLIC          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    PROTECTED       reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    PRIVATE         reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    STATIC          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    ABSTRACT        reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    FINAL           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NATIVE          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    SYNCHRONIZED    reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    TRANSIENT       reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    VOLATILE        reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    STRICTFP        reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    AT              reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    VOID            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    LESS            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    INTERFACE       reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    CLASS           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    ENUM            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    Identifier      reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    BOOLEAN         reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    CHAR            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    BYTE            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    SHORT           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    INT             reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    LONG            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    FLOAT           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    DOUBLE          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    $end            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    ASSERT          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    IF              reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    FOR             reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    WHILE           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    DO              reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    TRY             reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    SWITCH          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    RETURN          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    THROW           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    BREAK           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    CONTINUE        reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    BLPAREN         reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    PLUS            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    DASH            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    OP_INC          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    OP_DEC          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    TILDE           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    EXCLAMATION     reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    LPAREN          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    THIS            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    SUPER           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NEW             reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    CharacterLiteral reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    StringLiteral   reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NULL            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NUMBER          reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    HEX_NUMBER      reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    LONG_NUMBER     reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NON_INTEGER_1   reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NON_INTEGER_2   reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    NON_INTEGER_3   reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    TRUE            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    FALSE           reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    CASE            reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)
    DEFAULT         reduce using rule 70 (normalInterfaceDeclaration -> INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody .)


state 551

    (97) interfaceBodyDeclaration -> SEMI .

    BRPAREN         reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    SEMI            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    AT              reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    VOID            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    LESS            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    INTERFACE       reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    CLASS           reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    ENUM            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    Identifier      reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    BOOLEAN         reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    CHAR            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    BYTE            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    SHORT           reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    INT             reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    LONG            reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    FLOAT           reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)
    DOUBLE          reduce using rule 97 (interfaceBodyDeclaration -> SEMI .)


state 552

    (79) interfaceBody -> BLPAREN empty . BRPAREN
    (29) modifiers -> empty .

    BRPAREN         shift and go to state 632
    VOID            reduce using rule 29 (modifiers -> empty .)
    LESS            reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    CLASS           reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)


state 553

    (467) expt_10 -> interfaceBodyDeclaration .

    BRPAREN         reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    SEMI            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    STATIC          reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    FINAL           reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    NATIVE          reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    AT              reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    VOID            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    LESS            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    INTERFACE       reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    CLASS           reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    ENUM            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    Identifier      reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    BOOLEAN         reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    CHAR            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    BYTE            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    SHORT           reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    INT             reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    LONG            reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    FLOAT           reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)
    DOUBLE          reduce using rule 467 (expt_10 -> interfaceBodyDeclaration .)


state 554

    (96) interfaceBodyDeclaration -> modifiers . interfaceMemberDecl
    (98) interfaceMemberDecl -> . interfaceMethodOrFieldDecl
    (99) interfaceMemberDecl -> . interfaceGenericMethodDecl
    (100) interfaceMemberDecl -> . VOID Identifier voidInterfaceMethodDeclaratorRest
    (101) interfaceMemberDecl -> . interfaceDeclaration
    (102) interfaceMemberDecl -> . classDeclaration
    (103) interfaceMethodOrFieldDecl -> . type Identifier interfaceMethodOrFieldRest
    (116) interfaceGenericMethodDecl -> . typeParameters expr_7 Identifier interfaceMethodDeclaratorRest
    (68) interfaceDeclaration -> . normalInterfaceDeclaration
    (69) interfaceDeclaration -> . annotationTypeDeclaration
    (30) classDeclaration -> . normalClassDeclaration
    (31) classDeclaration -> . enumDeclaration
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (40) typeParameters -> . LESS typeParameter expt_5 MORE
    (41) typeParameters -> . LESS typeParameter empty MORE
    (70) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters EXTENDS typeList interfaceBody
    (71) normalInterfaceDeclaration -> . INTERFACE Identifier typeParameters empty interfaceBody
    (72) normalInterfaceDeclaration -> . INTERFACE Identifier empty EXTENDS typeList interfaceBody
    (73) normalInterfaceDeclaration -> . INTERFACE Identifier empty empty interfaceBody
    (219) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (32) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody
    (33) normalClassDeclaration -> . CLASS Identifier typeParameters EXTENDS type empty classBody
    (34) normalClassDeclaration -> . CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody
    (35) normalClassDeclaration -> . CLASS Identifier typeParameters empty empty classBody
    (36) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody
    (37) normalClassDeclaration -> . CLASS Identifier empty EXTENDS type empty classBody
    (38) normalClassDeclaration -> . CLASS Identifier empty empty IMPLEMENTS typeList classBody
    (39) normalClassDeclaration -> . CLASS Identifier empty empty empty classBody
    (46) enumDeclaration -> . ENUM Identifier IMPLEMENTS typeList enumBody
    (47) enumDeclaration -> . ENUM Identifier empty enumBody
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    VOID            shift and go to state 633
    LESS            shift and go to state 237
    INTERFACE       shift and go to state 66
    AT              shift and go to state 63
    CLASS           shift and go to state 59
    ENUM            shift and go to state 61
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    interfaceMethodOrFieldDecl     shift and go to state 634
    typeParameters                 shift and go to state 635
    normalInterfaceDeclaration     shift and go to state 56
    normalClassDeclaration         shift and go to state 57
    interfaceMemberDecl            shift and go to state 636
    classOrInterfaceType           shift and go to state 226
    interfaceGenericMethodDecl     shift and go to state 637
    type                           shift and go to state 638
    enumDeclaration                shift and go to state 60
    classDeclaration               shift and go to state 639
    primitiveType                  shift and go to state 252
    annotationTypeDeclaration      shift and go to state 65
    interfaceDeclaration           shift and go to state 640

state 555

    (78) interfaceBody -> BLPAREN expt_10 . BRPAREN
    (468) expt_10 -> expt_10 . interfaceBodyDeclaration
    (96) interfaceBodyDeclaration -> . modifiers interfaceMemberDecl
    (97) interfaceBodyDeclaration -> . SEMI
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (528) empty -> .
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         shift and go to state 641
    SEMI            shift and go to state 551
    VOID            reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    STATIC          shift and go to state 459
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 554
    expt_4                         shift and go to state 462
    interfaceBodyDeclaration       shift and go to state 642
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 541

state 556

    (72) normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .

    BRPAREN         reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    SEMI            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    PUBLIC          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    PROTECTED       reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    PRIVATE         reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    STATIC          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    ABSTRACT        reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    FINAL           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NATIVE          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    SYNCHRONIZED    reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    TRANSIENT       reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    VOLATILE        reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    STRICTFP        reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    AT              reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    VOID            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    LESS            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    INTERFACE       reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    CLASS           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    ENUM            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    Identifier      reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    BOOLEAN         reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    CHAR            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    BYTE            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    SHORT           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    INT             reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    LONG            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    FLOAT           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    DOUBLE          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    $end            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    ASSERT          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    IF              reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    FOR             reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    WHILE           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    DO              reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    TRY             reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    SWITCH          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    RETURN          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    THROW           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    BREAK           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    CONTINUE        reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    BLPAREN         reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    PLUS            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    DASH            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    OP_INC          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    OP_DEC          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    TILDE           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    EXCLAMATION     reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    LPAREN          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    THIS            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    SUPER           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NEW             reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    CharacterLiteral reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    StringLiteral   reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NULL            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NUMBER          reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    HEX_NUMBER      reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    LONG_NUMBER     reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NON_INTEGER_1   reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NON_INTEGER_2   reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    NON_INTEGER_3   reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    TRUE            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    FALSE           reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    CASE            reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)
    DEFAULT         reduce using rule 72 (normalInterfaceDeclaration -> INTERFACE Identifier empty EXTENDS typeList interfaceBody .)


state 557

    (478) expr_20 -> expr_20 FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 478 (expr_20 -> expr_20 FLPAREN expression FRPAREN .)
    DOT             reduce using rule 478 (expr_20 -> expr_20 FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 478 (expr_20 -> expr_20 FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 478 (expr_20 -> expr_20 FLPAREN expression FRPAREN .)


state 558

    (386) explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .

    DOT             reduce using rule 386 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    FLPAREN         reduce using rule 386 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    OP_INC          reduce using rule 386 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    OP_DEC          reduce using rule 386 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)


state 559

    (381) innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest .

    OP_INC          reduce using rule 381 (innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest .)
    OP_DEC          reduce using rule 381 (innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest .)
    DOT             reduce using rule 381 (innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest .)
    FLPAREN         reduce using rule 381 (innerCreator -> nonWildcardTypeArguments Identifier classCreatorRest .)


state 560

    (382) innerCreator -> empty Identifier classCreatorRest .

    OP_INC          reduce using rule 382 (innerCreator -> empty Identifier classCreatorRest .)
    OP_DEC          reduce using rule 382 (innerCreator -> empty Identifier classCreatorRest .)
    DOT             reduce using rule 382 (innerCreator -> empty Identifier classCreatorRest .)
    FLPAREN         reduce using rule 382 (innerCreator -> empty Identifier classCreatorRest .)


state 561

    (420) expt_9 -> expt_9 COMMA type .

    COMMA           reduce using rule 420 (expt_9 -> expt_9 COMMA type .)
    MORE            reduce using rule 420 (expt_9 -> expt_9 COMMA type .)
    BLPAREN         reduce using rule 420 (expt_9 -> expt_9 COMMA type .)


state 562

    (172) typeArguments -> LESS typeArgument expt_16 MORE .

    DOT             reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    FLPAREN         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    Identifier      reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    LPAREN          reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    RPAREN          reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    OP_EQ           reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    OP_NE           reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    AND             reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    CARET           reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    VERTICAL        reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    OP_LAND         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    OP_LOR          reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    QUES            reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    COMMA           reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    EQUALS          reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_ADD         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_SUB         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_MUL         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_DIV         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_AND         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_OR          reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_XOR         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    ASS_MOD         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    LESS            reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    MORE            reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    COLON           reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    FRPAREN         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    BRPAREN         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    SEMI            reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    BLPAREN         reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    IMPLEMENTS      reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)
    OP_ARRAY        reduce using rule 172 (typeArguments -> LESS typeArgument expt_16 MORE .)


state 563

    (456) expt_16 -> expt_16 COMMA . typeArgument
    (174) typeArgument -> . type
    (175) typeArgument -> . QUES expr_8 type
    (176) typeArgument -> . QUES empty
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    QUES            shift and go to state 408
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    typeArgument                   shift and go to state 643
    type                           shift and go to state 406

state 564

    (455) expt_16 -> COMMA typeArgument .

    MORE            reduce using rule 455 (expt_16 -> COMMA typeArgument .)
    COMMA           reduce using rule 455 (expt_16 -> COMMA typeArgument .)


state 565

    (173) typeArguments -> LESS typeArgument empty MORE .

    DOT             reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    FLPAREN         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    Identifier      reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    LPAREN          reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    RPAREN          reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    OP_EQ           reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    OP_NE           reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    AND             reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    CARET           reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    VERTICAL        reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    OP_LAND         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    OP_LOR          reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    QUES            reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    COMMA           reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    EQUALS          reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_ADD         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_SUB         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_MUL         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_DIV         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_AND         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_OR          reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_XOR         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    ASS_MOD         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    LESS            reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    MORE            reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    COLON           reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    FRPAREN         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    BRPAREN         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    SEMI            reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    BLPAREN         reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    IMPLEMENTS      reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)
    OP_ARRAY        reduce using rule 173 (typeArguments -> LESS typeArgument empty MORE .)


state 566

    (175) typeArgument -> QUES expr_8 type .

    MORE            reduce using rule 175 (typeArgument -> QUES expr_8 type .)
    COMMA           reduce using rule 175 (typeArgument -> QUES expr_8 type .)


state 567

    (461) expt_15 -> DOT Identifier typeArguments .

    DOT             reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    FLPAREN         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    LPAREN          reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    OP_EQ           reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    OP_NE           reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    AND             reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    CARET           reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    VERTICAL        reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    OP_LAND         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    OP_LOR          reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    QUES            reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    RPAREN          reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    COMMA           reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    EQUALS          reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_ADD         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_SUB         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_MUL         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_DIV         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_AND         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_OR          reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_XOR         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    ASS_MOD         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    LESS            reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    MORE            reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    COLON           reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    FRPAREN         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    BRPAREN         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    SEMI            reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    BLPAREN         reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    IMPLEMENTS      reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    Identifier      reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)
    OP_ARRAY        reduce using rule 461 (expt_15 -> DOT Identifier typeArguments .)


state 568

    (462) expt_15 -> expt_15 DOT Identifier . typeArguments
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE

    LESS            shift and go to state 304

    typeArguments                  shift and go to state 644

state 569

    (479) expr_22 -> FRPAREN expt_11 arrayInitializer .

    DOT             reduce using rule 479 (expr_22 -> FRPAREN expt_11 arrayInitializer .)
    FLPAREN         reduce using rule 479 (expr_22 -> FRPAREN expt_11 arrayInitializer .)
    OP_INC          reduce using rule 479 (expr_22 -> FRPAREN expt_11 arrayInitializer .)
    OP_DEC          reduce using rule 479 (expr_22 -> FRPAREN expt_11 arrayInitializer .)


state 570

    (134) arrayInitializer -> BLPAREN . empty BRPAREN
    (135) arrayInitializer -> BLPAREN . variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> BLPAREN . variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> BLPAREN . variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> BLPAREN . variableInitializer empty empty BRPAREN
    (528) empty -> .
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BRPAREN         reduce using rule 528 (empty -> .)
    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 648
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 645
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 571

    (480) expr_22 -> expression FRPAREN expt_38 . expt_11
    (400) expt_38 -> expt_38 . FLPAREN expression FRPAREN
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN

    FLPAREN         shift and go to state 649

    expt_11                        shift and go to state 650

state 572

    (399) expt_38 -> FLPAREN . expression FRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 651

state 573

    (81) classBodyDeclaration -> STATIC block .

    SEMI            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    STATIC          reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    PUBLIC          reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    PROTECTED       reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    PRIVATE         reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    ABSTRACT        reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    FINAL           reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    NATIVE          reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    SYNCHRONIZED    reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    TRANSIENT       reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    VOLATILE        reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    STRICTFP        reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    AT              reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    BLPAREN         reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    VOID            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    Identifier      reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    LESS            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    INTERFACE       reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    CLASS           reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    ENUM            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    BOOLEAN         reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    CHAR            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    BYTE            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    SHORT           reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    INT             reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    LONG            reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    FLOAT           reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    DOUBLE          reduce using rule 81 (classBodyDeclaration -> STATIC block .)
    BRPAREN         reduce using rule 81 (classBodyDeclaration -> STATIC block .)


state 574

    (238) block -> BLPAREN . expt_18 BRPAREN
    (239) block -> BLPAREN . empty BRPAREN
    (471) expt_18 -> . blockStatement
    (472) expt_18 -> . expt_18 blockStatement
    (528) empty -> .
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 652
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 670
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    expt_18                        shift and go to state 680
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 575

    (82) classBodyDeclaration -> empty . block
    (29) modifiers -> empty .
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    VOID            reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    LESS            reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    CLASS           reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)
    BLPAREN         shift and go to state 574

    block                          shift and go to state 578

state 576

    (76) classBody -> BLPAREN expt_8 BRPAREN .

    SEMI            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    PUBLIC          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    PROTECTED       reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    PRIVATE         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    ABSTRACT        reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    STATIC          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    FINAL           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    STRICTFP        reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    AT              reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    CLASS           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    ENUM            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    INTERFACE       reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    $end            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    BRPAREN         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    ASSERT          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    IF              reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    FOR             reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    WHILE           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    DO              reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    TRY             reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    SWITCH          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    SYNCHRONIZED    reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    RETURN          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    THROW           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    BREAK           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    CONTINUE        reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    Identifier      reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    BLPAREN         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    PLUS            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    DASH            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    OP_INC          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    OP_DEC          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    TILDE           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    EXCLAMATION     reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    LPAREN          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    THIS            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    SUPER           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NEW             reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    VOID            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    CharacterLiteral reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    StringLiteral   reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NULL            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    BOOLEAN         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    CHAR            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    BYTE            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    SHORT           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    INT             reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    LONG            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    FLOAT           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    DOUBLE          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NUMBER          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    HEX_NUMBER      reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    LONG_NUMBER     reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NON_INTEGER_1   reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NON_INTEGER_2   reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NON_INTEGER_3   reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    TRUE            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    FALSE           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    CASE            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    DEFAULT         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    NATIVE          reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    TRANSIENT       reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    VOLATILE        reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    LESS            reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    COMMA           reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    DOT             reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)
    FLPAREN         reduce using rule 76 (classBody -> BLPAREN expt_8 BRPAREN .)


state 577

    (418) expt_8 -> expt_8 classBodyDeclaration .

    SEMI            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    STATIC          reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    PUBLIC          reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    PROTECTED       reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    PRIVATE         reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    ABSTRACT        reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    FINAL           reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    NATIVE          reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    TRANSIENT       reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    VOLATILE        reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    STRICTFP        reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    AT              reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    BLPAREN         reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    VOID            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    Identifier      reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    LESS            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    INTERFACE       reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    CLASS           reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    ENUM            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    BOOLEAN         reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    CHAR            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    BYTE            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    SHORT           reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    INT             reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    LONG            reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    FLOAT           reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    DOUBLE          reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)
    BRPAREN         reduce using rule 418 (expt_8 -> expt_8 classBodyDeclaration .)


state 578

    (82) classBodyDeclaration -> empty block .

    SEMI            reduce using rule 82 (classBodyDeclaration -> empty block .)
    STATIC          reduce using rule 82 (classBodyDeclaration -> empty block .)
    PUBLIC          reduce using rule 82 (classBodyDeclaration -> empty block .)
    PROTECTED       reduce using rule 82 (classBodyDeclaration -> empty block .)
    PRIVATE         reduce using rule 82 (classBodyDeclaration -> empty block .)
    ABSTRACT        reduce using rule 82 (classBodyDeclaration -> empty block .)
    FINAL           reduce using rule 82 (classBodyDeclaration -> empty block .)
    NATIVE          reduce using rule 82 (classBodyDeclaration -> empty block .)
    SYNCHRONIZED    reduce using rule 82 (classBodyDeclaration -> empty block .)
    TRANSIENT       reduce using rule 82 (classBodyDeclaration -> empty block .)
    VOLATILE        reduce using rule 82 (classBodyDeclaration -> empty block .)
    STRICTFP        reduce using rule 82 (classBodyDeclaration -> empty block .)
    AT              reduce using rule 82 (classBodyDeclaration -> empty block .)
    BLPAREN         reduce using rule 82 (classBodyDeclaration -> empty block .)
    VOID            reduce using rule 82 (classBodyDeclaration -> empty block .)
    Identifier      reduce using rule 82 (classBodyDeclaration -> empty block .)
    LESS            reduce using rule 82 (classBodyDeclaration -> empty block .)
    INTERFACE       reduce using rule 82 (classBodyDeclaration -> empty block .)
    CLASS           reduce using rule 82 (classBodyDeclaration -> empty block .)
    ENUM            reduce using rule 82 (classBodyDeclaration -> empty block .)
    BOOLEAN         reduce using rule 82 (classBodyDeclaration -> empty block .)
    CHAR            reduce using rule 82 (classBodyDeclaration -> empty block .)
    BYTE            reduce using rule 82 (classBodyDeclaration -> empty block .)
    SHORT           reduce using rule 82 (classBodyDeclaration -> empty block .)
    INT             reduce using rule 82 (classBodyDeclaration -> empty block .)
    LONG            reduce using rule 82 (classBodyDeclaration -> empty block .)
    FLOAT           reduce using rule 82 (classBodyDeclaration -> empty block .)
    DOUBLE          reduce using rule 82 (classBodyDeclaration -> empty block .)
    BRPAREN         reduce using rule 82 (classBodyDeclaration -> empty block .)


state 579

    (77) classBody -> BLPAREN empty BRPAREN .

    SEMI            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    PUBLIC          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    PROTECTED       reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    PRIVATE         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    ABSTRACT        reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    STATIC          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    FINAL           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    STRICTFP        reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    AT              reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    CLASS           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    ENUM            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    INTERFACE       reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    $end            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    BRPAREN         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    ASSERT          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    IF              reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    FOR             reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    WHILE           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    DO              reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    TRY             reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    SWITCH          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    RETURN          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    THROW           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    BREAK           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    CONTINUE        reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    Identifier      reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    BLPAREN         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    PLUS            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    DASH            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    OP_INC          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    OP_DEC          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    TILDE           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    EXCLAMATION     reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    LPAREN          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    THIS            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    SUPER           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NEW             reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    VOID            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    CharacterLiteral reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    StringLiteral   reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NULL            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    BOOLEAN         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    CHAR            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    BYTE            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    SHORT           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    INT             reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    LONG            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    FLOAT           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    DOUBLE          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NUMBER          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    HEX_NUMBER      reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    LONG_NUMBER     reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    TRUE            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    FALSE           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    CASE            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    DEFAULT         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    NATIVE          reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    TRANSIENT       reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    VOLATILE        reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    LESS            reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    COMMA           reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    DOT             reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)
    FLPAREN         reduce using rule 77 (classBody -> BLPAREN empty BRPAREN .)


state 580

    (86) memberDecl -> VOID . Identifier voidMethodDeclaratorRest

    Identifier      shift and go to state 681


state 581

    (83) classBodyDeclaration -> modifiers memberDecl .

    SEMI            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    STATIC          reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    PUBLIC          reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    PROTECTED       reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    PRIVATE         reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    ABSTRACT        reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    FINAL           reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    NATIVE          reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    SYNCHRONIZED    reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    TRANSIENT       reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    VOLATILE        reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    STRICTFP        reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    AT              reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    BLPAREN         reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    VOID            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    Identifier      reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    LESS            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    INTERFACE       reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    CLASS           reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    ENUM            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    BOOLEAN         reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    CHAR            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    BYTE            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    SHORT           reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    INT             reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    LONG            reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    FLOAT           reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    DOUBLE          reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)
    BRPAREN         reduce using rule 83 (classBodyDeclaration -> modifiers memberDecl .)


state 582

    (91) genericMethodOrConstructorDecl -> typeParameters . genericMethodOrConstructorRest
    (92) genericMethodOrConstructorRest -> . expr_4 Identifier methodDeclaratorRest
    (93) genericMethodOrConstructorRest -> . Identifier constructorDeclaratorRest
    (489) expr_4 -> . type
    (490) expr_4 -> . VOID
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 686
    VOID            shift and go to state 682
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    primitiveType                  shift and go to state 252
    classOrInterfaceType           shift and go to state 226
    genericMethodOrConstructorRest shift and go to state 683
    type                           shift and go to state 685
    expr_4                         shift and go to state 684

state 583

    (85) memberDecl -> memberDeclaration .

    BRPAREN         reduce using rule 85 (memberDecl -> memberDeclaration .)
    SEMI            reduce using rule 85 (memberDecl -> memberDeclaration .)
    STATIC          reduce using rule 85 (memberDecl -> memberDeclaration .)
    PUBLIC          reduce using rule 85 (memberDecl -> memberDeclaration .)
    PROTECTED       reduce using rule 85 (memberDecl -> memberDeclaration .)
    PRIVATE         reduce using rule 85 (memberDecl -> memberDeclaration .)
    ABSTRACT        reduce using rule 85 (memberDecl -> memberDeclaration .)
    FINAL           reduce using rule 85 (memberDecl -> memberDeclaration .)
    NATIVE          reduce using rule 85 (memberDecl -> memberDeclaration .)
    SYNCHRONIZED    reduce using rule 85 (memberDecl -> memberDeclaration .)
    TRANSIENT       reduce using rule 85 (memberDecl -> memberDeclaration .)
    VOLATILE        reduce using rule 85 (memberDecl -> memberDeclaration .)
    STRICTFP        reduce using rule 85 (memberDecl -> memberDeclaration .)
    AT              reduce using rule 85 (memberDecl -> memberDeclaration .)
    BLPAREN         reduce using rule 85 (memberDecl -> memberDeclaration .)
    VOID            reduce using rule 85 (memberDecl -> memberDeclaration .)
    Identifier      reduce using rule 85 (memberDecl -> memberDeclaration .)
    LESS            reduce using rule 85 (memberDecl -> memberDeclaration .)
    INTERFACE       reduce using rule 85 (memberDecl -> memberDeclaration .)
    CLASS           reduce using rule 85 (memberDecl -> memberDeclaration .)
    ENUM            reduce using rule 85 (memberDecl -> memberDeclaration .)
    BOOLEAN         reduce using rule 85 (memberDecl -> memberDeclaration .)
    CHAR            reduce using rule 85 (memberDecl -> memberDeclaration .)
    BYTE            reduce using rule 85 (memberDecl -> memberDeclaration .)
    SHORT           reduce using rule 85 (memberDecl -> memberDeclaration .)
    INT             reduce using rule 85 (memberDecl -> memberDeclaration .)
    LONG            reduce using rule 85 (memberDecl -> memberDeclaration .)
    FLOAT           reduce using rule 85 (memberDecl -> memberDeclaration .)
    DOUBLE          reduce using rule 85 (memberDecl -> memberDeclaration .)


state 584

    (90) memberDeclaration -> type . expr_3
    (495) expr_3 -> . methodDeclaration
    (496) expr_3 -> . fieldDeclaration
    (94) methodDeclaration -> . Identifier methodDeclaratorRest
    (95) fieldDeclaration -> . variableDeclarators SEMI
    (122) variableDeclarators -> . variableDeclarator expt_12
    (123) variableDeclarators -> . variableDeclarator empty
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 689

    variableDeclarators            shift and go to state 687
    fieldDeclaration               shift and go to state 688
    variableDeclaratorId           shift and go to state 624
    methodDeclaration              shift and go to state 690
    expr_3                         shift and go to state 691
    variableDeclarator             shift and go to state 627

state 585

    (84) memberDecl -> genericMethodOrConstructorDecl .

    BRPAREN         reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    SEMI            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    STATIC          reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    PUBLIC          reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    PROTECTED       reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    PRIVATE         reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    ABSTRACT        reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    FINAL           reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    NATIVE          reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    SYNCHRONIZED    reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    TRANSIENT       reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    VOLATILE        reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    STRICTFP        reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    AT              reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    BLPAREN         reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    VOID            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    Identifier      reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    LESS            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    INTERFACE       reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    CLASS           reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    ENUM            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    BOOLEAN         reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    CHAR            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    BYTE            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    SHORT           reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    INT             reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    LONG            reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    FLOAT           reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)
    DOUBLE          reduce using rule 84 (memberDecl -> genericMethodOrConstructorDecl .)


state 586

    (89) memberDecl -> classDeclaration .

    BRPAREN         reduce using rule 89 (memberDecl -> classDeclaration .)
    SEMI            reduce using rule 89 (memberDecl -> classDeclaration .)
    STATIC          reduce using rule 89 (memberDecl -> classDeclaration .)
    PUBLIC          reduce using rule 89 (memberDecl -> classDeclaration .)
    PROTECTED       reduce using rule 89 (memberDecl -> classDeclaration .)
    PRIVATE         reduce using rule 89 (memberDecl -> classDeclaration .)
    ABSTRACT        reduce using rule 89 (memberDecl -> classDeclaration .)
    FINAL           reduce using rule 89 (memberDecl -> classDeclaration .)
    NATIVE          reduce using rule 89 (memberDecl -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 89 (memberDecl -> classDeclaration .)
    TRANSIENT       reduce using rule 89 (memberDecl -> classDeclaration .)
    VOLATILE        reduce using rule 89 (memberDecl -> classDeclaration .)
    STRICTFP        reduce using rule 89 (memberDecl -> classDeclaration .)
    AT              reduce using rule 89 (memberDecl -> classDeclaration .)
    BLPAREN         reduce using rule 89 (memberDecl -> classDeclaration .)
    VOID            reduce using rule 89 (memberDecl -> classDeclaration .)
    Identifier      reduce using rule 89 (memberDecl -> classDeclaration .)
    LESS            reduce using rule 89 (memberDecl -> classDeclaration .)
    INTERFACE       reduce using rule 89 (memberDecl -> classDeclaration .)
    CLASS           reduce using rule 89 (memberDecl -> classDeclaration .)
    ENUM            reduce using rule 89 (memberDecl -> classDeclaration .)
    BOOLEAN         reduce using rule 89 (memberDecl -> classDeclaration .)
    CHAR            reduce using rule 89 (memberDecl -> classDeclaration .)
    BYTE            reduce using rule 89 (memberDecl -> classDeclaration .)
    SHORT           reduce using rule 89 (memberDecl -> classDeclaration .)
    INT             reduce using rule 89 (memberDecl -> classDeclaration .)
    LONG            reduce using rule 89 (memberDecl -> classDeclaration .)
    FLOAT           reduce using rule 89 (memberDecl -> classDeclaration .)
    DOUBLE          reduce using rule 89 (memberDecl -> classDeclaration .)


state 587

    (87) memberDecl -> Identifier . constructorDeclaratorRest
    (158) classOrInterfaceType -> Identifier . typeArguments expt_15
    (159) classOrInterfaceType -> Identifier . typeArguments empty
    (160) classOrInterfaceType -> Identifier . empty expt_15
    (161) classOrInterfaceType -> Identifier . empty empty
    (119) constructorDeclaratorRest -> . formalParameters THROWS qualifiedNameList constructorBody
    (120) constructorDeclaratorRest -> . formalParameters empty constructorBody
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE
    (528) empty -> .
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LESS            shift and go to state 304
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LPAREN          shift and go to state 694

    typeArguments                  shift and go to state 305
    constructorDeclaratorRest      shift and go to state 692
    formalParameters               shift and go to state 693
    empty                          shift and go to state 306

state 588

    (88) memberDecl -> interfaceDeclaration .

    BRPAREN         reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    SEMI            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    STATIC          reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    PUBLIC          reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    PROTECTED       reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    PRIVATE         reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    FINAL           reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    NATIVE          reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    VOLATILE        reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    STRICTFP        reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    AT              reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    BLPAREN         reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    VOID            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    Identifier      reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    LESS            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    INTERFACE       reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    CLASS           reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    ENUM            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    CHAR            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    BYTE            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    SHORT           reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    INT             reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    LONG            reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    FLOAT           reduce using rule 88 (memberDecl -> interfaceDeclaration .)
    DOUBLE          reduce using rule 88 (memberDecl -> interfaceDeclaration .)


state 589

    (309) assignmentOperator -> MORE MORE MORE EQUALS .

    PLUS            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DASH            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_INC          reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_DEC          reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TILDE           reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LPAREN          reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    THIS            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SUPER           reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NEW             reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    Identifier      reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    VOID            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CharacterLiteral reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    StringLiteral   reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NULL            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CHAR            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BYTE            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SHORT           reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    INT             reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FLOAT           reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DOUBLE          reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NUMBER          reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TRUE            reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FALSE           reduce using rule 309 (assignmentOperator -> MORE MORE MORE EQUALS .)


state 590

    (442) expt_26 -> expt_26 COMMA expression .

    COMMA           reduce using rule 442 (expt_26 -> expt_26 COMMA expression .)
    RPAREN          reduce using rule 442 (expt_26 -> expt_26 COMMA expression .)
    SEMI            reduce using rule 442 (expt_26 -> expt_26 COMMA expression .)


state 591

    (424) expt_5 -> expt_5 COMMA typeParameter .

    MORE            reduce using rule 424 (expt_5 -> expt_5 COMMA typeParameter .)
    COMMA           reduce using rule 424 (expt_5 -> expt_5 COMMA typeParameter .)


state 592

    (425) expt_6 -> AND . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 695

state 593

    (44) typeBound -> type expt_6 .
    (426) expt_6 -> expt_6 . AND type

    COMMA           reduce using rule 44 (typeBound -> type expt_6 .)
    MORE            reduce using rule 44 (typeBound -> type expt_6 .)
    AND             shift and go to state 696


state 594

    (45) typeBound -> type empty .

    COMMA           reduce using rule 45 (typeBound -> type empty .)
    MORE            reduce using rule 45 (typeBound -> type empty .)


state 595

    (32) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 697

state 596

    (33) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .

    SEMI            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    PUBLIC          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    PROTECTED       reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    PRIVATE         reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    ABSTRACT        reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    STATIC          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    FINAL           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    STRICTFP        reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    AT              reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    CLASS           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    ENUM            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    INTERFACE       reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    $end            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    BRPAREN         reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    ASSERT          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    IF              reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    FOR             reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    WHILE           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    DO              reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    TRY             reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    SWITCH          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    SYNCHRONIZED    reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    RETURN          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    THROW           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    BREAK           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    CONTINUE        reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    Identifier      reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    BLPAREN         reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    PLUS            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    DASH            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    OP_INC          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    OP_DEC          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    TILDE           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    EXCLAMATION     reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    LPAREN          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    THIS            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    SUPER           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NEW             reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    VOID            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    CharacterLiteral reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    StringLiteral   reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NULL            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    BOOLEAN         reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    CHAR            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    BYTE            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    SHORT           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    INT             reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    LONG            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    FLOAT           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    DOUBLE          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NUMBER          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    HEX_NUMBER      reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    LONG_NUMBER     reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    LONG_HEX_NUMBER reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NON_INTEGER_1   reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NON_INTEGER_2   reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NON_INTEGER_3   reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    TRUE            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    FALSE           reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    CASE            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    DEFAULT         reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    NATIVE          reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    TRANSIENT       reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    VOLATILE        reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)
    LESS            reduce using rule 33 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type empty classBody .)


state 597

    (34) normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .

    SEMI            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    PUBLIC          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    PROTECTED       reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    PRIVATE         reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    ABSTRACT        reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    STATIC          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    FINAL           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    STRICTFP        reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    AT              reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    CLASS           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    ENUM            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    INTERFACE       reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    $end            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    BRPAREN         reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    ASSERT          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    IF              reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    FOR             reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    WHILE           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    DO              reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    TRY             reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    SWITCH          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    SYNCHRONIZED    reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    RETURN          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    THROW           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    BREAK           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    CONTINUE        reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    Identifier      reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    BLPAREN         reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    PLUS            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    DASH            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    OP_INC          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    OP_DEC          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    TILDE           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    EXCLAMATION     reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    LPAREN          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    THIS            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    SUPER           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NEW             reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    VOID            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    CharacterLiteral reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    StringLiteral   reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NULL            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    BOOLEAN         reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    CHAR            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    BYTE            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    SHORT           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    INT             reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    LONG            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    FLOAT           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    DOUBLE          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NUMBER          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    HEX_NUMBER      reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    LONG_NUMBER     reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    LONG_HEX_NUMBER reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_1   reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_2   reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_3   reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    TRUE            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    FALSE           reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    CASE            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    DEFAULT         reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    NATIVE          reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    TRANSIENT       reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    VOLATILE        reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)
    LESS            reduce using rule 34 (normalClassDeclaration -> CLASS Identifier typeParameters empty IMPLEMENTS typeList classBody .)


state 598

    (36) normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList . classBody
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 418

    classBody                      shift and go to state 698

state 599

    (37) normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .

    SEMI            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    PUBLIC          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    PROTECTED       reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    PRIVATE         reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    ABSTRACT        reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    STATIC          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    FINAL           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    STRICTFP        reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    AT              reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    CLASS           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    ENUM            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    INTERFACE       reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    $end            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    BRPAREN         reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    ASSERT          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    IF              reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    FOR             reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    WHILE           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    DO              reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    TRY             reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    SWITCH          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    SYNCHRONIZED    reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    RETURN          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    THROW           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    BREAK           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    CONTINUE        reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    Identifier      reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    BLPAREN         reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    PLUS            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    DASH            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    OP_INC          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    OP_DEC          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    TILDE           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    EXCLAMATION     reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    LPAREN          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    THIS            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    SUPER           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NEW             reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    VOID            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    CharacterLiteral reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    StringLiteral   reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NULL            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    BOOLEAN         reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    CHAR            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    BYTE            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    SHORT           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    INT             reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    LONG            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    FLOAT           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    DOUBLE          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NUMBER          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    HEX_NUMBER      reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    LONG_NUMBER     reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    LONG_HEX_NUMBER reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NON_INTEGER_1   reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NON_INTEGER_2   reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NON_INTEGER_3   reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    TRUE            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    FALSE           reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    CASE            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    DEFAULT         reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    NATIVE          reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    TRANSIENT       reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    VOLATILE        reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)
    LESS            reduce using rule 37 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type empty classBody .)


state 600

    (38) normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .

    SEMI            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    PUBLIC          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    PROTECTED       reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    PRIVATE         reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    ABSTRACT        reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    STATIC          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    FINAL           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    STRICTFP        reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    AT              reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    CLASS           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    ENUM            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    INTERFACE       reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    $end            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    BRPAREN         reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    ASSERT          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    IF              reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    FOR             reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    WHILE           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    DO              reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    TRY             reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    SWITCH          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    SYNCHRONIZED    reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    RETURN          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    THROW           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    BREAK           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    CONTINUE        reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    Identifier      reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    BLPAREN         reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    PLUS            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    DASH            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    OP_INC          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    OP_DEC          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    TILDE           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    EXCLAMATION     reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    LPAREN          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    THIS            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    SUPER           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NEW             reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    VOID            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    CharacterLiteral reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    StringLiteral   reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NULL            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    BOOLEAN         reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    CHAR            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    BYTE            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    SHORT           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    INT             reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    LONG            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    FLOAT           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    DOUBLE          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NUMBER          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    HEX_NUMBER      reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    LONG_NUMBER     reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    LONG_HEX_NUMBER reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_1   reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_2   reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NON_INTEGER_3   reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    TRUE            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    FALSE           reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    CASE            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    DEFAULT         reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    NATIVE          reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    TRANSIENT       reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    VOLATILE        reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)
    LESS            reduce using rule 38 (normalClassDeclaration -> CLASS Identifier empty empty IMPLEMENTS typeList classBody .)


state 601

    (427) expt_7 -> COMMA enumConstant .

    COMMA           reduce using rule 427 (expt_7 -> COMMA enumConstant .)
    SEMI            reduce using rule 427 (expt_7 -> COMMA enumConstant .)
    BRPAREN         reduce using rule 427 (expt_7 -> COMMA enumConstant .)


state 602

    (62) enumConstant -> empty . Identifier arguments classBody
    (63) enumConstant -> empty . Identifier arguments empty
    (64) enumConstant -> empty . Identifier empty classBody
    (65) enumConstant -> empty . Identifier empty empty

    Identifier      shift and go to state 537


state 603

    (428) expt_7 -> expt_7 COMMA . enumConstant
    (58) enumConstant -> . annotations Identifier arguments classBody
    (59) enumConstant -> . annotations Identifier arguments empty
    (60) enumConstant -> . annotations Identifier empty classBody
    (61) enumConstant -> . annotations Identifier empty empty
    (62) enumConstant -> . empty Identifier arguments classBody
    (63) enumConstant -> . empty Identifier arguments empty
    (64) enumConstant -> . empty Identifier empty classBody
    (65) enumConstant -> . empty Identifier empty empty
    (204) annotations -> . expr_10
    (528) empty -> .
    (512) expr_10 -> . annotation
    (513) expr_10 -> . expr_10 annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    Identifier      reduce using rule 528 (empty -> .)
    AT              shift and go to state 5

    enumConstant                   shift and go to state 699
    annotation                     shift and go to state 3
    expr_10                        shift and go to state 2
    annotations                    shift and go to state 453
    empty                          shift and go to state 602

state 604

    (60) enumConstant -> annotations Identifier empty . classBody
    (61) enumConstant -> annotations Identifier empty . empty
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN
    (528) empty -> .

    BLPAREN         shift and go to state 418
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 701
    classBody                      shift and go to state 700

state 605

    (58) enumConstant -> annotations Identifier arguments . classBody
    (59) enumConstant -> annotations Identifier arguments . empty
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN
    (528) empty -> .

    BLPAREN         shift and go to state 418
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    classBody                      shift and go to state 702
    empty                          shift and go to state 703

state 606

    (66) enumBodyDeclarations -> SEMI . expt_8
    (67) enumBodyDeclarations -> SEMI . empty
    (417) expt_8 -> . classBodyDeclaration
    (418) expt_8 -> . expt_8 classBodyDeclaration
    (528) empty -> .
    (80) classBodyDeclaration -> . SEMI
    (81) classBodyDeclaration -> . STATIC block
    (82) classBodyDeclaration -> . empty block
    (83) classBodyDeclaration -> . modifiers memberDecl
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BLPAREN         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    SEMI            shift and go to state 507
    STATIC          shift and go to state 505
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 510
    expt_8                         shift and go to state 704
    expt_4                         shift and go to state 462
    classBodyDeclaration           shift and go to state 509
    empty                          shift and go to state 705
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467

state 607

    (48) enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations . BRPAREN

    BRPAREN         shift and go to state 706


state 608

    (49) enumBody -> BLPAREN enumConstants COMMA empty . BRPAREN

    BRPAREN         shift and go to state 707


state 609

    (50) enumBody -> BLPAREN enumConstants empty enumBodyDeclarations . BRPAREN

    BRPAREN         shift and go to state 708


state 610

    (51) enumBody -> BLPAREN enumConstants empty empty . BRPAREN

    BRPAREN         shift and go to state 709


state 611

    (52) enumBody -> BLPAREN empty COMMA enumBodyDeclarations . BRPAREN

    BRPAREN         shift and go to state 710


state 612

    (53) enumBody -> BLPAREN empty COMMA empty . BRPAREN

    BRPAREN         shift and go to state 711


state 613

    (62) enumConstant -> empty Identifier arguments . classBody
    (63) enumConstant -> empty Identifier arguments . empty
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN
    (528) empty -> .

    BLPAREN         shift and go to state 418
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 712
    classBody                      shift and go to state 713

state 614

    (64) enumConstant -> empty Identifier empty . classBody
    (65) enumConstant -> empty Identifier empty . empty
    (76) classBody -> . BLPAREN expt_8 BRPAREN
    (77) classBody -> . BLPAREN empty BRPAREN
    (528) empty -> .

    BLPAREN         shift and go to state 418
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)

    classBody                      shift and go to state 714
    empty                          shift and go to state 715

state 615

    (54) enumBody -> BLPAREN empty empty enumBodyDeclarations . BRPAREN

    BRPAREN         shift and go to state 716


state 616

    (55) enumBody -> BLPAREN empty empty empty . BRPAREN

    BRPAREN         shift and go to state 717


state 617

    (227) annotationTypeElementRest -> normalInterfaceDeclaration empty .

    BRPAREN         reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    PUBLIC          reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    PROTECTED       reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    PRIVATE         reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    STATIC          reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    ABSTRACT        reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    FINAL           reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    NATIVE          reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    SYNCHRONIZED    reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    TRANSIENT       reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    VOLATILE        reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    STRICTFP        reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    AT              reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    CLASS           reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    INTERFACE       reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    ENUM            reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    Identifier      reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    BOOLEAN         reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    CHAR            reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    BYTE            reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    SHORT           reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    INT             reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    LONG            reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    FLOAT           reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)
    DOUBLE          reduce using rule 227 (annotationTypeElementRest -> normalInterfaceDeclaration empty .)


state 618

    (226) annotationTypeElementRest -> normalInterfaceDeclaration SEMI .

    BRPAREN         reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    PUBLIC          reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    PROTECTED       reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    PRIVATE         reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    STATIC          reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    ABSTRACT        reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    FINAL           reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    NATIVE          reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    TRANSIENT       reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    VOLATILE        reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    STRICTFP        reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    AT              reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    CLASS           reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    INTERFACE       reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    ENUM            reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    Identifier      reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    BOOLEAN         reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    CHAR            reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    BYTE            reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    SHORT           reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    INT             reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    LONG            reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    FLOAT           reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)
    DOUBLE          reduce using rule 226 (annotationTypeElementRest -> normalInterfaceDeclaration SEMI .)


state 619

    (225) annotationTypeElementRest -> normalClassDeclaration empty .

    BRPAREN         reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    PUBLIC          reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    PROTECTED       reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    PRIVATE         reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    STATIC          reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    ABSTRACT        reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    FINAL           reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    NATIVE          reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    SYNCHRONIZED    reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    TRANSIENT       reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    VOLATILE        reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    STRICTFP        reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    AT              reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    CLASS           reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    INTERFACE       reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    ENUM            reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    Identifier      reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    BOOLEAN         reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    CHAR            reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    BYTE            reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    SHORT           reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    INT             reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    LONG            reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    FLOAT           reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)
    DOUBLE          reduce using rule 225 (annotationTypeElementRest -> normalClassDeclaration empty .)


state 620

    (224) annotationTypeElementRest -> normalClassDeclaration SEMI .

    BRPAREN         reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    PUBLIC          reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    PROTECTED       reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    PRIVATE         reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    STATIC          reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    ABSTRACT        reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    FINAL           reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    NATIVE          reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    TRANSIENT       reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    VOLATILE        reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    STRICTFP        reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    AT              reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    CLASS           reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    INTERFACE       reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    ENUM            reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    Identifier      reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    BOOLEAN         reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    CHAR            reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    BYTE            reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    SHORT           reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    INT             reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    LONG            reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    FLOAT           reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)
    DOUBLE          reduce using rule 224 (annotationTypeElementRest -> normalClassDeclaration SEMI .)


state 621

    (223) annotationTypeElementRest -> type annotationMethodOrConstantRest . SEMI

    SEMI            shift and go to state 718


state 622

    (236) annotationConstantRest -> variableDeclarators .

    SEMI            reduce using rule 236 (annotationConstantRest -> variableDeclarators .)


state 623

    (233) annotationMethodOrConstantRest -> annotationConstantRest .

    SEMI            reduce using rule 233 (annotationMethodOrConstantRest -> annotationConstantRest .)


state 624

    (124) variableDeclarator -> variableDeclaratorId . EQUALS variableInitializer
    (125) variableDeclarator -> variableDeclaratorId . empty
    (528) empty -> .

    EQUALS          shift and go to state 719
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 720

state 625

    (234) annotationMethodRest -> Identifier . LPAREN RPAREN defaultValue
    (235) annotationMethodRest -> Identifier . LPAREN RPAREN empty
    (130) variableDeclaratorId -> Identifier . expt_11
    (131) variableDeclaratorId -> Identifier . empty
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    LPAREN          shift and go to state 721
    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 723
    expt_11                        shift and go to state 722

state 626

    (232) annotationMethodOrConstantRest -> annotationMethodRest .

    SEMI            reduce using rule 232 (annotationMethodOrConstantRest -> annotationMethodRest .)


state 627

    (122) variableDeclarators -> variableDeclarator . expt_12
    (123) variableDeclarators -> variableDeclarator . empty
    (463) expt_12 -> . COMMA variableDeclarator
    (464) expt_12 -> . expt_12 COMMA variableDeclarator
    (528) empty -> .

    COMMA           shift and go to state 724
    SEMI            reduce using rule 528 (empty -> .)

    expt_12                        shift and go to state 725
    empty                          shift and go to state 726

state 628

    (229) annotationTypeElementRest -> enumDeclaration empty .

    BRPAREN         reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    PUBLIC          reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    PROTECTED       reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    PRIVATE         reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    STATIC          reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    ABSTRACT        reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    FINAL           reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    NATIVE          reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    SYNCHRONIZED    reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    TRANSIENT       reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    VOLATILE        reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    STRICTFP        reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    AT              reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    CLASS           reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    INTERFACE       reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    ENUM            reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    Identifier      reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    BOOLEAN         reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    CHAR            reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    BYTE            reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    SHORT           reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    INT             reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    LONG            reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    FLOAT           reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)
    DOUBLE          reduce using rule 229 (annotationTypeElementRest -> enumDeclaration empty .)


state 629

    (228) annotationTypeElementRest -> enumDeclaration SEMI .

    BRPAREN         reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    PUBLIC          reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    PROTECTED       reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    PRIVATE         reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    STATIC          reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    ABSTRACT        reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    FINAL           reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    NATIVE          reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    TRANSIENT       reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    VOLATILE        reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    STRICTFP        reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    AT              reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    CLASS           reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    INTERFACE       reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    ENUM            reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    Identifier      reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    BOOLEAN         reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    CHAR            reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    BYTE            reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    SHORT           reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    INT             reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    LONG            reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    FLOAT           reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)
    DOUBLE          reduce using rule 228 (annotationTypeElementRest -> enumDeclaration SEMI .)


state 630

    (231) annotationTypeElementRest -> annotationTypeDeclaration empty .

    BRPAREN         reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    PUBLIC          reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    PROTECTED       reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    PRIVATE         reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    STATIC          reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    ABSTRACT        reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    FINAL           reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    NATIVE          reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    SYNCHRONIZED    reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    TRANSIENT       reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    VOLATILE        reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    STRICTFP        reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    AT              reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    CLASS           reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    INTERFACE       reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    ENUM            reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    Identifier      reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    BOOLEAN         reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    CHAR            reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    BYTE            reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    SHORT           reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    INT             reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    LONG            reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    FLOAT           reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)
    DOUBLE          reduce using rule 231 (annotationTypeElementRest -> annotationTypeDeclaration empty .)


state 631

    (230) annotationTypeElementRest -> annotationTypeDeclaration SEMI .

    BRPAREN         reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    PUBLIC          reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    PROTECTED       reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    PRIVATE         reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    STATIC          reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    ABSTRACT        reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    FINAL           reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    NATIVE          reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    TRANSIENT       reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    VOLATILE        reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    STRICTFP        reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    AT              reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    CLASS           reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    INTERFACE       reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    ENUM            reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    Identifier      reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    BOOLEAN         reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    CHAR            reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    BYTE            reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    SHORT           reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    INT             reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    LONG            reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    FLOAT           reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)
    DOUBLE          reduce using rule 230 (annotationTypeElementRest -> annotationTypeDeclaration SEMI .)


state 632

    (79) interfaceBody -> BLPAREN empty BRPAREN .

    SEMI            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    PUBLIC          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    PROTECTED       reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    PRIVATE         reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    ABSTRACT        reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    STATIC          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    FINAL           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    STRICTFP        reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    AT              reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    CLASS           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    ENUM            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    INTERFACE       reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    $end            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    BRPAREN         reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    ASSERT          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    IF              reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    FOR             reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    WHILE           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    DO              reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    TRY             reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    SWITCH          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    RETURN          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    THROW           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    BREAK           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    CONTINUE        reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    Identifier      reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    BLPAREN         reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    PLUS            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    DASH            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    OP_INC          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    OP_DEC          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    TILDE           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    EXCLAMATION     reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    LPAREN          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    THIS            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    SUPER           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NEW             reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    VOID            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    CharacterLiteral reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    StringLiteral   reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NULL            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    BOOLEAN         reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    CHAR            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    BYTE            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    SHORT           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    INT             reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    LONG            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    FLOAT           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    DOUBLE          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NUMBER          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    HEX_NUMBER      reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    LONG_NUMBER     reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    TRUE            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    FALSE           reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    CASE            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    DEFAULT         reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    NATIVE          reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    TRANSIENT       reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    VOLATILE        reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)
    LESS            reduce using rule 79 (interfaceBody -> BLPAREN empty BRPAREN .)


state 633

    (100) interfaceMemberDecl -> VOID . Identifier voidInterfaceMethodDeclaratorRest

    Identifier      shift and go to state 727


state 634

    (98) interfaceMemberDecl -> interfaceMethodOrFieldDecl .

    BRPAREN         reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SEMI            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PUBLIC          reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PROTECTED       reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PRIVATE         reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    STATIC          reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    ABSTRACT        reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    FINAL           reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    NATIVE          reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SYNCHRONIZED    reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    TRANSIENT       reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    VOLATILE        reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    STRICTFP        reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    AT              reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    VOID            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    LESS            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    INTERFACE       reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    CLASS           reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    ENUM            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    Identifier      reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    BOOLEAN         reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    CHAR            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    BYTE            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SHORT           reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    INT             reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    LONG            reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    FLOAT           reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    DOUBLE          reduce using rule 98 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)


state 635

    (116) interfaceGenericMethodDecl -> typeParameters . expr_7 Identifier interfaceMethodDeclaratorRest
    (487) expr_7 -> . type
    (488) expr_7 -> . VOID
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    VOID            shift and go to state 728
    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    expr_7                         shift and go to state 729
    type                           shift and go to state 730

state 636

    (96) interfaceBodyDeclaration -> modifiers interfaceMemberDecl .

    BRPAREN         reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SEMI            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PUBLIC          reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PROTECTED       reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PRIVATE         reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    STATIC          reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    ABSTRACT        reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    FINAL           reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    NATIVE          reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SYNCHRONIZED    reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    TRANSIENT       reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    VOLATILE        reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    STRICTFP        reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    AT              reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    VOID            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    LESS            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    INTERFACE       reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    CLASS           reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    ENUM            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    Identifier      reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    BOOLEAN         reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    CHAR            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    BYTE            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SHORT           reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    INT             reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    LONG            reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    FLOAT           reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    DOUBLE          reduce using rule 96 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)


state 637

    (99) interfaceMemberDecl -> interfaceGenericMethodDecl .

    BRPAREN         reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SEMI            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PUBLIC          reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PROTECTED       reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PRIVATE         reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    STATIC          reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    ABSTRACT        reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    FINAL           reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    NATIVE          reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SYNCHRONIZED    reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    TRANSIENT       reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    VOLATILE        reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    STRICTFP        reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    AT              reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    VOID            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    LESS            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    INTERFACE       reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    CLASS           reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    ENUM            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    Identifier      reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    BOOLEAN         reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    CHAR            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    BYTE            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SHORT           reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    INT             reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    LONG            reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    FLOAT           reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    DOUBLE          reduce using rule 99 (interfaceMemberDecl -> interfaceGenericMethodDecl .)


state 638

    (103) interfaceMethodOrFieldDecl -> type . Identifier interfaceMethodOrFieldRest

    Identifier      shift and go to state 731


state 639

    (102) interfaceMemberDecl -> classDeclaration .

    BRPAREN         reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    SEMI            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    PUBLIC          reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    PROTECTED       reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    PRIVATE         reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    STATIC          reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    ABSTRACT        reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    FINAL           reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    NATIVE          reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    TRANSIENT       reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    VOLATILE        reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    STRICTFP        reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    AT              reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    VOID            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    LESS            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    INTERFACE       reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    CLASS           reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    ENUM            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    Identifier      reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    BOOLEAN         reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    CHAR            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    BYTE            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    SHORT           reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    INT             reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    LONG            reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    FLOAT           reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)
    DOUBLE          reduce using rule 102 (interfaceMemberDecl -> classDeclaration .)


state 640

    (101) interfaceMemberDecl -> interfaceDeclaration .

    BRPAREN         reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    SEMI            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    PUBLIC          reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    PROTECTED       reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    PRIVATE         reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    STATIC          reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    FINAL           reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    NATIVE          reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    VOLATILE        reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    STRICTFP        reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    AT              reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    VOID            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    LESS            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    INTERFACE       reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    CLASS           reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    ENUM            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    Identifier      reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    CHAR            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    BYTE            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    SHORT           reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    INT             reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    LONG            reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    FLOAT           reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)
    DOUBLE          reduce using rule 101 (interfaceMemberDecl -> interfaceDeclaration .)


state 641

    (78) interfaceBody -> BLPAREN expt_10 BRPAREN .

    SEMI            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    PUBLIC          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    PROTECTED       reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    PRIVATE         reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    ABSTRACT        reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    STATIC          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    FINAL           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    STRICTFP        reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    AT              reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    CLASS           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    ENUM            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    INTERFACE       reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    $end            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    BRPAREN         reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    ASSERT          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    IF              reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    FOR             reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    WHILE           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    DO              reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    TRY             reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    SWITCH          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    SYNCHRONIZED    reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    RETURN          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    THROW           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    BREAK           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    CONTINUE        reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    Identifier      reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    BLPAREN         reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    PLUS            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    DASH            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    OP_INC          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    OP_DEC          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    TILDE           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    EXCLAMATION     reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    LPAREN          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    THIS            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    SUPER           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NEW             reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    VOID            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    CharacterLiteral reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    StringLiteral   reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NULL            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    BOOLEAN         reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    CHAR            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    BYTE            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    SHORT           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    INT             reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    LONG            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    FLOAT           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    DOUBLE          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NUMBER          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    HEX_NUMBER      reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    LONG_NUMBER     reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NON_INTEGER_1   reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NON_INTEGER_2   reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NON_INTEGER_3   reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    TRUE            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    FALSE           reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    CASE            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    DEFAULT         reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    NATIVE          reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    TRANSIENT       reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    VOLATILE        reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)
    LESS            reduce using rule 78 (interfaceBody -> BLPAREN expt_10 BRPAREN .)


state 642

    (468) expt_10 -> expt_10 interfaceBodyDeclaration .

    BRPAREN         reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    SEMI            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    STATIC          reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    FINAL           reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    NATIVE          reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    AT              reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    VOID            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    LESS            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    INTERFACE       reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    CLASS           reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    ENUM            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    Identifier      reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    BOOLEAN         reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    CHAR            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    BYTE            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    SHORT           reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    INT             reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    LONG            reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    FLOAT           reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)
    DOUBLE          reduce using rule 468 (expt_10 -> expt_10 interfaceBodyDeclaration .)


state 643

    (456) expt_16 -> expt_16 COMMA typeArgument .

    MORE            reduce using rule 456 (expt_16 -> expt_16 COMMA typeArgument .)
    COMMA           reduce using rule 456 (expt_16 -> expt_16 COMMA typeArgument .)


state 644

    (462) expt_15 -> expt_15 DOT Identifier typeArguments .

    DOT             reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    FLPAREN         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    LPAREN          reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    OP_EQ           reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    OP_NE           reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    AND             reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    CARET           reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    VERTICAL        reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    OP_LAND         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    OP_LOR          reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    QUES            reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    RPAREN          reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    COMMA           reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    EQUALS          reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_ADD         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_SUB         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_MUL         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_DIV         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_AND         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_OR          reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_XOR         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    ASS_MOD         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    LESS            reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    MORE            reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    COLON           reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    FRPAREN         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    BRPAREN         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    SEMI            reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    BLPAREN         reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    IMPLEMENTS      reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    Identifier      reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)
    OP_ARRAY        reduce using rule 462 (expt_15 -> expt_15 DOT Identifier typeArguments .)


state 645

    (135) arrayInitializer -> BLPAREN variableInitializer . expt_14 COMMA BRPAREN
    (136) arrayInitializer -> BLPAREN variableInitializer . expt_14 empty BRPAREN
    (137) arrayInitializer -> BLPAREN variableInitializer . empty COMMA BRPAREN
    (138) arrayInitializer -> BLPAREN variableInitializer . empty empty BRPAREN
    (459) expt_14 -> . COMMA variableInitializer
    (460) expt_14 -> . expt_14 COMMA variableInitializer
    (528) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 733
    BRPAREN         reduce using rule 528 (empty -> .)

  ! COMMA           [ reduce using rule 528 (empty -> .) ]

    expt_14                        shift and go to state 732
    empty                          shift and go to state 734

state 646

    (133) variableInitializer -> expression .

    COMMA           reduce using rule 133 (variableInitializer -> expression .)
    BRPAREN         reduce using rule 133 (variableInitializer -> expression .)
    SEMI            reduce using rule 133 (variableInitializer -> expression .)


state 647

    (132) variableInitializer -> arrayInitializer .

    COMMA           reduce using rule 132 (variableInitializer -> arrayInitializer .)
    BRPAREN         reduce using rule 132 (variableInitializer -> arrayInitializer .)
    SEMI            reduce using rule 132 (variableInitializer -> arrayInitializer .)


state 648

    (134) arrayInitializer -> BLPAREN empty . BRPAREN

    BRPAREN         shift and go to state 735


state 649

    (400) expt_38 -> expt_38 FLPAREN . expression FRPAREN
    (469) expt_11 -> FLPAREN . FRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 312
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 736

state 650

    (480) expr_22 -> expression FRPAREN expt_38 expt_11 .
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift
    DOT             reduce using rule 480 (expr_22 -> expression FRPAREN expt_38 expt_11 .)
    OP_INC          reduce using rule 480 (expr_22 -> expression FRPAREN expt_38 expt_11 .)
    OP_DEC          reduce using rule 480 (expr_22 -> expression FRPAREN expt_38 expt_11 .)
    FLPAREN         shift and go to state 313

  ! FLPAREN         [ reduce using rule 480 (expr_22 -> expression FRPAREN expt_38 expt_11 .) ]


state 651

    (399) expt_38 -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 737


state 652

    (471) expt_18 -> blockStatement .

    ASSERT          reduce using rule 471 (expt_18 -> blockStatement .)
    IF              reduce using rule 471 (expt_18 -> blockStatement .)
    FOR             reduce using rule 471 (expt_18 -> blockStatement .)
    WHILE           reduce using rule 471 (expt_18 -> blockStatement .)
    DO              reduce using rule 471 (expt_18 -> blockStatement .)
    TRY             reduce using rule 471 (expt_18 -> blockStatement .)
    SWITCH          reduce using rule 471 (expt_18 -> blockStatement .)
    SYNCHRONIZED    reduce using rule 471 (expt_18 -> blockStatement .)
    RETURN          reduce using rule 471 (expt_18 -> blockStatement .)
    THROW           reduce using rule 471 (expt_18 -> blockStatement .)
    BREAK           reduce using rule 471 (expt_18 -> blockStatement .)
    CONTINUE        reduce using rule 471 (expt_18 -> blockStatement .)
    SEMI            reduce using rule 471 (expt_18 -> blockStatement .)
    Identifier      reduce using rule 471 (expt_18 -> blockStatement .)
    BLPAREN         reduce using rule 471 (expt_18 -> blockStatement .)
    PUBLIC          reduce using rule 471 (expt_18 -> blockStatement .)
    PROTECTED       reduce using rule 471 (expt_18 -> blockStatement .)
    PRIVATE         reduce using rule 471 (expt_18 -> blockStatement .)
    ABSTRACT        reduce using rule 471 (expt_18 -> blockStatement .)
    STATIC          reduce using rule 471 (expt_18 -> blockStatement .)
    FINAL           reduce using rule 471 (expt_18 -> blockStatement .)
    STRICTFP        reduce using rule 471 (expt_18 -> blockStatement .)
    AT              reduce using rule 471 (expt_18 -> blockStatement .)
    PLUS            reduce using rule 471 (expt_18 -> blockStatement .)
    DASH            reduce using rule 471 (expt_18 -> blockStatement .)
    OP_INC          reduce using rule 471 (expt_18 -> blockStatement .)
    OP_DEC          reduce using rule 471 (expt_18 -> blockStatement .)
    TILDE           reduce using rule 471 (expt_18 -> blockStatement .)
    EXCLAMATION     reduce using rule 471 (expt_18 -> blockStatement .)
    LPAREN          reduce using rule 471 (expt_18 -> blockStatement .)
    THIS            reduce using rule 471 (expt_18 -> blockStatement .)
    SUPER           reduce using rule 471 (expt_18 -> blockStatement .)
    NEW             reduce using rule 471 (expt_18 -> blockStatement .)
    VOID            reduce using rule 471 (expt_18 -> blockStatement .)
    CharacterLiteral reduce using rule 471 (expt_18 -> blockStatement .)
    StringLiteral   reduce using rule 471 (expt_18 -> blockStatement .)
    NULL            reduce using rule 471 (expt_18 -> blockStatement .)
    BOOLEAN         reduce using rule 471 (expt_18 -> blockStatement .)
    CHAR            reduce using rule 471 (expt_18 -> blockStatement .)
    BYTE            reduce using rule 471 (expt_18 -> blockStatement .)
    SHORT           reduce using rule 471 (expt_18 -> blockStatement .)
    INT             reduce using rule 471 (expt_18 -> blockStatement .)
    LONG            reduce using rule 471 (expt_18 -> blockStatement .)
    FLOAT           reduce using rule 471 (expt_18 -> blockStatement .)
    DOUBLE          reduce using rule 471 (expt_18 -> blockStatement .)
    NUMBER          reduce using rule 471 (expt_18 -> blockStatement .)
    HEX_NUMBER      reduce using rule 471 (expt_18 -> blockStatement .)
    LONG_NUMBER     reduce using rule 471 (expt_18 -> blockStatement .)
    LONG_HEX_NUMBER reduce using rule 471 (expt_18 -> blockStatement .)
    NON_INTEGER_1   reduce using rule 471 (expt_18 -> blockStatement .)
    NON_INTEGER_2   reduce using rule 471 (expt_18 -> blockStatement .)
    NON_INTEGER_3   reduce using rule 471 (expt_18 -> blockStatement .)
    TRUE            reduce using rule 471 (expt_18 -> blockStatement .)
    FALSE           reduce using rule 471 (expt_18 -> blockStatement .)
    CLASS           reduce using rule 471 (expt_18 -> blockStatement .)
    ENUM            reduce using rule 471 (expt_18 -> blockStatement .)
    INTERFACE       reduce using rule 471 (expt_18 -> blockStatement .)
    CASE            reduce using rule 471 (expt_18 -> blockStatement .)
    DEFAULT         reduce using rule 471 (expt_18 -> blockStatement .)
    BRPAREN         reduce using rule 471 (expt_18 -> blockStatement .)


state 653

    (241) blockStatement -> classOrInterfaceDeclaration .

    BRPAREN         reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    ASSERT          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    IF              reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    FOR             reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    WHILE           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    DO              reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    TRY             reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    SWITCH          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    RETURN          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    THROW           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    BREAK           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    CONTINUE        reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    SEMI            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    Identifier      reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    BLPAREN         reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    AT              reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    PLUS            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    DASH            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    OP_INC          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    OP_DEC          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    TILDE           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    LPAREN          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    THIS            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    SUPER           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NEW             reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    VOID            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    CharacterLiteral reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    StringLiteral   reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NULL            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    BOOLEAN         reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    CHAR            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    BYTE            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    SHORT           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    INT             reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    LONG            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    FLOAT           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    DOUBLE          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NUMBER          reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    TRUE            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    FALSE           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    CLASS           reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    ENUM            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    INTERFACE       reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    CASE            reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)
    DEFAULT         reduce using rule 241 (blockStatement -> classOrInterfaceDeclaration .)


state 654

    (447) expt_23 -> variableModifier .

    FINAL           reduce using rule 447 (expt_23 -> variableModifier .)
    AT              reduce using rule 447 (expt_23 -> variableModifier .)
    Identifier      reduce using rule 447 (expt_23 -> variableModifier .)
    BOOLEAN         reduce using rule 447 (expt_23 -> variableModifier .)
    CHAR            reduce using rule 447 (expt_23 -> variableModifier .)
    BYTE            reduce using rule 447 (expt_23 -> variableModifier .)
    SHORT           reduce using rule 447 (expt_23 -> variableModifier .)
    INT             reduce using rule 447 (expt_23 -> variableModifier .)
    LONG            reduce using rule 447 (expt_23 -> variableModifier .)
    FLOAT           reduce using rule 447 (expt_23 -> variableModifier .)
    DOUBLE          reduce using rule 447 (expt_23 -> variableModifier .)


state 655

    (240) blockStatement -> localVariableDeclarationStatement .

    BRPAREN         reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    ASSERT          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    IF              reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    FOR             reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    WHILE           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    DO              reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    TRY             reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    SWITCH          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    RETURN          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    THROW           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    BREAK           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    CONTINUE        reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    SEMI            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    Identifier      reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    BLPAREN         reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    PUBLIC          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    PROTECTED       reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    PRIVATE         reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    ABSTRACT        reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    STATIC          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    FINAL           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    STRICTFP        reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    AT              reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    PLUS            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    DASH            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    OP_INC          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    OP_DEC          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    TILDE           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    EXCLAMATION     reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    LPAREN          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    THIS            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    SUPER           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NEW             reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    VOID            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    CharacterLiteral reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    StringLiteral   reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NULL            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    CHAR            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    BYTE            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    SHORT           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    INT             reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    LONG            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    FLOAT           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    DOUBLE          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NUMBER          reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    HEX_NUMBER      reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    LONG_NUMBER     reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    LONG_HEX_NUMBER reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_1   reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_2   reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_3   reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    TRUE            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    FALSE           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    CLASS           reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    ENUM            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    INTERFACE       reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    CASE            reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)
    DEFAULT         reduce using rule 240 (blockStatement -> localVariableDeclarationStatement .)


state 656

    (258) statement -> RETURN . expression SEMI
    (259) statement -> RETURN . empty SEMI
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (528) empty -> .
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    SEMI            reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 738
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 739

state 657

    (257) statement -> SYNCHRONIZED . parExpression block
    (292) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 741

    parExpression                  shift and go to state 740

state 658

    (26) classOrInterfaceModifier -> FINAL .
    (170) variableModifier -> FINAL .

  ! reduce/reduce conflict for FINAL resolved using rule 26 (classOrInterfaceModifier -> FINAL .)
  ! reduce/reduce conflict for AT resolved using rule 26 (classOrInterfaceModifier -> FINAL .)
    PUBLIC          reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    PROTECTED       reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    PRIVATE         reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    ABSTRACT        reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    STATIC          reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    FINAL           reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    STRICTFP        reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    AT              reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    CLASS           reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    ENUM            reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    INTERFACE       reduce using rule 26 (classOrInterfaceModifier -> FINAL .)
    Identifier      reduce using rule 170 (variableModifier -> FINAL .)
    BOOLEAN         reduce using rule 170 (variableModifier -> FINAL .)
    CHAR            reduce using rule 170 (variableModifier -> FINAL .)
    BYTE            reduce using rule 170 (variableModifier -> FINAL .)
    SHORT           reduce using rule 170 (variableModifier -> FINAL .)
    INT             reduce using rule 170 (variableModifier -> FINAL .)
    LONG            reduce using rule 170 (variableModifier -> FINAL .)
    FLOAT           reduce using rule 170 (variableModifier -> FINAL .)
    DOUBLE          reduce using rule 170 (variableModifier -> FINAL .)

  ! FINAL           [ reduce using rule 170 (variableModifier -> FINAL .) ]
  ! AT              [ reduce using rule 170 (variableModifier -> FINAL .) ]


state 659

    (252) statement -> FOR . LPAREN forControl RPAREN statement

    LPAREN          shift and go to state 742


state 660

    (245) variableModifiers -> expt_23 .
    (448) expt_23 -> expt_23 . variableModifier
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    Identifier      reduce using rule 245 (variableModifiers -> expt_23 .)
    BOOLEAN         reduce using rule 245 (variableModifiers -> expt_23 .)
    CHAR            reduce using rule 245 (variableModifiers -> expt_23 .)
    BYTE            reduce using rule 245 (variableModifiers -> expt_23 .)
    SHORT           reduce using rule 245 (variableModifiers -> expt_23 .)
    INT             reduce using rule 245 (variableModifiers -> expt_23 .)
    LONG            reduce using rule 245 (variableModifiers -> expt_23 .)
    FLOAT           reduce using rule 245 (variableModifiers -> expt_23 .)
    DOUBLE          reduce using rule 245 (variableModifiers -> expt_23 .)
    FINAL           shift and go to state 745
    AT              shift and go to state 5

    variableModifier               shift and go to state 744
    annotation                     shift and go to state 743

state 661

    (255) statement -> TRY . block expr_12
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 574

    block                          shift and go to state 746

state 662

    (267) statement -> Identifier . COLON statement
    (362) primary -> Identifier . expt_19 identifierSuffix
    (363) primary -> Identifier . expt_19 empty
    (364) primary -> Identifier . empty identifierSuffix
    (365) primary -> Identifier . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    COLON           shift and go to state 747
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 176
    expt_19                        shift and go to state 177

state 663

    (263) statement -> CONTINUE . Identifier SEMI
    (264) statement -> CONTINUE . empty SEMI
    (528) empty -> .

    Identifier      shift and go to state 749
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 748

state 664

    (295) statementExpression -> expression .

    SEMI            reduce using rule 295 (statementExpression -> expression .)


state 665

    (247) statement -> block .

    WHILE           reduce using rule 247 (statement -> block .)
    ASSERT          reduce using rule 247 (statement -> block .)
    IF              reduce using rule 247 (statement -> block .)
    FOR             reduce using rule 247 (statement -> block .)
    DO              reduce using rule 247 (statement -> block .)
    TRY             reduce using rule 247 (statement -> block .)
    SWITCH          reduce using rule 247 (statement -> block .)
    SYNCHRONIZED    reduce using rule 247 (statement -> block .)
    RETURN          reduce using rule 247 (statement -> block .)
    THROW           reduce using rule 247 (statement -> block .)
    BREAK           reduce using rule 247 (statement -> block .)
    CONTINUE        reduce using rule 247 (statement -> block .)
    SEMI            reduce using rule 247 (statement -> block .)
    Identifier      reduce using rule 247 (statement -> block .)
    BLPAREN         reduce using rule 247 (statement -> block .)
    PUBLIC          reduce using rule 247 (statement -> block .)
    PROTECTED       reduce using rule 247 (statement -> block .)
    PRIVATE         reduce using rule 247 (statement -> block .)
    ABSTRACT        reduce using rule 247 (statement -> block .)
    STATIC          reduce using rule 247 (statement -> block .)
    FINAL           reduce using rule 247 (statement -> block .)
    STRICTFP        reduce using rule 247 (statement -> block .)
    AT              reduce using rule 247 (statement -> block .)
    PLUS            reduce using rule 247 (statement -> block .)
    DASH            reduce using rule 247 (statement -> block .)
    OP_INC          reduce using rule 247 (statement -> block .)
    OP_DEC          reduce using rule 247 (statement -> block .)
    TILDE           reduce using rule 247 (statement -> block .)
    EXCLAMATION     reduce using rule 247 (statement -> block .)
    LPAREN          reduce using rule 247 (statement -> block .)
    THIS            reduce using rule 247 (statement -> block .)
    SUPER           reduce using rule 247 (statement -> block .)
    NEW             reduce using rule 247 (statement -> block .)
    VOID            reduce using rule 247 (statement -> block .)
    CharacterLiteral reduce using rule 247 (statement -> block .)
    StringLiteral   reduce using rule 247 (statement -> block .)
    NULL            reduce using rule 247 (statement -> block .)
    BOOLEAN         reduce using rule 247 (statement -> block .)
    CHAR            reduce using rule 247 (statement -> block .)
    BYTE            reduce using rule 247 (statement -> block .)
    SHORT           reduce using rule 247 (statement -> block .)
    INT             reduce using rule 247 (statement -> block .)
    LONG            reduce using rule 247 (statement -> block .)
    FLOAT           reduce using rule 247 (statement -> block .)
    DOUBLE          reduce using rule 247 (statement -> block .)
    NUMBER          reduce using rule 247 (statement -> block .)
    HEX_NUMBER      reduce using rule 247 (statement -> block .)
    LONG_NUMBER     reduce using rule 247 (statement -> block .)
    LONG_HEX_NUMBER reduce using rule 247 (statement -> block .)
    NON_INTEGER_1   reduce using rule 247 (statement -> block .)
    NON_INTEGER_2   reduce using rule 247 (statement -> block .)
    NON_INTEGER_3   reduce using rule 247 (statement -> block .)
    TRUE            reduce using rule 247 (statement -> block .)
    FALSE           reduce using rule 247 (statement -> block .)
    CLASS           reduce using rule 247 (statement -> block .)
    ENUM            reduce using rule 247 (statement -> block .)
    INTERFACE       reduce using rule 247 (statement -> block .)
    CASE            reduce using rule 247 (statement -> block .)
    DEFAULT         reduce using rule 247 (statement -> block .)
    BRPAREN         reduce using rule 247 (statement -> block .)
    ELSE            reduce using rule 247 (statement -> block .)


state 666

    (243) localVariableDeclarationStatement -> localVariableDeclaration . SEMI

    SEMI            shift and go to state 750


state 667

    (253) statement -> WHILE . parExpression statement
    (292) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 741

    parExpression                  shift and go to state 751

state 668

    (256) statement -> SWITCH . parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (292) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 741

    parExpression                  shift and go to state 752

state 669

    (242) blockStatement -> statement .

    BRPAREN         reduce using rule 242 (blockStatement -> statement .)
    ASSERT          reduce using rule 242 (blockStatement -> statement .)
    IF              reduce using rule 242 (blockStatement -> statement .)
    FOR             reduce using rule 242 (blockStatement -> statement .)
    WHILE           reduce using rule 242 (blockStatement -> statement .)
    DO              reduce using rule 242 (blockStatement -> statement .)
    TRY             reduce using rule 242 (blockStatement -> statement .)
    SWITCH          reduce using rule 242 (blockStatement -> statement .)
    SYNCHRONIZED    reduce using rule 242 (blockStatement -> statement .)
    RETURN          reduce using rule 242 (blockStatement -> statement .)
    THROW           reduce using rule 242 (blockStatement -> statement .)
    BREAK           reduce using rule 242 (blockStatement -> statement .)
    CONTINUE        reduce using rule 242 (blockStatement -> statement .)
    SEMI            reduce using rule 242 (blockStatement -> statement .)
    Identifier      reduce using rule 242 (blockStatement -> statement .)
    BLPAREN         reduce using rule 242 (blockStatement -> statement .)
    PUBLIC          reduce using rule 242 (blockStatement -> statement .)
    PROTECTED       reduce using rule 242 (blockStatement -> statement .)
    PRIVATE         reduce using rule 242 (blockStatement -> statement .)
    ABSTRACT        reduce using rule 242 (blockStatement -> statement .)
    STATIC          reduce using rule 242 (blockStatement -> statement .)
    FINAL           reduce using rule 242 (blockStatement -> statement .)
    STRICTFP        reduce using rule 242 (blockStatement -> statement .)
    AT              reduce using rule 242 (blockStatement -> statement .)
    PLUS            reduce using rule 242 (blockStatement -> statement .)
    DASH            reduce using rule 242 (blockStatement -> statement .)
    OP_INC          reduce using rule 242 (blockStatement -> statement .)
    OP_DEC          reduce using rule 242 (blockStatement -> statement .)
    TILDE           reduce using rule 242 (blockStatement -> statement .)
    EXCLAMATION     reduce using rule 242 (blockStatement -> statement .)
    LPAREN          reduce using rule 242 (blockStatement -> statement .)
    THIS            reduce using rule 242 (blockStatement -> statement .)
    SUPER           reduce using rule 242 (blockStatement -> statement .)
    NEW             reduce using rule 242 (blockStatement -> statement .)
    VOID            reduce using rule 242 (blockStatement -> statement .)
    CharacterLiteral reduce using rule 242 (blockStatement -> statement .)
    StringLiteral   reduce using rule 242 (blockStatement -> statement .)
    NULL            reduce using rule 242 (blockStatement -> statement .)
    BOOLEAN         reduce using rule 242 (blockStatement -> statement .)
    CHAR            reduce using rule 242 (blockStatement -> statement .)
    BYTE            reduce using rule 242 (blockStatement -> statement .)
    SHORT           reduce using rule 242 (blockStatement -> statement .)
    INT             reduce using rule 242 (blockStatement -> statement .)
    LONG            reduce using rule 242 (blockStatement -> statement .)
    FLOAT           reduce using rule 242 (blockStatement -> statement .)
    DOUBLE          reduce using rule 242 (blockStatement -> statement .)
    NUMBER          reduce using rule 242 (blockStatement -> statement .)
    HEX_NUMBER      reduce using rule 242 (blockStatement -> statement .)
    LONG_NUMBER     reduce using rule 242 (blockStatement -> statement .)
    LONG_HEX_NUMBER reduce using rule 242 (blockStatement -> statement .)
    NON_INTEGER_1   reduce using rule 242 (blockStatement -> statement .)
    NON_INTEGER_2   reduce using rule 242 (blockStatement -> statement .)
    NON_INTEGER_3   reduce using rule 242 (blockStatement -> statement .)
    TRUE            reduce using rule 242 (blockStatement -> statement .)
    FALSE           reduce using rule 242 (blockStatement -> statement .)
    CLASS           reduce using rule 242 (blockStatement -> statement .)
    ENUM            reduce using rule 242 (blockStatement -> statement .)
    INTERFACE       reduce using rule 242 (blockStatement -> statement .)
    CASE            reduce using rule 242 (blockStatement -> statement .)
    DEFAULT         reduce using rule 242 (blockStatement -> statement .)


state 670

    (239) block -> BLPAREN empty . BRPAREN
    (19) classOrInterfaceModifiers -> empty .
    (246) variableModifiers -> empty .

    BRPAREN         shift and go to state 753
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 671

    (261) statement -> BREAK . Identifier SEMI
    (262) statement -> BREAK . empty SEMI
    (528) empty -> .

    Identifier      shift and go to state 754
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 755

state 672

    (254) statement -> DO . statement WHILE parExpression SEMI
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 756
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 673

    (244) localVariableDeclaration -> variableModifiers . type variableDeclarators
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 757

state 674

    (248) statement -> ASSERT . expression COLON expression SEMI
    (249) statement -> ASSERT . expression empty SEMI
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 758

state 675

    (265) statement -> SEMI .

    WHILE           reduce using rule 265 (statement -> SEMI .)
    ASSERT          reduce using rule 265 (statement -> SEMI .)
    IF              reduce using rule 265 (statement -> SEMI .)
    FOR             reduce using rule 265 (statement -> SEMI .)
    DO              reduce using rule 265 (statement -> SEMI .)
    TRY             reduce using rule 265 (statement -> SEMI .)
    SWITCH          reduce using rule 265 (statement -> SEMI .)
    SYNCHRONIZED    reduce using rule 265 (statement -> SEMI .)
    RETURN          reduce using rule 265 (statement -> SEMI .)
    THROW           reduce using rule 265 (statement -> SEMI .)
    BREAK           reduce using rule 265 (statement -> SEMI .)
    CONTINUE        reduce using rule 265 (statement -> SEMI .)
    SEMI            reduce using rule 265 (statement -> SEMI .)
    Identifier      reduce using rule 265 (statement -> SEMI .)
    BLPAREN         reduce using rule 265 (statement -> SEMI .)
    PUBLIC          reduce using rule 265 (statement -> SEMI .)
    PROTECTED       reduce using rule 265 (statement -> SEMI .)
    PRIVATE         reduce using rule 265 (statement -> SEMI .)
    ABSTRACT        reduce using rule 265 (statement -> SEMI .)
    STATIC          reduce using rule 265 (statement -> SEMI .)
    FINAL           reduce using rule 265 (statement -> SEMI .)
    STRICTFP        reduce using rule 265 (statement -> SEMI .)
    AT              reduce using rule 265 (statement -> SEMI .)
    PLUS            reduce using rule 265 (statement -> SEMI .)
    DASH            reduce using rule 265 (statement -> SEMI .)
    OP_INC          reduce using rule 265 (statement -> SEMI .)
    OP_DEC          reduce using rule 265 (statement -> SEMI .)
    TILDE           reduce using rule 265 (statement -> SEMI .)
    EXCLAMATION     reduce using rule 265 (statement -> SEMI .)
    LPAREN          reduce using rule 265 (statement -> SEMI .)
    THIS            reduce using rule 265 (statement -> SEMI .)
    SUPER           reduce using rule 265 (statement -> SEMI .)
    NEW             reduce using rule 265 (statement -> SEMI .)
    VOID            reduce using rule 265 (statement -> SEMI .)
    CharacterLiteral reduce using rule 265 (statement -> SEMI .)
    StringLiteral   reduce using rule 265 (statement -> SEMI .)
    NULL            reduce using rule 265 (statement -> SEMI .)
    BOOLEAN         reduce using rule 265 (statement -> SEMI .)
    CHAR            reduce using rule 265 (statement -> SEMI .)
    BYTE            reduce using rule 265 (statement -> SEMI .)
    SHORT           reduce using rule 265 (statement -> SEMI .)
    INT             reduce using rule 265 (statement -> SEMI .)
    LONG            reduce using rule 265 (statement -> SEMI .)
    FLOAT           reduce using rule 265 (statement -> SEMI .)
    DOUBLE          reduce using rule 265 (statement -> SEMI .)
    NUMBER          reduce using rule 265 (statement -> SEMI .)
    HEX_NUMBER      reduce using rule 265 (statement -> SEMI .)
    LONG_NUMBER     reduce using rule 265 (statement -> SEMI .)
    LONG_HEX_NUMBER reduce using rule 265 (statement -> SEMI .)
    NON_INTEGER_1   reduce using rule 265 (statement -> SEMI .)
    NON_INTEGER_2   reduce using rule 265 (statement -> SEMI .)
    NON_INTEGER_3   reduce using rule 265 (statement -> SEMI .)
    TRUE            reduce using rule 265 (statement -> SEMI .)
    FALSE           reduce using rule 265 (statement -> SEMI .)
    CLASS           reduce using rule 265 (statement -> SEMI .)
    ENUM            reduce using rule 265 (statement -> SEMI .)
    INTERFACE       reduce using rule 265 (statement -> SEMI .)
    CASE            reduce using rule 265 (statement -> SEMI .)
    DEFAULT         reduce using rule 265 (statement -> SEMI .)
    BRPAREN         reduce using rule 265 (statement -> SEMI .)
    ELSE            reduce using rule 265 (statement -> SEMI .)


state 676

    (20) classOrInterfaceModifier -> annotation .
    (171) variableModifier -> annotation .

  ! reduce/reduce conflict for FINAL resolved using rule 20 (classOrInterfaceModifier -> annotation .)
  ! reduce/reduce conflict for AT resolved using rule 20 (classOrInterfaceModifier -> annotation .)
    PUBLIC          reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    PROTECTED       reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    PRIVATE         reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    ABSTRACT        reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    STATIC          reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    FINAL           reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    STRICTFP        reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    AT              reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    CLASS           reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    ENUM            reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    INTERFACE       reduce using rule 20 (classOrInterfaceModifier -> annotation .)
    Identifier      reduce using rule 171 (variableModifier -> annotation .)
    BOOLEAN         reduce using rule 171 (variableModifier -> annotation .)
    CHAR            reduce using rule 171 (variableModifier -> annotation .)
    BYTE            reduce using rule 171 (variableModifier -> annotation .)
    SHORT           reduce using rule 171 (variableModifier -> annotation .)
    INT             reduce using rule 171 (variableModifier -> annotation .)
    LONG            reduce using rule 171 (variableModifier -> annotation .)
    FLOAT           reduce using rule 171 (variableModifier -> annotation .)
    DOUBLE          reduce using rule 171 (variableModifier -> annotation .)

  ! FINAL           [ reduce using rule 171 (variableModifier -> annotation .) ]
  ! AT              [ reduce using rule 171 (variableModifier -> annotation .) ]


state 677

    (250) statement -> IF . parExpression statement ELSE statement
    (251) statement -> IF . parExpression statement empty
    (292) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 741

    parExpression                  shift and go to state 759

state 678

    (266) statement -> statementExpression . SEMI

    SEMI            shift and go to state 760


state 679

    (260) statement -> THROW . expression SEMI
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 761

state 680

    (238) block -> BLPAREN expt_18 . BRPAREN
    (472) expt_18 -> expt_18 . blockStatement
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         shift and go to state 764
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 762
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 763
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 681

    (86) memberDecl -> VOID Identifier . voidMethodDeclaratorRest
    (110) voidMethodDeclaratorRest -> . formalParameters THROWS qualifiedNameList expr_6
    (111) voidMethodDeclaratorRest -> . formalParameters empty expr_6
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 694

    voidMethodDeclaratorRest       shift and go to state 766
    formalParameters               shift and go to state 765

state 682

    (490) expr_4 -> VOID .

    Identifier      reduce using rule 490 (expr_4 -> VOID .)


state 683

    (91) genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .

    BRPAREN         reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SEMI            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    STATIC          reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PUBLIC          reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PROTECTED       reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PRIVATE         reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    ABSTRACT        reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    FINAL           reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    NATIVE          reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SYNCHRONIZED    reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    TRANSIENT       reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    VOLATILE        reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    STRICTFP        reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    AT              reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BLPAREN         reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    VOID            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    Identifier      reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    LESS            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    INTERFACE       reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    CLASS           reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    ENUM            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BOOLEAN         reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    CHAR            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BYTE            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SHORT           reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    INT             reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    LONG            reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    FLOAT           reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    DOUBLE          reduce using rule 91 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)


state 684

    (92) genericMethodOrConstructorRest -> expr_4 . Identifier methodDeclaratorRest

    Identifier      shift and go to state 767


state 685

    (489) expr_4 -> type .

    Identifier      reduce using rule 489 (expr_4 -> type .)


state 686

    (93) genericMethodOrConstructorRest -> Identifier . constructorDeclaratorRest
    (158) classOrInterfaceType -> Identifier . typeArguments expt_15
    (159) classOrInterfaceType -> Identifier . typeArguments empty
    (160) classOrInterfaceType -> Identifier . empty expt_15
    (161) classOrInterfaceType -> Identifier . empty empty
    (119) constructorDeclaratorRest -> . formalParameters THROWS qualifiedNameList constructorBody
    (120) constructorDeclaratorRest -> . formalParameters empty constructorBody
    (172) typeArguments -> . LESS typeArgument expt_16 MORE
    (173) typeArguments -> . LESS typeArgument empty MORE
    (528) empty -> .
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LESS            shift and go to state 304
    DOT             reduce using rule 528 (empty -> .)
    FLPAREN         reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LPAREN          shift and go to state 694

    typeArguments                  shift and go to state 305
    constructorDeclaratorRest      shift and go to state 768
    formalParameters               shift and go to state 693
    empty                          shift and go to state 306

state 687

    (95) fieldDeclaration -> variableDeclarators . SEMI

    SEMI            shift and go to state 769


state 688

    (496) expr_3 -> fieldDeclaration .

    BRPAREN         reduce using rule 496 (expr_3 -> fieldDeclaration .)
    SEMI            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    STATIC          reduce using rule 496 (expr_3 -> fieldDeclaration .)
    PUBLIC          reduce using rule 496 (expr_3 -> fieldDeclaration .)
    PROTECTED       reduce using rule 496 (expr_3 -> fieldDeclaration .)
    PRIVATE         reduce using rule 496 (expr_3 -> fieldDeclaration .)
    ABSTRACT        reduce using rule 496 (expr_3 -> fieldDeclaration .)
    FINAL           reduce using rule 496 (expr_3 -> fieldDeclaration .)
    NATIVE          reduce using rule 496 (expr_3 -> fieldDeclaration .)
    SYNCHRONIZED    reduce using rule 496 (expr_3 -> fieldDeclaration .)
    TRANSIENT       reduce using rule 496 (expr_3 -> fieldDeclaration .)
    VOLATILE        reduce using rule 496 (expr_3 -> fieldDeclaration .)
    STRICTFP        reduce using rule 496 (expr_3 -> fieldDeclaration .)
    AT              reduce using rule 496 (expr_3 -> fieldDeclaration .)
    BLPAREN         reduce using rule 496 (expr_3 -> fieldDeclaration .)
    VOID            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    Identifier      reduce using rule 496 (expr_3 -> fieldDeclaration .)
    LESS            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    INTERFACE       reduce using rule 496 (expr_3 -> fieldDeclaration .)
    CLASS           reduce using rule 496 (expr_3 -> fieldDeclaration .)
    ENUM            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    BOOLEAN         reduce using rule 496 (expr_3 -> fieldDeclaration .)
    CHAR            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    BYTE            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    SHORT           reduce using rule 496 (expr_3 -> fieldDeclaration .)
    INT             reduce using rule 496 (expr_3 -> fieldDeclaration .)
    LONG            reduce using rule 496 (expr_3 -> fieldDeclaration .)
    FLOAT           reduce using rule 496 (expr_3 -> fieldDeclaration .)
    DOUBLE          reduce using rule 496 (expr_3 -> fieldDeclaration .)


state 689

    (94) methodDeclaration -> Identifier . methodDeclaratorRest
    (130) variableDeclaratorId -> Identifier . expt_11
    (131) variableDeclaratorId -> Identifier . empty
    (106) methodDeclaratorRest -> . formalParameters expt_11 THROWS qualifiedNameList expr_5
    (107) methodDeclaratorRest -> . formalParameters expt_11 empty expr_5
    (108) methodDeclaratorRest -> . formalParameters empty THROWS qualifiedNameList expr_5
    (109) methodDeclaratorRest -> . formalParameters empty empty expr_5
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    LPAREN          shift and go to state 694

    formalParameters               shift and go to state 770
    methodDeclaratorRest           shift and go to state 771
    expt_11                        shift and go to state 722
    empty                          shift and go to state 723

state 690

    (495) expr_3 -> methodDeclaration .

    BRPAREN         reduce using rule 495 (expr_3 -> methodDeclaration .)
    SEMI            reduce using rule 495 (expr_3 -> methodDeclaration .)
    STATIC          reduce using rule 495 (expr_3 -> methodDeclaration .)
    PUBLIC          reduce using rule 495 (expr_3 -> methodDeclaration .)
    PROTECTED       reduce using rule 495 (expr_3 -> methodDeclaration .)
    PRIVATE         reduce using rule 495 (expr_3 -> methodDeclaration .)
    ABSTRACT        reduce using rule 495 (expr_3 -> methodDeclaration .)
    FINAL           reduce using rule 495 (expr_3 -> methodDeclaration .)
    NATIVE          reduce using rule 495 (expr_3 -> methodDeclaration .)
    SYNCHRONIZED    reduce using rule 495 (expr_3 -> methodDeclaration .)
    TRANSIENT       reduce using rule 495 (expr_3 -> methodDeclaration .)
    VOLATILE        reduce using rule 495 (expr_3 -> methodDeclaration .)
    STRICTFP        reduce using rule 495 (expr_3 -> methodDeclaration .)
    AT              reduce using rule 495 (expr_3 -> methodDeclaration .)
    BLPAREN         reduce using rule 495 (expr_3 -> methodDeclaration .)
    VOID            reduce using rule 495 (expr_3 -> methodDeclaration .)
    Identifier      reduce using rule 495 (expr_3 -> methodDeclaration .)
    LESS            reduce using rule 495 (expr_3 -> methodDeclaration .)
    INTERFACE       reduce using rule 495 (expr_3 -> methodDeclaration .)
    CLASS           reduce using rule 495 (expr_3 -> methodDeclaration .)
    ENUM            reduce using rule 495 (expr_3 -> methodDeclaration .)
    BOOLEAN         reduce using rule 495 (expr_3 -> methodDeclaration .)
    CHAR            reduce using rule 495 (expr_3 -> methodDeclaration .)
    BYTE            reduce using rule 495 (expr_3 -> methodDeclaration .)
    SHORT           reduce using rule 495 (expr_3 -> methodDeclaration .)
    INT             reduce using rule 495 (expr_3 -> methodDeclaration .)
    LONG            reduce using rule 495 (expr_3 -> methodDeclaration .)
    FLOAT           reduce using rule 495 (expr_3 -> methodDeclaration .)
    DOUBLE          reduce using rule 495 (expr_3 -> methodDeclaration .)


state 691

    (90) memberDeclaration -> type expr_3 .

    BRPAREN         reduce using rule 90 (memberDeclaration -> type expr_3 .)
    SEMI            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    STATIC          reduce using rule 90 (memberDeclaration -> type expr_3 .)
    PUBLIC          reduce using rule 90 (memberDeclaration -> type expr_3 .)
    PROTECTED       reduce using rule 90 (memberDeclaration -> type expr_3 .)
    PRIVATE         reduce using rule 90 (memberDeclaration -> type expr_3 .)
    ABSTRACT        reduce using rule 90 (memberDeclaration -> type expr_3 .)
    FINAL           reduce using rule 90 (memberDeclaration -> type expr_3 .)
    NATIVE          reduce using rule 90 (memberDeclaration -> type expr_3 .)
    SYNCHRONIZED    reduce using rule 90 (memberDeclaration -> type expr_3 .)
    TRANSIENT       reduce using rule 90 (memberDeclaration -> type expr_3 .)
    VOLATILE        reduce using rule 90 (memberDeclaration -> type expr_3 .)
    STRICTFP        reduce using rule 90 (memberDeclaration -> type expr_3 .)
    AT              reduce using rule 90 (memberDeclaration -> type expr_3 .)
    BLPAREN         reduce using rule 90 (memberDeclaration -> type expr_3 .)
    VOID            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    Identifier      reduce using rule 90 (memberDeclaration -> type expr_3 .)
    LESS            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    INTERFACE       reduce using rule 90 (memberDeclaration -> type expr_3 .)
    CLASS           reduce using rule 90 (memberDeclaration -> type expr_3 .)
    ENUM            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    BOOLEAN         reduce using rule 90 (memberDeclaration -> type expr_3 .)
    CHAR            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    BYTE            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    SHORT           reduce using rule 90 (memberDeclaration -> type expr_3 .)
    INT             reduce using rule 90 (memberDeclaration -> type expr_3 .)
    LONG            reduce using rule 90 (memberDeclaration -> type expr_3 .)
    FLOAT           reduce using rule 90 (memberDeclaration -> type expr_3 .)
    DOUBLE          reduce using rule 90 (memberDeclaration -> type expr_3 .)


state 692

    (87) memberDecl -> Identifier constructorDeclaratorRest .

    BRPAREN         reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    SEMI            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    STATIC          reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    PUBLIC          reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    PROTECTED       reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    PRIVATE         reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    ABSTRACT        reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    FINAL           reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    NATIVE          reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    TRANSIENT       reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    VOLATILE        reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    STRICTFP        reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    AT              reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    BLPAREN         reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    VOID            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    Identifier      reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    LESS            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    INTERFACE       reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    CLASS           reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    ENUM            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    BOOLEAN         reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    CHAR            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    BYTE            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    SHORT           reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    INT             reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    LONG            reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    FLOAT           reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)
    DOUBLE          reduce using rule 87 (memberDecl -> Identifier constructorDeclaratorRest .)


state 693

    (119) constructorDeclaratorRest -> formalParameters . THROWS qualifiedNameList constructorBody
    (120) constructorDeclaratorRest -> formalParameters . empty constructorBody
    (528) empty -> .

    THROWS          shift and go to state 772
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 773

state 694

    (179) formalParameters -> LPAREN . formalParameterDecls RPAREN
    (180) formalParameters -> LPAREN . empty RPAREN
    (181) formalParameterDecls -> . variableModifiers type formalParameterDeclsRest
    (528) empty -> .
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    RPAREN          reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    FINAL           shift and go to state 745
    AT              shift and go to state 5

    variableModifiers              shift and go to state 774
    expt_23                        shift and go to state 660
    formalParameterDecls           shift and go to state 775
    variableModifier               shift and go to state 654
    annotation                     shift and go to state 743
    empty                          shift and go to state 776

state 695

    (425) expt_6 -> AND type .

    AND             reduce using rule 425 (expt_6 -> AND type .)
    COMMA           reduce using rule 425 (expt_6 -> AND type .)
    MORE            reduce using rule 425 (expt_6 -> AND type .)


state 696

    (426) expt_6 -> expt_6 AND . type
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 777

state 697

    (32) normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .

    SEMI            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    PUBLIC          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    PROTECTED       reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    PRIVATE         reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    ABSTRACT        reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    STATIC          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    FINAL           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    STRICTFP        reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    AT              reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    CLASS           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    ENUM            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    INTERFACE       reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    $end            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    BRPAREN         reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    ASSERT          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    IF              reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    FOR             reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    WHILE           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    DO              reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    TRY             reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    SWITCH          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    SYNCHRONIZED    reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    RETURN          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    THROW           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    BREAK           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    CONTINUE        reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    Identifier      reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    BLPAREN         reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    PLUS            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    DASH            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    OP_INC          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    OP_DEC          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    TILDE           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    EXCLAMATION     reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    LPAREN          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    THIS            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    SUPER           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NEW             reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    VOID            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    CharacterLiteral reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    StringLiteral   reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NULL            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    BOOLEAN         reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    CHAR            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    BYTE            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    SHORT           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    INT             reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    LONG            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    FLOAT           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    DOUBLE          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NUMBER          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    HEX_NUMBER      reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    LONG_NUMBER     reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    LONG_HEX_NUMBER reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_1   reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_2   reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_3   reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    TRUE            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    FALSE           reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    CASE            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    DEFAULT         reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    NATIVE          reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    TRANSIENT       reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    VOLATILE        reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)
    LESS            reduce using rule 32 (normalClassDeclaration -> CLASS Identifier typeParameters EXTENDS type IMPLEMENTS typeList classBody .)


state 698

    (36) normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .

    SEMI            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    PUBLIC          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    PROTECTED       reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    PRIVATE         reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    ABSTRACT        reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    STATIC          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    FINAL           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    STRICTFP        reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    AT              reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    CLASS           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    ENUM            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    INTERFACE       reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    $end            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    BRPAREN         reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    ASSERT          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    IF              reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    FOR             reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    WHILE           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    DO              reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    TRY             reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    SWITCH          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    SYNCHRONIZED    reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    RETURN          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    THROW           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    BREAK           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    CONTINUE        reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    Identifier      reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    BLPAREN         reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    PLUS            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    DASH            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    OP_INC          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    OP_DEC          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    TILDE           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    EXCLAMATION     reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    LPAREN          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    THIS            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    SUPER           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NEW             reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    VOID            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    CharacterLiteral reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    StringLiteral   reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NULL            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    BOOLEAN         reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    CHAR            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    BYTE            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    SHORT           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    INT             reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    LONG            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    FLOAT           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    DOUBLE          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NUMBER          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    HEX_NUMBER      reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    LONG_NUMBER     reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    LONG_HEX_NUMBER reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_1   reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_2   reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NON_INTEGER_3   reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    TRUE            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    FALSE           reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    CASE            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    DEFAULT         reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    NATIVE          reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    TRANSIENT       reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    VOLATILE        reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)
    LESS            reduce using rule 36 (normalClassDeclaration -> CLASS Identifier empty EXTENDS type IMPLEMENTS typeList classBody .)


state 699

    (428) expt_7 -> expt_7 COMMA enumConstant .

    COMMA           reduce using rule 428 (expt_7 -> expt_7 COMMA enumConstant .)
    SEMI            reduce using rule 428 (expt_7 -> expt_7 COMMA enumConstant .)
    BRPAREN         reduce using rule 428 (expt_7 -> expt_7 COMMA enumConstant .)


state 700

    (60) enumConstant -> annotations Identifier empty classBody .

    COMMA           reduce using rule 60 (enumConstant -> annotations Identifier empty classBody .)
    SEMI            reduce using rule 60 (enumConstant -> annotations Identifier empty classBody .)
    BRPAREN         reduce using rule 60 (enumConstant -> annotations Identifier empty classBody .)


state 701

    (61) enumConstant -> annotations Identifier empty empty .

    COMMA           reduce using rule 61 (enumConstant -> annotations Identifier empty empty .)
    SEMI            reduce using rule 61 (enumConstant -> annotations Identifier empty empty .)
    BRPAREN         reduce using rule 61 (enumConstant -> annotations Identifier empty empty .)


state 702

    (58) enumConstant -> annotations Identifier arguments classBody .

    COMMA           reduce using rule 58 (enumConstant -> annotations Identifier arguments classBody .)
    SEMI            reduce using rule 58 (enumConstant -> annotations Identifier arguments classBody .)
    BRPAREN         reduce using rule 58 (enumConstant -> annotations Identifier arguments classBody .)


state 703

    (59) enumConstant -> annotations Identifier arguments empty .

    COMMA           reduce using rule 59 (enumConstant -> annotations Identifier arguments empty .)
    SEMI            reduce using rule 59 (enumConstant -> annotations Identifier arguments empty .)
    BRPAREN         reduce using rule 59 (enumConstant -> annotations Identifier arguments empty .)


state 704

    (66) enumBodyDeclarations -> SEMI expt_8 .
    (418) expt_8 -> expt_8 . classBodyDeclaration
    (80) classBodyDeclaration -> . SEMI
    (81) classBodyDeclaration -> . STATIC block
    (82) classBodyDeclaration -> . empty block
    (83) classBodyDeclaration -> . modifiers memberDecl
    (528) empty -> .
    (28) modifiers -> . expt_4
    (29) modifiers -> . empty
    (421) expt_4 -> . modifier
    (422) expt_4 -> . expt_4 modifier
    (139) modifier -> . annotation
    (140) modifier -> . PUBLIC
    (141) modifier -> . PROTECTED
    (142) modifier -> . PRIVATE
    (143) modifier -> . STATIC
    (144) modifier -> . ABSTRACT
    (145) modifier -> . FINAL
    (146) modifier -> . NATIVE
    (147) modifier -> . SYNCHRONIZED
    (148) modifier -> . TRANSIENT
    (149) modifier -> . VOLATILE
    (150) modifier -> . STRICTFP
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

  ! shift/reduce conflict for AT resolved as shift
    BRPAREN         reduce using rule 66 (enumBodyDeclarations -> SEMI expt_8 .)
    SEMI            shift and go to state 507
    STATIC          shift and go to state 505
    BLPAREN         reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    LESS            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 473
    PROTECTED       shift and go to state 458
    PRIVATE         shift and go to state 463
    ABSTRACT        shift and go to state 457
    FINAL           shift and go to state 460
    NATIVE          shift and go to state 461
    SYNCHRONIZED    shift and go to state 456
    TRANSIENT       shift and go to state 470
    VOLATILE        shift and go to state 471
    STRICTFP        shift and go to state 464
    AT              shift and go to state 5

  ! AT              [ reduce using rule 528 (empty -> .) ]

    modifiers                      shift and go to state 510
    expt_4                         shift and go to state 462
    classBodyDeclaration           shift and go to state 577
    modifier                       shift and go to state 472
    annotation                     shift and go to state 467
    empty                          shift and go to state 575

state 705

    (67) enumBodyDeclarations -> SEMI empty .
    (82) classBodyDeclaration -> empty . block
    (29) modifiers -> empty .
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BRPAREN         reduce using rule 67 (enumBodyDeclarations -> SEMI empty .)
    VOID            reduce using rule 29 (modifiers -> empty .)
    Identifier      reduce using rule 29 (modifiers -> empty .)
    LESS            reduce using rule 29 (modifiers -> empty .)
    INTERFACE       reduce using rule 29 (modifiers -> empty .)
    AT              reduce using rule 29 (modifiers -> empty .)
    CLASS           reduce using rule 29 (modifiers -> empty .)
    ENUM            reduce using rule 29 (modifiers -> empty .)
    BOOLEAN         reduce using rule 29 (modifiers -> empty .)
    CHAR            reduce using rule 29 (modifiers -> empty .)
    BYTE            reduce using rule 29 (modifiers -> empty .)
    SHORT           reduce using rule 29 (modifiers -> empty .)
    INT             reduce using rule 29 (modifiers -> empty .)
    LONG            reduce using rule 29 (modifiers -> empty .)
    FLOAT           reduce using rule 29 (modifiers -> empty .)
    DOUBLE          reduce using rule 29 (modifiers -> empty .)
    BLPAREN         shift and go to state 574

    block                          shift and go to state 578

state 706

    (48) enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .

    SEMI            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    PUBLIC          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    PROTECTED       reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    PRIVATE         reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    ABSTRACT        reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    STATIC          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    FINAL           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    STRICTFP        reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    AT              reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    CLASS           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    ENUM            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    INTERFACE       reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    $end            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    BRPAREN         reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    ASSERT          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    IF              reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    FOR             reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    WHILE           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    DO              reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    TRY             reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    SWITCH          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    SYNCHRONIZED    reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    RETURN          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    THROW           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    BREAK           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    CONTINUE        reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    Identifier      reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    BLPAREN         reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    PLUS            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    DASH            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    OP_INC          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    OP_DEC          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    TILDE           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    EXCLAMATION     reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    LPAREN          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    THIS            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    SUPER           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NEW             reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    VOID            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    CharacterLiteral reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    StringLiteral   reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NULL            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    BOOLEAN         reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    CHAR            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    BYTE            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    SHORT           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    INT             reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    LONG            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    FLOAT           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    DOUBLE          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NUMBER          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    HEX_NUMBER      reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    LONG_NUMBER     reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_1   reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_2   reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_3   reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    TRUE            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    FALSE           reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    CASE            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    DEFAULT         reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    NATIVE          reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    TRANSIENT       reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    VOLATILE        reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)
    LESS            reduce using rule 48 (enumBody -> BLPAREN enumConstants COMMA enumBodyDeclarations BRPAREN .)


state 707

    (49) enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .

    SEMI            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    PUBLIC          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    PROTECTED       reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    PRIVATE         reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    ABSTRACT        reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    STATIC          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    FINAL           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    STRICTFP        reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    AT              reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    CLASS           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    ENUM            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    INTERFACE       reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    $end            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    BRPAREN         reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    ASSERT          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    IF              reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    FOR             reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    WHILE           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    DO              reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    TRY             reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    SWITCH          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    RETURN          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    THROW           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    BREAK           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    CONTINUE        reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    Identifier      reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    BLPAREN         reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    PLUS            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    DASH            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    OP_INC          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    OP_DEC          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    TILDE           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    EXCLAMATION     reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    LPAREN          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    THIS            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    SUPER           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NEW             reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    VOID            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    CharacterLiteral reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    StringLiteral   reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NULL            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    BOOLEAN         reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    CHAR            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    BYTE            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    SHORT           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    INT             reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    LONG            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    FLOAT           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    DOUBLE          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NUMBER          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    HEX_NUMBER      reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    LONG_NUMBER     reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    TRUE            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    FALSE           reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    CASE            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    DEFAULT         reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    NATIVE          reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    TRANSIENT       reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    VOLATILE        reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)
    LESS            reduce using rule 49 (enumBody -> BLPAREN enumConstants COMMA empty BRPAREN .)


state 708

    (50) enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .

    SEMI            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    PUBLIC          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    PROTECTED       reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    PRIVATE         reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    ABSTRACT        reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    STATIC          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    FINAL           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    STRICTFP        reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    AT              reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    CLASS           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    ENUM            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    INTERFACE       reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    $end            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    BRPAREN         reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    ASSERT          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    IF              reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    FOR             reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    WHILE           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    DO              reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    TRY             reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    SWITCH          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    SYNCHRONIZED    reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    RETURN          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    THROW           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    BREAK           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    CONTINUE        reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    Identifier      reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    BLPAREN         reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    PLUS            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    DASH            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    OP_INC          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    OP_DEC          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    TILDE           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    EXCLAMATION     reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    LPAREN          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    THIS            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    SUPER           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NEW             reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    VOID            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    CharacterLiteral reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    StringLiteral   reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NULL            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    BOOLEAN         reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    CHAR            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    BYTE            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    SHORT           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    INT             reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    LONG            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    FLOAT           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    DOUBLE          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NUMBER          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    HEX_NUMBER      reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    LONG_NUMBER     reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_1   reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_2   reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_3   reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    TRUE            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    FALSE           reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    CASE            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    DEFAULT         reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    NATIVE          reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    TRANSIENT       reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    VOLATILE        reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)
    LESS            reduce using rule 50 (enumBody -> BLPAREN enumConstants empty enumBodyDeclarations BRPAREN .)


state 709

    (51) enumBody -> BLPAREN enumConstants empty empty BRPAREN .

    SEMI            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    PUBLIC          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    PROTECTED       reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    PRIVATE         reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    ABSTRACT        reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    STATIC          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    FINAL           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    STRICTFP        reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    AT              reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    CLASS           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    ENUM            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    INTERFACE       reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    $end            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    BRPAREN         reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    ASSERT          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    IF              reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    FOR             reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    WHILE           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    DO              reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    TRY             reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    SWITCH          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    RETURN          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    THROW           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    BREAK           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    CONTINUE        reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    Identifier      reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    BLPAREN         reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    PLUS            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    DASH            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    OP_INC          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    OP_DEC          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    TILDE           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    EXCLAMATION     reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    LPAREN          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    THIS            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    SUPER           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NEW             reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    VOID            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    CharacterLiteral reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    StringLiteral   reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NULL            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    BOOLEAN         reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    CHAR            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    BYTE            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    SHORT           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    INT             reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    LONG            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    FLOAT           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    DOUBLE          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NUMBER          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    HEX_NUMBER      reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    LONG_NUMBER     reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    TRUE            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    FALSE           reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    CASE            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    DEFAULT         reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    NATIVE          reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    TRANSIENT       reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    VOLATILE        reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)
    LESS            reduce using rule 51 (enumBody -> BLPAREN enumConstants empty empty BRPAREN .)


state 710

    (52) enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .

    SEMI            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    PUBLIC          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    PROTECTED       reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    PRIVATE         reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    ABSTRACT        reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    STATIC          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    FINAL           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    STRICTFP        reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    AT              reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    CLASS           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    ENUM            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    INTERFACE       reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    $end            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    BRPAREN         reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    ASSERT          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    IF              reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    FOR             reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    WHILE           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    DO              reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    TRY             reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    SWITCH          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    SYNCHRONIZED    reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    RETURN          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    THROW           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    BREAK           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    CONTINUE        reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    Identifier      reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    BLPAREN         reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    PLUS            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    DASH            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    OP_INC          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    OP_DEC          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    TILDE           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    EXCLAMATION     reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    LPAREN          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    THIS            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    SUPER           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NEW             reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    VOID            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    CharacterLiteral reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    StringLiteral   reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NULL            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    BOOLEAN         reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    CHAR            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    BYTE            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    SHORT           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    INT             reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    LONG            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    FLOAT           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    DOUBLE          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NUMBER          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    HEX_NUMBER      reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    LONG_NUMBER     reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_1   reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_2   reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NON_INTEGER_3   reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    TRUE            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    FALSE           reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    CASE            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    DEFAULT         reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    NATIVE          reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    TRANSIENT       reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    VOLATILE        reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)
    LESS            reduce using rule 52 (enumBody -> BLPAREN empty COMMA enumBodyDeclarations BRPAREN .)


state 711

    (53) enumBody -> BLPAREN empty COMMA empty BRPAREN .

    SEMI            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    PUBLIC          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    PROTECTED       reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    PRIVATE         reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    ABSTRACT        reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    STATIC          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    FINAL           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    STRICTFP        reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    AT              reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    CLASS           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    ENUM            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    INTERFACE       reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    $end            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    BRPAREN         reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    ASSERT          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    IF              reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    FOR             reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    WHILE           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    DO              reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    TRY             reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    SWITCH          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    RETURN          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    THROW           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    BREAK           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    CONTINUE        reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    Identifier      reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    BLPAREN         reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    PLUS            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    DASH            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    OP_INC          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    OP_DEC          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    TILDE           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    EXCLAMATION     reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    LPAREN          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    THIS            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    SUPER           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NEW             reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    VOID            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    CharacterLiteral reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    StringLiteral   reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NULL            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    BOOLEAN         reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    CHAR            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    BYTE            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    SHORT           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    INT             reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    LONG            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    FLOAT           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    DOUBLE          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NUMBER          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    HEX_NUMBER      reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    LONG_NUMBER     reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    TRUE            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    FALSE           reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    CASE            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    DEFAULT         reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    NATIVE          reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    TRANSIENT       reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    VOLATILE        reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)
    LESS            reduce using rule 53 (enumBody -> BLPAREN empty COMMA empty BRPAREN .)


state 712

    (63) enumConstant -> empty Identifier arguments empty .

    COMMA           reduce using rule 63 (enumConstant -> empty Identifier arguments empty .)
    SEMI            reduce using rule 63 (enumConstant -> empty Identifier arguments empty .)
    BRPAREN         reduce using rule 63 (enumConstant -> empty Identifier arguments empty .)


state 713

    (62) enumConstant -> empty Identifier arguments classBody .

    COMMA           reduce using rule 62 (enumConstant -> empty Identifier arguments classBody .)
    SEMI            reduce using rule 62 (enumConstant -> empty Identifier arguments classBody .)
    BRPAREN         reduce using rule 62 (enumConstant -> empty Identifier arguments classBody .)


state 714

    (64) enumConstant -> empty Identifier empty classBody .

    COMMA           reduce using rule 64 (enumConstant -> empty Identifier empty classBody .)
    SEMI            reduce using rule 64 (enumConstant -> empty Identifier empty classBody .)
    BRPAREN         reduce using rule 64 (enumConstant -> empty Identifier empty classBody .)


state 715

    (65) enumConstant -> empty Identifier empty empty .

    COMMA           reduce using rule 65 (enumConstant -> empty Identifier empty empty .)
    SEMI            reduce using rule 65 (enumConstant -> empty Identifier empty empty .)
    BRPAREN         reduce using rule 65 (enumConstant -> empty Identifier empty empty .)


state 716

    (54) enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .

    SEMI            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    PUBLIC          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    PROTECTED       reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    PRIVATE         reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    ABSTRACT        reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    STATIC          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    FINAL           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    STRICTFP        reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    AT              reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    CLASS           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    ENUM            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    INTERFACE       reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    $end            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    BRPAREN         reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    ASSERT          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    IF              reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    FOR             reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    WHILE           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    DO              reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    TRY             reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    SWITCH          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    SYNCHRONIZED    reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    RETURN          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    THROW           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    BREAK           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    CONTINUE        reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    Identifier      reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    BLPAREN         reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    PLUS            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    DASH            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    OP_INC          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    OP_DEC          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    TILDE           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    EXCLAMATION     reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    LPAREN          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    THIS            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    SUPER           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NEW             reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    VOID            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    CharacterLiteral reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    StringLiteral   reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NULL            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    BOOLEAN         reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    CHAR            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    BYTE            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    SHORT           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    INT             reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    LONG            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    FLOAT           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    DOUBLE          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NUMBER          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    HEX_NUMBER      reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    LONG_NUMBER     reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_1   reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_2   reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NON_INTEGER_3   reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    TRUE            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    FALSE           reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    CASE            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    DEFAULT         reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    NATIVE          reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    TRANSIENT       reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    VOLATILE        reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)
    LESS            reduce using rule 54 (enumBody -> BLPAREN empty empty enumBodyDeclarations BRPAREN .)


state 717

    (55) enumBody -> BLPAREN empty empty empty BRPAREN .

    SEMI            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    PUBLIC          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    PROTECTED       reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    PRIVATE         reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    ABSTRACT        reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    STATIC          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    FINAL           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    STRICTFP        reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    AT              reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    CLASS           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    ENUM            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    INTERFACE       reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    $end            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    BRPAREN         reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    ASSERT          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    IF              reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    FOR             reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    WHILE           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    DO              reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    TRY             reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    SWITCH          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    RETURN          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    THROW           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    BREAK           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    CONTINUE        reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    Identifier      reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    BLPAREN         reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    PLUS            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    DASH            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    OP_INC          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    OP_DEC          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    TILDE           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    EXCLAMATION     reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    LPAREN          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    THIS            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    SUPER           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NEW             reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    VOID            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    CharacterLiteral reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    StringLiteral   reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NULL            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    BOOLEAN         reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    CHAR            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    BYTE            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    SHORT           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    INT             reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    LONG            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    FLOAT           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    DOUBLE          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NUMBER          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    HEX_NUMBER      reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    LONG_NUMBER     reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    TRUE            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    FALSE           reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    CASE            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    DEFAULT         reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    NATIVE          reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    TRANSIENT       reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    VOLATILE        reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)
    LESS            reduce using rule 55 (enumBody -> BLPAREN empty empty empty BRPAREN .)


state 718

    (223) annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .

    BRPAREN         reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PUBLIC          reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PROTECTED       reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PRIVATE         reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    STATIC          reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    ABSTRACT        reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    FINAL           reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    NATIVE          reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    SYNCHRONIZED    reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    TRANSIENT       reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    VOLATILE        reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    STRICTFP        reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    AT              reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    CLASS           reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    INTERFACE       reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    ENUM            reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    Identifier      reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    BOOLEAN         reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    CHAR            reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    BYTE            reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    SHORT           reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    INT             reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    LONG            reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    FLOAT           reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    DOUBLE          reduce using rule 223 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)


state 719

    (124) variableDeclarator -> variableDeclaratorId EQUALS . variableInitializer
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    conditionalOrExpression        shift and go to state 101
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 778
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 720

    (125) variableDeclarator -> variableDeclaratorId empty .

    COMMA           reduce using rule 125 (variableDeclarator -> variableDeclaratorId empty .)
    SEMI            reduce using rule 125 (variableDeclarator -> variableDeclaratorId empty .)


state 721

    (234) annotationMethodRest -> Identifier LPAREN . RPAREN defaultValue
    (235) annotationMethodRest -> Identifier LPAREN . RPAREN empty

    RPAREN          shift and go to state 779


state 722

    (130) variableDeclaratorId -> Identifier expt_11 .
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    EQUALS          reduce using rule 130 (variableDeclaratorId -> Identifier expt_11 .)
    COMMA           reduce using rule 130 (variableDeclaratorId -> Identifier expt_11 .)
    SEMI            reduce using rule 130 (variableDeclaratorId -> Identifier expt_11 .)
    RPAREN          reduce using rule 130 (variableDeclaratorId -> Identifier expt_11 .)
    FLPAREN         shift and go to state 313


state 723

    (131) variableDeclaratorId -> Identifier empty .

    EQUALS          reduce using rule 131 (variableDeclaratorId -> Identifier empty .)
    COMMA           reduce using rule 131 (variableDeclaratorId -> Identifier empty .)
    SEMI            reduce using rule 131 (variableDeclaratorId -> Identifier empty .)
    RPAREN          reduce using rule 131 (variableDeclaratorId -> Identifier empty .)


state 724

    (463) expt_12 -> COMMA . variableDeclarator
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 780

    variableDeclaratorId           shift and go to state 624
    variableDeclarator             shift and go to state 781

state 725

    (122) variableDeclarators -> variableDeclarator expt_12 .
    (464) expt_12 -> expt_12 . COMMA variableDeclarator

    SEMI            reduce using rule 122 (variableDeclarators -> variableDeclarator expt_12 .)
    COMMA           shift and go to state 782


state 726

    (123) variableDeclarators -> variableDeclarator empty .

    SEMI            reduce using rule 123 (variableDeclarators -> variableDeclarator empty .)


state 727

    (100) interfaceMemberDecl -> VOID Identifier . voidInterfaceMethodDeclaratorRest
    (117) voidInterfaceMethodDeclaratorRest -> . formalParameters THROWS qualifiedNameList SEMI
    (118) voidInterfaceMethodDeclaratorRest -> . formalParameters empty SEMI
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 694

    formalParameters               shift and go to state 783
    voidInterfaceMethodDeclaratorRest shift and go to state 784

state 728

    (488) expr_7 -> VOID .

    Identifier      reduce using rule 488 (expr_7 -> VOID .)


state 729

    (116) interfaceGenericMethodDecl -> typeParameters expr_7 . Identifier interfaceMethodDeclaratorRest

    Identifier      shift and go to state 785


state 730

    (487) expr_7 -> type .

    Identifier      reduce using rule 487 (expr_7 -> type .)


state 731

    (103) interfaceMethodOrFieldDecl -> type Identifier . interfaceMethodOrFieldRest
    (104) interfaceMethodOrFieldRest -> . constantDeclaratorsRest SEMI
    (105) interfaceMethodOrFieldRest -> . interfaceMethodDeclaratorRest
    (126) constantDeclaratorsRest -> . constantDeclaratorRest expt_13
    (127) constantDeclaratorsRest -> . constantDeclaratorRest empty
    (112) interfaceMethodDeclaratorRest -> . formalParameters expt_11 THROWS qualifiedNameList SEMI
    (113) interfaceMethodDeclaratorRest -> . formalParameters expt_11 empty SEMI
    (114) interfaceMethodDeclaratorRest -> . formalParameters empty THROWS qualifiedNameList SEMI
    (115) interfaceMethodDeclaratorRest -> . formalParameters empty empty SEMI
    (128) constantDeclaratorRest -> . expt_11 EQUALS variableInitializer
    (129) constantDeclaratorRest -> . empty EQUALS variableInitializer
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    LPAREN          shift and go to state 694
    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)

    interfaceMethodDeclaratorRest  shift and go to state 786
    formalParameters               shift and go to state 787
    interfaceMethodOrFieldRest     shift and go to state 788
    constantDeclaratorsRest        shift and go to state 789
    constantDeclaratorRest         shift and go to state 790
    expt_11                        shift and go to state 791
    empty                          shift and go to state 792

state 732

    (135) arrayInitializer -> BLPAREN variableInitializer expt_14 . COMMA BRPAREN
    (136) arrayInitializer -> BLPAREN variableInitializer expt_14 . empty BRPAREN
    (460) expt_14 -> expt_14 . COMMA variableInitializer
    (528) empty -> .

    COMMA           shift and go to state 793
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 794

state 733

    (459) expt_14 -> COMMA . variableInitializer
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 795
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 734

    (137) arrayInitializer -> BLPAREN variableInitializer empty . COMMA BRPAREN
    (138) arrayInitializer -> BLPAREN variableInitializer empty . empty BRPAREN
    (528) empty -> .

    COMMA           shift and go to state 796
    BRPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 797

state 735

    (134) arrayInitializer -> BLPAREN empty BRPAREN .

    COMMA           reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    BRPAREN         reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    SEMI            reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    DOT             reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    FLPAREN         reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    OP_INC          reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)
    OP_DEC          reduce using rule 134 (arrayInitializer -> BLPAREN empty BRPAREN .)


state 736

    (400) expt_38 -> expt_38 FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 798


state 737

    (399) expt_38 -> FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 399 (expt_38 -> FLPAREN expression FRPAREN .)


state 738

    (259) statement -> RETURN empty . SEMI

    SEMI            shift and go to state 799


state 739

    (258) statement -> RETURN expression . SEMI

    SEMI            shift and go to state 800


state 740

    (257) statement -> SYNCHRONIZED parExpression . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 574

    block                          shift and go to state 801

state 741

    (292) parExpression -> LPAREN . expression RPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 802

state 742

    (252) statement -> FOR LPAREN . forControl RPAREN statement
    (279) forControl -> . enhancedForControl
    (280) forControl -> . forInit SEMI expression SEMI forUpdate
    (281) forControl -> . forInit SEMI expression SEMI empty
    (282) forControl -> . forInit SEMI empty SEMI forUpdate
    (283) forControl -> . forInit SEMI empty SEMI empty
    (284) forControl -> . empty SEMI expression SEMI forUpdate
    (285) forControl -> . empty SEMI expression SEMI empty
    (286) forControl -> . empty SEMI empty SEMI forUpdate
    (287) forControl -> . empty SEMI empty SEMI empty
    (290) enhancedForControl -> . variableModifiers type Identifier COLON expression
    (288) forInit -> . localVariableDeclaration
    (289) forInit -> . expressionList
    (528) empty -> .
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    SEMI            reduce using rule 528 (empty -> .)
    FINAL           shift and go to state 745
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 806
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    unaryExpression                shift and go to state 128
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 743
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 807
    parExpression                  shift and go to state 129
    empty                          shift and go to state 808
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    forInit                        shift and go to state 803
    forControl                     shift and go to state 804
    expt_23                        shift and go to state 660
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    enhancedForControl             shift and go to state 805
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    variableModifiers              shift and go to state 809
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 743

    (171) variableModifier -> annotation .

    FINAL           reduce using rule 171 (variableModifier -> annotation .)
    AT              reduce using rule 171 (variableModifier -> annotation .)
    Identifier      reduce using rule 171 (variableModifier -> annotation .)
    BOOLEAN         reduce using rule 171 (variableModifier -> annotation .)
    CHAR            reduce using rule 171 (variableModifier -> annotation .)
    BYTE            reduce using rule 171 (variableModifier -> annotation .)
    SHORT           reduce using rule 171 (variableModifier -> annotation .)
    INT             reduce using rule 171 (variableModifier -> annotation .)
    LONG            reduce using rule 171 (variableModifier -> annotation .)
    FLOAT           reduce using rule 171 (variableModifier -> annotation .)
    DOUBLE          reduce using rule 171 (variableModifier -> annotation .)


state 744

    (448) expt_23 -> expt_23 variableModifier .

    FINAL           reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    AT              reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    Identifier      reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    BOOLEAN         reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    CHAR            reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    BYTE            reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    SHORT           reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    INT             reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    LONG            reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    FLOAT           reduce using rule 448 (expt_23 -> expt_23 variableModifier .)
    DOUBLE          reduce using rule 448 (expt_23 -> expt_23 variableModifier .)


state 745

    (170) variableModifier -> FINAL .

    FINAL           reduce using rule 170 (variableModifier -> FINAL .)
    AT              reduce using rule 170 (variableModifier -> FINAL .)
    Identifier      reduce using rule 170 (variableModifier -> FINAL .)
    BOOLEAN         reduce using rule 170 (variableModifier -> FINAL .)
    CHAR            reduce using rule 170 (variableModifier -> FINAL .)
    BYTE            reduce using rule 170 (variableModifier -> FINAL .)
    SHORT           reduce using rule 170 (variableModifier -> FINAL .)
    INT             reduce using rule 170 (variableModifier -> FINAL .)
    LONG            reduce using rule 170 (variableModifier -> FINAL .)
    FLOAT           reduce using rule 170 (variableModifier -> FINAL .)
    DOUBLE          reduce using rule 170 (variableModifier -> FINAL .)


state 746

    (255) statement -> TRY block . expr_12
    (516) expr_12 -> . catches FINALLY block
    (517) expr_12 -> . catches
    (518) expr_12 -> . FINALLY block
    (268) catches -> . catchClause expt_24
    (269) catches -> . catchClause empty
    (270) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         shift and go to state 812
    CATCH           shift and go to state 813

    catches                        shift and go to state 810
    catchClause                    shift and go to state 811
    expr_12                        shift and go to state 814

state 747

    (267) statement -> Identifier COLON . statement
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 815
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 748

    (264) statement -> CONTINUE empty . SEMI

    SEMI            shift and go to state 816


state 749

    (263) statement -> CONTINUE Identifier . SEMI

    SEMI            shift and go to state 817


state 750

    (243) localVariableDeclarationStatement -> localVariableDeclaration SEMI .

    BRPAREN         reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ASSERT          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    IF              reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FOR             reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    WHILE           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DO              reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRY             reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SWITCH          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    RETURN          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THROW           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BREAK           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CONTINUE        reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SEMI            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    Identifier      reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BLPAREN         reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PUBLIC          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PROTECTED       reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PRIVATE         reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ABSTRACT        reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STATIC          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FINAL           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STRICTFP        reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    AT              reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PLUS            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DASH            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_INC          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_DEC          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TILDE           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    EXCLAMATION     reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LPAREN          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THIS            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SUPER           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NEW             reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    VOID            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CharacterLiteral reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    StringLiteral   reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NULL            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BOOLEAN         reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CHAR            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BYTE            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SHORT           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    INT             reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FLOAT           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DOUBLE          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NUMBER          reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    HEX_NUMBER      reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_NUMBER     reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_HEX_NUMBER reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_1   reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_2   reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_3   reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRUE            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FALSE           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CLASS           reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ENUM            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    INTERFACE       reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CASE            reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DEFAULT         reduce using rule 243 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)


state 751

    (253) statement -> WHILE parExpression . statement
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 818
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 752

    (256) statement -> SWITCH parExpression . BLPAREN switchBlockStatementGroups BRPAREN

    BLPAREN         shift and go to state 819


state 753

    (239) block -> BLPAREN empty BRPAREN .

    BRPAREN         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    ASSERT          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    IF              reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    FOR             reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    WHILE           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    DO              reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    TRY             reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    SWITCH          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    RETURN          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    THROW           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    BREAK           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CONTINUE        reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    SEMI            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    Identifier      reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    BLPAREN         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    PUBLIC          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    PROTECTED       reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    PRIVATE         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    ABSTRACT        reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    STATIC          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    FINAL           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    STRICTFP        reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    AT              reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    PLUS            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    DASH            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    OP_INC          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    OP_DEC          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    TILDE           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    EXCLAMATION     reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    LPAREN          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    THIS            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    SUPER           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NEW             reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    VOID            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CharacterLiteral reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    StringLiteral   reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NULL            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    BOOLEAN         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CHAR            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    BYTE            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    SHORT           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    INT             reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    LONG            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    FLOAT           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    DOUBLE          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NUMBER          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    HEX_NUMBER      reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    LONG_NUMBER     reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NON_INTEGER_1   reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NON_INTEGER_2   reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NON_INTEGER_3   reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    TRUE            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    FALSE           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CLASS           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    ENUM            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    INTERFACE       reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    ELSE            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CASE            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    DEFAULT         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    NATIVE          reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    TRANSIENT       reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    VOLATILE        reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    LESS            reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    CATCH           reduce using rule 239 (block -> BLPAREN empty BRPAREN .)
    FINALLY         reduce using rule 239 (block -> BLPAREN empty BRPAREN .)


state 754

    (261) statement -> BREAK Identifier . SEMI

    SEMI            shift and go to state 820


state 755

    (262) statement -> BREAK empty . SEMI

    SEMI            shift and go to state 821


state 756

    (254) statement -> DO statement . WHILE parExpression SEMI

    WHILE           shift and go to state 822


state 757

    (244) localVariableDeclaration -> variableModifiers type . variableDeclarators
    (122) variableDeclarators -> . variableDeclarator expt_12
    (123) variableDeclarators -> . variableDeclarator empty
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 780

    variableDeclarators            shift and go to state 823
    variableDeclaratorId           shift and go to state 624
    variableDeclarator             shift and go to state 627

state 758

    (248) statement -> ASSERT expression . COLON expression SEMI
    (249) statement -> ASSERT expression . empty SEMI
    (528) empty -> .

    COLON           shift and go to state 824
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 825

state 759

    (250) statement -> IF parExpression . statement ELSE statement
    (251) statement -> IF parExpression . statement empty
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 826
    FloatingPointLiteral           shift and go to state 112
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    block                          shift and go to state 665
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664

state 760

    (266) statement -> statementExpression SEMI .

    WHILE           reduce using rule 266 (statement -> statementExpression SEMI .)
    ASSERT          reduce using rule 266 (statement -> statementExpression SEMI .)
    IF              reduce using rule 266 (statement -> statementExpression SEMI .)
    FOR             reduce using rule 266 (statement -> statementExpression SEMI .)
    DO              reduce using rule 266 (statement -> statementExpression SEMI .)
    TRY             reduce using rule 266 (statement -> statementExpression SEMI .)
    SWITCH          reduce using rule 266 (statement -> statementExpression SEMI .)
    SYNCHRONIZED    reduce using rule 266 (statement -> statementExpression SEMI .)
    RETURN          reduce using rule 266 (statement -> statementExpression SEMI .)
    THROW           reduce using rule 266 (statement -> statementExpression SEMI .)
    BREAK           reduce using rule 266 (statement -> statementExpression SEMI .)
    CONTINUE        reduce using rule 266 (statement -> statementExpression SEMI .)
    SEMI            reduce using rule 266 (statement -> statementExpression SEMI .)
    Identifier      reduce using rule 266 (statement -> statementExpression SEMI .)
    BLPAREN         reduce using rule 266 (statement -> statementExpression SEMI .)
    PUBLIC          reduce using rule 266 (statement -> statementExpression SEMI .)
    PROTECTED       reduce using rule 266 (statement -> statementExpression SEMI .)
    PRIVATE         reduce using rule 266 (statement -> statementExpression SEMI .)
    ABSTRACT        reduce using rule 266 (statement -> statementExpression SEMI .)
    STATIC          reduce using rule 266 (statement -> statementExpression SEMI .)
    FINAL           reduce using rule 266 (statement -> statementExpression SEMI .)
    STRICTFP        reduce using rule 266 (statement -> statementExpression SEMI .)
    AT              reduce using rule 266 (statement -> statementExpression SEMI .)
    PLUS            reduce using rule 266 (statement -> statementExpression SEMI .)
    DASH            reduce using rule 266 (statement -> statementExpression SEMI .)
    OP_INC          reduce using rule 266 (statement -> statementExpression SEMI .)
    OP_DEC          reduce using rule 266 (statement -> statementExpression SEMI .)
    TILDE           reduce using rule 266 (statement -> statementExpression SEMI .)
    EXCLAMATION     reduce using rule 266 (statement -> statementExpression SEMI .)
    LPAREN          reduce using rule 266 (statement -> statementExpression SEMI .)
    THIS            reduce using rule 266 (statement -> statementExpression SEMI .)
    SUPER           reduce using rule 266 (statement -> statementExpression SEMI .)
    NEW             reduce using rule 266 (statement -> statementExpression SEMI .)
    VOID            reduce using rule 266 (statement -> statementExpression SEMI .)
    CharacterLiteral reduce using rule 266 (statement -> statementExpression SEMI .)
    StringLiteral   reduce using rule 266 (statement -> statementExpression SEMI .)
    NULL            reduce using rule 266 (statement -> statementExpression SEMI .)
    BOOLEAN         reduce using rule 266 (statement -> statementExpression SEMI .)
    CHAR            reduce using rule 266 (statement -> statementExpression SEMI .)
    BYTE            reduce using rule 266 (statement -> statementExpression SEMI .)
    SHORT           reduce using rule 266 (statement -> statementExpression SEMI .)
    INT             reduce using rule 266 (statement -> statementExpression SEMI .)
    LONG            reduce using rule 266 (statement -> statementExpression SEMI .)
    FLOAT           reduce using rule 266 (statement -> statementExpression SEMI .)
    DOUBLE          reduce using rule 266 (statement -> statementExpression SEMI .)
    NUMBER          reduce using rule 266 (statement -> statementExpression SEMI .)
    HEX_NUMBER      reduce using rule 266 (statement -> statementExpression SEMI .)
    LONG_NUMBER     reduce using rule 266 (statement -> statementExpression SEMI .)
    LONG_HEX_NUMBER reduce using rule 266 (statement -> statementExpression SEMI .)
    NON_INTEGER_1   reduce using rule 266 (statement -> statementExpression SEMI .)
    NON_INTEGER_2   reduce using rule 266 (statement -> statementExpression SEMI .)
    NON_INTEGER_3   reduce using rule 266 (statement -> statementExpression SEMI .)
    TRUE            reduce using rule 266 (statement -> statementExpression SEMI .)
    FALSE           reduce using rule 266 (statement -> statementExpression SEMI .)
    CLASS           reduce using rule 266 (statement -> statementExpression SEMI .)
    ENUM            reduce using rule 266 (statement -> statementExpression SEMI .)
    INTERFACE       reduce using rule 266 (statement -> statementExpression SEMI .)
    CASE            reduce using rule 266 (statement -> statementExpression SEMI .)
    DEFAULT         reduce using rule 266 (statement -> statementExpression SEMI .)
    BRPAREN         reduce using rule 266 (statement -> statementExpression SEMI .)
    ELSE            reduce using rule 266 (statement -> statementExpression SEMI .)


state 761

    (260) statement -> THROW expression . SEMI

    SEMI            shift and go to state 827


state 762

    (472) expt_18 -> expt_18 blockStatement .

    ASSERT          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    IF              reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    FOR             reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    WHILE           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    DO              reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    TRY             reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    SWITCH          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    SYNCHRONIZED    reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    RETURN          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    THROW           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    BREAK           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    CONTINUE        reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    SEMI            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    Identifier      reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    BLPAREN         reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    PUBLIC          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    PROTECTED       reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    PRIVATE         reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    ABSTRACT        reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    STATIC          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    FINAL           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    STRICTFP        reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    AT              reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    PLUS            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    DASH            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    OP_INC          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    OP_DEC          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    TILDE           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    EXCLAMATION     reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    LPAREN          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    THIS            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    SUPER           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NEW             reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    VOID            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    CharacterLiteral reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    StringLiteral   reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NULL            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    BOOLEAN         reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    CHAR            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    BYTE            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    SHORT           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    INT             reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    LONG            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    FLOAT           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    DOUBLE          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NUMBER          reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    HEX_NUMBER      reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    LONG_NUMBER     reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    LONG_HEX_NUMBER reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NON_INTEGER_1   reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NON_INTEGER_2   reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    NON_INTEGER_3   reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    TRUE            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    FALSE           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    CLASS           reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    ENUM            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    INTERFACE       reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    CASE            reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    DEFAULT         reduce using rule 472 (expt_18 -> expt_18 blockStatement .)
    BRPAREN         reduce using rule 472 (expt_18 -> expt_18 blockStatement .)


state 763

    (19) classOrInterfaceModifiers -> empty .
    (246) variableModifiers -> empty .

    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 764

    (238) block -> BLPAREN expt_18 BRPAREN .

    BRPAREN         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    ASSERT          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    IF              reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    FOR             reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    WHILE           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    DO              reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    TRY             reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    SWITCH          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    SYNCHRONIZED    reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    RETURN          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    THROW           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    BREAK           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CONTINUE        reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    SEMI            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    Identifier      reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    BLPAREN         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    PUBLIC          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    PROTECTED       reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    PRIVATE         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    ABSTRACT        reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    STATIC          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    FINAL           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    STRICTFP        reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    AT              reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    PLUS            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    DASH            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    OP_INC          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    OP_DEC          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    TILDE           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    EXCLAMATION     reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    LPAREN          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    THIS            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    SUPER           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NEW             reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    VOID            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CharacterLiteral reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    StringLiteral   reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NULL            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    BOOLEAN         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CHAR            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    BYTE            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    SHORT           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    INT             reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    LONG            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    FLOAT           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    DOUBLE          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NUMBER          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    HEX_NUMBER      reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    LONG_NUMBER     reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NON_INTEGER_1   reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NON_INTEGER_2   reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NON_INTEGER_3   reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    TRUE            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    FALSE           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CLASS           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    ENUM            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    INTERFACE       reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    ELSE            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CASE            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    DEFAULT         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    NATIVE          reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    TRANSIENT       reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    VOLATILE        reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    LESS            reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    CATCH           reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)
    FINALLY         reduce using rule 238 (block -> BLPAREN expt_18 BRPAREN .)


state 765

    (110) voidMethodDeclaratorRest -> formalParameters . THROWS qualifiedNameList expr_6
    (111) voidMethodDeclaratorRest -> formalParameters . empty expr_6
    (528) empty -> .

    THROWS          shift and go to state 828
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 829

state 766

    (86) memberDecl -> VOID Identifier voidMethodDeclaratorRest .

    BRPAREN         reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SEMI            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    STATIC          reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PUBLIC          reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PROTECTED       reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PRIVATE         reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    FINAL           reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    NATIVE          reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    VOLATILE        reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    STRICTFP        reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    AT              reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BLPAREN         reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    VOID            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    Identifier      reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    LESS            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    INTERFACE       reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    CLASS           reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    ENUM            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    CHAR            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BYTE            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SHORT           reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    INT             reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    LONG            reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    FLOAT           reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    DOUBLE          reduce using rule 86 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)


state 767

    (92) genericMethodOrConstructorRest -> expr_4 Identifier . methodDeclaratorRest
    (106) methodDeclaratorRest -> . formalParameters expt_11 THROWS qualifiedNameList expr_5
    (107) methodDeclaratorRest -> . formalParameters expt_11 empty expr_5
    (108) methodDeclaratorRest -> . formalParameters empty THROWS qualifiedNameList expr_5
    (109) methodDeclaratorRest -> . formalParameters empty empty expr_5
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 694

    formalParameters               shift and go to state 770
    methodDeclaratorRest           shift and go to state 830

state 768

    (93) genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .

    BRPAREN         reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SEMI            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    STATIC          reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PUBLIC          reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PROTECTED       reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PRIVATE         reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    ABSTRACT        reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    FINAL           reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    NATIVE          reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    TRANSIENT       reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    VOLATILE        reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    STRICTFP        reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    AT              reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BLPAREN         reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    VOID            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    Identifier      reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    LESS            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    INTERFACE       reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    CLASS           reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    ENUM            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BOOLEAN         reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    CHAR            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BYTE            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SHORT           reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    INT             reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    LONG            reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    FLOAT           reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    DOUBLE          reduce using rule 93 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)


state 769

    (95) fieldDeclaration -> variableDeclarators SEMI .

    BRPAREN         reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    SEMI            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    STATIC          reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    PUBLIC          reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    PROTECTED       reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    PRIVATE         reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    ABSTRACT        reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    FINAL           reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    NATIVE          reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    SYNCHRONIZED    reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    TRANSIENT       reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    VOLATILE        reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    STRICTFP        reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    AT              reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    BLPAREN         reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    VOID            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    Identifier      reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    LESS            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    INTERFACE       reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    CLASS           reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    ENUM            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    BOOLEAN         reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    CHAR            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    BYTE            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    SHORT           reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    INT             reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    LONG            reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    FLOAT           reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)
    DOUBLE          reduce using rule 95 (fieldDeclaration -> variableDeclarators SEMI .)


state 770

    (106) methodDeclaratorRest -> formalParameters . expt_11 THROWS qualifiedNameList expr_5
    (107) methodDeclaratorRest -> formalParameters . expt_11 empty expr_5
    (108) methodDeclaratorRest -> formalParameters . empty THROWS qualifiedNameList expr_5
    (109) methodDeclaratorRest -> formalParameters . empty empty expr_5
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    THROWS          reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 832
    expt_11                        shift and go to state 831

state 771

    (94) methodDeclaration -> Identifier methodDeclaratorRest .

    BRPAREN         reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SEMI            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    STATIC          reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PUBLIC          reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PROTECTED       reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PRIVATE         reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    ABSTRACT        reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    FINAL           reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    NATIVE          reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    TRANSIENT       reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    VOLATILE        reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    STRICTFP        reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    AT              reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BLPAREN         reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    VOID            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    Identifier      reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    LESS            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    INTERFACE       reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    CLASS           reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    ENUM            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BOOLEAN         reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    CHAR            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BYTE            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SHORT           reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    INT             reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    LONG            reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    FLOAT           reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)
    DOUBLE          reduce using rule 94 (methodDeclaration -> Identifier methodDeclaratorRest .)


state 772

    (119) constructorDeclaratorRest -> formalParameters THROWS . qualifiedNameList constructorBody
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 833
    qualifiedName                  shift and go to state 834

state 773

    (120) constructorDeclaratorRest -> formalParameters empty . constructorBody
    (186) constructorBody -> . BLPAREN explicitConstructorInvocation expt_18 BRPAREN
    (187) constructorBody -> . BLPAREN explicitConstructorInvocation empty BRPAREN
    (188) constructorBody -> . BLPAREN empty expt_18 BRPAREN
    (189) constructorBody -> . BLPAREN empty empty BRPAREN

    BLPAREN         shift and go to state 835

    constructorBody                shift and go to state 836

state 774

    (181) formalParameterDecls -> variableModifiers . type formalParameterDeclsRest
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 837

state 775

    (179) formalParameters -> LPAREN formalParameterDecls . RPAREN

    RPAREN          shift and go to state 838


state 776

    (180) formalParameters -> LPAREN empty . RPAREN
    (246) variableModifiers -> empty .

    RPAREN          shift and go to state 839
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 777

    (426) expt_6 -> expt_6 AND type .

    AND             reduce using rule 426 (expt_6 -> expt_6 AND type .)
    COMMA           reduce using rule 426 (expt_6 -> expt_6 AND type .)
    MORE            reduce using rule 426 (expt_6 -> expt_6 AND type .)


state 778

    (124) variableDeclarator -> variableDeclaratorId EQUALS variableInitializer .

    COMMA           reduce using rule 124 (variableDeclarator -> variableDeclaratorId EQUALS variableInitializer .)
    SEMI            reduce using rule 124 (variableDeclarator -> variableDeclaratorId EQUALS variableInitializer .)


state 779

    (234) annotationMethodRest -> Identifier LPAREN RPAREN . defaultValue
    (235) annotationMethodRest -> Identifier LPAREN RPAREN . empty
    (237) defaultValue -> . DEFAULT elementValue
    (528) empty -> .

    DEFAULT         shift and go to state 840
    SEMI            reduce using rule 528 (empty -> .)

    defaultValue                   shift and go to state 841
    empty                          shift and go to state 842

state 780

    (130) variableDeclaratorId -> Identifier . expt_11
    (131) variableDeclaratorId -> Identifier . empty
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    RPAREN          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 723
    expt_11                        shift and go to state 722

state 781

    (463) expt_12 -> COMMA variableDeclarator .

    COMMA           reduce using rule 463 (expt_12 -> COMMA variableDeclarator .)
    SEMI            reduce using rule 463 (expt_12 -> COMMA variableDeclarator .)


state 782

    (464) expt_12 -> expt_12 COMMA . variableDeclarator
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 780

    variableDeclaratorId           shift and go to state 624
    variableDeclarator             shift and go to state 843

state 783

    (117) voidInterfaceMethodDeclaratorRest -> formalParameters . THROWS qualifiedNameList SEMI
    (118) voidInterfaceMethodDeclaratorRest -> formalParameters . empty SEMI
    (528) empty -> .

    THROWS          shift and go to state 845
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 844

state 784

    (100) interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    AT              reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    VOID            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    LESS            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    INT             reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    LONG            reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 100 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)


state 785

    (116) interfaceGenericMethodDecl -> typeParameters expr_7 Identifier . interfaceMethodDeclaratorRest
    (112) interfaceMethodDeclaratorRest -> . formalParameters expt_11 THROWS qualifiedNameList SEMI
    (113) interfaceMethodDeclaratorRest -> . formalParameters expt_11 empty SEMI
    (114) interfaceMethodDeclaratorRest -> . formalParameters empty THROWS qualifiedNameList SEMI
    (115) interfaceMethodDeclaratorRest -> . formalParameters empty empty SEMI
    (179) formalParameters -> . LPAREN formalParameterDecls RPAREN
    (180) formalParameters -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 694

    interfaceMethodDeclaratorRest  shift and go to state 846
    formalParameters               shift and go to state 787

state 786

    (105) interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    AT              reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    VOID            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    LESS            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    INT             reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    LONG            reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 105 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)


state 787

    (112) interfaceMethodDeclaratorRest -> formalParameters . expt_11 THROWS qualifiedNameList SEMI
    (113) interfaceMethodDeclaratorRest -> formalParameters . expt_11 empty SEMI
    (114) interfaceMethodDeclaratorRest -> formalParameters . empty THROWS qualifiedNameList SEMI
    (115) interfaceMethodDeclaratorRest -> formalParameters . empty empty SEMI
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    THROWS          reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 848
    expt_11                        shift and go to state 847

state 788

    (103) interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .

    BRPAREN         reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SEMI            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PUBLIC          reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PROTECTED       reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PRIVATE         reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    STATIC          reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    ABSTRACT        reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    FINAL           reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    NATIVE          reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SYNCHRONIZED    reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    TRANSIENT       reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    VOLATILE        reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    STRICTFP        reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    AT              reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    VOID            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    LESS            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    INTERFACE       reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    CLASS           reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    ENUM            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    Identifier      reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    BOOLEAN         reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    CHAR            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    BYTE            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SHORT           reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    INT             reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    LONG            reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    FLOAT           reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    DOUBLE          reduce using rule 103 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)


state 789

    (104) interfaceMethodOrFieldRest -> constantDeclaratorsRest . SEMI

    SEMI            shift and go to state 849


state 790

    (126) constantDeclaratorsRest -> constantDeclaratorRest . expt_13
    (127) constantDeclaratorsRest -> constantDeclaratorRest . empty
    (465) expt_13 -> . COMMA constantDeclarator
    (466) expt_13 -> . expt_13 COMMA constantDeclarator
    (528) empty -> .

    COMMA           shift and go to state 850
    SEMI            reduce using rule 528 (empty -> .)

    expt_13                        shift and go to state 851
    empty                          shift and go to state 852

state 791

    (128) constantDeclaratorRest -> expt_11 . EQUALS variableInitializer
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN

    EQUALS          shift and go to state 853
    FLPAREN         shift and go to state 313


state 792

    (129) constantDeclaratorRest -> empty . EQUALS variableInitializer

    EQUALS          shift and go to state 854


state 793

    (135) arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA . BRPAREN
    (460) expt_14 -> expt_14 COMMA . variableInitializer
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BRPAREN         shift and go to state 856
    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 855
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 794

    (136) arrayInitializer -> BLPAREN variableInitializer expt_14 empty . BRPAREN

    BRPAREN         shift and go to state 857


state 795

    (459) expt_14 -> COMMA variableInitializer .

    COMMA           reduce using rule 459 (expt_14 -> COMMA variableInitializer .)
    BRPAREN         reduce using rule 459 (expt_14 -> COMMA variableInitializer .)


state 796

    (137) arrayInitializer -> BLPAREN variableInitializer empty COMMA . BRPAREN

    BRPAREN         shift and go to state 858


state 797

    (138) arrayInitializer -> BLPAREN variableInitializer empty empty . BRPAREN

    BRPAREN         shift and go to state 859


state 798

    (400) expt_38 -> expt_38 FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 400 (expt_38 -> expt_38 FLPAREN expression FRPAREN .)


state 799

    (259) statement -> RETURN empty SEMI .

    WHILE           reduce using rule 259 (statement -> RETURN empty SEMI .)
    ASSERT          reduce using rule 259 (statement -> RETURN empty SEMI .)
    IF              reduce using rule 259 (statement -> RETURN empty SEMI .)
    FOR             reduce using rule 259 (statement -> RETURN empty SEMI .)
    DO              reduce using rule 259 (statement -> RETURN empty SEMI .)
    TRY             reduce using rule 259 (statement -> RETURN empty SEMI .)
    SWITCH          reduce using rule 259 (statement -> RETURN empty SEMI .)
    SYNCHRONIZED    reduce using rule 259 (statement -> RETURN empty SEMI .)
    RETURN          reduce using rule 259 (statement -> RETURN empty SEMI .)
    THROW           reduce using rule 259 (statement -> RETURN empty SEMI .)
    BREAK           reduce using rule 259 (statement -> RETURN empty SEMI .)
    CONTINUE        reduce using rule 259 (statement -> RETURN empty SEMI .)
    SEMI            reduce using rule 259 (statement -> RETURN empty SEMI .)
    Identifier      reduce using rule 259 (statement -> RETURN empty SEMI .)
    BLPAREN         reduce using rule 259 (statement -> RETURN empty SEMI .)
    PUBLIC          reduce using rule 259 (statement -> RETURN empty SEMI .)
    PROTECTED       reduce using rule 259 (statement -> RETURN empty SEMI .)
    PRIVATE         reduce using rule 259 (statement -> RETURN empty SEMI .)
    ABSTRACT        reduce using rule 259 (statement -> RETURN empty SEMI .)
    STATIC          reduce using rule 259 (statement -> RETURN empty SEMI .)
    FINAL           reduce using rule 259 (statement -> RETURN empty SEMI .)
    STRICTFP        reduce using rule 259 (statement -> RETURN empty SEMI .)
    AT              reduce using rule 259 (statement -> RETURN empty SEMI .)
    PLUS            reduce using rule 259 (statement -> RETURN empty SEMI .)
    DASH            reduce using rule 259 (statement -> RETURN empty SEMI .)
    OP_INC          reduce using rule 259 (statement -> RETURN empty SEMI .)
    OP_DEC          reduce using rule 259 (statement -> RETURN empty SEMI .)
    TILDE           reduce using rule 259 (statement -> RETURN empty SEMI .)
    EXCLAMATION     reduce using rule 259 (statement -> RETURN empty SEMI .)
    LPAREN          reduce using rule 259 (statement -> RETURN empty SEMI .)
    THIS            reduce using rule 259 (statement -> RETURN empty SEMI .)
    SUPER           reduce using rule 259 (statement -> RETURN empty SEMI .)
    NEW             reduce using rule 259 (statement -> RETURN empty SEMI .)
    VOID            reduce using rule 259 (statement -> RETURN empty SEMI .)
    CharacterLiteral reduce using rule 259 (statement -> RETURN empty SEMI .)
    StringLiteral   reduce using rule 259 (statement -> RETURN empty SEMI .)
    NULL            reduce using rule 259 (statement -> RETURN empty SEMI .)
    BOOLEAN         reduce using rule 259 (statement -> RETURN empty SEMI .)
    CHAR            reduce using rule 259 (statement -> RETURN empty SEMI .)
    BYTE            reduce using rule 259 (statement -> RETURN empty SEMI .)
    SHORT           reduce using rule 259 (statement -> RETURN empty SEMI .)
    INT             reduce using rule 259 (statement -> RETURN empty SEMI .)
    LONG            reduce using rule 259 (statement -> RETURN empty SEMI .)
    FLOAT           reduce using rule 259 (statement -> RETURN empty SEMI .)
    DOUBLE          reduce using rule 259 (statement -> RETURN empty SEMI .)
    NUMBER          reduce using rule 259 (statement -> RETURN empty SEMI .)
    HEX_NUMBER      reduce using rule 259 (statement -> RETURN empty SEMI .)
    LONG_NUMBER     reduce using rule 259 (statement -> RETURN empty SEMI .)
    LONG_HEX_NUMBER reduce using rule 259 (statement -> RETURN empty SEMI .)
    NON_INTEGER_1   reduce using rule 259 (statement -> RETURN empty SEMI .)
    NON_INTEGER_2   reduce using rule 259 (statement -> RETURN empty SEMI .)
    NON_INTEGER_3   reduce using rule 259 (statement -> RETURN empty SEMI .)
    TRUE            reduce using rule 259 (statement -> RETURN empty SEMI .)
    FALSE           reduce using rule 259 (statement -> RETURN empty SEMI .)
    CLASS           reduce using rule 259 (statement -> RETURN empty SEMI .)
    ENUM            reduce using rule 259 (statement -> RETURN empty SEMI .)
    INTERFACE       reduce using rule 259 (statement -> RETURN empty SEMI .)
    CASE            reduce using rule 259 (statement -> RETURN empty SEMI .)
    DEFAULT         reduce using rule 259 (statement -> RETURN empty SEMI .)
    BRPAREN         reduce using rule 259 (statement -> RETURN empty SEMI .)
    ELSE            reduce using rule 259 (statement -> RETURN empty SEMI .)


state 800

    (258) statement -> RETURN expression SEMI .

    WHILE           reduce using rule 258 (statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 258 (statement -> RETURN expression SEMI .)
    IF              reduce using rule 258 (statement -> RETURN expression SEMI .)
    FOR             reduce using rule 258 (statement -> RETURN expression SEMI .)
    DO              reduce using rule 258 (statement -> RETURN expression SEMI .)
    TRY             reduce using rule 258 (statement -> RETURN expression SEMI .)
    SWITCH          reduce using rule 258 (statement -> RETURN expression SEMI .)
    SYNCHRONIZED    reduce using rule 258 (statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 258 (statement -> RETURN expression SEMI .)
    THROW           reduce using rule 258 (statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 258 (statement -> RETURN expression SEMI .)
    CONTINUE        reduce using rule 258 (statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 258 (statement -> RETURN expression SEMI .)
    Identifier      reduce using rule 258 (statement -> RETURN expression SEMI .)
    BLPAREN         reduce using rule 258 (statement -> RETURN expression SEMI .)
    PUBLIC          reduce using rule 258 (statement -> RETURN expression SEMI .)
    PROTECTED       reduce using rule 258 (statement -> RETURN expression SEMI .)
    PRIVATE         reduce using rule 258 (statement -> RETURN expression SEMI .)
    ABSTRACT        reduce using rule 258 (statement -> RETURN expression SEMI .)
    STATIC          reduce using rule 258 (statement -> RETURN expression SEMI .)
    FINAL           reduce using rule 258 (statement -> RETURN expression SEMI .)
    STRICTFP        reduce using rule 258 (statement -> RETURN expression SEMI .)
    AT              reduce using rule 258 (statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 258 (statement -> RETURN expression SEMI .)
    DASH            reduce using rule 258 (statement -> RETURN expression SEMI .)
    OP_INC          reduce using rule 258 (statement -> RETURN expression SEMI .)
    OP_DEC          reduce using rule 258 (statement -> RETURN expression SEMI .)
    TILDE           reduce using rule 258 (statement -> RETURN expression SEMI .)
    EXCLAMATION     reduce using rule 258 (statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 258 (statement -> RETURN expression SEMI .)
    THIS            reduce using rule 258 (statement -> RETURN expression SEMI .)
    SUPER           reduce using rule 258 (statement -> RETURN expression SEMI .)
    NEW             reduce using rule 258 (statement -> RETURN expression SEMI .)
    VOID            reduce using rule 258 (statement -> RETURN expression SEMI .)
    CharacterLiteral reduce using rule 258 (statement -> RETURN expression SEMI .)
    StringLiteral   reduce using rule 258 (statement -> RETURN expression SEMI .)
    NULL            reduce using rule 258 (statement -> RETURN expression SEMI .)
    BOOLEAN         reduce using rule 258 (statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 258 (statement -> RETURN expression SEMI .)
    BYTE            reduce using rule 258 (statement -> RETURN expression SEMI .)
    SHORT           reduce using rule 258 (statement -> RETURN expression SEMI .)
    INT             reduce using rule 258 (statement -> RETURN expression SEMI .)
    LONG            reduce using rule 258 (statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 258 (statement -> RETURN expression SEMI .)
    DOUBLE          reduce using rule 258 (statement -> RETURN expression SEMI .)
    NUMBER          reduce using rule 258 (statement -> RETURN expression SEMI .)
    HEX_NUMBER      reduce using rule 258 (statement -> RETURN expression SEMI .)
    LONG_NUMBER     reduce using rule 258 (statement -> RETURN expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 258 (statement -> RETURN expression SEMI .)
    NON_INTEGER_1   reduce using rule 258 (statement -> RETURN expression SEMI .)
    NON_INTEGER_2   reduce using rule 258 (statement -> RETURN expression SEMI .)
    NON_INTEGER_3   reduce using rule 258 (statement -> RETURN expression SEMI .)
    TRUE            reduce using rule 258 (statement -> RETURN expression SEMI .)
    FALSE           reduce using rule 258 (statement -> RETURN expression SEMI .)
    CLASS           reduce using rule 258 (statement -> RETURN expression SEMI .)
    ENUM            reduce using rule 258 (statement -> RETURN expression SEMI .)
    INTERFACE       reduce using rule 258 (statement -> RETURN expression SEMI .)
    CASE            reduce using rule 258 (statement -> RETURN expression SEMI .)
    DEFAULT         reduce using rule 258 (statement -> RETURN expression SEMI .)
    BRPAREN         reduce using rule 258 (statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 258 (statement -> RETURN expression SEMI .)


state 801

    (257) statement -> SYNCHRONIZED parExpression block .

    WHILE           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    ASSERT          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    IF              reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    FOR             reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    DO              reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    TRY             reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    SWITCH          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    SYNCHRONIZED    reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    RETURN          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    THROW           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    BREAK           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    CONTINUE        reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    SEMI            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    Identifier      reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    BLPAREN         reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    PUBLIC          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    PROTECTED       reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    PRIVATE         reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    ABSTRACT        reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    STATIC          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    FINAL           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    STRICTFP        reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    AT              reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    PLUS            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    DASH            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    OP_INC          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    OP_DEC          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    TILDE           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    EXCLAMATION     reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    LPAREN          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    THIS            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    SUPER           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NEW             reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    VOID            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    CharacterLiteral reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    StringLiteral   reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NULL            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    BOOLEAN         reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    CHAR            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    BYTE            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    SHORT           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    INT             reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    LONG            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    FLOAT           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    DOUBLE          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NUMBER          reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    HEX_NUMBER      reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    LONG_NUMBER     reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    LONG_HEX_NUMBER reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_1   reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_2   reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_3   reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    TRUE            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    FALSE           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    CLASS           reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    ENUM            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    INTERFACE       reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    CASE            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    DEFAULT         reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    BRPAREN         reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)
    ELSE            reduce using rule 257 (statement -> SYNCHRONIZED parExpression block .)


state 802

    (292) parExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 344


state 803

    (280) forControl -> forInit . SEMI expression SEMI forUpdate
    (281) forControl -> forInit . SEMI expression SEMI empty
    (282) forControl -> forInit . SEMI empty SEMI forUpdate
    (283) forControl -> forInit . SEMI empty SEMI empty

    SEMI            shift and go to state 860


state 804

    (252) statement -> FOR LPAREN forControl . RPAREN statement

    RPAREN          shift and go to state 861


state 805

    (279) forControl -> enhancedForControl .

    RPAREN          reduce using rule 279 (forControl -> enhancedForControl .)


state 806

    (288) forInit -> localVariableDeclaration .

    SEMI            reduce using rule 288 (forInit -> localVariableDeclaration .)


state 807

    (289) forInit -> expressionList .

    SEMI            reduce using rule 289 (forInit -> expressionList .)


state 808

    (284) forControl -> empty . SEMI expression SEMI forUpdate
    (285) forControl -> empty . SEMI expression SEMI empty
    (286) forControl -> empty . SEMI empty SEMI forUpdate
    (287) forControl -> empty . SEMI empty SEMI empty
    (246) variableModifiers -> empty .

    SEMI            shift and go to state 862
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 809

    (290) enhancedForControl -> variableModifiers . type Identifier COLON expression
    (244) localVariableDeclaration -> variableModifiers . type variableDeclarators
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    type                           shift and go to state 863
    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252

state 810

    (516) expr_12 -> catches . FINALLY block
    (517) expr_12 -> catches .

    FINALLY         shift and go to state 864
    BRPAREN         reduce using rule 517 (expr_12 -> catches .)
    ASSERT          reduce using rule 517 (expr_12 -> catches .)
    IF              reduce using rule 517 (expr_12 -> catches .)
    FOR             reduce using rule 517 (expr_12 -> catches .)
    WHILE           reduce using rule 517 (expr_12 -> catches .)
    DO              reduce using rule 517 (expr_12 -> catches .)
    TRY             reduce using rule 517 (expr_12 -> catches .)
    SWITCH          reduce using rule 517 (expr_12 -> catches .)
    SYNCHRONIZED    reduce using rule 517 (expr_12 -> catches .)
    RETURN          reduce using rule 517 (expr_12 -> catches .)
    THROW           reduce using rule 517 (expr_12 -> catches .)
    BREAK           reduce using rule 517 (expr_12 -> catches .)
    CONTINUE        reduce using rule 517 (expr_12 -> catches .)
    SEMI            reduce using rule 517 (expr_12 -> catches .)
    Identifier      reduce using rule 517 (expr_12 -> catches .)
    BLPAREN         reduce using rule 517 (expr_12 -> catches .)
    PUBLIC          reduce using rule 517 (expr_12 -> catches .)
    PROTECTED       reduce using rule 517 (expr_12 -> catches .)
    PRIVATE         reduce using rule 517 (expr_12 -> catches .)
    ABSTRACT        reduce using rule 517 (expr_12 -> catches .)
    STATIC          reduce using rule 517 (expr_12 -> catches .)
    FINAL           reduce using rule 517 (expr_12 -> catches .)
    STRICTFP        reduce using rule 517 (expr_12 -> catches .)
    AT              reduce using rule 517 (expr_12 -> catches .)
    PLUS            reduce using rule 517 (expr_12 -> catches .)
    DASH            reduce using rule 517 (expr_12 -> catches .)
    OP_INC          reduce using rule 517 (expr_12 -> catches .)
    OP_DEC          reduce using rule 517 (expr_12 -> catches .)
    TILDE           reduce using rule 517 (expr_12 -> catches .)
    EXCLAMATION     reduce using rule 517 (expr_12 -> catches .)
    LPAREN          reduce using rule 517 (expr_12 -> catches .)
    THIS            reduce using rule 517 (expr_12 -> catches .)
    SUPER           reduce using rule 517 (expr_12 -> catches .)
    NEW             reduce using rule 517 (expr_12 -> catches .)
    VOID            reduce using rule 517 (expr_12 -> catches .)
    CharacterLiteral reduce using rule 517 (expr_12 -> catches .)
    StringLiteral   reduce using rule 517 (expr_12 -> catches .)
    NULL            reduce using rule 517 (expr_12 -> catches .)
    BOOLEAN         reduce using rule 517 (expr_12 -> catches .)
    CHAR            reduce using rule 517 (expr_12 -> catches .)
    BYTE            reduce using rule 517 (expr_12 -> catches .)
    SHORT           reduce using rule 517 (expr_12 -> catches .)
    INT             reduce using rule 517 (expr_12 -> catches .)
    LONG            reduce using rule 517 (expr_12 -> catches .)
    FLOAT           reduce using rule 517 (expr_12 -> catches .)
    DOUBLE          reduce using rule 517 (expr_12 -> catches .)
    NUMBER          reduce using rule 517 (expr_12 -> catches .)
    HEX_NUMBER      reduce using rule 517 (expr_12 -> catches .)
    LONG_NUMBER     reduce using rule 517 (expr_12 -> catches .)
    LONG_HEX_NUMBER reduce using rule 517 (expr_12 -> catches .)
    NON_INTEGER_1   reduce using rule 517 (expr_12 -> catches .)
    NON_INTEGER_2   reduce using rule 517 (expr_12 -> catches .)
    NON_INTEGER_3   reduce using rule 517 (expr_12 -> catches .)
    TRUE            reduce using rule 517 (expr_12 -> catches .)
    FALSE           reduce using rule 517 (expr_12 -> catches .)
    CLASS           reduce using rule 517 (expr_12 -> catches .)
    ENUM            reduce using rule 517 (expr_12 -> catches .)
    INTERFACE       reduce using rule 517 (expr_12 -> catches .)
    ELSE            reduce using rule 517 (expr_12 -> catches .)
    CASE            reduce using rule 517 (expr_12 -> catches .)
    DEFAULT         reduce using rule 517 (expr_12 -> catches .)


state 811

    (268) catches -> catchClause . expt_24
    (269) catches -> catchClause . empty
    (445) expt_24 -> . catchClause
    (446) expt_24 -> . expt_24 catchClause
    (528) empty -> .
    (270) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    ASSERT          reduce using rule 528 (empty -> .)
    IF              reduce using rule 528 (empty -> .)
    FOR             reduce using rule 528 (empty -> .)
    WHILE           reduce using rule 528 (empty -> .)
    DO              reduce using rule 528 (empty -> .)
    TRY             reduce using rule 528 (empty -> .)
    SWITCH          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    RETURN          reduce using rule 528 (empty -> .)
    THROW           reduce using rule 528 (empty -> .)
    BREAK           reduce using rule 528 (empty -> .)
    CONTINUE        reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    PLUS            reduce using rule 528 (empty -> .)
    DASH            reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    TILDE           reduce using rule 528 (empty -> .)
    EXCLAMATION     reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    THIS            reduce using rule 528 (empty -> .)
    SUPER           reduce using rule 528 (empty -> .)
    NEW             reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    CharacterLiteral reduce using rule 528 (empty -> .)
    StringLiteral   reduce using rule 528 (empty -> .)
    NULL            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    NUMBER          reduce using rule 528 (empty -> .)
    HEX_NUMBER      reduce using rule 528 (empty -> .)
    LONG_NUMBER     reduce using rule 528 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 528 (empty -> .)
    NON_INTEGER_1   reduce using rule 528 (empty -> .)
    NON_INTEGER_2   reduce using rule 528 (empty -> .)
    NON_INTEGER_3   reduce using rule 528 (empty -> .)
    TRUE            reduce using rule 528 (empty -> .)
    FALSE           reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ELSE            reduce using rule 528 (empty -> .)
    CASE            reduce using rule 528 (empty -> .)
    DEFAULT         reduce using rule 528 (empty -> .)
    CATCH           shift and go to state 813

    expt_24                        shift and go to state 865
    catchClause                    shift and go to state 866
    empty                          shift and go to state 867

state 812

    (518) expr_12 -> FINALLY . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 574

    block                          shift and go to state 868

state 813

    (270) catchClause -> CATCH . LPAREN formalParameter RPAREN block

    LPAREN          shift and go to state 869


state 814

    (255) statement -> TRY block expr_12 .

    WHILE           reduce using rule 255 (statement -> TRY block expr_12 .)
    ASSERT          reduce using rule 255 (statement -> TRY block expr_12 .)
    IF              reduce using rule 255 (statement -> TRY block expr_12 .)
    FOR             reduce using rule 255 (statement -> TRY block expr_12 .)
    DO              reduce using rule 255 (statement -> TRY block expr_12 .)
    TRY             reduce using rule 255 (statement -> TRY block expr_12 .)
    SWITCH          reduce using rule 255 (statement -> TRY block expr_12 .)
    SYNCHRONIZED    reduce using rule 255 (statement -> TRY block expr_12 .)
    RETURN          reduce using rule 255 (statement -> TRY block expr_12 .)
    THROW           reduce using rule 255 (statement -> TRY block expr_12 .)
    BREAK           reduce using rule 255 (statement -> TRY block expr_12 .)
    CONTINUE        reduce using rule 255 (statement -> TRY block expr_12 .)
    SEMI            reduce using rule 255 (statement -> TRY block expr_12 .)
    Identifier      reduce using rule 255 (statement -> TRY block expr_12 .)
    BLPAREN         reduce using rule 255 (statement -> TRY block expr_12 .)
    PUBLIC          reduce using rule 255 (statement -> TRY block expr_12 .)
    PROTECTED       reduce using rule 255 (statement -> TRY block expr_12 .)
    PRIVATE         reduce using rule 255 (statement -> TRY block expr_12 .)
    ABSTRACT        reduce using rule 255 (statement -> TRY block expr_12 .)
    STATIC          reduce using rule 255 (statement -> TRY block expr_12 .)
    FINAL           reduce using rule 255 (statement -> TRY block expr_12 .)
    STRICTFP        reduce using rule 255 (statement -> TRY block expr_12 .)
    AT              reduce using rule 255 (statement -> TRY block expr_12 .)
    PLUS            reduce using rule 255 (statement -> TRY block expr_12 .)
    DASH            reduce using rule 255 (statement -> TRY block expr_12 .)
    OP_INC          reduce using rule 255 (statement -> TRY block expr_12 .)
    OP_DEC          reduce using rule 255 (statement -> TRY block expr_12 .)
    TILDE           reduce using rule 255 (statement -> TRY block expr_12 .)
    EXCLAMATION     reduce using rule 255 (statement -> TRY block expr_12 .)
    LPAREN          reduce using rule 255 (statement -> TRY block expr_12 .)
    THIS            reduce using rule 255 (statement -> TRY block expr_12 .)
    SUPER           reduce using rule 255 (statement -> TRY block expr_12 .)
    NEW             reduce using rule 255 (statement -> TRY block expr_12 .)
    VOID            reduce using rule 255 (statement -> TRY block expr_12 .)
    CharacterLiteral reduce using rule 255 (statement -> TRY block expr_12 .)
    StringLiteral   reduce using rule 255 (statement -> TRY block expr_12 .)
    NULL            reduce using rule 255 (statement -> TRY block expr_12 .)
    BOOLEAN         reduce using rule 255 (statement -> TRY block expr_12 .)
    CHAR            reduce using rule 255 (statement -> TRY block expr_12 .)
    BYTE            reduce using rule 255 (statement -> TRY block expr_12 .)
    SHORT           reduce using rule 255 (statement -> TRY block expr_12 .)
    INT             reduce using rule 255 (statement -> TRY block expr_12 .)
    LONG            reduce using rule 255 (statement -> TRY block expr_12 .)
    FLOAT           reduce using rule 255 (statement -> TRY block expr_12 .)
    DOUBLE          reduce using rule 255 (statement -> TRY block expr_12 .)
    NUMBER          reduce using rule 255 (statement -> TRY block expr_12 .)
    HEX_NUMBER      reduce using rule 255 (statement -> TRY block expr_12 .)
    LONG_NUMBER     reduce using rule 255 (statement -> TRY block expr_12 .)
    LONG_HEX_NUMBER reduce using rule 255 (statement -> TRY block expr_12 .)
    NON_INTEGER_1   reduce using rule 255 (statement -> TRY block expr_12 .)
    NON_INTEGER_2   reduce using rule 255 (statement -> TRY block expr_12 .)
    NON_INTEGER_3   reduce using rule 255 (statement -> TRY block expr_12 .)
    TRUE            reduce using rule 255 (statement -> TRY block expr_12 .)
    FALSE           reduce using rule 255 (statement -> TRY block expr_12 .)
    CLASS           reduce using rule 255 (statement -> TRY block expr_12 .)
    ENUM            reduce using rule 255 (statement -> TRY block expr_12 .)
    INTERFACE       reduce using rule 255 (statement -> TRY block expr_12 .)
    CASE            reduce using rule 255 (statement -> TRY block expr_12 .)
    DEFAULT         reduce using rule 255 (statement -> TRY block expr_12 .)
    BRPAREN         reduce using rule 255 (statement -> TRY block expr_12 .)
    ELSE            reduce using rule 255 (statement -> TRY block expr_12 .)


state 815

    (267) statement -> Identifier COLON statement .

    WHILE           reduce using rule 267 (statement -> Identifier COLON statement .)
    ASSERT          reduce using rule 267 (statement -> Identifier COLON statement .)
    IF              reduce using rule 267 (statement -> Identifier COLON statement .)
    FOR             reduce using rule 267 (statement -> Identifier COLON statement .)
    DO              reduce using rule 267 (statement -> Identifier COLON statement .)
    TRY             reduce using rule 267 (statement -> Identifier COLON statement .)
    SWITCH          reduce using rule 267 (statement -> Identifier COLON statement .)
    SYNCHRONIZED    reduce using rule 267 (statement -> Identifier COLON statement .)
    RETURN          reduce using rule 267 (statement -> Identifier COLON statement .)
    THROW           reduce using rule 267 (statement -> Identifier COLON statement .)
    BREAK           reduce using rule 267 (statement -> Identifier COLON statement .)
    CONTINUE        reduce using rule 267 (statement -> Identifier COLON statement .)
    SEMI            reduce using rule 267 (statement -> Identifier COLON statement .)
    Identifier      reduce using rule 267 (statement -> Identifier COLON statement .)
    BLPAREN         reduce using rule 267 (statement -> Identifier COLON statement .)
    PUBLIC          reduce using rule 267 (statement -> Identifier COLON statement .)
    PROTECTED       reduce using rule 267 (statement -> Identifier COLON statement .)
    PRIVATE         reduce using rule 267 (statement -> Identifier COLON statement .)
    ABSTRACT        reduce using rule 267 (statement -> Identifier COLON statement .)
    STATIC          reduce using rule 267 (statement -> Identifier COLON statement .)
    FINAL           reduce using rule 267 (statement -> Identifier COLON statement .)
    STRICTFP        reduce using rule 267 (statement -> Identifier COLON statement .)
    AT              reduce using rule 267 (statement -> Identifier COLON statement .)
    PLUS            reduce using rule 267 (statement -> Identifier COLON statement .)
    DASH            reduce using rule 267 (statement -> Identifier COLON statement .)
    OP_INC          reduce using rule 267 (statement -> Identifier COLON statement .)
    OP_DEC          reduce using rule 267 (statement -> Identifier COLON statement .)
    TILDE           reduce using rule 267 (statement -> Identifier COLON statement .)
    EXCLAMATION     reduce using rule 267 (statement -> Identifier COLON statement .)
    LPAREN          reduce using rule 267 (statement -> Identifier COLON statement .)
    THIS            reduce using rule 267 (statement -> Identifier COLON statement .)
    SUPER           reduce using rule 267 (statement -> Identifier COLON statement .)
    NEW             reduce using rule 267 (statement -> Identifier COLON statement .)
    VOID            reduce using rule 267 (statement -> Identifier COLON statement .)
    CharacterLiteral reduce using rule 267 (statement -> Identifier COLON statement .)
    StringLiteral   reduce using rule 267 (statement -> Identifier COLON statement .)
    NULL            reduce using rule 267 (statement -> Identifier COLON statement .)
    BOOLEAN         reduce using rule 267 (statement -> Identifier COLON statement .)
    CHAR            reduce using rule 267 (statement -> Identifier COLON statement .)
    BYTE            reduce using rule 267 (statement -> Identifier COLON statement .)
    SHORT           reduce using rule 267 (statement -> Identifier COLON statement .)
    INT             reduce using rule 267 (statement -> Identifier COLON statement .)
    LONG            reduce using rule 267 (statement -> Identifier COLON statement .)
    FLOAT           reduce using rule 267 (statement -> Identifier COLON statement .)
    DOUBLE          reduce using rule 267 (statement -> Identifier COLON statement .)
    NUMBER          reduce using rule 267 (statement -> Identifier COLON statement .)
    HEX_NUMBER      reduce using rule 267 (statement -> Identifier COLON statement .)
    LONG_NUMBER     reduce using rule 267 (statement -> Identifier COLON statement .)
    LONG_HEX_NUMBER reduce using rule 267 (statement -> Identifier COLON statement .)
    NON_INTEGER_1   reduce using rule 267 (statement -> Identifier COLON statement .)
    NON_INTEGER_2   reduce using rule 267 (statement -> Identifier COLON statement .)
    NON_INTEGER_3   reduce using rule 267 (statement -> Identifier COLON statement .)
    TRUE            reduce using rule 267 (statement -> Identifier COLON statement .)
    FALSE           reduce using rule 267 (statement -> Identifier COLON statement .)
    CLASS           reduce using rule 267 (statement -> Identifier COLON statement .)
    ENUM            reduce using rule 267 (statement -> Identifier COLON statement .)
    INTERFACE       reduce using rule 267 (statement -> Identifier COLON statement .)
    CASE            reduce using rule 267 (statement -> Identifier COLON statement .)
    DEFAULT         reduce using rule 267 (statement -> Identifier COLON statement .)
    BRPAREN         reduce using rule 267 (statement -> Identifier COLON statement .)
    ELSE            reduce using rule 267 (statement -> Identifier COLON statement .)


state 816

    (264) statement -> CONTINUE empty SEMI .

    WHILE           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    ASSERT          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    IF              reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    FOR             reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    DO              reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    TRY             reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    SWITCH          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    SYNCHRONIZED    reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    RETURN          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    THROW           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    BREAK           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    CONTINUE        reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    SEMI            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    Identifier      reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    BLPAREN         reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    PUBLIC          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    PROTECTED       reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    PRIVATE         reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    ABSTRACT        reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    STATIC          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    FINAL           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    STRICTFP        reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    AT              reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    PLUS            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    DASH            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    OP_INC          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    OP_DEC          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    TILDE           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    EXCLAMATION     reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    LPAREN          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    THIS            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    SUPER           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NEW             reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    VOID            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    CharacterLiteral reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    StringLiteral   reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NULL            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    BOOLEAN         reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    CHAR            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    BYTE            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    SHORT           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    INT             reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    LONG            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    FLOAT           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    DOUBLE          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NUMBER          reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    HEX_NUMBER      reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    LONG_NUMBER     reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    LONG_HEX_NUMBER reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NON_INTEGER_1   reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NON_INTEGER_2   reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    NON_INTEGER_3   reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    TRUE            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    FALSE           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    CLASS           reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    ENUM            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    INTERFACE       reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    CASE            reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    DEFAULT         reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    BRPAREN         reduce using rule 264 (statement -> CONTINUE empty SEMI .)
    ELSE            reduce using rule 264 (statement -> CONTINUE empty SEMI .)


state 817

    (263) statement -> CONTINUE Identifier SEMI .

    WHILE           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    ASSERT          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    IF              reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    FOR             reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    DO              reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    TRY             reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    SWITCH          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    SYNCHRONIZED    reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    RETURN          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    THROW           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    BREAK           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    CONTINUE        reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    SEMI            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    Identifier      reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    BLPAREN         reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    PUBLIC          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    PROTECTED       reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    PRIVATE         reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    ABSTRACT        reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    STATIC          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    FINAL           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    STRICTFP        reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    AT              reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    PLUS            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    DASH            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    OP_INC          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    OP_DEC          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    TILDE           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    EXCLAMATION     reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    LPAREN          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    THIS            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    SUPER           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NEW             reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    VOID            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    CharacterLiteral reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    StringLiteral   reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NULL            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    BOOLEAN         reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    CHAR            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    BYTE            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    SHORT           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    INT             reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    LONG            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    FLOAT           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    DOUBLE          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NUMBER          reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    HEX_NUMBER      reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    LONG_NUMBER     reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    LONG_HEX_NUMBER reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NON_INTEGER_1   reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NON_INTEGER_2   reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    NON_INTEGER_3   reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    TRUE            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    FALSE           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    CLASS           reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    ENUM            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    INTERFACE       reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    CASE            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    DEFAULT         reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    BRPAREN         reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)
    ELSE            reduce using rule 263 (statement -> CONTINUE Identifier SEMI .)


state 818

    (253) statement -> WHILE parExpression statement .

    WHILE           reduce using rule 253 (statement -> WHILE parExpression statement .)
    ASSERT          reduce using rule 253 (statement -> WHILE parExpression statement .)
    IF              reduce using rule 253 (statement -> WHILE parExpression statement .)
    FOR             reduce using rule 253 (statement -> WHILE parExpression statement .)
    DO              reduce using rule 253 (statement -> WHILE parExpression statement .)
    TRY             reduce using rule 253 (statement -> WHILE parExpression statement .)
    SWITCH          reduce using rule 253 (statement -> WHILE parExpression statement .)
    SYNCHRONIZED    reduce using rule 253 (statement -> WHILE parExpression statement .)
    RETURN          reduce using rule 253 (statement -> WHILE parExpression statement .)
    THROW           reduce using rule 253 (statement -> WHILE parExpression statement .)
    BREAK           reduce using rule 253 (statement -> WHILE parExpression statement .)
    CONTINUE        reduce using rule 253 (statement -> WHILE parExpression statement .)
    SEMI            reduce using rule 253 (statement -> WHILE parExpression statement .)
    Identifier      reduce using rule 253 (statement -> WHILE parExpression statement .)
    BLPAREN         reduce using rule 253 (statement -> WHILE parExpression statement .)
    PUBLIC          reduce using rule 253 (statement -> WHILE parExpression statement .)
    PROTECTED       reduce using rule 253 (statement -> WHILE parExpression statement .)
    PRIVATE         reduce using rule 253 (statement -> WHILE parExpression statement .)
    ABSTRACT        reduce using rule 253 (statement -> WHILE parExpression statement .)
    STATIC          reduce using rule 253 (statement -> WHILE parExpression statement .)
    FINAL           reduce using rule 253 (statement -> WHILE parExpression statement .)
    STRICTFP        reduce using rule 253 (statement -> WHILE parExpression statement .)
    AT              reduce using rule 253 (statement -> WHILE parExpression statement .)
    PLUS            reduce using rule 253 (statement -> WHILE parExpression statement .)
    DASH            reduce using rule 253 (statement -> WHILE parExpression statement .)
    OP_INC          reduce using rule 253 (statement -> WHILE parExpression statement .)
    OP_DEC          reduce using rule 253 (statement -> WHILE parExpression statement .)
    TILDE           reduce using rule 253 (statement -> WHILE parExpression statement .)
    EXCLAMATION     reduce using rule 253 (statement -> WHILE parExpression statement .)
    LPAREN          reduce using rule 253 (statement -> WHILE parExpression statement .)
    THIS            reduce using rule 253 (statement -> WHILE parExpression statement .)
    SUPER           reduce using rule 253 (statement -> WHILE parExpression statement .)
    NEW             reduce using rule 253 (statement -> WHILE parExpression statement .)
    VOID            reduce using rule 253 (statement -> WHILE parExpression statement .)
    CharacterLiteral reduce using rule 253 (statement -> WHILE parExpression statement .)
    StringLiteral   reduce using rule 253 (statement -> WHILE parExpression statement .)
    NULL            reduce using rule 253 (statement -> WHILE parExpression statement .)
    BOOLEAN         reduce using rule 253 (statement -> WHILE parExpression statement .)
    CHAR            reduce using rule 253 (statement -> WHILE parExpression statement .)
    BYTE            reduce using rule 253 (statement -> WHILE parExpression statement .)
    SHORT           reduce using rule 253 (statement -> WHILE parExpression statement .)
    INT             reduce using rule 253 (statement -> WHILE parExpression statement .)
    LONG            reduce using rule 253 (statement -> WHILE parExpression statement .)
    FLOAT           reduce using rule 253 (statement -> WHILE parExpression statement .)
    DOUBLE          reduce using rule 253 (statement -> WHILE parExpression statement .)
    NUMBER          reduce using rule 253 (statement -> WHILE parExpression statement .)
    HEX_NUMBER      reduce using rule 253 (statement -> WHILE parExpression statement .)
    LONG_NUMBER     reduce using rule 253 (statement -> WHILE parExpression statement .)
    LONG_HEX_NUMBER reduce using rule 253 (statement -> WHILE parExpression statement .)
    NON_INTEGER_1   reduce using rule 253 (statement -> WHILE parExpression statement .)
    NON_INTEGER_2   reduce using rule 253 (statement -> WHILE parExpression statement .)
    NON_INTEGER_3   reduce using rule 253 (statement -> WHILE parExpression statement .)
    TRUE            reduce using rule 253 (statement -> WHILE parExpression statement .)
    FALSE           reduce using rule 253 (statement -> WHILE parExpression statement .)
    CLASS           reduce using rule 253 (statement -> WHILE parExpression statement .)
    ENUM            reduce using rule 253 (statement -> WHILE parExpression statement .)
    INTERFACE       reduce using rule 253 (statement -> WHILE parExpression statement .)
    CASE            reduce using rule 253 (statement -> WHILE parExpression statement .)
    DEFAULT         reduce using rule 253 (statement -> WHILE parExpression statement .)
    BRPAREN         reduce using rule 253 (statement -> WHILE parExpression statement .)
    ELSE            reduce using rule 253 (statement -> WHILE parExpression statement .)


state 819

    (256) statement -> SWITCH parExpression BLPAREN . switchBlockStatementGroups BRPAREN
    (272) switchBlockStatementGroups -> . expt_25
    (273) switchBlockStatementGroups -> . empty
    (443) expt_25 -> . switchBlockStatementGroup
    (444) expt_25 -> . expt_25 switchBlockStatementGroup
    (528) empty -> .
    (274) switchBlockStatementGroup -> . expr_13 expt_18
    (275) switchBlockStatementGroup -> . expr_13 empty
    (519) expr_13 -> . switchLabel
    (520) expr_13 -> . expr_13 switchLabel
    (276) switchLabel -> . CASE constantExpression COLON
    (277) switchLabel -> . CASE enumConstantName COLON
    (278) switchLabel -> . DEFAULT COLON

    BRPAREN         reduce using rule 528 (empty -> .)
    CASE            shift and go to state 871
    DEFAULT         shift and go to state 873

    switchBlockStatementGroups     shift and go to state 870
    switchLabel                    shift and go to state 872
    switchBlockStatementGroup      shift and go to state 875
    expt_25                        shift and go to state 874
    empty                          shift and go to state 877
    expr_13                        shift and go to state 876

state 820

    (261) statement -> BREAK Identifier SEMI .

    WHILE           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    ASSERT          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    IF              reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    FOR             reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    DO              reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    TRY             reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    SWITCH          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    SYNCHRONIZED    reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    RETURN          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    THROW           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    BREAK           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    CONTINUE        reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    SEMI            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    Identifier      reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    BLPAREN         reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    PUBLIC          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    PROTECTED       reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    PRIVATE         reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    ABSTRACT        reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    STATIC          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    FINAL           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    STRICTFP        reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    AT              reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    PLUS            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    DASH            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    OP_INC          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    OP_DEC          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    TILDE           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    EXCLAMATION     reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    LPAREN          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    THIS            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    SUPER           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NEW             reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    VOID            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    CharacterLiteral reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    StringLiteral   reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NULL            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    BOOLEAN         reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    CHAR            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    BYTE            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    SHORT           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    INT             reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    LONG            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    FLOAT           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    DOUBLE          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NUMBER          reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    HEX_NUMBER      reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    LONG_NUMBER     reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    LONG_HEX_NUMBER reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NON_INTEGER_1   reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NON_INTEGER_2   reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    NON_INTEGER_3   reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    TRUE            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    FALSE           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    CLASS           reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    ENUM            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    INTERFACE       reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    CASE            reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    DEFAULT         reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    BRPAREN         reduce using rule 261 (statement -> BREAK Identifier SEMI .)
    ELSE            reduce using rule 261 (statement -> BREAK Identifier SEMI .)


state 821

    (262) statement -> BREAK empty SEMI .

    WHILE           reduce using rule 262 (statement -> BREAK empty SEMI .)
    ASSERT          reduce using rule 262 (statement -> BREAK empty SEMI .)
    IF              reduce using rule 262 (statement -> BREAK empty SEMI .)
    FOR             reduce using rule 262 (statement -> BREAK empty SEMI .)
    DO              reduce using rule 262 (statement -> BREAK empty SEMI .)
    TRY             reduce using rule 262 (statement -> BREAK empty SEMI .)
    SWITCH          reduce using rule 262 (statement -> BREAK empty SEMI .)
    SYNCHRONIZED    reduce using rule 262 (statement -> BREAK empty SEMI .)
    RETURN          reduce using rule 262 (statement -> BREAK empty SEMI .)
    THROW           reduce using rule 262 (statement -> BREAK empty SEMI .)
    BREAK           reduce using rule 262 (statement -> BREAK empty SEMI .)
    CONTINUE        reduce using rule 262 (statement -> BREAK empty SEMI .)
    SEMI            reduce using rule 262 (statement -> BREAK empty SEMI .)
    Identifier      reduce using rule 262 (statement -> BREAK empty SEMI .)
    BLPAREN         reduce using rule 262 (statement -> BREAK empty SEMI .)
    PUBLIC          reduce using rule 262 (statement -> BREAK empty SEMI .)
    PROTECTED       reduce using rule 262 (statement -> BREAK empty SEMI .)
    PRIVATE         reduce using rule 262 (statement -> BREAK empty SEMI .)
    ABSTRACT        reduce using rule 262 (statement -> BREAK empty SEMI .)
    STATIC          reduce using rule 262 (statement -> BREAK empty SEMI .)
    FINAL           reduce using rule 262 (statement -> BREAK empty SEMI .)
    STRICTFP        reduce using rule 262 (statement -> BREAK empty SEMI .)
    AT              reduce using rule 262 (statement -> BREAK empty SEMI .)
    PLUS            reduce using rule 262 (statement -> BREAK empty SEMI .)
    DASH            reduce using rule 262 (statement -> BREAK empty SEMI .)
    OP_INC          reduce using rule 262 (statement -> BREAK empty SEMI .)
    OP_DEC          reduce using rule 262 (statement -> BREAK empty SEMI .)
    TILDE           reduce using rule 262 (statement -> BREAK empty SEMI .)
    EXCLAMATION     reduce using rule 262 (statement -> BREAK empty SEMI .)
    LPAREN          reduce using rule 262 (statement -> BREAK empty SEMI .)
    THIS            reduce using rule 262 (statement -> BREAK empty SEMI .)
    SUPER           reduce using rule 262 (statement -> BREAK empty SEMI .)
    NEW             reduce using rule 262 (statement -> BREAK empty SEMI .)
    VOID            reduce using rule 262 (statement -> BREAK empty SEMI .)
    CharacterLiteral reduce using rule 262 (statement -> BREAK empty SEMI .)
    StringLiteral   reduce using rule 262 (statement -> BREAK empty SEMI .)
    NULL            reduce using rule 262 (statement -> BREAK empty SEMI .)
    BOOLEAN         reduce using rule 262 (statement -> BREAK empty SEMI .)
    CHAR            reduce using rule 262 (statement -> BREAK empty SEMI .)
    BYTE            reduce using rule 262 (statement -> BREAK empty SEMI .)
    SHORT           reduce using rule 262 (statement -> BREAK empty SEMI .)
    INT             reduce using rule 262 (statement -> BREAK empty SEMI .)
    LONG            reduce using rule 262 (statement -> BREAK empty SEMI .)
    FLOAT           reduce using rule 262 (statement -> BREAK empty SEMI .)
    DOUBLE          reduce using rule 262 (statement -> BREAK empty SEMI .)
    NUMBER          reduce using rule 262 (statement -> BREAK empty SEMI .)
    HEX_NUMBER      reduce using rule 262 (statement -> BREAK empty SEMI .)
    LONG_NUMBER     reduce using rule 262 (statement -> BREAK empty SEMI .)
    LONG_HEX_NUMBER reduce using rule 262 (statement -> BREAK empty SEMI .)
    NON_INTEGER_1   reduce using rule 262 (statement -> BREAK empty SEMI .)
    NON_INTEGER_2   reduce using rule 262 (statement -> BREAK empty SEMI .)
    NON_INTEGER_3   reduce using rule 262 (statement -> BREAK empty SEMI .)
    TRUE            reduce using rule 262 (statement -> BREAK empty SEMI .)
    FALSE           reduce using rule 262 (statement -> BREAK empty SEMI .)
    CLASS           reduce using rule 262 (statement -> BREAK empty SEMI .)
    ENUM            reduce using rule 262 (statement -> BREAK empty SEMI .)
    INTERFACE       reduce using rule 262 (statement -> BREAK empty SEMI .)
    CASE            reduce using rule 262 (statement -> BREAK empty SEMI .)
    DEFAULT         reduce using rule 262 (statement -> BREAK empty SEMI .)
    BRPAREN         reduce using rule 262 (statement -> BREAK empty SEMI .)
    ELSE            reduce using rule 262 (statement -> BREAK empty SEMI .)


state 822

    (254) statement -> DO statement WHILE . parExpression SEMI
    (292) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 741

    parExpression                  shift and go to state 878

state 823

    (244) localVariableDeclaration -> variableModifiers type variableDeclarators .

    SEMI            reduce using rule 244 (localVariableDeclaration -> variableModifiers type variableDeclarators .)


state 824

    (248) statement -> ASSERT expression COLON . expression SEMI
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 879

state 825

    (249) statement -> ASSERT expression empty . SEMI

    SEMI            shift and go to state 880


state 826

    (250) statement -> IF parExpression statement . ELSE statement
    (251) statement -> IF parExpression statement . empty
    (528) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 881
    BRPAREN         reduce using rule 528 (empty -> .)
    ASSERT          reduce using rule 528 (empty -> .)
    IF              reduce using rule 528 (empty -> .)
    FOR             reduce using rule 528 (empty -> .)
    WHILE           reduce using rule 528 (empty -> .)
    DO              reduce using rule 528 (empty -> .)
    TRY             reduce using rule 528 (empty -> .)
    SWITCH          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    RETURN          reduce using rule 528 (empty -> .)
    THROW           reduce using rule 528 (empty -> .)
    BREAK           reduce using rule 528 (empty -> .)
    CONTINUE        reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    Identifier      reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    PLUS            reduce using rule 528 (empty -> .)
    DASH            reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    TILDE           reduce using rule 528 (empty -> .)
    EXCLAMATION     reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    THIS            reduce using rule 528 (empty -> .)
    SUPER           reduce using rule 528 (empty -> .)
    NEW             reduce using rule 528 (empty -> .)
    VOID            reduce using rule 528 (empty -> .)
    CharacterLiteral reduce using rule 528 (empty -> .)
    StringLiteral   reduce using rule 528 (empty -> .)
    NULL            reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    NUMBER          reduce using rule 528 (empty -> .)
    HEX_NUMBER      reduce using rule 528 (empty -> .)
    LONG_NUMBER     reduce using rule 528 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 528 (empty -> .)
    NON_INTEGER_1   reduce using rule 528 (empty -> .)
    NON_INTEGER_2   reduce using rule 528 (empty -> .)
    NON_INTEGER_3   reduce using rule 528 (empty -> .)
    TRUE            reduce using rule 528 (empty -> .)
    FALSE           reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CASE            reduce using rule 528 (empty -> .)
    DEFAULT         reduce using rule 528 (empty -> .)

  ! ELSE            [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 882

state 827

    (260) statement -> THROW expression SEMI .

    WHILE           reduce using rule 260 (statement -> THROW expression SEMI .)
    ASSERT          reduce using rule 260 (statement -> THROW expression SEMI .)
    IF              reduce using rule 260 (statement -> THROW expression SEMI .)
    FOR             reduce using rule 260 (statement -> THROW expression SEMI .)
    DO              reduce using rule 260 (statement -> THROW expression SEMI .)
    TRY             reduce using rule 260 (statement -> THROW expression SEMI .)
    SWITCH          reduce using rule 260 (statement -> THROW expression SEMI .)
    SYNCHRONIZED    reduce using rule 260 (statement -> THROW expression SEMI .)
    RETURN          reduce using rule 260 (statement -> THROW expression SEMI .)
    THROW           reduce using rule 260 (statement -> THROW expression SEMI .)
    BREAK           reduce using rule 260 (statement -> THROW expression SEMI .)
    CONTINUE        reduce using rule 260 (statement -> THROW expression SEMI .)
    SEMI            reduce using rule 260 (statement -> THROW expression SEMI .)
    Identifier      reduce using rule 260 (statement -> THROW expression SEMI .)
    BLPAREN         reduce using rule 260 (statement -> THROW expression SEMI .)
    PUBLIC          reduce using rule 260 (statement -> THROW expression SEMI .)
    PROTECTED       reduce using rule 260 (statement -> THROW expression SEMI .)
    PRIVATE         reduce using rule 260 (statement -> THROW expression SEMI .)
    ABSTRACT        reduce using rule 260 (statement -> THROW expression SEMI .)
    STATIC          reduce using rule 260 (statement -> THROW expression SEMI .)
    FINAL           reduce using rule 260 (statement -> THROW expression SEMI .)
    STRICTFP        reduce using rule 260 (statement -> THROW expression SEMI .)
    AT              reduce using rule 260 (statement -> THROW expression SEMI .)
    PLUS            reduce using rule 260 (statement -> THROW expression SEMI .)
    DASH            reduce using rule 260 (statement -> THROW expression SEMI .)
    OP_INC          reduce using rule 260 (statement -> THROW expression SEMI .)
    OP_DEC          reduce using rule 260 (statement -> THROW expression SEMI .)
    TILDE           reduce using rule 260 (statement -> THROW expression SEMI .)
    EXCLAMATION     reduce using rule 260 (statement -> THROW expression SEMI .)
    LPAREN          reduce using rule 260 (statement -> THROW expression SEMI .)
    THIS            reduce using rule 260 (statement -> THROW expression SEMI .)
    SUPER           reduce using rule 260 (statement -> THROW expression SEMI .)
    NEW             reduce using rule 260 (statement -> THROW expression SEMI .)
    VOID            reduce using rule 260 (statement -> THROW expression SEMI .)
    CharacterLiteral reduce using rule 260 (statement -> THROW expression SEMI .)
    StringLiteral   reduce using rule 260 (statement -> THROW expression SEMI .)
    NULL            reduce using rule 260 (statement -> THROW expression SEMI .)
    BOOLEAN         reduce using rule 260 (statement -> THROW expression SEMI .)
    CHAR            reduce using rule 260 (statement -> THROW expression SEMI .)
    BYTE            reduce using rule 260 (statement -> THROW expression SEMI .)
    SHORT           reduce using rule 260 (statement -> THROW expression SEMI .)
    INT             reduce using rule 260 (statement -> THROW expression SEMI .)
    LONG            reduce using rule 260 (statement -> THROW expression SEMI .)
    FLOAT           reduce using rule 260 (statement -> THROW expression SEMI .)
    DOUBLE          reduce using rule 260 (statement -> THROW expression SEMI .)
    NUMBER          reduce using rule 260 (statement -> THROW expression SEMI .)
    HEX_NUMBER      reduce using rule 260 (statement -> THROW expression SEMI .)
    LONG_NUMBER     reduce using rule 260 (statement -> THROW expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 260 (statement -> THROW expression SEMI .)
    NON_INTEGER_1   reduce using rule 260 (statement -> THROW expression SEMI .)
    NON_INTEGER_2   reduce using rule 260 (statement -> THROW expression SEMI .)
    NON_INTEGER_3   reduce using rule 260 (statement -> THROW expression SEMI .)
    TRUE            reduce using rule 260 (statement -> THROW expression SEMI .)
    FALSE           reduce using rule 260 (statement -> THROW expression SEMI .)
    CLASS           reduce using rule 260 (statement -> THROW expression SEMI .)
    ENUM            reduce using rule 260 (statement -> THROW expression SEMI .)
    INTERFACE       reduce using rule 260 (statement -> THROW expression SEMI .)
    CASE            reduce using rule 260 (statement -> THROW expression SEMI .)
    DEFAULT         reduce using rule 260 (statement -> THROW expression SEMI .)
    BRPAREN         reduce using rule 260 (statement -> THROW expression SEMI .)
    ELSE            reduce using rule 260 (statement -> THROW expression SEMI .)


state 828

    (110) voidMethodDeclaratorRest -> formalParameters THROWS . qualifiedNameList expr_6
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 883
    qualifiedName                  shift and go to state 834

state 829

    (111) voidMethodDeclaratorRest -> formalParameters empty . expr_6
    (485) expr_6 -> . methodBody
    (486) expr_6 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 885
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 884
    block                          shift and go to state 887
    expr_6                         shift and go to state 886

state 830

    (92) genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .

    BRPAREN         reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    SEMI            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    STATIC          reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    PUBLIC          reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    PROTECTED       reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    PRIVATE         reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    ABSTRACT        reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    FINAL           reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    NATIVE          reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    TRANSIENT       reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    VOLATILE        reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    STRICTFP        reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    AT              reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    BLPAREN         reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    VOID            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    Identifier      reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    LESS            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    INTERFACE       reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    CLASS           reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    ENUM            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    BOOLEAN         reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    CHAR            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    BYTE            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    SHORT           reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    INT             reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    LONG            reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    FLOAT           reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)
    DOUBLE          reduce using rule 92 (genericMethodOrConstructorRest -> expr_4 Identifier methodDeclaratorRest .)


state 831

    (106) methodDeclaratorRest -> formalParameters expt_11 . THROWS qualifiedNameList expr_5
    (107) methodDeclaratorRest -> formalParameters expt_11 . empty expr_5
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN
    (528) empty -> .

    THROWS          shift and go to state 888
    FLPAREN         shift and go to state 313
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 889

state 832

    (108) methodDeclaratorRest -> formalParameters empty . THROWS qualifiedNameList expr_5
    (109) methodDeclaratorRest -> formalParameters empty . empty expr_5
    (528) empty -> .

    THROWS          shift and go to state 890
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)

    empty                          shift and go to state 891

state 833

    (119) constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList . constructorBody
    (186) constructorBody -> . BLPAREN explicitConstructorInvocation expt_18 BRPAREN
    (187) constructorBody -> . BLPAREN explicitConstructorInvocation empty BRPAREN
    (188) constructorBody -> . BLPAREN empty expt_18 BRPAREN
    (189) constructorBody -> . BLPAREN empty empty BRPAREN

    BLPAREN         shift and go to state 835

    constructorBody                shift and go to state 892

state 834

    (177) qualifiedNameList -> qualifiedName . expt_17
    (178) qualifiedNameList -> qualifiedName . empty
    (457) expt_17 -> . COMMA qualifiedName
    (458) expt_17 -> . expt_17 COMMA qualifiedName
    (528) empty -> .

    COMMA           shift and go to state 894
    BLPAREN         reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    expt_17                        shift and go to state 893
    empty                          shift and go to state 895

state 835

    (186) constructorBody -> BLPAREN . explicitConstructorInvocation expt_18 BRPAREN
    (187) constructorBody -> BLPAREN . explicitConstructorInvocation empty BRPAREN
    (188) constructorBody -> BLPAREN . empty expt_18 BRPAREN
    (189) constructorBody -> BLPAREN . empty empty BRPAREN
    (190) explicitConstructorInvocation -> . nonWildcardTypeArguments expr_9 arguments SEMI
    (191) explicitConstructorInvocation -> . empty expr_9 arguments SEMI
    (192) explicitConstructorInvocation -> . primary DOT nonWildcardTypeArguments SUPER arguments SEMI
    (193) explicitConstructorInvocation -> . primary DOT empty SUPER arguments SEMI
    (528) empty -> .
    (387) nonWildcardTypeArguments -> . LESS typeList MORE
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for THIS resolved as shift
  ! shift/reduce conflict for SUPER resolved as shift
  ! shift/reduce conflict for NEW resolved as shift
  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for CharacterLiteral resolved as shift
  ! shift/reduce conflict for StringLiteral resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for HEX_NUMBER resolved as shift
  ! shift/reduce conflict for LONG_NUMBER resolved as shift
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    ASSERT          reduce using rule 528 (empty -> .)
    IF              reduce using rule 528 (empty -> .)
    FOR             reduce using rule 528 (empty -> .)
    WHILE           reduce using rule 528 (empty -> .)
    DO              reduce using rule 528 (empty -> .)
    TRY             reduce using rule 528 (empty -> .)
    SWITCH          reduce using rule 528 (empty -> .)
    SYNCHRONIZED    reduce using rule 528 (empty -> .)
    RETURN          reduce using rule 528 (empty -> .)
    THROW           reduce using rule 528 (empty -> .)
    BREAK           reduce using rule 528 (empty -> .)
    CONTINUE        reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)
    BLPAREN         reduce using rule 528 (empty -> .)
    PUBLIC          reduce using rule 528 (empty -> .)
    PROTECTED       reduce using rule 528 (empty -> .)
    PRIVATE         reduce using rule 528 (empty -> .)
    ABSTRACT        reduce using rule 528 (empty -> .)
    STATIC          reduce using rule 528 (empty -> .)
    FINAL           reduce using rule 528 (empty -> .)
    STRICTFP        reduce using rule 528 (empty -> .)
    AT              reduce using rule 528 (empty -> .)
    PLUS            reduce using rule 528 (empty -> .)
    DASH            reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)
    TILDE           reduce using rule 528 (empty -> .)
    EXCLAMATION     reduce using rule 528 (empty -> .)
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    LESS            shift and go to state 199
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    LPAREN          shift and go to state 741
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! THIS            [ reduce using rule 528 (empty -> .) ]
  ! SUPER           [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! LPAREN          [ reduce using rule 528 (empty -> .) ]
  ! NEW             [ reduce using rule 528 (empty -> .) ]
  ! VOID            [ reduce using rule 528 (empty -> .) ]
  ! CharacterLiteral [ reduce using rule 528 (empty -> .) ]
  ! StringLiteral   [ reduce using rule 528 (empty -> .) ]
  ! NULL            [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]
  ! NUMBER          [ reduce using rule 528 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 528 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 528 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 528 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 528 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 528 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 528 (empty -> .) ]
  ! TRUE            [ reduce using rule 528 (empty -> .) ]
  ! FALSE           [ reduce using rule 528 (empty -> .) ]

    parExpression                  shift and go to state 129
    explicitConstructorInvocation  shift and go to state 899
    primary                        shift and go to state 896
    primitiveType                  shift and go to state 117
    booleanLiteral                 shift and go to state 81
    nonWildcardTypeArguments       shift and go to state 897
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 898

state 836

    (120) constructorDeclaratorRest -> formalParameters empty constructorBody .

    BRPAREN         reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    SEMI            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    STATIC          reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    PUBLIC          reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    PROTECTED       reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    PRIVATE         reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    ABSTRACT        reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    FINAL           reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    NATIVE          reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    SYNCHRONIZED    reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    TRANSIENT       reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    VOLATILE        reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    STRICTFP        reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    AT              reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    BLPAREN         reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    VOID            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    Identifier      reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    LESS            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    INTERFACE       reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    CLASS           reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    ENUM            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    BOOLEAN         reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    CHAR            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    BYTE            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    SHORT           reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    INT             reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    LONG            reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    FLOAT           reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)
    DOUBLE          reduce using rule 120 (constructorDeclaratorRest -> formalParameters empty constructorBody .)


state 837

    (181) formalParameterDecls -> variableModifiers type . formalParameterDeclsRest
    (182) formalParameterDeclsRest -> . variableDeclaratorId COMMA formalParameterDecls
    (183) formalParameterDeclsRest -> . variableDeclaratorId empty
    (184) formalParameterDeclsRest -> . OP_ARRAY variableDeclaratorId
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    OP_ARRAY        shift and go to state 901
    Identifier      shift and go to state 780

    formalParameterDeclsRest       shift and go to state 900
    variableDeclaratorId           shift and go to state 902

state 838

    (179) formalParameters -> LPAREN formalParameterDecls RPAREN .

    FLPAREN         reduce using rule 179 (formalParameters -> LPAREN formalParameterDecls RPAREN .)
    THROWS          reduce using rule 179 (formalParameters -> LPAREN formalParameterDecls RPAREN .)
    SEMI            reduce using rule 179 (formalParameters -> LPAREN formalParameterDecls RPAREN .)
    BLPAREN         reduce using rule 179 (formalParameters -> LPAREN formalParameterDecls RPAREN .)


state 839

    (180) formalParameters -> LPAREN empty RPAREN .

    FLPAREN         reduce using rule 180 (formalParameters -> LPAREN empty RPAREN .)
    THROWS          reduce using rule 180 (formalParameters -> LPAREN empty RPAREN .)
    SEMI            reduce using rule 180 (formalParameters -> LPAREN empty RPAREN .)
    BLPAREN         reduce using rule 180 (formalParameters -> LPAREN empty RPAREN .)


state 840

    (237) defaultValue -> DEFAULT . elementValue
    (212) elementValue -> . conditionalExpression
    (213) elementValue -> . annotation
    (214) elementValue -> . elementValueArrayInitializer
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (215) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 COMMA BRPAREN
    (216) elementValueArrayInitializer -> . BLPAREN elementValue expt_21 empty BRPAREN
    (217) elementValueArrayInitializer -> . BLPAREN empty COMMA BRPAREN
    (218) elementValueArrayInitializer -> . BLPAREN empty empty BRPAREN
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    AT              shift and go to state 5
    BLPAREN         shift and go to state 99
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    annotation                     shift and go to state 132
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 111
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    elementValueArrayInitializer   shift and go to state 119
    andExpression                  shift and go to state 98
    elementValue                   shift and go to state 903

state 841

    (234) annotationMethodRest -> Identifier LPAREN RPAREN defaultValue .

    SEMI            reduce using rule 234 (annotationMethodRest -> Identifier LPAREN RPAREN defaultValue .)


state 842

    (235) annotationMethodRest -> Identifier LPAREN RPAREN empty .

    SEMI            reduce using rule 235 (annotationMethodRest -> Identifier LPAREN RPAREN empty .)


state 843

    (464) expt_12 -> expt_12 COMMA variableDeclarator .

    COMMA           reduce using rule 464 (expt_12 -> expt_12 COMMA variableDeclarator .)
    SEMI            reduce using rule 464 (expt_12 -> expt_12 COMMA variableDeclarator .)


state 844

    (118) voidInterfaceMethodDeclaratorRest -> formalParameters empty . SEMI

    SEMI            shift and go to state 904


state 845

    (117) voidInterfaceMethodDeclaratorRest -> formalParameters THROWS . qualifiedNameList SEMI
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 905
    qualifiedName                  shift and go to state 834

state 846

    (116) interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    AT              reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    VOID            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    LESS            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    INT             reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    LONG            reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 116 (interfaceGenericMethodDecl -> typeParameters expr_7 Identifier interfaceMethodDeclaratorRest .)


state 847

    (112) interfaceMethodDeclaratorRest -> formalParameters expt_11 . THROWS qualifiedNameList SEMI
    (113) interfaceMethodDeclaratorRest -> formalParameters expt_11 . empty SEMI
    (470) expt_11 -> expt_11 . FLPAREN FRPAREN
    (528) empty -> .

    THROWS          shift and go to state 906
    FLPAREN         shift and go to state 313
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 907

state 848

    (114) interfaceMethodDeclaratorRest -> formalParameters empty . THROWS qualifiedNameList SEMI
    (115) interfaceMethodDeclaratorRest -> formalParameters empty . empty SEMI
    (528) empty -> .

    THROWS          shift and go to state 908
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 909

state 849

    (104) interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .

    BRPAREN         reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SEMI            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PUBLIC          reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PROTECTED       reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PRIVATE         reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    STATIC          reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    ABSTRACT        reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    FINAL           reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    NATIVE          reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SYNCHRONIZED    reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    TRANSIENT       reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    VOLATILE        reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    STRICTFP        reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    AT              reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    VOID            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    LESS            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    INTERFACE       reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    CLASS           reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    ENUM            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    Identifier      reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    BOOLEAN         reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    CHAR            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    BYTE            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SHORT           reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    INT             reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    LONG            reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    FLOAT           reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    DOUBLE          reduce using rule 104 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)


state 850

    (465) expt_13 -> COMMA . constantDeclarator
    (121) constantDeclarator -> . Identifier constantDeclaratorRest

    Identifier      shift and go to state 911

    constantDeclarator             shift and go to state 910

state 851

    (126) constantDeclaratorsRest -> constantDeclaratorRest expt_13 .
    (466) expt_13 -> expt_13 . COMMA constantDeclarator

    SEMI            reduce using rule 126 (constantDeclaratorsRest -> constantDeclaratorRest expt_13 .)
    COMMA           shift and go to state 912


state 852

    (127) constantDeclaratorsRest -> constantDeclaratorRest empty .

    SEMI            reduce using rule 127 (constantDeclaratorsRest -> constantDeclaratorRest empty .)


state 853

    (128) constantDeclaratorRest -> expt_11 EQUALS . variableInitializer
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 913
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 854

    (129) constantDeclaratorRest -> empty EQUALS . variableInitializer
    (132) variableInitializer -> . arrayInitializer
    (133) variableInitializer -> . expression
    (134) arrayInitializer -> . BLPAREN empty BRPAREN
    (135) arrayInitializer -> . BLPAREN variableInitializer expt_14 COMMA BRPAREN
    (136) arrayInitializer -> . BLPAREN variableInitializer expt_14 empty BRPAREN
    (137) arrayInitializer -> . BLPAREN variableInitializer empty COMMA BRPAREN
    (138) arrayInitializer -> . BLPAREN variableInitializer empty empty BRPAREN
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 570
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    arrayInitializer               shift and go to state 647
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableInitializer            shift and go to state 914
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 646

state 855

    (460) expt_14 -> expt_14 COMMA variableInitializer .

    COMMA           reduce using rule 460 (expt_14 -> expt_14 COMMA variableInitializer .)
    BRPAREN         reduce using rule 460 (expt_14 -> expt_14 COMMA variableInitializer .)


state 856

    (135) arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .

    COMMA           reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    BRPAREN         reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    SEMI            reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    DOT             reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    FLPAREN         reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    OP_INC          reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)
    OP_DEC          reduce using rule 135 (arrayInitializer -> BLPAREN variableInitializer expt_14 COMMA BRPAREN .)


state 857

    (136) arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .

    COMMA           reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    BRPAREN         reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    SEMI            reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    DOT             reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    FLPAREN         reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    OP_INC          reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)
    OP_DEC          reduce using rule 136 (arrayInitializer -> BLPAREN variableInitializer expt_14 empty BRPAREN .)


state 858

    (137) arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .

    COMMA           reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    BRPAREN         reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    SEMI            reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    DOT             reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    FLPAREN         reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    OP_INC          reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)
    OP_DEC          reduce using rule 137 (arrayInitializer -> BLPAREN variableInitializer empty COMMA BRPAREN .)


state 859

    (138) arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .

    COMMA           reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    BRPAREN         reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    SEMI            reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    DOT             reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    FLPAREN         reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    OP_INC          reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)
    OP_DEC          reduce using rule 138 (arrayInitializer -> BLPAREN variableInitializer empty empty BRPAREN .)


state 860

    (280) forControl -> forInit SEMI . expression SEMI forUpdate
    (281) forControl -> forInit SEMI . expression SEMI empty
    (282) forControl -> forInit SEMI . empty SEMI forUpdate
    (283) forControl -> forInit SEMI . empty SEMI empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (528) empty -> .
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    SEMI            reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    unaryExpression                shift and go to state 128
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 915
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 916

state 861

    (252) statement -> FOR LPAREN forControl RPAREN . statement
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 917
    FloatingPointLiteral           shift and go to state 112
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 862

    (284) forControl -> empty SEMI . expression SEMI forUpdate
    (285) forControl -> empty SEMI . expression SEMI empty
    (286) forControl -> empty SEMI . empty SEMI forUpdate
    (287) forControl -> empty SEMI . empty SEMI empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (528) empty -> .
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    SEMI            reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 918
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 919

state 863

    (290) enhancedForControl -> variableModifiers type . Identifier COLON expression
    (244) localVariableDeclaration -> variableModifiers type . variableDeclarators
    (122) variableDeclarators -> . variableDeclarator expt_12
    (123) variableDeclarators -> . variableDeclarator empty
    (124) variableDeclarator -> . variableDeclaratorId EQUALS variableInitializer
    (125) variableDeclarator -> . variableDeclaratorId empty
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 920

    variableDeclarators            shift and go to state 823
    variableDeclaratorId           shift and go to state 624
    variableDeclarator             shift and go to state 627

state 864

    (516) expr_12 -> catches FINALLY . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 574

    block                          shift and go to state 921

state 865

    (268) catches -> catchClause expt_24 .
    (446) expt_24 -> expt_24 . catchClause
    (270) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         reduce using rule 268 (catches -> catchClause expt_24 .)
    BRPAREN         reduce using rule 268 (catches -> catchClause expt_24 .)
    ASSERT          reduce using rule 268 (catches -> catchClause expt_24 .)
    IF              reduce using rule 268 (catches -> catchClause expt_24 .)
    FOR             reduce using rule 268 (catches -> catchClause expt_24 .)
    WHILE           reduce using rule 268 (catches -> catchClause expt_24 .)
    DO              reduce using rule 268 (catches -> catchClause expt_24 .)
    TRY             reduce using rule 268 (catches -> catchClause expt_24 .)
    SWITCH          reduce using rule 268 (catches -> catchClause expt_24 .)
    SYNCHRONIZED    reduce using rule 268 (catches -> catchClause expt_24 .)
    RETURN          reduce using rule 268 (catches -> catchClause expt_24 .)
    THROW           reduce using rule 268 (catches -> catchClause expt_24 .)
    BREAK           reduce using rule 268 (catches -> catchClause expt_24 .)
    CONTINUE        reduce using rule 268 (catches -> catchClause expt_24 .)
    SEMI            reduce using rule 268 (catches -> catchClause expt_24 .)
    Identifier      reduce using rule 268 (catches -> catchClause expt_24 .)
    BLPAREN         reduce using rule 268 (catches -> catchClause expt_24 .)
    PUBLIC          reduce using rule 268 (catches -> catchClause expt_24 .)
    PROTECTED       reduce using rule 268 (catches -> catchClause expt_24 .)
    PRIVATE         reduce using rule 268 (catches -> catchClause expt_24 .)
    ABSTRACT        reduce using rule 268 (catches -> catchClause expt_24 .)
    STATIC          reduce using rule 268 (catches -> catchClause expt_24 .)
    FINAL           reduce using rule 268 (catches -> catchClause expt_24 .)
    STRICTFP        reduce using rule 268 (catches -> catchClause expt_24 .)
    AT              reduce using rule 268 (catches -> catchClause expt_24 .)
    PLUS            reduce using rule 268 (catches -> catchClause expt_24 .)
    DASH            reduce using rule 268 (catches -> catchClause expt_24 .)
    OP_INC          reduce using rule 268 (catches -> catchClause expt_24 .)
    OP_DEC          reduce using rule 268 (catches -> catchClause expt_24 .)
    TILDE           reduce using rule 268 (catches -> catchClause expt_24 .)
    EXCLAMATION     reduce using rule 268 (catches -> catchClause expt_24 .)
    LPAREN          reduce using rule 268 (catches -> catchClause expt_24 .)
    THIS            reduce using rule 268 (catches -> catchClause expt_24 .)
    SUPER           reduce using rule 268 (catches -> catchClause expt_24 .)
    NEW             reduce using rule 268 (catches -> catchClause expt_24 .)
    VOID            reduce using rule 268 (catches -> catchClause expt_24 .)
    CharacterLiteral reduce using rule 268 (catches -> catchClause expt_24 .)
    StringLiteral   reduce using rule 268 (catches -> catchClause expt_24 .)
    NULL            reduce using rule 268 (catches -> catchClause expt_24 .)
    BOOLEAN         reduce using rule 268 (catches -> catchClause expt_24 .)
    CHAR            reduce using rule 268 (catches -> catchClause expt_24 .)
    BYTE            reduce using rule 268 (catches -> catchClause expt_24 .)
    SHORT           reduce using rule 268 (catches -> catchClause expt_24 .)
    INT             reduce using rule 268 (catches -> catchClause expt_24 .)
    LONG            reduce using rule 268 (catches -> catchClause expt_24 .)
    FLOAT           reduce using rule 268 (catches -> catchClause expt_24 .)
    DOUBLE          reduce using rule 268 (catches -> catchClause expt_24 .)
    NUMBER          reduce using rule 268 (catches -> catchClause expt_24 .)
    HEX_NUMBER      reduce using rule 268 (catches -> catchClause expt_24 .)
    LONG_NUMBER     reduce using rule 268 (catches -> catchClause expt_24 .)
    LONG_HEX_NUMBER reduce using rule 268 (catches -> catchClause expt_24 .)
    NON_INTEGER_1   reduce using rule 268 (catches -> catchClause expt_24 .)
    NON_INTEGER_2   reduce using rule 268 (catches -> catchClause expt_24 .)
    NON_INTEGER_3   reduce using rule 268 (catches -> catchClause expt_24 .)
    TRUE            reduce using rule 268 (catches -> catchClause expt_24 .)
    FALSE           reduce using rule 268 (catches -> catchClause expt_24 .)
    CLASS           reduce using rule 268 (catches -> catchClause expt_24 .)
    ENUM            reduce using rule 268 (catches -> catchClause expt_24 .)
    INTERFACE       reduce using rule 268 (catches -> catchClause expt_24 .)
    ELSE            reduce using rule 268 (catches -> catchClause expt_24 .)
    CASE            reduce using rule 268 (catches -> catchClause expt_24 .)
    DEFAULT         reduce using rule 268 (catches -> catchClause expt_24 .)
    CATCH           shift and go to state 813

    catchClause                    shift and go to state 922

state 866

    (445) expt_24 -> catchClause .

    CATCH           reduce using rule 445 (expt_24 -> catchClause .)
    FINALLY         reduce using rule 445 (expt_24 -> catchClause .)
    BRPAREN         reduce using rule 445 (expt_24 -> catchClause .)
    ASSERT          reduce using rule 445 (expt_24 -> catchClause .)
    IF              reduce using rule 445 (expt_24 -> catchClause .)
    FOR             reduce using rule 445 (expt_24 -> catchClause .)
    WHILE           reduce using rule 445 (expt_24 -> catchClause .)
    DO              reduce using rule 445 (expt_24 -> catchClause .)
    TRY             reduce using rule 445 (expt_24 -> catchClause .)
    SWITCH          reduce using rule 445 (expt_24 -> catchClause .)
    SYNCHRONIZED    reduce using rule 445 (expt_24 -> catchClause .)
    RETURN          reduce using rule 445 (expt_24 -> catchClause .)
    THROW           reduce using rule 445 (expt_24 -> catchClause .)
    BREAK           reduce using rule 445 (expt_24 -> catchClause .)
    CONTINUE        reduce using rule 445 (expt_24 -> catchClause .)
    SEMI            reduce using rule 445 (expt_24 -> catchClause .)
    Identifier      reduce using rule 445 (expt_24 -> catchClause .)
    BLPAREN         reduce using rule 445 (expt_24 -> catchClause .)
    PUBLIC          reduce using rule 445 (expt_24 -> catchClause .)
    PROTECTED       reduce using rule 445 (expt_24 -> catchClause .)
    PRIVATE         reduce using rule 445 (expt_24 -> catchClause .)
    ABSTRACT        reduce using rule 445 (expt_24 -> catchClause .)
    STATIC          reduce using rule 445 (expt_24 -> catchClause .)
    FINAL           reduce using rule 445 (expt_24 -> catchClause .)
    STRICTFP        reduce using rule 445 (expt_24 -> catchClause .)
    AT              reduce using rule 445 (expt_24 -> catchClause .)
    PLUS            reduce using rule 445 (expt_24 -> catchClause .)
    DASH            reduce using rule 445 (expt_24 -> catchClause .)
    OP_INC          reduce using rule 445 (expt_24 -> catchClause .)
    OP_DEC          reduce using rule 445 (expt_24 -> catchClause .)
    TILDE           reduce using rule 445 (expt_24 -> catchClause .)
    EXCLAMATION     reduce using rule 445 (expt_24 -> catchClause .)
    LPAREN          reduce using rule 445 (expt_24 -> catchClause .)
    THIS            reduce using rule 445 (expt_24 -> catchClause .)
    SUPER           reduce using rule 445 (expt_24 -> catchClause .)
    NEW             reduce using rule 445 (expt_24 -> catchClause .)
    VOID            reduce using rule 445 (expt_24 -> catchClause .)
    CharacterLiteral reduce using rule 445 (expt_24 -> catchClause .)
    StringLiteral   reduce using rule 445 (expt_24 -> catchClause .)
    NULL            reduce using rule 445 (expt_24 -> catchClause .)
    BOOLEAN         reduce using rule 445 (expt_24 -> catchClause .)
    CHAR            reduce using rule 445 (expt_24 -> catchClause .)
    BYTE            reduce using rule 445 (expt_24 -> catchClause .)
    SHORT           reduce using rule 445 (expt_24 -> catchClause .)
    INT             reduce using rule 445 (expt_24 -> catchClause .)
    LONG            reduce using rule 445 (expt_24 -> catchClause .)
    FLOAT           reduce using rule 445 (expt_24 -> catchClause .)
    DOUBLE          reduce using rule 445 (expt_24 -> catchClause .)
    NUMBER          reduce using rule 445 (expt_24 -> catchClause .)
    HEX_NUMBER      reduce using rule 445 (expt_24 -> catchClause .)
    LONG_NUMBER     reduce using rule 445 (expt_24 -> catchClause .)
    LONG_HEX_NUMBER reduce using rule 445 (expt_24 -> catchClause .)
    NON_INTEGER_1   reduce using rule 445 (expt_24 -> catchClause .)
    NON_INTEGER_2   reduce using rule 445 (expt_24 -> catchClause .)
    NON_INTEGER_3   reduce using rule 445 (expt_24 -> catchClause .)
    TRUE            reduce using rule 445 (expt_24 -> catchClause .)
    FALSE           reduce using rule 445 (expt_24 -> catchClause .)
    CLASS           reduce using rule 445 (expt_24 -> catchClause .)
    ENUM            reduce using rule 445 (expt_24 -> catchClause .)
    INTERFACE       reduce using rule 445 (expt_24 -> catchClause .)
    ELSE            reduce using rule 445 (expt_24 -> catchClause .)
    CASE            reduce using rule 445 (expt_24 -> catchClause .)
    DEFAULT         reduce using rule 445 (expt_24 -> catchClause .)


state 867

    (269) catches -> catchClause empty .

    FINALLY         reduce using rule 269 (catches -> catchClause empty .)
    BRPAREN         reduce using rule 269 (catches -> catchClause empty .)
    ASSERT          reduce using rule 269 (catches -> catchClause empty .)
    IF              reduce using rule 269 (catches -> catchClause empty .)
    FOR             reduce using rule 269 (catches -> catchClause empty .)
    WHILE           reduce using rule 269 (catches -> catchClause empty .)
    DO              reduce using rule 269 (catches -> catchClause empty .)
    TRY             reduce using rule 269 (catches -> catchClause empty .)
    SWITCH          reduce using rule 269 (catches -> catchClause empty .)
    SYNCHRONIZED    reduce using rule 269 (catches -> catchClause empty .)
    RETURN          reduce using rule 269 (catches -> catchClause empty .)
    THROW           reduce using rule 269 (catches -> catchClause empty .)
    BREAK           reduce using rule 269 (catches -> catchClause empty .)
    CONTINUE        reduce using rule 269 (catches -> catchClause empty .)
    SEMI            reduce using rule 269 (catches -> catchClause empty .)
    Identifier      reduce using rule 269 (catches -> catchClause empty .)
    BLPAREN         reduce using rule 269 (catches -> catchClause empty .)
    PUBLIC          reduce using rule 269 (catches -> catchClause empty .)
    PROTECTED       reduce using rule 269 (catches -> catchClause empty .)
    PRIVATE         reduce using rule 269 (catches -> catchClause empty .)
    ABSTRACT        reduce using rule 269 (catches -> catchClause empty .)
    STATIC          reduce using rule 269 (catches -> catchClause empty .)
    FINAL           reduce using rule 269 (catches -> catchClause empty .)
    STRICTFP        reduce using rule 269 (catches -> catchClause empty .)
    AT              reduce using rule 269 (catches -> catchClause empty .)
    PLUS            reduce using rule 269 (catches -> catchClause empty .)
    DASH            reduce using rule 269 (catches -> catchClause empty .)
    OP_INC          reduce using rule 269 (catches -> catchClause empty .)
    OP_DEC          reduce using rule 269 (catches -> catchClause empty .)
    TILDE           reduce using rule 269 (catches -> catchClause empty .)
    EXCLAMATION     reduce using rule 269 (catches -> catchClause empty .)
    LPAREN          reduce using rule 269 (catches -> catchClause empty .)
    THIS            reduce using rule 269 (catches -> catchClause empty .)
    SUPER           reduce using rule 269 (catches -> catchClause empty .)
    NEW             reduce using rule 269 (catches -> catchClause empty .)
    VOID            reduce using rule 269 (catches -> catchClause empty .)
    CharacterLiteral reduce using rule 269 (catches -> catchClause empty .)
    StringLiteral   reduce using rule 269 (catches -> catchClause empty .)
    NULL            reduce using rule 269 (catches -> catchClause empty .)
    BOOLEAN         reduce using rule 269 (catches -> catchClause empty .)
    CHAR            reduce using rule 269 (catches -> catchClause empty .)
    BYTE            reduce using rule 269 (catches -> catchClause empty .)
    SHORT           reduce using rule 269 (catches -> catchClause empty .)
    INT             reduce using rule 269 (catches -> catchClause empty .)
    LONG            reduce using rule 269 (catches -> catchClause empty .)
    FLOAT           reduce using rule 269 (catches -> catchClause empty .)
    DOUBLE          reduce using rule 269 (catches -> catchClause empty .)
    NUMBER          reduce using rule 269 (catches -> catchClause empty .)
    HEX_NUMBER      reduce using rule 269 (catches -> catchClause empty .)
    LONG_NUMBER     reduce using rule 269 (catches -> catchClause empty .)
    LONG_HEX_NUMBER reduce using rule 269 (catches -> catchClause empty .)
    NON_INTEGER_1   reduce using rule 269 (catches -> catchClause empty .)
    NON_INTEGER_2   reduce using rule 269 (catches -> catchClause empty .)
    NON_INTEGER_3   reduce using rule 269 (catches -> catchClause empty .)
    TRUE            reduce using rule 269 (catches -> catchClause empty .)
    FALSE           reduce using rule 269 (catches -> catchClause empty .)
    CLASS           reduce using rule 269 (catches -> catchClause empty .)
    ENUM            reduce using rule 269 (catches -> catchClause empty .)
    INTERFACE       reduce using rule 269 (catches -> catchClause empty .)
    ELSE            reduce using rule 269 (catches -> catchClause empty .)
    CASE            reduce using rule 269 (catches -> catchClause empty .)
    DEFAULT         reduce using rule 269 (catches -> catchClause empty .)


state 868

    (518) expr_12 -> FINALLY block .

    BRPAREN         reduce using rule 518 (expr_12 -> FINALLY block .)
    ASSERT          reduce using rule 518 (expr_12 -> FINALLY block .)
    IF              reduce using rule 518 (expr_12 -> FINALLY block .)
    FOR             reduce using rule 518 (expr_12 -> FINALLY block .)
    WHILE           reduce using rule 518 (expr_12 -> FINALLY block .)
    DO              reduce using rule 518 (expr_12 -> FINALLY block .)
    TRY             reduce using rule 518 (expr_12 -> FINALLY block .)
    SWITCH          reduce using rule 518 (expr_12 -> FINALLY block .)
    SYNCHRONIZED    reduce using rule 518 (expr_12 -> FINALLY block .)
    RETURN          reduce using rule 518 (expr_12 -> FINALLY block .)
    THROW           reduce using rule 518 (expr_12 -> FINALLY block .)
    BREAK           reduce using rule 518 (expr_12 -> FINALLY block .)
    CONTINUE        reduce using rule 518 (expr_12 -> FINALLY block .)
    SEMI            reduce using rule 518 (expr_12 -> FINALLY block .)
    Identifier      reduce using rule 518 (expr_12 -> FINALLY block .)
    BLPAREN         reduce using rule 518 (expr_12 -> FINALLY block .)
    PUBLIC          reduce using rule 518 (expr_12 -> FINALLY block .)
    PROTECTED       reduce using rule 518 (expr_12 -> FINALLY block .)
    PRIVATE         reduce using rule 518 (expr_12 -> FINALLY block .)
    ABSTRACT        reduce using rule 518 (expr_12 -> FINALLY block .)
    STATIC          reduce using rule 518 (expr_12 -> FINALLY block .)
    FINAL           reduce using rule 518 (expr_12 -> FINALLY block .)
    STRICTFP        reduce using rule 518 (expr_12 -> FINALLY block .)
    AT              reduce using rule 518 (expr_12 -> FINALLY block .)
    PLUS            reduce using rule 518 (expr_12 -> FINALLY block .)
    DASH            reduce using rule 518 (expr_12 -> FINALLY block .)
    OP_INC          reduce using rule 518 (expr_12 -> FINALLY block .)
    OP_DEC          reduce using rule 518 (expr_12 -> FINALLY block .)
    TILDE           reduce using rule 518 (expr_12 -> FINALLY block .)
    EXCLAMATION     reduce using rule 518 (expr_12 -> FINALLY block .)
    LPAREN          reduce using rule 518 (expr_12 -> FINALLY block .)
    THIS            reduce using rule 518 (expr_12 -> FINALLY block .)
    SUPER           reduce using rule 518 (expr_12 -> FINALLY block .)
    NEW             reduce using rule 518 (expr_12 -> FINALLY block .)
    VOID            reduce using rule 518 (expr_12 -> FINALLY block .)
    CharacterLiteral reduce using rule 518 (expr_12 -> FINALLY block .)
    StringLiteral   reduce using rule 518 (expr_12 -> FINALLY block .)
    NULL            reduce using rule 518 (expr_12 -> FINALLY block .)
    BOOLEAN         reduce using rule 518 (expr_12 -> FINALLY block .)
    CHAR            reduce using rule 518 (expr_12 -> FINALLY block .)
    BYTE            reduce using rule 518 (expr_12 -> FINALLY block .)
    SHORT           reduce using rule 518 (expr_12 -> FINALLY block .)
    INT             reduce using rule 518 (expr_12 -> FINALLY block .)
    LONG            reduce using rule 518 (expr_12 -> FINALLY block .)
    FLOAT           reduce using rule 518 (expr_12 -> FINALLY block .)
    DOUBLE          reduce using rule 518 (expr_12 -> FINALLY block .)
    NUMBER          reduce using rule 518 (expr_12 -> FINALLY block .)
    HEX_NUMBER      reduce using rule 518 (expr_12 -> FINALLY block .)
    LONG_NUMBER     reduce using rule 518 (expr_12 -> FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 518 (expr_12 -> FINALLY block .)
    NON_INTEGER_1   reduce using rule 518 (expr_12 -> FINALLY block .)
    NON_INTEGER_2   reduce using rule 518 (expr_12 -> FINALLY block .)
    NON_INTEGER_3   reduce using rule 518 (expr_12 -> FINALLY block .)
    TRUE            reduce using rule 518 (expr_12 -> FINALLY block .)
    FALSE           reduce using rule 518 (expr_12 -> FINALLY block .)
    CLASS           reduce using rule 518 (expr_12 -> FINALLY block .)
    ENUM            reduce using rule 518 (expr_12 -> FINALLY block .)
    INTERFACE       reduce using rule 518 (expr_12 -> FINALLY block .)
    ELSE            reduce using rule 518 (expr_12 -> FINALLY block .)
    CASE            reduce using rule 518 (expr_12 -> FINALLY block .)
    DEFAULT         reduce using rule 518 (expr_12 -> FINALLY block .)


state 869

    (270) catchClause -> CATCH LPAREN . formalParameter RPAREN block
    (271) formalParameter -> . variableModifiers type variableDeclaratorId
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (528) empty -> .
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    FINAL           shift and go to state 745
    AT              shift and go to state 5

    formalParameter                shift and go to state 923
    variableModifiers              shift and go to state 924
    expt_23                        shift and go to state 660
    variableModifier               shift and go to state 654
    empty                          shift and go to state 925
    annotation                     shift and go to state 743

state 870

    (256) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups . BRPAREN

    BRPAREN         shift and go to state 926


state 871

    (276) switchLabel -> CASE . constantExpression COLON
    (277) switchLabel -> CASE . enumConstantName COLON
    (296) constantExpression -> . expression
    (152) enumConstantName -> . Identifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    Identifier      shift and go to state 928
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    enumConstantName               shift and go to state 927
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    additiveExpression             shift and go to state 93
    instanceOfExpression           shift and go to state 85
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    constantExpression             shift and go to state 929
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    andExpression                  shift and go to state 98
    expression                     shift and go to state 930

state 872

    (519) expr_13 -> switchLabel .

    CASE            reduce using rule 519 (expr_13 -> switchLabel .)
    DEFAULT         reduce using rule 519 (expr_13 -> switchLabel .)
    ASSERT          reduce using rule 519 (expr_13 -> switchLabel .)
    IF              reduce using rule 519 (expr_13 -> switchLabel .)
    FOR             reduce using rule 519 (expr_13 -> switchLabel .)
    WHILE           reduce using rule 519 (expr_13 -> switchLabel .)
    DO              reduce using rule 519 (expr_13 -> switchLabel .)
    TRY             reduce using rule 519 (expr_13 -> switchLabel .)
    SWITCH          reduce using rule 519 (expr_13 -> switchLabel .)
    SYNCHRONIZED    reduce using rule 519 (expr_13 -> switchLabel .)
    RETURN          reduce using rule 519 (expr_13 -> switchLabel .)
    THROW           reduce using rule 519 (expr_13 -> switchLabel .)
    BREAK           reduce using rule 519 (expr_13 -> switchLabel .)
    CONTINUE        reduce using rule 519 (expr_13 -> switchLabel .)
    SEMI            reduce using rule 519 (expr_13 -> switchLabel .)
    Identifier      reduce using rule 519 (expr_13 -> switchLabel .)
    BLPAREN         reduce using rule 519 (expr_13 -> switchLabel .)
    PUBLIC          reduce using rule 519 (expr_13 -> switchLabel .)
    PROTECTED       reduce using rule 519 (expr_13 -> switchLabel .)
    PRIVATE         reduce using rule 519 (expr_13 -> switchLabel .)
    ABSTRACT        reduce using rule 519 (expr_13 -> switchLabel .)
    STATIC          reduce using rule 519 (expr_13 -> switchLabel .)
    FINAL           reduce using rule 519 (expr_13 -> switchLabel .)
    STRICTFP        reduce using rule 519 (expr_13 -> switchLabel .)
    AT              reduce using rule 519 (expr_13 -> switchLabel .)
    PLUS            reduce using rule 519 (expr_13 -> switchLabel .)
    DASH            reduce using rule 519 (expr_13 -> switchLabel .)
    OP_INC          reduce using rule 519 (expr_13 -> switchLabel .)
    OP_DEC          reduce using rule 519 (expr_13 -> switchLabel .)
    TILDE           reduce using rule 519 (expr_13 -> switchLabel .)
    EXCLAMATION     reduce using rule 519 (expr_13 -> switchLabel .)
    LPAREN          reduce using rule 519 (expr_13 -> switchLabel .)
    THIS            reduce using rule 519 (expr_13 -> switchLabel .)
    SUPER           reduce using rule 519 (expr_13 -> switchLabel .)
    NEW             reduce using rule 519 (expr_13 -> switchLabel .)
    VOID            reduce using rule 519 (expr_13 -> switchLabel .)
    CharacterLiteral reduce using rule 519 (expr_13 -> switchLabel .)
    StringLiteral   reduce using rule 519 (expr_13 -> switchLabel .)
    NULL            reduce using rule 519 (expr_13 -> switchLabel .)
    BOOLEAN         reduce using rule 519 (expr_13 -> switchLabel .)
    CHAR            reduce using rule 519 (expr_13 -> switchLabel .)
    BYTE            reduce using rule 519 (expr_13 -> switchLabel .)
    SHORT           reduce using rule 519 (expr_13 -> switchLabel .)
    INT             reduce using rule 519 (expr_13 -> switchLabel .)
    LONG            reduce using rule 519 (expr_13 -> switchLabel .)
    FLOAT           reduce using rule 519 (expr_13 -> switchLabel .)
    DOUBLE          reduce using rule 519 (expr_13 -> switchLabel .)
    NUMBER          reduce using rule 519 (expr_13 -> switchLabel .)
    HEX_NUMBER      reduce using rule 519 (expr_13 -> switchLabel .)
    LONG_NUMBER     reduce using rule 519 (expr_13 -> switchLabel .)
    LONG_HEX_NUMBER reduce using rule 519 (expr_13 -> switchLabel .)
    NON_INTEGER_1   reduce using rule 519 (expr_13 -> switchLabel .)
    NON_INTEGER_2   reduce using rule 519 (expr_13 -> switchLabel .)
    NON_INTEGER_3   reduce using rule 519 (expr_13 -> switchLabel .)
    TRUE            reduce using rule 519 (expr_13 -> switchLabel .)
    FALSE           reduce using rule 519 (expr_13 -> switchLabel .)
    CLASS           reduce using rule 519 (expr_13 -> switchLabel .)
    ENUM            reduce using rule 519 (expr_13 -> switchLabel .)
    INTERFACE       reduce using rule 519 (expr_13 -> switchLabel .)
    BRPAREN         reduce using rule 519 (expr_13 -> switchLabel .)


state 873

    (278) switchLabel -> DEFAULT . COLON

    COLON           shift and go to state 931


state 874

    (272) switchBlockStatementGroups -> expt_25 .
    (444) expt_25 -> expt_25 . switchBlockStatementGroup
    (274) switchBlockStatementGroup -> . expr_13 expt_18
    (275) switchBlockStatementGroup -> . expr_13 empty
    (519) expr_13 -> . switchLabel
    (520) expr_13 -> . expr_13 switchLabel
    (276) switchLabel -> . CASE constantExpression COLON
    (277) switchLabel -> . CASE enumConstantName COLON
    (278) switchLabel -> . DEFAULT COLON

    BRPAREN         reduce using rule 272 (switchBlockStatementGroups -> expt_25 .)
    CASE            shift and go to state 871
    DEFAULT         shift and go to state 873

    switchLabel                    shift and go to state 872
    switchBlockStatementGroup      shift and go to state 932
    expr_13                        shift and go to state 876

state 875

    (443) expt_25 -> switchBlockStatementGroup .

    CASE            reduce using rule 443 (expt_25 -> switchBlockStatementGroup .)
    DEFAULT         reduce using rule 443 (expt_25 -> switchBlockStatementGroup .)
    BRPAREN         reduce using rule 443 (expt_25 -> switchBlockStatementGroup .)


state 876

    (274) switchBlockStatementGroup -> expr_13 . expt_18
    (275) switchBlockStatementGroup -> expr_13 . empty
    (520) expr_13 -> expr_13 . switchLabel
    (471) expt_18 -> . blockStatement
    (472) expt_18 -> . expt_18 blockStatement
    (528) empty -> .
    (276) switchLabel -> . CASE constantExpression COLON
    (277) switchLabel -> . CASE enumConstantName COLON
    (278) switchLabel -> . DEFAULT COLON
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    CASE            shift and go to state 871
    DEFAULT         shift and go to state 873
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! CASE            [ reduce using rule 528 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 528 (empty -> .) ]
  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 652
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    castExpression                 shift and go to state 133
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    empty                          shift and go to state 933
    additiveExpression             shift and go to state 93
    instanceOfExpression           shift and go to state 85
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    classOrInterfaceDeclaration    shift and go to state 653
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    switchLabel                    shift and go to state 934
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    expt_18                        shift and go to state 935
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 877

    (273) switchBlockStatementGroups -> empty .

    BRPAREN         reduce using rule 273 (switchBlockStatementGroups -> empty .)


state 878

    (254) statement -> DO statement WHILE parExpression . SEMI

    SEMI            shift and go to state 936


state 879

    (248) statement -> ASSERT expression COLON expression . SEMI

    SEMI            shift and go to state 937


state 880

    (249) statement -> ASSERT expression empty SEMI .

    WHILE           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    ASSERT          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    IF              reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    FOR             reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    DO              reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    TRY             reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    SWITCH          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    SYNCHRONIZED    reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    RETURN          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    THROW           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    BREAK           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    CONTINUE        reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    SEMI            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    Identifier      reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    BLPAREN         reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    PUBLIC          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    PROTECTED       reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    PRIVATE         reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    ABSTRACT        reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    STATIC          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    FINAL           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    STRICTFP        reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    AT              reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    PLUS            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    DASH            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    OP_INC          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    OP_DEC          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    TILDE           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    EXCLAMATION     reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    LPAREN          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    THIS            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    SUPER           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NEW             reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    VOID            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    CharacterLiteral reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    StringLiteral   reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NULL            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    BOOLEAN         reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    CHAR            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    BYTE            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    SHORT           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    INT             reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    LONG            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    FLOAT           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    DOUBLE          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NUMBER          reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    HEX_NUMBER      reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    LONG_NUMBER     reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    LONG_HEX_NUMBER reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NON_INTEGER_1   reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NON_INTEGER_2   reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    NON_INTEGER_3   reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    TRUE            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    FALSE           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    CLASS           reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    ENUM            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    INTERFACE       reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    CASE            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    DEFAULT         reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    BRPAREN         reduce using rule 249 (statement -> ASSERT expression empty SEMI .)
    ELSE            reduce using rule 249 (statement -> ASSERT expression empty SEMI .)


state 881

    (250) statement -> IF parExpression statement ELSE . statement
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 938
    FloatingPointLiteral           shift and go to state 112
    parExpression                  shift and go to state 129
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 882

    (251) statement -> IF parExpression statement empty .

    WHILE           reduce using rule 251 (statement -> IF parExpression statement empty .)
    ASSERT          reduce using rule 251 (statement -> IF parExpression statement empty .)
    IF              reduce using rule 251 (statement -> IF parExpression statement empty .)
    FOR             reduce using rule 251 (statement -> IF parExpression statement empty .)
    DO              reduce using rule 251 (statement -> IF parExpression statement empty .)
    TRY             reduce using rule 251 (statement -> IF parExpression statement empty .)
    SWITCH          reduce using rule 251 (statement -> IF parExpression statement empty .)
    SYNCHRONIZED    reduce using rule 251 (statement -> IF parExpression statement empty .)
    RETURN          reduce using rule 251 (statement -> IF parExpression statement empty .)
    THROW           reduce using rule 251 (statement -> IF parExpression statement empty .)
    BREAK           reduce using rule 251 (statement -> IF parExpression statement empty .)
    CONTINUE        reduce using rule 251 (statement -> IF parExpression statement empty .)
    SEMI            reduce using rule 251 (statement -> IF parExpression statement empty .)
    Identifier      reduce using rule 251 (statement -> IF parExpression statement empty .)
    BLPAREN         reduce using rule 251 (statement -> IF parExpression statement empty .)
    PUBLIC          reduce using rule 251 (statement -> IF parExpression statement empty .)
    PROTECTED       reduce using rule 251 (statement -> IF parExpression statement empty .)
    PRIVATE         reduce using rule 251 (statement -> IF parExpression statement empty .)
    ABSTRACT        reduce using rule 251 (statement -> IF parExpression statement empty .)
    STATIC          reduce using rule 251 (statement -> IF parExpression statement empty .)
    FINAL           reduce using rule 251 (statement -> IF parExpression statement empty .)
    STRICTFP        reduce using rule 251 (statement -> IF parExpression statement empty .)
    AT              reduce using rule 251 (statement -> IF parExpression statement empty .)
    PLUS            reduce using rule 251 (statement -> IF parExpression statement empty .)
    DASH            reduce using rule 251 (statement -> IF parExpression statement empty .)
    OP_INC          reduce using rule 251 (statement -> IF parExpression statement empty .)
    OP_DEC          reduce using rule 251 (statement -> IF parExpression statement empty .)
    TILDE           reduce using rule 251 (statement -> IF parExpression statement empty .)
    EXCLAMATION     reduce using rule 251 (statement -> IF parExpression statement empty .)
    LPAREN          reduce using rule 251 (statement -> IF parExpression statement empty .)
    THIS            reduce using rule 251 (statement -> IF parExpression statement empty .)
    SUPER           reduce using rule 251 (statement -> IF parExpression statement empty .)
    NEW             reduce using rule 251 (statement -> IF parExpression statement empty .)
    VOID            reduce using rule 251 (statement -> IF parExpression statement empty .)
    CharacterLiteral reduce using rule 251 (statement -> IF parExpression statement empty .)
    StringLiteral   reduce using rule 251 (statement -> IF parExpression statement empty .)
    NULL            reduce using rule 251 (statement -> IF parExpression statement empty .)
    BOOLEAN         reduce using rule 251 (statement -> IF parExpression statement empty .)
    CHAR            reduce using rule 251 (statement -> IF parExpression statement empty .)
    BYTE            reduce using rule 251 (statement -> IF parExpression statement empty .)
    SHORT           reduce using rule 251 (statement -> IF parExpression statement empty .)
    INT             reduce using rule 251 (statement -> IF parExpression statement empty .)
    LONG            reduce using rule 251 (statement -> IF parExpression statement empty .)
    FLOAT           reduce using rule 251 (statement -> IF parExpression statement empty .)
    DOUBLE          reduce using rule 251 (statement -> IF parExpression statement empty .)
    NUMBER          reduce using rule 251 (statement -> IF parExpression statement empty .)
    HEX_NUMBER      reduce using rule 251 (statement -> IF parExpression statement empty .)
    LONG_NUMBER     reduce using rule 251 (statement -> IF parExpression statement empty .)
    LONG_HEX_NUMBER reduce using rule 251 (statement -> IF parExpression statement empty .)
    NON_INTEGER_1   reduce using rule 251 (statement -> IF parExpression statement empty .)
    NON_INTEGER_2   reduce using rule 251 (statement -> IF parExpression statement empty .)
    NON_INTEGER_3   reduce using rule 251 (statement -> IF parExpression statement empty .)
    TRUE            reduce using rule 251 (statement -> IF parExpression statement empty .)
    FALSE           reduce using rule 251 (statement -> IF parExpression statement empty .)
    CLASS           reduce using rule 251 (statement -> IF parExpression statement empty .)
    ENUM            reduce using rule 251 (statement -> IF parExpression statement empty .)
    INTERFACE       reduce using rule 251 (statement -> IF parExpression statement empty .)
    CASE            reduce using rule 251 (statement -> IF parExpression statement empty .)
    DEFAULT         reduce using rule 251 (statement -> IF parExpression statement empty .)
    BRPAREN         reduce using rule 251 (statement -> IF parExpression statement empty .)
    ELSE            reduce using rule 251 (statement -> IF parExpression statement empty .)


state 883

    (110) voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList . expr_6
    (485) expr_6 -> . methodBody
    (486) expr_6 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 885
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 884
    block                          shift and go to state 887
    expr_6                         shift and go to state 939

state 884

    (485) expr_6 -> methodBody .

    BRPAREN         reduce using rule 485 (expr_6 -> methodBody .)
    SEMI            reduce using rule 485 (expr_6 -> methodBody .)
    STATIC          reduce using rule 485 (expr_6 -> methodBody .)
    PUBLIC          reduce using rule 485 (expr_6 -> methodBody .)
    PROTECTED       reduce using rule 485 (expr_6 -> methodBody .)
    PRIVATE         reduce using rule 485 (expr_6 -> methodBody .)
    ABSTRACT        reduce using rule 485 (expr_6 -> methodBody .)
    FINAL           reduce using rule 485 (expr_6 -> methodBody .)
    NATIVE          reduce using rule 485 (expr_6 -> methodBody .)
    SYNCHRONIZED    reduce using rule 485 (expr_6 -> methodBody .)
    TRANSIENT       reduce using rule 485 (expr_6 -> methodBody .)
    VOLATILE        reduce using rule 485 (expr_6 -> methodBody .)
    STRICTFP        reduce using rule 485 (expr_6 -> methodBody .)
    AT              reduce using rule 485 (expr_6 -> methodBody .)
    BLPAREN         reduce using rule 485 (expr_6 -> methodBody .)
    VOID            reduce using rule 485 (expr_6 -> methodBody .)
    Identifier      reduce using rule 485 (expr_6 -> methodBody .)
    LESS            reduce using rule 485 (expr_6 -> methodBody .)
    INTERFACE       reduce using rule 485 (expr_6 -> methodBody .)
    CLASS           reduce using rule 485 (expr_6 -> methodBody .)
    ENUM            reduce using rule 485 (expr_6 -> methodBody .)
    BOOLEAN         reduce using rule 485 (expr_6 -> methodBody .)
    CHAR            reduce using rule 485 (expr_6 -> methodBody .)
    BYTE            reduce using rule 485 (expr_6 -> methodBody .)
    SHORT           reduce using rule 485 (expr_6 -> methodBody .)
    INT             reduce using rule 485 (expr_6 -> methodBody .)
    LONG            reduce using rule 485 (expr_6 -> methodBody .)
    FLOAT           reduce using rule 485 (expr_6 -> methodBody .)
    DOUBLE          reduce using rule 485 (expr_6 -> methodBody .)


state 885

    (486) expr_6 -> SEMI .

    BRPAREN         reduce using rule 486 (expr_6 -> SEMI .)
    SEMI            reduce using rule 486 (expr_6 -> SEMI .)
    STATIC          reduce using rule 486 (expr_6 -> SEMI .)
    PUBLIC          reduce using rule 486 (expr_6 -> SEMI .)
    PROTECTED       reduce using rule 486 (expr_6 -> SEMI .)
    PRIVATE         reduce using rule 486 (expr_6 -> SEMI .)
    ABSTRACT        reduce using rule 486 (expr_6 -> SEMI .)
    FINAL           reduce using rule 486 (expr_6 -> SEMI .)
    NATIVE          reduce using rule 486 (expr_6 -> SEMI .)
    SYNCHRONIZED    reduce using rule 486 (expr_6 -> SEMI .)
    TRANSIENT       reduce using rule 486 (expr_6 -> SEMI .)
    VOLATILE        reduce using rule 486 (expr_6 -> SEMI .)
    STRICTFP        reduce using rule 486 (expr_6 -> SEMI .)
    AT              reduce using rule 486 (expr_6 -> SEMI .)
    BLPAREN         reduce using rule 486 (expr_6 -> SEMI .)
    VOID            reduce using rule 486 (expr_6 -> SEMI .)
    Identifier      reduce using rule 486 (expr_6 -> SEMI .)
    LESS            reduce using rule 486 (expr_6 -> SEMI .)
    INTERFACE       reduce using rule 486 (expr_6 -> SEMI .)
    CLASS           reduce using rule 486 (expr_6 -> SEMI .)
    ENUM            reduce using rule 486 (expr_6 -> SEMI .)
    BOOLEAN         reduce using rule 486 (expr_6 -> SEMI .)
    CHAR            reduce using rule 486 (expr_6 -> SEMI .)
    BYTE            reduce using rule 486 (expr_6 -> SEMI .)
    SHORT           reduce using rule 486 (expr_6 -> SEMI .)
    INT             reduce using rule 486 (expr_6 -> SEMI .)
    LONG            reduce using rule 486 (expr_6 -> SEMI .)
    FLOAT           reduce using rule 486 (expr_6 -> SEMI .)
    DOUBLE          reduce using rule 486 (expr_6 -> SEMI .)


state 886

    (111) voidMethodDeclaratorRest -> formalParameters empty expr_6 .

    BRPAREN         reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    SEMI            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    STATIC          reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    PUBLIC          reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    PROTECTED       reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    PRIVATE         reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    ABSTRACT        reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    FINAL           reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    NATIVE          reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    SYNCHRONIZED    reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    TRANSIENT       reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    VOLATILE        reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    STRICTFP        reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    AT              reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    BLPAREN         reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    VOID            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    Identifier      reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    LESS            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    INTERFACE       reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    CLASS           reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    ENUM            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    BOOLEAN         reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    CHAR            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    BYTE            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    SHORT           reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    INT             reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    LONG            reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    FLOAT           reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)
    DOUBLE          reduce using rule 111 (voidMethodDeclaratorRest -> formalParameters empty expr_6 .)


state 887

    (185) methodBody -> block .

    BRPAREN         reduce using rule 185 (methodBody -> block .)
    SEMI            reduce using rule 185 (methodBody -> block .)
    STATIC          reduce using rule 185 (methodBody -> block .)
    PUBLIC          reduce using rule 185 (methodBody -> block .)
    PROTECTED       reduce using rule 185 (methodBody -> block .)
    PRIVATE         reduce using rule 185 (methodBody -> block .)
    ABSTRACT        reduce using rule 185 (methodBody -> block .)
    FINAL           reduce using rule 185 (methodBody -> block .)
    NATIVE          reduce using rule 185 (methodBody -> block .)
    SYNCHRONIZED    reduce using rule 185 (methodBody -> block .)
    TRANSIENT       reduce using rule 185 (methodBody -> block .)
    VOLATILE        reduce using rule 185 (methodBody -> block .)
    STRICTFP        reduce using rule 185 (methodBody -> block .)
    AT              reduce using rule 185 (methodBody -> block .)
    BLPAREN         reduce using rule 185 (methodBody -> block .)
    VOID            reduce using rule 185 (methodBody -> block .)
    Identifier      reduce using rule 185 (methodBody -> block .)
    LESS            reduce using rule 185 (methodBody -> block .)
    INTERFACE       reduce using rule 185 (methodBody -> block .)
    CLASS           reduce using rule 185 (methodBody -> block .)
    ENUM            reduce using rule 185 (methodBody -> block .)
    BOOLEAN         reduce using rule 185 (methodBody -> block .)
    CHAR            reduce using rule 185 (methodBody -> block .)
    BYTE            reduce using rule 185 (methodBody -> block .)
    SHORT           reduce using rule 185 (methodBody -> block .)
    INT             reduce using rule 185 (methodBody -> block .)
    LONG            reduce using rule 185 (methodBody -> block .)
    FLOAT           reduce using rule 185 (methodBody -> block .)
    DOUBLE          reduce using rule 185 (methodBody -> block .)


state 888

    (106) methodDeclaratorRest -> formalParameters expt_11 THROWS . qualifiedNameList expr_5
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 940
    qualifiedName                  shift and go to state 834

state 889

    (107) methodDeclaratorRest -> formalParameters expt_11 empty . expr_5
    (491) expr_5 -> . methodBody
    (492) expr_5 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 942
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 941
    expr_5                         shift and go to state 943
    block                          shift and go to state 887

state 890

    (108) methodDeclaratorRest -> formalParameters empty THROWS . qualifiedNameList expr_5
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 944
    qualifiedName                  shift and go to state 834

state 891

    (109) methodDeclaratorRest -> formalParameters empty empty . expr_5
    (491) expr_5 -> . methodBody
    (492) expr_5 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 942
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 941
    block                          shift and go to state 887
    expr_5                         shift and go to state 945

state 892

    (119) constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .

    BRPAREN         reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    SEMI            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    STATIC          reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    PUBLIC          reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    PROTECTED       reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    PRIVATE         reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    ABSTRACT        reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    FINAL           reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    NATIVE          reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    SYNCHRONIZED    reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    TRANSIENT       reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    VOLATILE        reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    STRICTFP        reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    AT              reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    BLPAREN         reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    VOID            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    Identifier      reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    LESS            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    INTERFACE       reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    CLASS           reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    ENUM            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    BOOLEAN         reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    CHAR            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    BYTE            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    SHORT           reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    INT             reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    LONG            reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    FLOAT           reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)
    DOUBLE          reduce using rule 119 (constructorDeclaratorRest -> formalParameters THROWS qualifiedNameList constructorBody .)


state 893

    (177) qualifiedNameList -> qualifiedName expt_17 .
    (458) expt_17 -> expt_17 . COMMA qualifiedName

    SEMI            reduce using rule 177 (qualifiedNameList -> qualifiedName expt_17 .)
    BLPAREN         reduce using rule 177 (qualifiedNameList -> qualifiedName expt_17 .)
    COMMA           shift and go to state 946


state 894

    (457) expt_17 -> COMMA . qualifiedName
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedName                  shift and go to state 947

state 895

    (178) qualifiedNameList -> qualifiedName empty .

    SEMI            reduce using rule 178 (qualifiedNameList -> qualifiedName empty .)
    BLPAREN         reduce using rule 178 (qualifiedNameList -> qualifiedName empty .)


state 896

    (192) explicitConstructorInvocation -> primary . DOT nonWildcardTypeArguments SUPER arguments SEMI
    (193) explicitConstructorInvocation -> primary . DOT empty SUPER arguments SEMI

    DOT             shift and go to state 948


state 897

    (190) explicitConstructorInvocation -> nonWildcardTypeArguments . expr_9 arguments SEMI
    (483) expr_9 -> . THIS
    (484) expr_9 -> . SUPER

    THIS            shift and go to state 949
    SUPER           shift and go to state 951

    expr_9                         shift and go to state 950

state 898

    (188) constructorBody -> BLPAREN empty . expt_18 BRPAREN
    (189) constructorBody -> BLPAREN empty . empty BRPAREN
    (191) explicitConstructorInvocation -> empty . expr_9 arguments SEMI
    (471) expt_18 -> . blockStatement
    (472) expt_18 -> . expt_18 blockStatement
    (528) empty -> .
    (483) expr_9 -> . THIS
    (484) expr_9 -> . SUPER
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    THIS            shift and go to state 952
    SUPER           shift and go to state 955
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 652
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    expr_9                         shift and go to state 954
    empty                          shift and go to state 953
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    FloatingPointLiteral           shift and go to state 112
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    expt_18                        shift and go to state 956
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 899

    (186) constructorBody -> BLPAREN explicitConstructorInvocation . expt_18 BRPAREN
    (187) constructorBody -> BLPAREN explicitConstructorInvocation . empty BRPAREN
    (471) expt_18 -> . blockStatement
    (472) expt_18 -> . expt_18 blockStatement
    (528) empty -> .
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         reduce using rule 528 (empty -> .)
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 652
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 957
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    unaryExpressionNotPlusMinus    shift and go to state 97
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    expt_18                        shift and go to state 958
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 900

    (181) formalParameterDecls -> variableModifiers type formalParameterDeclsRest .

    RPAREN          reduce using rule 181 (formalParameterDecls -> variableModifiers type formalParameterDeclsRest .)


state 901

    (184) formalParameterDeclsRest -> OP_ARRAY . variableDeclaratorId
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 780

    variableDeclaratorId           shift and go to state 959

state 902

    (182) formalParameterDeclsRest -> variableDeclaratorId . COMMA formalParameterDecls
    (183) formalParameterDeclsRest -> variableDeclaratorId . empty
    (528) empty -> .

    COMMA           shift and go to state 960
    RPAREN          reduce using rule 528 (empty -> .)

    empty                          shift and go to state 961

state 903

    (237) defaultValue -> DEFAULT elementValue .

    SEMI            reduce using rule 237 (defaultValue -> DEFAULT elementValue .)


state 904

    (118) voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .

    BRPAREN         reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    SEMI            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    PUBLIC          reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    PROTECTED       reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    PRIVATE         reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    STATIC          reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    ABSTRACT        reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    FINAL           reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    NATIVE          reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    SYNCHRONIZED    reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    TRANSIENT       reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    VOLATILE        reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    STRICTFP        reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    AT              reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    VOID            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    LESS            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    INTERFACE       reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    CLASS           reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    ENUM            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    Identifier      reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    BOOLEAN         reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    CHAR            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    BYTE            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    SHORT           reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    INT             reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    LONG            reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    FLOAT           reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)
    DOUBLE          reduce using rule 118 (voidInterfaceMethodDeclaratorRest -> formalParameters empty SEMI .)


state 905

    (117) voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList . SEMI

    SEMI            shift and go to state 962


state 906

    (112) interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS . qualifiedNameList SEMI
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 963
    qualifiedName                  shift and go to state 834

state 907

    (113) interfaceMethodDeclaratorRest -> formalParameters expt_11 empty . SEMI

    SEMI            shift and go to state 964


state 908

    (114) interfaceMethodDeclaratorRest -> formalParameters empty THROWS . qualifiedNameList SEMI
    (177) qualifiedNameList -> . qualifiedName expt_17
    (178) qualifiedNameList -> . qualifiedName empty
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedNameList              shift and go to state 965
    qualifiedName                  shift and go to state 834

state 909

    (115) interfaceMethodDeclaratorRest -> formalParameters empty empty . SEMI

    SEMI            shift and go to state 966


state 910

    (465) expt_13 -> COMMA constantDeclarator .

    COMMA           reduce using rule 465 (expt_13 -> COMMA constantDeclarator .)
    SEMI            reduce using rule 465 (expt_13 -> COMMA constantDeclarator .)


state 911

    (121) constantDeclarator -> Identifier . constantDeclaratorRest
    (128) constantDeclaratorRest -> . expt_11 EQUALS variableInitializer
    (129) constantDeclaratorRest -> . empty EQUALS variableInitializer
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)

    constantDeclaratorRest         shift and go to state 967
    empty                          shift and go to state 792
    expt_11                        shift and go to state 791

state 912

    (466) expt_13 -> expt_13 COMMA . constantDeclarator
    (121) constantDeclarator -> . Identifier constantDeclaratorRest

    Identifier      shift and go to state 911

    constantDeclarator             shift and go to state 968

state 913

    (128) constantDeclaratorRest -> expt_11 EQUALS variableInitializer .

    COMMA           reduce using rule 128 (constantDeclaratorRest -> expt_11 EQUALS variableInitializer .)
    SEMI            reduce using rule 128 (constantDeclaratorRest -> expt_11 EQUALS variableInitializer .)


state 914

    (129) constantDeclaratorRest -> empty EQUALS variableInitializer .

    COMMA           reduce using rule 129 (constantDeclaratorRest -> empty EQUALS variableInitializer .)
    SEMI            reduce using rule 129 (constantDeclaratorRest -> empty EQUALS variableInitializer .)


state 915

    (282) forControl -> forInit SEMI empty . SEMI forUpdate
    (283) forControl -> forInit SEMI empty . SEMI empty

    SEMI            shift and go to state 969


state 916

    (280) forControl -> forInit SEMI expression . SEMI forUpdate
    (281) forControl -> forInit SEMI expression . SEMI empty

    SEMI            shift and go to state 970


state 917

    (252) statement -> FOR LPAREN forControl RPAREN statement .

    WHILE           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    ASSERT          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    IF              reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    FOR             reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    DO              reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    TRY             reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    SWITCH          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    SYNCHRONIZED    reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    RETURN          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    THROW           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    BREAK           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    CONTINUE        reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    SEMI            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    Identifier      reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    BLPAREN         reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    PUBLIC          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    PROTECTED       reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    PRIVATE         reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    ABSTRACT        reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    STATIC          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    FINAL           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    STRICTFP        reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    AT              reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    PLUS            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    DASH            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    OP_INC          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    OP_DEC          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    TILDE           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    EXCLAMATION     reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    LPAREN          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    THIS            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    SUPER           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NEW             reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    VOID            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    CharacterLiteral reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    StringLiteral   reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NULL            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    BOOLEAN         reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    CHAR            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    BYTE            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    SHORT           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    INT             reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    FLOAT           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    DOUBLE          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NUMBER          reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    HEX_NUMBER      reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG_NUMBER     reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG_HEX_NUMBER reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_1   reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_2   reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_3   reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    TRUE            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    FALSE           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    CLASS           reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    ENUM            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    INTERFACE       reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    CASE            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    DEFAULT         reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    BRPAREN         reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)
    ELSE            reduce using rule 252 (statement -> FOR LPAREN forControl RPAREN statement .)


state 918

    (286) forControl -> empty SEMI empty . SEMI forUpdate
    (287) forControl -> empty SEMI empty . SEMI empty

    SEMI            shift and go to state 971


state 919

    (284) forControl -> empty SEMI expression . SEMI forUpdate
    (285) forControl -> empty SEMI expression . SEMI empty

    SEMI            shift and go to state 972


state 920

    (290) enhancedForControl -> variableModifiers type Identifier . COLON expression
    (130) variableDeclaratorId -> Identifier . expt_11
    (131) variableDeclaratorId -> Identifier . empty
    (469) expt_11 -> . FLPAREN FRPAREN
    (470) expt_11 -> . expt_11 FLPAREN FRPAREN
    (528) empty -> .

    COLON           shift and go to state 973
    FLPAREN         shift and go to state 207
    EQUALS          reduce using rule 528 (empty -> .)
    COMMA           reduce using rule 528 (empty -> .)
    SEMI            reduce using rule 528 (empty -> .)

    empty                          shift and go to state 723
    expt_11                        shift and go to state 722

state 921

    (516) expr_12 -> catches FINALLY block .

    BRPAREN         reduce using rule 516 (expr_12 -> catches FINALLY block .)
    ASSERT          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    IF              reduce using rule 516 (expr_12 -> catches FINALLY block .)
    FOR             reduce using rule 516 (expr_12 -> catches FINALLY block .)
    WHILE           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    DO              reduce using rule 516 (expr_12 -> catches FINALLY block .)
    TRY             reduce using rule 516 (expr_12 -> catches FINALLY block .)
    SWITCH          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    SYNCHRONIZED    reduce using rule 516 (expr_12 -> catches FINALLY block .)
    RETURN          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    THROW           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    BREAK           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    CONTINUE        reduce using rule 516 (expr_12 -> catches FINALLY block .)
    SEMI            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    Identifier      reduce using rule 516 (expr_12 -> catches FINALLY block .)
    BLPAREN         reduce using rule 516 (expr_12 -> catches FINALLY block .)
    PUBLIC          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    PROTECTED       reduce using rule 516 (expr_12 -> catches FINALLY block .)
    PRIVATE         reduce using rule 516 (expr_12 -> catches FINALLY block .)
    ABSTRACT        reduce using rule 516 (expr_12 -> catches FINALLY block .)
    STATIC          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    FINAL           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    STRICTFP        reduce using rule 516 (expr_12 -> catches FINALLY block .)
    AT              reduce using rule 516 (expr_12 -> catches FINALLY block .)
    PLUS            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    DASH            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    OP_INC          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    OP_DEC          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    TILDE           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    EXCLAMATION     reduce using rule 516 (expr_12 -> catches FINALLY block .)
    LPAREN          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    THIS            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    SUPER           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NEW             reduce using rule 516 (expr_12 -> catches FINALLY block .)
    VOID            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    CharacterLiteral reduce using rule 516 (expr_12 -> catches FINALLY block .)
    StringLiteral   reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NULL            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    BOOLEAN         reduce using rule 516 (expr_12 -> catches FINALLY block .)
    CHAR            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    BYTE            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    SHORT           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    INT             reduce using rule 516 (expr_12 -> catches FINALLY block .)
    LONG            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    FLOAT           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    DOUBLE          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NUMBER          reduce using rule 516 (expr_12 -> catches FINALLY block .)
    HEX_NUMBER      reduce using rule 516 (expr_12 -> catches FINALLY block .)
    LONG_NUMBER     reduce using rule 516 (expr_12 -> catches FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NON_INTEGER_1   reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NON_INTEGER_2   reduce using rule 516 (expr_12 -> catches FINALLY block .)
    NON_INTEGER_3   reduce using rule 516 (expr_12 -> catches FINALLY block .)
    TRUE            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    FALSE           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    CLASS           reduce using rule 516 (expr_12 -> catches FINALLY block .)
    ENUM            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    INTERFACE       reduce using rule 516 (expr_12 -> catches FINALLY block .)
    ELSE            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    CASE            reduce using rule 516 (expr_12 -> catches FINALLY block .)
    DEFAULT         reduce using rule 516 (expr_12 -> catches FINALLY block .)


state 922

    (446) expt_24 -> expt_24 catchClause .

    CATCH           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    FINALLY         reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    BRPAREN         reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    ASSERT          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    IF              reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    FOR             reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    WHILE           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    DO              reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    TRY             reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    SWITCH          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    SYNCHRONIZED    reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    RETURN          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    THROW           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    BREAK           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    CONTINUE        reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    SEMI            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    Identifier      reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    BLPAREN         reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    PUBLIC          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    PROTECTED       reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    PRIVATE         reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    ABSTRACT        reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    STATIC          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    FINAL           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    STRICTFP        reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    AT              reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    PLUS            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    DASH            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    OP_INC          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    OP_DEC          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    TILDE           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    EXCLAMATION     reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    LPAREN          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    THIS            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    SUPER           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NEW             reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    VOID            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    CharacterLiteral reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    StringLiteral   reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NULL            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    BOOLEAN         reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    CHAR            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    BYTE            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    SHORT           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    INT             reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    LONG            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    FLOAT           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    DOUBLE          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NUMBER          reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    HEX_NUMBER      reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    LONG_NUMBER     reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    LONG_HEX_NUMBER reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NON_INTEGER_1   reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NON_INTEGER_2   reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    NON_INTEGER_3   reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    TRUE            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    FALSE           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    CLASS           reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    ENUM            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    INTERFACE       reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    ELSE            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    CASE            reduce using rule 446 (expt_24 -> expt_24 catchClause .)
    DEFAULT         reduce using rule 446 (expt_24 -> expt_24 catchClause .)


state 923

    (270) catchClause -> CATCH LPAREN formalParameter . RPAREN block

    RPAREN          shift and go to state 974


state 924

    (271) formalParameter -> variableModifiers . type variableDeclaratorId
    (154) type -> . classOrInterfaceType expt_11
    (155) type -> . classOrInterfaceType empty
    (156) type -> . primitiveType expt_11
    (157) type -> . primitiveType empty
    (158) classOrInterfaceType -> . Identifier typeArguments expt_15
    (159) classOrInterfaceType -> . Identifier typeArguments empty
    (160) classOrInterfaceType -> . Identifier empty expt_15
    (161) classOrInterfaceType -> . Identifier empty empty
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE

    Identifier      shift and go to state 202
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87

    classOrInterfaceType           shift and go to state 226
    primitiveType                  shift and go to state 252
    type                           shift and go to state 975

state 925

    (246) variableModifiers -> empty .

    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 926

    (256) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .

    WHILE           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ASSERT          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    IF              reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FOR             reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DO              reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRY             reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SWITCH          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SYNCHRONIZED    reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    RETURN          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THROW           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BREAK           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CONTINUE        reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SEMI            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    Identifier      reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BLPAREN         reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PUBLIC          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PROTECTED       reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PRIVATE         reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ABSTRACT        reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STATIC          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FINAL           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STRICTFP        reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    AT              reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PLUS            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DASH            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_INC          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_DEC          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TILDE           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    EXCLAMATION     reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LPAREN          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THIS            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SUPER           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NEW             reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    VOID            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CharacterLiteral reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    StringLiteral   reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NULL            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BOOLEAN         reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CHAR            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BYTE            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SHORT           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    INT             reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FLOAT           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DOUBLE          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NUMBER          reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    HEX_NUMBER      reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_NUMBER     reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_1   reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_2   reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_3   reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRUE            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FALSE           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CLASS           reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ENUM            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    INTERFACE       reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CASE            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DEFAULT         reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BRPAREN         reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ELSE            reduce using rule 256 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)


state 927

    (277) switchLabel -> CASE enumConstantName . COLON

    COLON           shift and go to state 976


state 928

    (152) enumConstantName -> Identifier .
    (362) primary -> Identifier . expt_19 identifierSuffix
    (363) primary -> Identifier . expt_19 empty
    (364) primary -> Identifier . empty identifierSuffix
    (365) primary -> Identifier . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
    COLON           reduce using rule 152 (enumConstantName -> Identifier .)
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    LPAREN          reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 176
    expt_19                        shift and go to state 177

state 929

    (276) switchLabel -> CASE constantExpression . COLON

    COLON           shift and go to state 977


state 930

    (296) constantExpression -> expression .

    COLON           reduce using rule 296 (constantExpression -> expression .)


state 931

    (278) switchLabel -> DEFAULT COLON .

    CASE            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    ASSERT          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    IF              reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    DO              reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    TRY             reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    THROW           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    SEMI            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    Identifier      reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    BLPAREN         reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    PUBLIC          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    PROTECTED       reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    PRIVATE         reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    ABSTRACT        reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    STATIC          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    FINAL           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    STRICTFP        reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    AT              reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    PLUS            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    DASH            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    OP_INC          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    OP_DEC          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    TILDE           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    EXCLAMATION     reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    LPAREN          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    SUPER           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NEW             reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    VOID            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    CharacterLiteral reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    StringLiteral   reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NULL            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    INT             reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NUMBER          reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    HEX_NUMBER      reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    LONG_NUMBER     reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    LONG_HEX_NUMBER reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_1   reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_2   reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_3   reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    TRUE            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    FALSE           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    CLASS           reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    ENUM            reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    INTERFACE       reduce using rule 278 (switchLabel -> DEFAULT COLON .)
    BRPAREN         reduce using rule 278 (switchLabel -> DEFAULT COLON .)


state 932

    (444) expt_25 -> expt_25 switchBlockStatementGroup .

    CASE            reduce using rule 444 (expt_25 -> expt_25 switchBlockStatementGroup .)
    DEFAULT         reduce using rule 444 (expt_25 -> expt_25 switchBlockStatementGroup .)
    BRPAREN         reduce using rule 444 (expt_25 -> expt_25 switchBlockStatementGroup .)


state 933

    (275) switchBlockStatementGroup -> expr_13 empty .
    (19) classOrInterfaceModifiers -> empty .
    (246) variableModifiers -> empty .

    CASE            reduce using rule 275 (switchBlockStatementGroup -> expr_13 empty .)
    DEFAULT         reduce using rule 275 (switchBlockStatementGroup -> expr_13 empty .)
    BRPAREN         reduce using rule 275 (switchBlockStatementGroup -> expr_13 empty .)
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 934

    (520) expr_13 -> expr_13 switchLabel .

    CASE            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    DEFAULT         reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    ASSERT          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    IF              reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    FOR             reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    WHILE           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    DO              reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    TRY             reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    SWITCH          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    SYNCHRONIZED    reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    RETURN          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    THROW           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    BREAK           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    CONTINUE        reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    SEMI            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    Identifier      reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    BLPAREN         reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    PUBLIC          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    PROTECTED       reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    PRIVATE         reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    ABSTRACT        reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    STATIC          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    FINAL           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    STRICTFP        reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    AT              reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    PLUS            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    DASH            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    OP_INC          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    OP_DEC          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    TILDE           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    EXCLAMATION     reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    LPAREN          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    THIS            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    SUPER           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NEW             reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    VOID            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    CharacterLiteral reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    StringLiteral   reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NULL            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    BOOLEAN         reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    CHAR            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    BYTE            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    SHORT           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    INT             reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    LONG            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    FLOAT           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    DOUBLE          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NUMBER          reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    HEX_NUMBER      reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    LONG_NUMBER     reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    LONG_HEX_NUMBER reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NON_INTEGER_1   reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NON_INTEGER_2   reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    NON_INTEGER_3   reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    TRUE            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    FALSE           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    CLASS           reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    ENUM            reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    INTERFACE       reduce using rule 520 (expr_13 -> expr_13 switchLabel .)
    BRPAREN         reduce using rule 520 (expr_13 -> expr_13 switchLabel .)


state 935

    (274) switchBlockStatementGroup -> expr_13 expt_18 .
    (472) expt_18 -> expt_18 . blockStatement
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    CASE            reduce using rule 274 (switchBlockStatementGroup -> expr_13 expt_18 .)
    DEFAULT         reduce using rule 274 (switchBlockStatementGroup -> expr_13 expt_18 .)
    BRPAREN         reduce using rule 274 (switchBlockStatementGroup -> expr_13 expt_18 .)
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 762
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 763
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 936

    (254) statement -> DO statement WHILE parExpression SEMI .

    WHILE           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    ASSERT          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    IF              reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    FOR             reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    DO              reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    TRY             reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    SWITCH          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    SYNCHRONIZED    reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    RETURN          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    THROW           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    BREAK           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    CONTINUE        reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    SEMI            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    Identifier      reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    BLPAREN         reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    PUBLIC          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    PROTECTED       reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    PRIVATE         reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    ABSTRACT        reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    STATIC          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    FINAL           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    STRICTFP        reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    AT              reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    PLUS            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    DASH            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    OP_INC          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    OP_DEC          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    TILDE           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    EXCLAMATION     reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    LPAREN          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    THIS            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    SUPER           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NEW             reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    VOID            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    CharacterLiteral reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    StringLiteral   reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NULL            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    BOOLEAN         reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    CHAR            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    BYTE            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    SHORT           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    INT             reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    LONG            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    FLOAT           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    DOUBLE          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NUMBER          reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    HEX_NUMBER      reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_NUMBER     reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_HEX_NUMBER reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_1   reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_2   reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_3   reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    TRUE            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    FALSE           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    CLASS           reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    ENUM            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    INTERFACE       reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    CASE            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    DEFAULT         reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    BRPAREN         reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)
    ELSE            reduce using rule 254 (statement -> DO statement WHILE parExpression SEMI .)


state 937

    (248) statement -> ASSERT expression COLON expression SEMI .

    WHILE           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    ASSERT          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    IF              reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    FOR             reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    DO              reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    TRY             reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    SWITCH          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    SYNCHRONIZED    reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    RETURN          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    THROW           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    BREAK           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    CONTINUE        reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    SEMI            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    Identifier      reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    BLPAREN         reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    PUBLIC          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    PROTECTED       reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    PRIVATE         reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    ABSTRACT        reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    STATIC          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    FINAL           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    STRICTFP        reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    AT              reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    PLUS            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    DASH            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    OP_INC          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    OP_DEC          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    TILDE           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    EXCLAMATION     reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    LPAREN          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    THIS            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    SUPER           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NEW             reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    VOID            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    CharacterLiteral reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    StringLiteral   reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NULL            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    BOOLEAN         reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    CHAR            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    BYTE            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    SHORT           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    INT             reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    LONG            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    FLOAT           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    DOUBLE          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NUMBER          reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    HEX_NUMBER      reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    LONG_NUMBER     reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NON_INTEGER_1   reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NON_INTEGER_2   reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    NON_INTEGER_3   reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    TRUE            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    FALSE           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    CLASS           reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    ENUM            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    INTERFACE       reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    CASE            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    DEFAULT         reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    BRPAREN         reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)
    ELSE            reduce using rule 248 (statement -> ASSERT expression COLON expression SEMI .)


state 938

    (250) statement -> IF parExpression statement ELSE statement .

    WHILE           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    ASSERT          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    IF              reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    FOR             reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    DO              reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    TRY             reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    SWITCH          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    SYNCHRONIZED    reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    RETURN          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    THROW           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    BREAK           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    CONTINUE        reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    SEMI            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    Identifier      reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    BLPAREN         reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    PUBLIC          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    PROTECTED       reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    PRIVATE         reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    ABSTRACT        reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    STATIC          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    FINAL           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    STRICTFP        reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    AT              reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    PLUS            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    DASH            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    OP_INC          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    OP_DEC          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    TILDE           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    EXCLAMATION     reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    LPAREN          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    THIS            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    SUPER           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NEW             reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    VOID            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    CharacterLiteral reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    StringLiteral   reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NULL            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    BOOLEAN         reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    CHAR            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    BYTE            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    SHORT           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    INT             reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    LONG            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    FLOAT           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    DOUBLE          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NUMBER          reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    HEX_NUMBER      reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    LONG_NUMBER     reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    LONG_HEX_NUMBER reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NON_INTEGER_1   reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NON_INTEGER_2   reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    NON_INTEGER_3   reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    TRUE            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    FALSE           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    CLASS           reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    ENUM            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    INTERFACE       reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    CASE            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    DEFAULT         reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    BRPAREN         reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)
    ELSE            reduce using rule 250 (statement -> IF parExpression statement ELSE statement .)


state 939

    (110) voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .

    BRPAREN         reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    SEMI            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    STATIC          reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    PUBLIC          reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    PROTECTED       reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    PRIVATE         reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    ABSTRACT        reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    FINAL           reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    NATIVE          reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    SYNCHRONIZED    reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    TRANSIENT       reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    VOLATILE        reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    STRICTFP        reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    AT              reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    BLPAREN         reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    VOID            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    Identifier      reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    LESS            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    INTERFACE       reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    CLASS           reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    ENUM            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    BOOLEAN         reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    CHAR            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    BYTE            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    SHORT           reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    INT             reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    LONG            reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    FLOAT           reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)
    DOUBLE          reduce using rule 110 (voidMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList expr_6 .)


state 940

    (106) methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList . expr_5
    (491) expr_5 -> . methodBody
    (492) expr_5 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 942
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 941
    expr_5                         shift and go to state 978
    block                          shift and go to state 887

state 941

    (491) expr_5 -> methodBody .

    BRPAREN         reduce using rule 491 (expr_5 -> methodBody .)
    SEMI            reduce using rule 491 (expr_5 -> methodBody .)
    STATIC          reduce using rule 491 (expr_5 -> methodBody .)
    PUBLIC          reduce using rule 491 (expr_5 -> methodBody .)
    PROTECTED       reduce using rule 491 (expr_5 -> methodBody .)
    PRIVATE         reduce using rule 491 (expr_5 -> methodBody .)
    ABSTRACT        reduce using rule 491 (expr_5 -> methodBody .)
    FINAL           reduce using rule 491 (expr_5 -> methodBody .)
    NATIVE          reduce using rule 491 (expr_5 -> methodBody .)
    SYNCHRONIZED    reduce using rule 491 (expr_5 -> methodBody .)
    TRANSIENT       reduce using rule 491 (expr_5 -> methodBody .)
    VOLATILE        reduce using rule 491 (expr_5 -> methodBody .)
    STRICTFP        reduce using rule 491 (expr_5 -> methodBody .)
    AT              reduce using rule 491 (expr_5 -> methodBody .)
    BLPAREN         reduce using rule 491 (expr_5 -> methodBody .)
    VOID            reduce using rule 491 (expr_5 -> methodBody .)
    Identifier      reduce using rule 491 (expr_5 -> methodBody .)
    LESS            reduce using rule 491 (expr_5 -> methodBody .)
    INTERFACE       reduce using rule 491 (expr_5 -> methodBody .)
    CLASS           reduce using rule 491 (expr_5 -> methodBody .)
    ENUM            reduce using rule 491 (expr_5 -> methodBody .)
    BOOLEAN         reduce using rule 491 (expr_5 -> methodBody .)
    CHAR            reduce using rule 491 (expr_5 -> methodBody .)
    BYTE            reduce using rule 491 (expr_5 -> methodBody .)
    SHORT           reduce using rule 491 (expr_5 -> methodBody .)
    INT             reduce using rule 491 (expr_5 -> methodBody .)
    LONG            reduce using rule 491 (expr_5 -> methodBody .)
    FLOAT           reduce using rule 491 (expr_5 -> methodBody .)
    DOUBLE          reduce using rule 491 (expr_5 -> methodBody .)


state 942

    (492) expr_5 -> SEMI .

    BRPAREN         reduce using rule 492 (expr_5 -> SEMI .)
    SEMI            reduce using rule 492 (expr_5 -> SEMI .)
    STATIC          reduce using rule 492 (expr_5 -> SEMI .)
    PUBLIC          reduce using rule 492 (expr_5 -> SEMI .)
    PROTECTED       reduce using rule 492 (expr_5 -> SEMI .)
    PRIVATE         reduce using rule 492 (expr_5 -> SEMI .)
    ABSTRACT        reduce using rule 492 (expr_5 -> SEMI .)
    FINAL           reduce using rule 492 (expr_5 -> SEMI .)
    NATIVE          reduce using rule 492 (expr_5 -> SEMI .)
    SYNCHRONIZED    reduce using rule 492 (expr_5 -> SEMI .)
    TRANSIENT       reduce using rule 492 (expr_5 -> SEMI .)
    VOLATILE        reduce using rule 492 (expr_5 -> SEMI .)
    STRICTFP        reduce using rule 492 (expr_5 -> SEMI .)
    AT              reduce using rule 492 (expr_5 -> SEMI .)
    BLPAREN         reduce using rule 492 (expr_5 -> SEMI .)
    VOID            reduce using rule 492 (expr_5 -> SEMI .)
    Identifier      reduce using rule 492 (expr_5 -> SEMI .)
    LESS            reduce using rule 492 (expr_5 -> SEMI .)
    INTERFACE       reduce using rule 492 (expr_5 -> SEMI .)
    CLASS           reduce using rule 492 (expr_5 -> SEMI .)
    ENUM            reduce using rule 492 (expr_5 -> SEMI .)
    BOOLEAN         reduce using rule 492 (expr_5 -> SEMI .)
    CHAR            reduce using rule 492 (expr_5 -> SEMI .)
    BYTE            reduce using rule 492 (expr_5 -> SEMI .)
    SHORT           reduce using rule 492 (expr_5 -> SEMI .)
    INT             reduce using rule 492 (expr_5 -> SEMI .)
    LONG            reduce using rule 492 (expr_5 -> SEMI .)
    FLOAT           reduce using rule 492 (expr_5 -> SEMI .)
    DOUBLE          reduce using rule 492 (expr_5 -> SEMI .)


state 943

    (107) methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .

    BRPAREN         reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    SEMI            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    STATIC          reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    PUBLIC          reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    PROTECTED       reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    PRIVATE         reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    ABSTRACT        reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    FINAL           reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    NATIVE          reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    SYNCHRONIZED    reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    TRANSIENT       reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    VOLATILE        reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    STRICTFP        reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    AT              reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    BLPAREN         reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    VOID            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    Identifier      reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    LESS            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    INTERFACE       reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    CLASS           reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    ENUM            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    BOOLEAN         reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    CHAR            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    BYTE            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    SHORT           reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    INT             reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    LONG            reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    FLOAT           reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)
    DOUBLE          reduce using rule 107 (methodDeclaratorRest -> formalParameters expt_11 empty expr_5 .)


state 944

    (108) methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList . expr_5
    (491) expr_5 -> . methodBody
    (492) expr_5 -> . SEMI
    (185) methodBody -> . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    SEMI            shift and go to state 942
    BLPAREN         shift and go to state 574

    methodBody                     shift and go to state 941
    expr_5                         shift and go to state 979
    block                          shift and go to state 887

state 945

    (109) methodDeclaratorRest -> formalParameters empty empty expr_5 .

    BRPAREN         reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    SEMI            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    STATIC          reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    PUBLIC          reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    PROTECTED       reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    PRIVATE         reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    ABSTRACT        reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    FINAL           reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    NATIVE          reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    SYNCHRONIZED    reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    TRANSIENT       reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    VOLATILE        reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    STRICTFP        reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    AT              reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    BLPAREN         reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    VOID            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    Identifier      reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    LESS            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    INTERFACE       reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    CLASS           reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    ENUM            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    BOOLEAN         reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    CHAR            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    BYTE            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    SHORT           reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    INT             reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    LONG            reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    FLOAT           reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)
    DOUBLE          reduce using rule 109 (methodDeclaratorRest -> formalParameters empty empty expr_5 .)


state 946

    (458) expt_17 -> expt_17 COMMA . qualifiedName
    (194) qualifiedName -> . Identifier expt_19
    (195) qualifiedName -> . Identifier empty

    Identifier      shift and go to state 10

    qualifiedName                  shift and go to state 980

state 947

    (457) expt_17 -> COMMA qualifiedName .

    COMMA           reduce using rule 457 (expt_17 -> COMMA qualifiedName .)
    BLPAREN         reduce using rule 457 (expt_17 -> COMMA qualifiedName .)
    SEMI            reduce using rule 457 (expt_17 -> COMMA qualifiedName .)


state 948

    (192) explicitConstructorInvocation -> primary DOT . nonWildcardTypeArguments SUPER arguments SEMI
    (193) explicitConstructorInvocation -> primary DOT . empty SUPER arguments SEMI
    (387) nonWildcardTypeArguments -> . LESS typeList MORE
    (528) empty -> .

    LESS            shift and go to state 199
    SUPER           reduce using rule 528 (empty -> .)

    nonWildcardTypeArguments       shift and go to state 981
    empty                          shift and go to state 982

state 949

    (483) expr_9 -> THIS .

    LPAREN          reduce using rule 483 (expr_9 -> THIS .)


state 950

    (190) explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 . arguments SEMI
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 983

state 951

    (484) expr_9 -> SUPER .

    LPAREN          reduce using rule 484 (expr_9 -> SUPER .)


state 952

    (483) expr_9 -> THIS .
    (355) primary -> THIS . expt_19 identifierSuffix
    (356) primary -> THIS . expt_19 empty
    (357) primary -> THIS . empty identifierSuffix
    (358) primary -> THIS . empty empty
    (473) expt_19 -> . DOT Identifier
    (474) expt_19 -> . expt_19 DOT Identifier
    (528) empty -> .

  ! shift/reduce conflict for DOT resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 483 (expr_9 -> THIS .)
    LPAREN          reduce using rule 483 (expr_9 -> THIS .)
    DOT             shift and go to state 36
    FLPAREN         reduce using rule 528 (empty -> .)
    OP_INC          reduce using rule 528 (empty -> .)
    OP_DEC          reduce using rule 528 (empty -> .)

  ! DOT             [ reduce using rule 528 (empty -> .) ]
  ! LPAREN          [ reduce using rule 528 (empty -> .) ]

    empty                          shift and go to state 162
    expt_19                        shift and go to state 163

state 953

    (189) constructorBody -> BLPAREN empty empty . BRPAREN
    (19) classOrInterfaceModifiers -> empty .
    (246) variableModifiers -> empty .

    BRPAREN         shift and go to state 984
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 954

    (191) explicitConstructorInvocation -> empty expr_9 . arguments SEMI
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 985

state 955

    (484) expr_9 -> SUPER .
    (359) primary -> SUPER . superSuffix
    (394) superSuffix -> . arguments
    (395) superSuffix -> . DOT Identifier arguments
    (396) superSuffix -> . DOT Identifier empty
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    DOT             shift and go to state 234
    LPAREN          shift and go to state 236

  ! LPAREN          [ reduce using rule 484 (expr_9 -> SUPER .) ]

    superSuffix                    shift and go to state 233
    arguments                      shift and go to state 235

state 956

    (188) constructorBody -> BLPAREN empty expt_18 . BRPAREN
    (472) expt_18 -> expt_18 . blockStatement
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         shift and go to state 986
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 762
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 763
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    unaryExpressionNotPlusMinus    shift and go to state 97
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 957

    (187) constructorBody -> BLPAREN explicitConstructorInvocation empty . BRPAREN
    (19) classOrInterfaceModifiers -> empty .
    (246) variableModifiers -> empty .

    BRPAREN         shift and go to state 987
    CLASS           reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    ENUM            reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    INTERFACE       reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    AT              reduce using rule 19 (classOrInterfaceModifiers -> empty .)
    Identifier      reduce using rule 246 (variableModifiers -> empty .)
    BOOLEAN         reduce using rule 246 (variableModifiers -> empty .)
    CHAR            reduce using rule 246 (variableModifiers -> empty .)
    BYTE            reduce using rule 246 (variableModifiers -> empty .)
    SHORT           reduce using rule 246 (variableModifiers -> empty .)
    INT             reduce using rule 246 (variableModifiers -> empty .)
    LONG            reduce using rule 246 (variableModifiers -> empty .)
    FLOAT           reduce using rule 246 (variableModifiers -> empty .)
    DOUBLE          reduce using rule 246 (variableModifiers -> empty .)


state 958

    (186) constructorBody -> BLPAREN explicitConstructorInvocation expt_18 . BRPAREN
    (472) expt_18 -> expt_18 . blockStatement
    (240) blockStatement -> . localVariableDeclarationStatement
    (241) blockStatement -> . classOrInterfaceDeclaration
    (242) blockStatement -> . statement
    (243) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (17) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_2
    (247) statement -> . block
    (248) statement -> . ASSERT expression COLON expression SEMI
    (249) statement -> . ASSERT expression empty SEMI
    (250) statement -> . IF parExpression statement ELSE statement
    (251) statement -> . IF parExpression statement empty
    (252) statement -> . FOR LPAREN forControl RPAREN statement
    (253) statement -> . WHILE parExpression statement
    (254) statement -> . DO statement WHILE parExpression SEMI
    (255) statement -> . TRY block expr_12
    (256) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (257) statement -> . SYNCHRONIZED parExpression block
    (258) statement -> . RETURN expression SEMI
    (259) statement -> . RETURN empty SEMI
    (260) statement -> . THROW expression SEMI
    (261) statement -> . BREAK Identifier SEMI
    (262) statement -> . BREAK empty SEMI
    (263) statement -> . CONTINUE Identifier SEMI
    (264) statement -> . CONTINUE empty SEMI
    (265) statement -> . SEMI
    (266) statement -> . statementExpression SEMI
    (267) statement -> . Identifier COLON statement
    (244) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (18) classOrInterfaceModifiers -> . expt_3
    (19) classOrInterfaceModifiers -> . empty
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN
    (295) statementExpression -> . expression
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (433) expt_3 -> . classOrInterfaceModifier
    (434) expt_3 -> . expt_3 classOrInterfaceModifier
    (528) empty -> .
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (20) classOrInterfaceModifier -> . annotation
    (21) classOrInterfaceModifier -> . PUBLIC
    (22) classOrInterfaceModifier -> . PROTECTED
    (23) classOrInterfaceModifier -> . PRIVATE
    (24) classOrInterfaceModifier -> . ABSTRACT
    (25) classOrInterfaceModifier -> . STATIC
    (26) classOrInterfaceModifier -> . FINAL
    (27) classOrInterfaceModifier -> . STRICTFP
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

  ! shift/reduce conflict for Identifier resolved as shift
  ! shift/reduce conflict for AT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BYTE resolved as shift
  ! shift/reduce conflict for SHORT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
    BRPAREN         shift and go to state 988
    ASSERT          shift and go to state 674
    IF              shift and go to state 677
    FOR             shift and go to state 659
    WHILE           shift and go to state 667
    DO              shift and go to state 672
    TRY             shift and go to state 661
    SWITCH          shift and go to state 668
    SYNCHRONIZED    shift and go to state 657
    RETURN          shift and go to state 656
    THROW           shift and go to state 679
    BREAK           shift and go to state 671
    CONTINUE        shift and go to state 663
    SEMI            shift and go to state 675
    Identifier      shift and go to state 662
    BLPAREN         shift and go to state 574
    CLASS           reduce using rule 528 (empty -> .)
    ENUM            reduce using rule 528 (empty -> .)
    INTERFACE       reduce using rule 528 (empty -> .)
    PUBLIC          shift and go to state 32
    PROTECTED       shift and go to state 19
    PRIVATE         shift and go to state 21
    ABSTRACT        shift and go to state 18
    STATIC          shift and go to state 20
    FINAL           shift and go to state 658
    STRICTFP        shift and go to state 24
    AT              shift and go to state 5
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

  ! AT              [ reduce using rule 528 (empty -> .) ]
  ! Identifier      [ reduce using rule 528 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 528 (empty -> .) ]
  ! CHAR            [ reduce using rule 528 (empty -> .) ]
  ! BYTE            [ reduce using rule 528 (empty -> .) ]
  ! SHORT           [ reduce using rule 528 (empty -> .) ]
  ! INT             [ reduce using rule 528 (empty -> .) ]
  ! LONG            [ reduce using rule 528 (empty -> .) ]
  ! FLOAT           [ reduce using rule 528 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 528 (empty -> .) ]

    equalityExpression             shift and go to state 100
    localVariableDeclaration       shift and go to state 666
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    blockStatement                 shift and go to state 762
    booleanLiteral                 shift and go to state 81
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    classOrInterfaceDeclaration    shift and go to state 653
    expt_3                         shift and go to state 23
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    statement                      shift and go to state 669
    FloatingPointLiteral           shift and go to state 112
    empty                          shift and go to state 763
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    expt_23                        shift and go to state 660
    classOrInterfaceModifier       shift and go to state 30
    relationalExpression           shift and go to state 84
    variableModifier               shift and go to state 654
    conditionalOrExpression        shift and go to state 101
    localVariableDeclarationStatement shift and go to state 655
    unaryExpressionNotPlusMinus    shift and go to state 97
    annotation                     shift and go to state 676
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    variableModifiers              shift and go to state 673
    primitiveType                  shift and go to state 117
    integerLiteral                 shift and go to state 88
    statementExpression            shift and go to state 678
    classOrInterfaceModifiers      shift and go to state 31
    andExpression                  shift and go to state 98
    expression                     shift and go to state 664
    block                          shift and go to state 665

state 959

    (184) formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId .

    RPAREN          reduce using rule 184 (formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId .)


state 960

    (182) formalParameterDeclsRest -> variableDeclaratorId COMMA . formalParameterDecls
    (181) formalParameterDecls -> . variableModifiers type formalParameterDeclsRest
    (245) variableModifiers -> . expt_23
    (246) variableModifiers -> . empty
    (447) expt_23 -> . variableModifier
    (448) expt_23 -> . expt_23 variableModifier
    (528) empty -> .
    (170) variableModifier -> . FINAL
    (171) variableModifier -> . annotation
    (205) annotation -> . AT annotationName LPAREN expr_11 RPAREN
    (206) annotation -> . AT annotationName empty

    Identifier      reduce using rule 528 (empty -> .)
    BOOLEAN         reduce using rule 528 (empty -> .)
    CHAR            reduce using rule 528 (empty -> .)
    BYTE            reduce using rule 528 (empty -> .)
    SHORT           reduce using rule 528 (empty -> .)
    INT             reduce using rule 528 (empty -> .)
    LONG            reduce using rule 528 (empty -> .)
    FLOAT           reduce using rule 528 (empty -> .)
    DOUBLE          reduce using rule 528 (empty -> .)
    FINAL           shift and go to state 745
    AT              shift and go to state 5

    variableModifiers              shift and go to state 774
    expt_23                        shift and go to state 660
    formalParameterDecls           shift and go to state 989
    variableModifier               shift and go to state 654
    annotation                     shift and go to state 743
    empty                          shift and go to state 925

state 961

    (183) formalParameterDeclsRest -> variableDeclaratorId empty .

    RPAREN          reduce using rule 183 (formalParameterDeclsRest -> variableDeclaratorId empty .)


state 962

    (117) voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .

    BRPAREN         reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    SEMI            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    PUBLIC          reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    PROTECTED       reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    PRIVATE         reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    STATIC          reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    ABSTRACT        reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    FINAL           reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    NATIVE          reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    SYNCHRONIZED    reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    TRANSIENT       reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    VOLATILE        reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    STRICTFP        reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    AT              reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    VOID            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    LESS            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    INTERFACE       reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    CLASS           reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    ENUM            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    Identifier      reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    BOOLEAN         reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    CHAR            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    BYTE            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    SHORT           reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    INT             reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    LONG            reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    FLOAT           reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)
    DOUBLE          reduce using rule 117 (voidInterfaceMethodDeclaratorRest -> formalParameters THROWS qualifiedNameList SEMI .)


state 963

    (112) interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList . SEMI

    SEMI            shift and go to state 990


state 964

    (113) interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .

    BRPAREN         reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    SEMI            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    PUBLIC          reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    PROTECTED       reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    PRIVATE         reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    STATIC          reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    ABSTRACT        reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    FINAL           reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    NATIVE          reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    SYNCHRONIZED    reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    TRANSIENT       reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    VOLATILE        reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    STRICTFP        reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    AT              reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    VOID            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    LESS            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    INTERFACE       reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    CLASS           reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    ENUM            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    Identifier      reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    BOOLEAN         reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    CHAR            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    BYTE            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    SHORT           reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    INT             reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    LONG            reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    FLOAT           reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)
    DOUBLE          reduce using rule 113 (interfaceMethodDeclaratorRest -> formalParameters expt_11 empty SEMI .)


state 965

    (114) interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList . SEMI

    SEMI            shift and go to state 991


state 966

    (115) interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .

    BRPAREN         reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    SEMI            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    PUBLIC          reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    PROTECTED       reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    PRIVATE         reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    STATIC          reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    ABSTRACT        reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    FINAL           reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    NATIVE          reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    SYNCHRONIZED    reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    TRANSIENT       reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    VOLATILE        reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    STRICTFP        reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    AT              reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    VOID            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    LESS            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    INTERFACE       reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    CLASS           reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    ENUM            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    Identifier      reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    BOOLEAN         reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    CHAR            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    BYTE            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    SHORT           reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    INT             reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    LONG            reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    FLOAT           reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)
    DOUBLE          reduce using rule 115 (interfaceMethodDeclaratorRest -> formalParameters empty empty SEMI .)


state 967

    (121) constantDeclarator -> Identifier constantDeclaratorRest .

    COMMA           reduce using rule 121 (constantDeclarator -> Identifier constantDeclaratorRest .)
    SEMI            reduce using rule 121 (constantDeclarator -> Identifier constantDeclaratorRest .)


state 968

    (466) expt_13 -> expt_13 COMMA constantDeclarator .

    COMMA           reduce using rule 466 (expt_13 -> expt_13 COMMA constantDeclarator .)
    SEMI            reduce using rule 466 (expt_13 -> expt_13 COMMA constantDeclarator .)


state 969

    (282) forControl -> forInit SEMI empty SEMI . forUpdate
    (283) forControl -> forInit SEMI empty SEMI . empty
    (291) forUpdate -> . expressionList
    (528) empty -> .
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 992
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 993
    additiveExpression             shift and go to state 93
    forUpdate                      shift and go to state 994
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 970

    (280) forControl -> forInit SEMI expression SEMI . forUpdate
    (281) forControl -> forInit SEMI expression SEMI . empty
    (291) forUpdate -> . expressionList
    (528) empty -> .
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 992
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 995
    additiveExpression             shift and go to state 93
    forUpdate                      shift and go to state 996
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 971

    (286) forControl -> empty SEMI empty SEMI . forUpdate
    (287) forControl -> empty SEMI empty SEMI . empty
    (291) forUpdate -> . expressionList
    (528) empty -> .
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    forUpdate                      shift and go to state 998
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 992
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 997
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 972

    (284) forControl -> empty SEMI expression SEMI . forUpdate
    (285) forControl -> empty SEMI expression SEMI . empty
    (291) forUpdate -> . expressionList
    (528) empty -> .
    (293) expressionList -> . expression expt_26
    (294) expressionList -> . expression empty
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 528 (empty -> .)
    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    forUpdate                      shift and go to state 1000
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    expressionList                 shift and go to state 992
    integerLiteral                 shift and go to state 88
    empty                          shift and go to state 999
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    FloatingPointLiteral           shift and go to state 112
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 348

state 973

    (290) enhancedForControl -> variableModifiers type Identifier COLON . expression
    (297) expression -> . conditionalExpression assignmentOperator expression
    (298) expression -> . conditionalExpression empty
    (311) conditionalExpression -> . conditionalOrExpression QUES expression COLON expression
    (312) conditionalExpression -> . conditionalOrExpression empty
    (313) conditionalOrExpression -> . conditionalAndExpression expt_27
    (314) conditionalOrExpression -> . conditionalAndExpression empty
    (315) conditionalAndExpression -> . inclusiveOrExpression expt_28
    (316) conditionalAndExpression -> . inclusiveOrExpression empty
    (317) inclusiveOrExpression -> . exclusiveOrExpression expt_29
    (318) inclusiveOrExpression -> . exclusiveOrExpression empty
    (319) exclusiveOrExpression -> . andExpression expt_30
    (320) exclusiveOrExpression -> . andExpression empty
    (321) andExpression -> . equalityExpression expt_31
    (322) andExpression -> . equalityExpression empty
    (323) equalityExpression -> . instanceOfExpression expt_32
    (324) equalityExpression -> . instanceOfExpression empty
    (325) instanceOfExpression -> . relationalExpression INSTANCEOF type
    (326) instanceOfExpression -> . relationalExpression empty
    (327) relationalExpression -> . shiftExpression expt_33
    (328) relationalExpression -> . shiftExpression empty
    (333) shiftExpression -> . additiveExpression expt_34
    (334) shiftExpression -> . additiveExpression empty
    (338) additiveExpression -> . multiplicativeExpression expt_35
    (339) additiveExpression -> . multiplicativeExpression empty
    (340) multiplicativeExpression -> . unaryExpression expt_36
    (341) multiplicativeExpression -> . unaryExpression empty
    (342) unaryExpression -> . PLUS unaryExpression
    (343) unaryExpression -> . DASH unaryExpression
    (344) unaryExpression -> . OP_INC unaryExpression
    (345) unaryExpression -> . OP_DEC unaryExpression
    (346) unaryExpression -> . unaryExpressionNotPlusMinus
    (347) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (348) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (349) unaryExpressionNotPlusMinus -> . castExpression
    (350) unaryExpressionNotPlusMinus -> . primary expt_37 expr_17
    (351) unaryExpressionNotPlusMinus -> . primary empty expr_17
    (352) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (353) castExpression -> . LPAREN expr_18 RPAREN unaryExpressionNotPlusMinus
    (354) primary -> . parExpression
    (355) primary -> . THIS expt_19 identifierSuffix
    (356) primary -> . THIS expt_19 empty
    (357) primary -> . THIS empty identifierSuffix
    (358) primary -> . THIS empty empty
    (359) primary -> . SUPER superSuffix
    (360) primary -> . literal
    (361) primary -> . NEW creator
    (362) primary -> . Identifier expt_19 identifierSuffix
    (363) primary -> . Identifier expt_19 empty
    (364) primary -> . Identifier empty identifierSuffix
    (365) primary -> . Identifier empty empty
    (366) primary -> . primitiveType expt_11 DOT CLASS
    (367) primary -> . primitiveType empty DOT CLASS
    (368) primary -> . VOID DOT CLASS
    (292) parExpression -> . LPAREN expression RPAREN
    (196) literal -> . integerLiteral
    (197) literal -> . FloatingPointLiteral
    (198) literal -> . CharacterLiteral
    (199) literal -> . StringLiteral
    (200) literal -> . booleanLiteral
    (201) literal -> . NULL
    (162) primitiveType -> . BOOLEAN
    (163) primitiveType -> . CHAR
    (164) primitiveType -> . BYTE
    (165) primitiveType -> . SHORT
    (166) primitiveType -> . INT
    (167) primitiveType -> . LONG
    (168) primitiveType -> . FLOAT
    (169) primitiveType -> . DOUBLE
    (524) integerLiteral -> . NUMBER
    (525) integerLiteral -> . HEX_NUMBER
    (526) integerLiteral -> . LONG_NUMBER
    (527) integerLiteral -> . LONG_HEX_NUMBER
    (521) FloatingPointLiteral -> . NON_INTEGER_1
    (522) FloatingPointLiteral -> . NON_INTEGER_2
    (523) FloatingPointLiteral -> . NON_INTEGER_3
    (202) booleanLiteral -> . TRUE
    (203) booleanLiteral -> . FALSE

    PLUS            shift and go to state 82
    DASH            shift and go to state 83
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 107
    TILDE           shift and go to state 110
    EXCLAMATION     shift and go to state 76
    LPAREN          shift and go to state 130
    THIS            shift and go to state 86
    SUPER           shift and go to state 136
    NEW             shift and go to state 108
    Identifier      shift and go to state 147
    VOID            shift and go to state 77
    CharacterLiteral shift and go to state 95
    StringLiteral   shift and go to state 116
    NULL            shift and go to state 126
    BOOLEAN         shift and go to state 118
    CHAR            shift and go to state 104
    BYTE            shift and go to state 113
    SHORT           shift and go to state 89
    INT             shift and go to state 96
    LONG            shift and go to state 80
    FLOAT           shift and go to state 134
    DOUBLE          shift and go to state 87
    NUMBER          shift and go to state 125
    HEX_NUMBER      shift and go to state 120
    LONG_NUMBER     shift and go to state 91
    LONG_HEX_NUMBER shift and go to state 106
    NON_INTEGER_1   shift and go to state 123
    NON_INTEGER_2   shift and go to state 121
    NON_INTEGER_3   shift and go to state 122
    TRUE            shift and go to state 79
    FALSE           shift and go to state 115

    equalityExpression             shift and go to state 100
    inclusiveOrExpression          shift and go to state 90
    exclusiveOrExpression          shift and go to state 102
    conditionalAndExpression       shift and go to state 78
    shiftExpression                shift and go to state 127
    primary                        shift and go to state 103
    booleanLiteral                 shift and go to state 81
    multiplicativeExpression       shift and go to state 124
    literal                        shift and go to state 109
    FloatingPointLiteral           shift and go to state 112
    integerLiteral                 shift and go to state 88
    additiveExpression             shift and go to state 93
    conditionalExpression          shift and go to state 228
    unaryExpression                shift and go to state 128
    parExpression                  shift and go to state 129
    relationalExpression           shift and go to state 84
    conditionalOrExpression        shift and go to state 101
    instanceOfExpression           shift and go to state 85
    castExpression                 shift and go to state 133
    unaryExpressionNotPlusMinus    shift and go to state 97
    primitiveType                  shift and go to state 117
    andExpression                  shift and go to state 98
    expression                     shift and go to state 1001

state 974

    (270) catchClause -> CATCH LPAREN formalParameter RPAREN . block
    (238) block -> . BLPAREN expt_18 BRPAREN
    (239) block -> . BLPAREN empty BRPAREN

    BLPAREN         shift and go to state 574

    block                          shift and go to state 1002

state 975

    (271) formalParameter -> variableModifiers type . variableDeclaratorId
    (130) variableDeclaratorId -> . Identifier expt_11
    (131) variableDeclaratorId -> . Identifier empty

    Identifier      shift and go to state 780

    variableDeclaratorId           shift and go to state 1003

state 976

    (277) switchLabel -> CASE enumConstantName COLON .

    CASE            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    DEFAULT         reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    ASSERT          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    IF              reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    FOR             reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    WHILE           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    DO              reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    TRY             reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    SWITCH          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    SYNCHRONIZED    reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    RETURN          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    THROW           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    BREAK           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    CONTINUE        reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    SEMI            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    Identifier      reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    BLPAREN         reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    PUBLIC          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    PROTECTED       reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    PRIVATE         reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    ABSTRACT        reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    STATIC          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    FINAL           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    STRICTFP        reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    AT              reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    PLUS            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    DASH            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    OP_INC          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    OP_DEC          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    TILDE           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    EXCLAMATION     reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    LPAREN          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    THIS            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    SUPER           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NEW             reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    VOID            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    CharacterLiteral reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    StringLiteral   reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NULL            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    BOOLEAN         reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    CHAR            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    BYTE            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    SHORT           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    INT             reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    LONG            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    FLOAT           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    DOUBLE          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NUMBER          reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    HEX_NUMBER      reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    LONG_NUMBER     reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    LONG_HEX_NUMBER reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_1   reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_2   reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_3   reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    TRUE            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    FALSE           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    CLASS           reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    ENUM            reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    INTERFACE       reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)
    BRPAREN         reduce using rule 277 (switchLabel -> CASE enumConstantName COLON .)


state 977

    (276) switchLabel -> CASE constantExpression COLON .

    CASE            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    DEFAULT         reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    ASSERT          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    IF              reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    FOR             reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    WHILE           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    DO              reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    TRY             reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    SWITCH          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    SYNCHRONIZED    reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    RETURN          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    THROW           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    BREAK           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    CONTINUE        reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    SEMI            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    Identifier      reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    BLPAREN         reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    PUBLIC          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    PROTECTED       reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    PRIVATE         reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    ABSTRACT        reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    STATIC          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    FINAL           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    STRICTFP        reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    AT              reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    PLUS            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    DASH            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    OP_INC          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    OP_DEC          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    TILDE           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    EXCLAMATION     reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    LPAREN          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    THIS            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    SUPER           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NEW             reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    VOID            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    CharacterLiteral reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    StringLiteral   reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NULL            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    BOOLEAN         reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    CHAR            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    BYTE            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    SHORT           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    INT             reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    LONG            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    FLOAT           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    DOUBLE          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NUMBER          reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    HEX_NUMBER      reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    LONG_NUMBER     reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    LONG_HEX_NUMBER reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_1   reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_2   reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_3   reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    TRUE            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    FALSE           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    CLASS           reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    ENUM            reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    INTERFACE       reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)
    BRPAREN         reduce using rule 276 (switchLabel -> CASE constantExpression COLON .)


state 978

    (106) methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .

    BRPAREN         reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    SEMI            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    STATIC          reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    PUBLIC          reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    PROTECTED       reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    PRIVATE         reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    ABSTRACT        reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    FINAL           reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    NATIVE          reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    SYNCHRONIZED    reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    TRANSIENT       reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    VOLATILE        reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    STRICTFP        reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    AT              reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    BLPAREN         reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    VOID            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    Identifier      reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    LESS            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    INTERFACE       reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    CLASS           reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    ENUM            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    BOOLEAN         reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    CHAR            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    BYTE            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    SHORT           reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    INT             reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    LONG            reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    FLOAT           reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)
    DOUBLE          reduce using rule 106 (methodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList expr_5 .)


state 979

    (108) methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .

    BRPAREN         reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    SEMI            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    STATIC          reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    PUBLIC          reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    PROTECTED       reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    PRIVATE         reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    ABSTRACT        reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    FINAL           reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    NATIVE          reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    SYNCHRONIZED    reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    TRANSIENT       reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    VOLATILE        reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    STRICTFP        reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    AT              reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    BLPAREN         reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    VOID            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    Identifier      reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    LESS            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    INTERFACE       reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    CLASS           reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    ENUM            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    BOOLEAN         reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    CHAR            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    BYTE            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    SHORT           reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    INT             reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    LONG            reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    FLOAT           reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)
    DOUBLE          reduce using rule 108 (methodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList expr_5 .)


state 980

    (458) expt_17 -> expt_17 COMMA qualifiedName .

    COMMA           reduce using rule 458 (expt_17 -> expt_17 COMMA qualifiedName .)
    BLPAREN         reduce using rule 458 (expt_17 -> expt_17 COMMA qualifiedName .)
    SEMI            reduce using rule 458 (expt_17 -> expt_17 COMMA qualifiedName .)


state 981

    (192) explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments . SUPER arguments SEMI

    SUPER           shift and go to state 1004


state 982

    (193) explicitConstructorInvocation -> primary DOT empty . SUPER arguments SEMI

    SUPER           shift and go to state 1005


state 983

    (190) explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments . SEMI

    SEMI            shift and go to state 1006


state 984

    (189) constructorBody -> BLPAREN empty empty BRPAREN .

    BRPAREN         reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    SEMI            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    STATIC          reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    PUBLIC          reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    PROTECTED       reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    PRIVATE         reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    ABSTRACT        reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    FINAL           reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    NATIVE          reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    TRANSIENT       reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    VOLATILE        reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    STRICTFP        reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    AT              reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    BLPAREN         reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    VOID            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    Identifier      reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    LESS            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    INTERFACE       reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    CLASS           reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    ENUM            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    BOOLEAN         reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    CHAR            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    BYTE            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    SHORT           reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    INT             reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    LONG            reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    FLOAT           reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)
    DOUBLE          reduce using rule 189 (constructorBody -> BLPAREN empty empty BRPAREN .)


state 985

    (191) explicitConstructorInvocation -> empty expr_9 arguments . SEMI

    SEMI            shift and go to state 1007


state 986

    (188) constructorBody -> BLPAREN empty expt_18 BRPAREN .

    BRPAREN         reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    SEMI            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    STATIC          reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    PUBLIC          reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    PROTECTED       reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    PRIVATE         reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    ABSTRACT        reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    FINAL           reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    NATIVE          reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    SYNCHRONIZED    reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    TRANSIENT       reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    VOLATILE        reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    STRICTFP        reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    AT              reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    BLPAREN         reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    VOID            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    Identifier      reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    LESS            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    INTERFACE       reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    CLASS           reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    ENUM            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    BOOLEAN         reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    CHAR            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    BYTE            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    SHORT           reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    INT             reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    LONG            reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    FLOAT           reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)
    DOUBLE          reduce using rule 188 (constructorBody -> BLPAREN empty expt_18 BRPAREN .)


state 987

    (187) constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .

    BRPAREN         reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    SEMI            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    STATIC          reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    PUBLIC          reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    PROTECTED       reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    PRIVATE         reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    ABSTRACT        reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    FINAL           reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    NATIVE          reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    SYNCHRONIZED    reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    TRANSIENT       reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    VOLATILE        reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    STRICTFP        reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    AT              reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    BLPAREN         reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    VOID            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    Identifier      reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    LESS            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    INTERFACE       reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    CLASS           reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    ENUM            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    BOOLEAN         reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    CHAR            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    BYTE            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    SHORT           reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    INT             reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    LONG            reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    FLOAT           reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)
    DOUBLE          reduce using rule 187 (constructorBody -> BLPAREN explicitConstructorInvocation empty BRPAREN .)


state 988

    (186) constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .

    BRPAREN         reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    SEMI            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    STATIC          reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    PUBLIC          reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    PROTECTED       reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    PRIVATE         reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    ABSTRACT        reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    FINAL           reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    NATIVE          reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    SYNCHRONIZED    reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    TRANSIENT       reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    VOLATILE        reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    STRICTFP        reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    AT              reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    BLPAREN         reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    VOID            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    Identifier      reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    LESS            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    INTERFACE       reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    CLASS           reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    ENUM            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    BOOLEAN         reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    CHAR            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    BYTE            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    SHORT           reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    INT             reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    LONG            reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    FLOAT           reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)
    DOUBLE          reduce using rule 186 (constructorBody -> BLPAREN explicitConstructorInvocation expt_18 BRPAREN .)


state 989

    (182) formalParameterDeclsRest -> variableDeclaratorId COMMA formalParameterDecls .

    RPAREN          reduce using rule 182 (formalParameterDeclsRest -> variableDeclaratorId COMMA formalParameterDecls .)


state 990

    (112) interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .

    BRPAREN         reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    SEMI            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    PUBLIC          reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    PROTECTED       reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    PRIVATE         reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    STATIC          reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    ABSTRACT        reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    FINAL           reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    NATIVE          reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    SYNCHRONIZED    reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    TRANSIENT       reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    VOLATILE        reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    STRICTFP        reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    AT              reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    VOID            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    LESS            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    INTERFACE       reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    CLASS           reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    ENUM            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    Identifier      reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    BOOLEAN         reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    CHAR            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    BYTE            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    SHORT           reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    INT             reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    LONG            reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    FLOAT           reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)
    DOUBLE          reduce using rule 112 (interfaceMethodDeclaratorRest -> formalParameters expt_11 THROWS qualifiedNameList SEMI .)


state 991

    (114) interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .

    BRPAREN         reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    SEMI            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    PUBLIC          reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    PROTECTED       reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    PRIVATE         reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    STATIC          reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    ABSTRACT        reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    FINAL           reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    NATIVE          reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    SYNCHRONIZED    reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    TRANSIENT       reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    VOLATILE        reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    STRICTFP        reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    AT              reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    VOID            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    LESS            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    INTERFACE       reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    CLASS           reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    ENUM            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    Identifier      reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    BOOLEAN         reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    CHAR            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    BYTE            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    SHORT           reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    INT             reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    LONG            reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    FLOAT           reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)
    DOUBLE          reduce using rule 114 (interfaceMethodDeclaratorRest -> formalParameters empty THROWS qualifiedNameList SEMI .)


state 992

    (291) forUpdate -> expressionList .

    RPAREN          reduce using rule 291 (forUpdate -> expressionList .)


state 993

    (283) forControl -> forInit SEMI empty SEMI empty .

    RPAREN          reduce using rule 283 (forControl -> forInit SEMI empty SEMI empty .)


state 994

    (282) forControl -> forInit SEMI empty SEMI forUpdate .

    RPAREN          reduce using rule 282 (forControl -> forInit SEMI empty SEMI forUpdate .)


state 995

    (281) forControl -> forInit SEMI expression SEMI empty .

    RPAREN          reduce using rule 281 (forControl -> forInit SEMI expression SEMI empty .)


state 996

    (280) forControl -> forInit SEMI expression SEMI forUpdate .

    RPAREN          reduce using rule 280 (forControl -> forInit SEMI expression SEMI forUpdate .)


state 997

    (287) forControl -> empty SEMI empty SEMI empty .

    RPAREN          reduce using rule 287 (forControl -> empty SEMI empty SEMI empty .)


state 998

    (286) forControl -> empty SEMI empty SEMI forUpdate .

    RPAREN          reduce using rule 286 (forControl -> empty SEMI empty SEMI forUpdate .)


state 999

    (285) forControl -> empty SEMI expression SEMI empty .

    RPAREN          reduce using rule 285 (forControl -> empty SEMI expression SEMI empty .)


state 1000

    (284) forControl -> empty SEMI expression SEMI forUpdate .

    RPAREN          reduce using rule 284 (forControl -> empty SEMI expression SEMI forUpdate .)


state 1001

    (290) enhancedForControl -> variableModifiers type Identifier COLON expression .

    RPAREN          reduce using rule 290 (enhancedForControl -> variableModifiers type Identifier COLON expression .)


state 1002

    (270) catchClause -> CATCH LPAREN formalParameter RPAREN block .

    CATCH           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINALLY         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BRPAREN         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ASSERT          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    IF              reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FOR             reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    WHILE           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DO              reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRY             reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SWITCH          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SYNCHRONIZED    reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    RETURN          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THROW           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BREAK           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CONTINUE        reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SEMI            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    Identifier      reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BLPAREN         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PUBLIC          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PROTECTED       reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PRIVATE         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ABSTRACT        reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STATIC          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINAL           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STRICTFP        reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    AT              reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PLUS            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DASH            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_INC          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_DEC          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TILDE           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    EXCLAMATION     reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LPAREN          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THIS            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SUPER           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NEW             reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    VOID            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CharacterLiteral reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    StringLiteral   reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NULL            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BOOLEAN         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CHAR            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BYTE            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SHORT           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    INT             reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FLOAT           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DOUBLE          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NUMBER          reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    HEX_NUMBER      reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_NUMBER     reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_HEX_NUMBER reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_1   reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_2   reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_3   reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRUE            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FALSE           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CLASS           reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ENUM            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    INTERFACE       reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ELSE            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CASE            reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DEFAULT         reduce using rule 270 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)


state 1003

    (271) formalParameter -> variableModifiers type variableDeclaratorId .

    RPAREN          reduce using rule 271 (formalParameter -> variableModifiers type variableDeclaratorId .)


state 1004

    (192) explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER . arguments SEMI
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 1008

state 1005

    (193) explicitConstructorInvocation -> primary DOT empty SUPER . arguments SEMI
    (397) arguments -> . LPAREN expressionList RPAREN
    (398) arguments -> . LPAREN empty RPAREN

    LPAREN          shift and go to state 236

    arguments                      shift and go to state 1009

state 1006

    (190) explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .

    ASSERT          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    IF              reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    FOR             reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    WHILE           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    DO              reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    TRY             reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    SWITCH          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    SYNCHRONIZED    reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    RETURN          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    THROW           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    BREAK           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    CONTINUE        reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    SEMI            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    Identifier      reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    BLPAREN         reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    PUBLIC          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    PROTECTED       reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    PRIVATE         reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    ABSTRACT        reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    STATIC          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    FINAL           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    STRICTFP        reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    AT              reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    PLUS            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    DASH            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    OP_INC          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    OP_DEC          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    TILDE           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    EXCLAMATION     reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    LPAREN          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    THIS            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    SUPER           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NEW             reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    VOID            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    CharacterLiteral reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    StringLiteral   reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NULL            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    BOOLEAN         reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    CHAR            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    BYTE            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    SHORT           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    INT             reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    LONG            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    FLOAT           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    DOUBLE          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NUMBER          reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    HEX_NUMBER      reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    LONG_NUMBER     reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NON_INTEGER_1   reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NON_INTEGER_2   reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    NON_INTEGER_3   reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    TRUE            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    FALSE           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    BRPAREN         reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    CLASS           reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    ENUM            reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)
    INTERFACE       reduce using rule 190 (explicitConstructorInvocation -> nonWildcardTypeArguments expr_9 arguments SEMI .)


state 1007

    (191) explicitConstructorInvocation -> empty expr_9 arguments SEMI .

    ASSERT          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    IF              reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    FOR             reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    WHILE           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    DO              reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    TRY             reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    SWITCH          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    SYNCHRONIZED    reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    RETURN          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    THROW           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    BREAK           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    CONTINUE        reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    SEMI            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    Identifier      reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    BLPAREN         reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    PUBLIC          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    PROTECTED       reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    PRIVATE         reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    ABSTRACT        reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    STATIC          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    FINAL           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    STRICTFP        reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    AT              reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    PLUS            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    DASH            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    OP_INC          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    OP_DEC          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    TILDE           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    EXCLAMATION     reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    LPAREN          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    THIS            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    SUPER           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NEW             reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    VOID            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    CharacterLiteral reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    StringLiteral   reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NULL            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    BOOLEAN         reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    CHAR            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    BYTE            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    SHORT           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    INT             reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    LONG            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    FLOAT           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    DOUBLE          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NUMBER          reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    HEX_NUMBER      reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    LONG_NUMBER     reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NON_INTEGER_1   reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NON_INTEGER_2   reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    NON_INTEGER_3   reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    TRUE            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    FALSE           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    BRPAREN         reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    CLASS           reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    ENUM            reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)
    INTERFACE       reduce using rule 191 (explicitConstructorInvocation -> empty expr_9 arguments SEMI .)


state 1008

    (192) explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments . SEMI

    SEMI            shift and go to state 1010


state 1009

    (193) explicitConstructorInvocation -> primary DOT empty SUPER arguments . SEMI

    SEMI            shift and go to state 1011


state 1010

    (192) explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .

    ASSERT          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    IF              reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    FOR             reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    WHILE           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    DO              reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    TRY             reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    SWITCH          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    SYNCHRONIZED    reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    RETURN          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    THROW           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    BREAK           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    CONTINUE        reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    SEMI            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    Identifier      reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    BLPAREN         reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    PUBLIC          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    PROTECTED       reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    PRIVATE         reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    ABSTRACT        reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    STATIC          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    FINAL           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    STRICTFP        reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    AT              reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    PLUS            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    DASH            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    OP_INC          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    OP_DEC          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    TILDE           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    EXCLAMATION     reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    LPAREN          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    THIS            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    SUPER           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NEW             reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    VOID            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    CharacterLiteral reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    StringLiteral   reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NULL            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    BOOLEAN         reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    CHAR            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    BYTE            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    SHORT           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    INT             reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    LONG            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    FLOAT           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    DOUBLE          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NUMBER          reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    HEX_NUMBER      reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    LONG_NUMBER     reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NON_INTEGER_1   reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NON_INTEGER_2   reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    NON_INTEGER_3   reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    TRUE            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    FALSE           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    BRPAREN         reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    CLASS           reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    ENUM            reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)
    INTERFACE       reduce using rule 192 (explicitConstructorInvocation -> primary DOT nonWildcardTypeArguments SUPER arguments SEMI .)


state 1011

    (193) explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .

    ASSERT          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    IF              reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    FOR             reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    WHILE           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    DO              reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    TRY             reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    SWITCH          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    SYNCHRONIZED    reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    RETURN          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    THROW           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    BREAK           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    CONTINUE        reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    SEMI            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    Identifier      reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    BLPAREN         reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    PUBLIC          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    PROTECTED       reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    PRIVATE         reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    ABSTRACT        reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    STATIC          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    FINAL           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    STRICTFP        reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    AT              reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    PLUS            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    DASH            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    OP_INC          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    OP_DEC          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    TILDE           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    EXCLAMATION     reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    LPAREN          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    THIS            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    SUPER           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NEW             reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    VOID            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    CharacterLiteral reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    StringLiteral   reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NULL            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    BOOLEAN         reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    CHAR            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    BYTE            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    SHORT           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    INT             reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    LONG            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    FLOAT           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    DOUBLE          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NUMBER          reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    HEX_NUMBER      reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    LONG_NUMBER     reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NON_INTEGER_1   reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NON_INTEGER_2   reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    NON_INTEGER_3   reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    TRUE            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    FALSE           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    BRPAREN         reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    CLASS           reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    ENUM            reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)
    INTERFACE       reduce using rule 193 (explicitConstructorInvocation -> primary DOT empty SUPER arguments SEMI .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AT in state 0 resolved as shift
WARNING: shift/reduce conflict for AT in state 2 resolved as shift
WARNING: shift/reduce conflict for AT in state 7 resolved as shift
WARNING: shift/reduce conflict for DOT in state 10 resolved as shift
WARNING: shift/reduce conflict for AT in state 13 resolved as shift
WARNING: shift/reduce conflict for AT in state 15 resolved as shift
WARNING: shift/reduce conflict for AT in state 23 resolved as shift
WARNING: shift/reduce conflict for AT in state 27 resolved as shift
WARNING: shift/reduce conflict for AT in state 33 resolved as shift
WARNING: shift/reduce conflict for AT in state 34 resolved as shift
WARNING: shift/reduce conflict for DOT in state 38 resolved as shift
WARNING: shift/reduce conflict for AT in state 41 resolved as shift
WARNING: shift/reduce conflict for AT in state 47 resolved as shift
WARNING: shift/reduce conflict for AT in state 54 resolved as shift
WARNING: shift/reduce conflict for AT in state 55 resolved as shift
WARNING: shift/reduce conflict for AT in state 67 resolved as shift
WARNING: shift/reduce conflict for AT in state 69 resolved as shift
WARNING: shift/reduce conflict for DOT in state 86 resolved as shift
WARNING: shift/reduce conflict for LESS in state 93 resolved as shift
WARNING: shift/reduce conflict for MORE in state 93 resolved as shift
WARNING: shift/reduce conflict for DOT in state 94 resolved as shift
WARNING: shift/reduce conflict for LESS in state 127 resolved as shift
WARNING: shift/reduce conflict for MORE in state 127 resolved as shift
WARNING: shift/reduce conflict for AT in state 137 resolved as shift
WARNING: shift/reduce conflict for DOT in state 147 resolved as shift
WARNING: shift/reduce conflict for DOT in state 162 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 162 resolved as shift
WARNING: shift/reduce conflict for DOT in state 163 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 163 resolved as shift
WARNING: shift/reduce conflict for LESS in state 171 resolved as shift
WARNING: shift/reduce conflict for MORE in state 171 resolved as shift
WARNING: shift/reduce conflict for DOT in state 176 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 176 resolved as shift
WARNING: shift/reduce conflict for DOT in state 177 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 177 resolved as shift
WARNING: shift/reduce conflict for LESS in state 202 resolved as shift
WARNING: shift/reduce conflict for LESS in state 216 resolved as shift
WARNING: shift/reduce conflict for MORE in state 216 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_ADD in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_SUB in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_MUL in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_DIV in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_AND in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_OR in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_XOR in state 228 resolved as shift
WARNING: shift/reduce conflict for ASS_MOD in state 228 resolved as shift
WARNING: shift/reduce conflict for LESS in state 228 resolved as shift
WARNING: shift/reduce conflict for MORE in state 228 resolved as shift
WARNING: shift/reduce conflict for DOT in state 230 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 231 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 232 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 260 resolved as shift
WARNING: shift/reduce conflict for DOT in state 340 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 340 resolved as shift
WARNING: shift/reduce conflict for AT in state 359 resolved as shift
WARNING: shift/reduce conflict for AT in state 418 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 452 resolved as shift
WARNING: shift/reduce conflict for AT in state 462 resolved as shift
WARNING: shift/reduce conflict for AT in state 466 resolved as shift
WARNING: shift/reduce conflict for AT in state 476 resolved as shift
WARNING: shift/reduce conflict for AT in state 506 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 531 resolved as shift
WARNING: shift/reduce conflict for AT in state 555 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 574 resolved as shift
WARNING: shift/reduce conflict for AT in state 574 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 574 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 574 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 574 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 574 resolved as shift
WARNING: shift/reduce conflict for INT in state 574 resolved as shift
WARNING: shift/reduce conflict for LONG in state 574 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 574 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 574 resolved as shift
WARNING: shift/reduce conflict for AT in state 606 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 645 resolved as shift
WARNING: shift/reduce conflict for FLPAREN in state 650 resolved as shift
WARNING: shift/reduce conflict for DOT in state 662 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 680 resolved as shift
WARNING: shift/reduce conflict for AT in state 680 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 680 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 680 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 680 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 680 resolved as shift
WARNING: shift/reduce conflict for INT in state 680 resolved as shift
WARNING: shift/reduce conflict for LONG in state 680 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 680 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 680 resolved as shift
WARNING: shift/reduce conflict for AT in state 704 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 742 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 742 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 742 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 742 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 742 resolved as shift
WARNING: shift/reduce conflict for INT in state 742 resolved as shift
WARNING: shift/reduce conflict for LONG in state 742 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 742 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 742 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 826 resolved as shift
WARNING: shift/reduce conflict for THIS in state 835 resolved as shift
WARNING: shift/reduce conflict for SUPER in state 835 resolved as shift
WARNING: shift/reduce conflict for NEW in state 835 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 835 resolved as shift
WARNING: shift/reduce conflict for VOID in state 835 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 835 resolved as shift
WARNING: shift/reduce conflict for CharacterLiteral in state 835 resolved as shift
WARNING: shift/reduce conflict for StringLiteral in state 835 resolved as shift
WARNING: shift/reduce conflict for NULL in state 835 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 835 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 835 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 835 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 835 resolved as shift
WARNING: shift/reduce conflict for INT in state 835 resolved as shift
WARNING: shift/reduce conflict for LONG in state 835 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 835 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 835 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 835 resolved as shift
WARNING: shift/reduce conflict for HEX_NUMBER in state 835 resolved as shift
WARNING: shift/reduce conflict for LONG_NUMBER in state 835 resolved as shift
WARNING: shift/reduce conflict for LONG_HEX_NUMBER in state 835 resolved as shift
WARNING: shift/reduce conflict for NON_INTEGER_1 in state 835 resolved as shift
WARNING: shift/reduce conflict for NON_INTEGER_2 in state 835 resolved as shift
WARNING: shift/reduce conflict for NON_INTEGER_3 in state 835 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 835 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 835 resolved as shift
WARNING: shift/reduce conflict for CASE in state 876 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 876 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 876 resolved as shift
WARNING: shift/reduce conflict for AT in state 876 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 876 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 876 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 876 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 876 resolved as shift
WARNING: shift/reduce conflict for INT in state 876 resolved as shift
WARNING: shift/reduce conflict for LONG in state 876 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 876 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 876 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 898 resolved as shift
WARNING: shift/reduce conflict for AT in state 898 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 898 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 898 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 898 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 898 resolved as shift
WARNING: shift/reduce conflict for INT in state 898 resolved as shift
WARNING: shift/reduce conflict for LONG in state 898 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 898 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 898 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 899 resolved as shift
WARNING: shift/reduce conflict for AT in state 899 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 899 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 899 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 899 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 899 resolved as shift
WARNING: shift/reduce conflict for INT in state 899 resolved as shift
WARNING: shift/reduce conflict for LONG in state 899 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 899 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 899 resolved as shift
WARNING: shift/reduce conflict for DOT in state 928 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 935 resolved as shift
WARNING: shift/reduce conflict for AT in state 935 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 935 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 935 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 935 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 935 resolved as shift
WARNING: shift/reduce conflict for INT in state 935 resolved as shift
WARNING: shift/reduce conflict for LONG in state 935 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 935 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 935 resolved as shift
WARNING: shift/reduce conflict for DOT in state 952 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 955 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 956 resolved as shift
WARNING: shift/reduce conflict for AT in state 956 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 956 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 956 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 956 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 956 resolved as shift
WARNING: shift/reduce conflict for INT in state 956 resolved as shift
WARNING: shift/reduce conflict for LONG in state 956 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 956 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 956 resolved as shift
WARNING: shift/reduce conflict for Identifier in state 958 resolved as shift
WARNING: shift/reduce conflict for AT in state 958 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 958 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 958 resolved as shift
WARNING: shift/reduce conflict for BYTE in state 958 resolved as shift
WARNING: shift/reduce conflict for SHORT in state 958 resolved as shift
WARNING: shift/reduce conflict for INT in state 958 resolved as shift
WARNING: shift/reduce conflict for LONG in state 958 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 958 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 958 resolved as shift
WARNING: reduce/reduce conflict in state 430 resolved using rule (classOrInterfaceType -> Identifier empty empty)
WARNING: rejected rule (primary -> Identifier empty empty) in state 430
WARNING: reduce/reduce conflict in state 658 resolved using rule (classOrInterfaceModifier -> FINAL)
WARNING: rejected rule (variableModifier -> FINAL) in state 658
WARNING: reduce/reduce conflict in state 676 resolved using rule (classOrInterfaceModifier -> annotation)
WARNING: rejected rule (variableModifier -> annotation) in state 676
WARNING: reduce/reduce conflict in state 952 resolved using rule (expr_9 -> THIS)
WARNING: rejected rule (empty -> <empty>) in state 952
