shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 1 resolved as shift.
shift/reduce conflict in state 5 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 9 resolved as shift.
shift/reduce conflict in state 12 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 14 resolved as shift.
shift/reduce conflict in state 17 resolved as shift.
shift/reduce conflict in state 25 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 29 resolved as shift.
shift/reduce conflict in state 35 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
shift/reduce conflict in state 41 resolved as shift.
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
reduce/reduce conflict in state 43 resolved using rule 273 (expr_1 -> empty .).
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 52 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 53 resolved as shift.
shift/reduce conflict in state 70 resolved as shift.
shift/reduce conflict in state 80 resolved as shift.
shift/reduce conflict in state 80 resolved as shift.
shift/reduce conflict in state 81 resolved as shift.
shift/reduce conflict in state 85 resolved as shift.
shift/reduce conflict in state 87 resolved as shift.
shift/reduce conflict in state 88 resolved as shift.
shift/reduce conflict in state 88 resolved as shift.
shift/reduce conflict in state 92 resolved as shift.
shift/reduce conflict in state 94 resolved as shift.
shift/reduce conflict in state 96 resolved as shift.
shift/reduce conflict in state 97 resolved as shift.
shift/reduce conflict in state 97 resolved as shift.
shift/reduce conflict in state 103 resolved as shift.
shift/reduce conflict in state 110 resolved as shift.
shift/reduce conflict in state 117 resolved as shift.
shift/reduce conflict in state 117 resolved as shift.
shift/reduce conflict in state 120 resolved as shift.
shift/reduce conflict in state 120 resolved as shift.
shift/reduce conflict in state 121 resolved as shift.
shift/reduce conflict in state 121 resolved as shift.
shift/reduce conflict in state 121 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 140 resolved as shift.
shift/reduce conflict in state 156 resolved as shift.
shift/reduce conflict in state 156 resolved as shift.
shift/reduce conflict in state 163 resolved as shift.
shift/reduce conflict in state 163 resolved as shift.
shift/reduce conflict in state 173 resolved as shift.
shift/reduce conflict in state 194 resolved as shift.
shift/reduce conflict in state 197 resolved as shift.
shift/reduce conflict in state 197 resolved as shift.
shift/reduce conflict in state 208 resolved as shift.
shift/reduce conflict in state 208 resolved as shift.
shift/reduce conflict in state 219 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 221 resolved as shift.
shift/reduce conflict in state 222 resolved as shift.
shift/reduce conflict in state 224 resolved as shift.
shift/reduce conflict in state 224 resolved as shift.
shift/reduce conflict in state 225 resolved as shift.
shift/reduce conflict in state 244 resolved as shift.
shift/reduce conflict in state 250 resolved as shift.
reduce/reduce conflict in state 253 resolved using rule 336 (expr_28 -> empty .).
reduce/reduce conflict in state 253 resolved using rule 336 (expr_28 -> empty .).
shift/reduce conflict in state 271 resolved as shift.
shift/reduce conflict in state 288 resolved as shift.
shift/reduce conflict in state 292 resolved as shift.
reduce/reduce conflict in state 327 resolved using rule 357 (expr_typeArguments -> empty .).
reduce/reduce conflict in state 327 resolved using rule 357 (expr_typeArguments -> empty .).
shift/reduce conflict in state 335 resolved as shift.
shift/reduce conflict in state 340 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 349 resolved as shift.
shift/reduce conflict in state 387 resolved as shift.
shift/reduce conflict in state 393 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 397 resolved as shift.
shift/reduce conflict in state 415 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 440 resolved as shift.
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 441 resolved using rule 289 (expr_8 -> empty .).
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 442 resolved as shift.
shift/reduce conflict in state 469 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
shift/reduce conflict in state 474 resolved as shift.
reduce/reduce conflict in state 477 resolved using rule 279 (expr_4 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 477 resolved using rule 289 (expr_8 -> empty .).
shift/reduce conflict in state 486 resolved as shift.
shift/reduce conflict in state 496 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
shift/reduce conflict in state 497 resolved as shift.
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
reduce/reduce conflict in state 499 resolved using rule 289 (expr_8 -> empty .).
shift/reduce conflict in state 522 resolved as shift.
shift/reduce conflict in state 525 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 530 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 547 resolved as shift.
shift/reduce conflict in state 573 resolved as shift.
shift/reduce conflict in state 575 resolved as shift.
shift/reduce conflict in state 580 resolved as shift.
shift/reduce conflict in state 586 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
shift/reduce conflict in state 587 resolved as shift.
reduce/reduce conflict in state 594 resolved using rule 15 (classOrInterfaceModifier -> FINAL .).
reduce/reduce conflict in state 594 resolved using rule 15 (classOrInterfaceModifier -> FINAL .).
shift/reduce conflict in state 597 resolved as shift.
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
reduce/reduce conflict in state 606 resolved using rule 379 (expr_blockStatment -> empty .).
shift/reduce conflict in state 608 resolved as shift.
reduce/reduce conflict in state 614 resolved using rule 9 (classOrInterfaceModifier -> annotation .).
reduce/reduce conflict in state 614 resolved using rule 9 (classOrInterfaceModifier -> annotation .).
shift/reduce conflict in state 626 resolved as shift.
shift/reduce conflict in state 631 resolved as shift.
shift/reduce conflict in state 631 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 634 resolved as shift.
shift/reduce conflict in state 640 resolved as shift.
reduce/reduce conflict in state 655 resolved using rule 286 (expr_7 -> empty .).
reduce/reduce conflict in state 655 resolved using rule 286 (expr_7 -> empty .).
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 662 resolved as shift.
shift/reduce conflict in state 672 resolved as shift.
shift/reduce conflict in state 675 resolved as shift.
shift/reduce conflict in state 689 resolved as shift.
shift/reduce conflict in state 704 resolved as shift.
shift/reduce conflict in state 707 resolved as shift.
shift/reduce conflict in state 727 resolved as shift.
shift/reduce conflict in state 734 resolved as shift.
shift/reduce conflict in state 734 resolved as shift.
shift/reduce conflict in state 741 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 746 resolved as shift.
shift/reduce conflict in state 749 resolved as shift.
shift/reduce conflict in state 774 resolved as shift.
shift/reduce conflict in state 774 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 780 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
shift/reduce conflict in state 795 resolved as shift.
reduce/reduce conflict in state 797 resolved using rule 376 (expr_45 -> empty .).
reduce/reduce conflict in state 797 resolved using rule 376 (expr_45 -> empty .).
shift/reduce conflict in state 809 resolved as shift.
shift/reduce conflict in state 816 resolved as shift.
shift/reduce conflict in state 824 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 829 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 837 resolved as shift.
shift/reduce conflict in state 842 resolved as shift.
shift/reduce conflict in state 842 resolved as shift.


Unused terminals:

   GENERIC
   NEWLINE
   GOTO
   VAR
   LCOMMENT
   FUTURE
   ASS_SHRR
   REST
   OPERATOR
   INNER
   CAST
   MCOMMENT
   ASS_SHR
   ASS_SHL
   CONST
   OUTER
   OP_LE
   OP_SHRR
   OP_SHR
   OP_SHL
   OP_GE

Grammar

Rule 1     compilationUnit -> annotations expr_2
Rule 2     compilationUnit -> expr_3 expr_0 expr_1
Rule 3     packageDeclaration -> PACKAGE qualifiedName SEMI
Rule 4     importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI
Rule 5     typeDeclaration -> classOrInterfaceDeclaration
Rule 6     typeDeclaration -> SEMI
Rule 7     classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6
Rule 8     classOrInterfaceModifiers -> expr_7
Rule 9     classOrInterfaceModifier -> annotation
Rule 10    classOrInterfaceModifier -> PUBLIC
Rule 11    classOrInterfaceModifier -> PROTECTED
Rule 12    classOrInterfaceModifier -> PRIVATE
Rule 13    classOrInterfaceModifier -> ABSTRACT
Rule 14    classOrInterfaceModifier -> STATIC
Rule 15    classOrInterfaceModifier -> FINAL
Rule 16    classOrInterfaceModifier -> STRICTFP
Rule 17    modifiers -> expr_8
Rule 18    classDeclaration -> normalClassDeclaration
Rule 19    classDeclaration -> enumDeclaration
Rule 20    normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody
Rule 21    typeParameters -> LESS typeParameter expr_12 MORE
Rule 22    typeParameter -> Identifier expr_13
Rule 23    typeBound -> type expr_14
Rule 24    enumDeclaration -> ENUM Identifier expr_11 enumBody
Rule 25    enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN
Rule 26    enumConstants -> enumConstant expr_18
Rule 27    enumConstant -> expr_19 Identifier expr_20 expr_21
Rule 28    enumBodyDeclarations -> SEMI expr_22
Rule 29    interfaceDeclaration -> normalInterfaceDeclaration
Rule 30    interfaceDeclaration -> annotationTypeDeclaration
Rule 31    normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody
Rule 32    typeList -> type expr_24
Rule 33    classBody -> BLPAREN expr_22 BRPAREN
Rule 34    interfaceBody -> BLPAREN expr_25 BRPAREN
Rule 35    classBodyDeclaration -> SEMI
Rule 36    classBodyDeclaration -> expr_4 block
Rule 37    classBodyDeclaration -> modifiers memberDecl
Rule 38    memberDecl -> genericMethodOrConstructorDecl
Rule 39    memberDecl -> memberDeclaration
Rule 40    memberDecl -> VOID Identifier voidMethodDeclaratorRest
Rule 41    memberDecl -> Identifier constructorDeclaratorRest
Rule 42    memberDecl -> interfaceDeclaration
Rule 43    memberDecl -> classDeclaration
Rule 44    memberDeclaration -> type expr_26
Rule 45    genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest
Rule 46    genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest
Rule 47    genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest
Rule 48    methodDeclaration -> Identifier methodDeclaratorRest
Rule 49    fieldDeclaration -> variableDeclarators SEMI
Rule 50    interfaceBodyDeclaration -> modifiers interfaceMemberDecl
Rule 51    interfaceBodyDeclaration -> SEMI
Rule 52    interfaceMemberDecl -> interfaceMethodOrFieldDecl
Rule 53    interfaceMemberDecl -> interfaceGenericMethodDecl
Rule 54    interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest
Rule 55    interfaceMemberDecl -> interfaceDeclaration
Rule 56    interfaceMemberDecl -> classDeclaration
Rule 57    interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest
Rule 58    interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI
Rule 59    interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest
Rule 60    methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody
Rule 61    voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody
Rule 62    interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI
Rule 63    interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest
Rule 64    voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI
Rule 65    constructorDeclaratorRest -> formalParameters throwsList constructorBody
Rule 66    constantDeclarator -> Identifier constantDeclaratorRest
Rule 67    variableDeclarators -> variableDeclarator expr_31
Rule 68    variableDeclarator -> variableDeclaratorId expr_32
Rule 69    constantDeclaratorsRest -> constantDeclaratorRest expr_33
Rule 70    constantDeclaratorRest -> expr_28 EQUALS variableInitializer
Rule 71    variableDeclaratorId -> Identifier expr_28
Rule 72    variableInitializer -> arrayInitializer
Rule 73    variableInitializer -> expression
Rule 74    arrayInitializer -> BLPAREN expr_36 BRPAREN
Rule 75    modifier -> annotation
Rule 76    modifier -> PUBLIC
Rule 77    modifier -> PROTECTED
Rule 78    modifier -> PRIVATE
Rule 79    modifier -> STATIC
Rule 80    modifier -> ABSTRACT
Rule 81    modifier -> FINAL
Rule 82    modifier -> NATIVE
Rule 83    modifier -> SYNCHRONIZED
Rule 84    modifier -> TRANSIENT
Rule 85    modifier -> VOLATILE
Rule 86    modifier -> STRICTFP
Rule 87    packageOrTypeName -> qualifiedName
Rule 88    enumConstantName -> Identifier
Rule 89    typeName -> qualifiedName
Rule 90    type -> classOrInterfaceType expr_28
Rule 91    type -> primitiveType expr_28
Rule 92    classOrInterfaceType -> Identifier expr_typeArguments expr_38
Rule 93    primitiveType -> BOOLEAN
Rule 94    primitiveType -> CHAR
Rule 95    primitiveType -> BYTE
Rule 96    primitiveType -> SHORT
Rule 97    primitiveType -> INT
Rule 98    primitiveType -> LONG
Rule 99    primitiveType -> FLOAT
Rule 100   primitiveType -> DOUBLE
Rule 101   variableModifier -> FINAL
Rule 102   variableModifier -> annotation
Rule 103   typeArguments -> LESS typeArgument expr_39 MORE
Rule 104   typeArgument -> type
Rule 105   typeArgument -> QUES expr_41
Rule 106   qualifiedNameList -> qualifiedName expr_42
Rule 107   formalParameters -> LPAREN expr_43 RPAREN
Rule 108   formalParameterDecls -> variableModifiers type formalParameterDeclsRest
Rule 109   formalParameterDeclsRest -> variableDeclaratorId expr_44
Rule 110   formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId
Rule 111   methodBody -> block
Rule 112   constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN
Rule 113   explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI
Rule 114   explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI
Rule 115   qualifiedName -> Identifier expr_49
Rule 116   literal -> integerLiteral
Rule 117   literal -> FloatingPointLiteral
Rule 118   literal -> CharacterLiteral
Rule 119   literal -> StringLiteral
Rule 120   literal -> booleanLiteral
Rule 121   literal -> NULL
Rule 122   integerLiteral -> NUMBER
Rule 123   integerLiteral -> HEX_NUMBER
Rule 124   integerLiteral -> LONG_NUMBER
Rule 125   integerLiteral -> LONG_HEX_NUMBER
Rule 126   booleanLiteral -> TRUE
Rule 127   booleanLiteral -> FALSE
Rule 128   annotations -> expr_50
Rule 129   annotation -> AT annotationName expr_52
Rule 130   annotationName -> Identifier expr_49
Rule 131   elementValuePairs -> elementValuePair expr_53
Rule 132   elementValuePair -> Identifier EQUALS elementValue
Rule 133   elementValue -> conditionalExpression
Rule 134   elementValue -> annotation
Rule 135   elementValue -> elementValueArrayInitializer
Rule 136   elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN
Rule 137   annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody
Rule 138   annotationTypeBody -> BLPAREN expr_56 BRPAREN
Rule 139   annotationTypeElementDeclaration -> modifiers annotationTypeElementRest
Rule 140   annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI
Rule 141   annotationTypeElementRest -> normalClassDeclaration expr_57
Rule 142   annotationTypeElementRest -> normalInterfaceDeclaration expr_57
Rule 143   annotationTypeElementRest -> enumDeclaration expr_57
Rule 144   annotationTypeElementRest -> annotationTypeDeclaration expr_57
Rule 145   annotationMethodOrConstantRest -> annotationMethodRest
Rule 146   annotationMethodOrConstantRest -> annotationConstantRest
Rule 147   annotationMethodRest -> Identifier LPAREN RPAREN expr_58
Rule 148   annotationConstantRest -> variableDeclarators
Rule 149   defaultValue -> DEFAULT elementValue
Rule 150   block -> BLPAREN expr_blockStatment BRPAREN
Rule 151   blockStatement -> localVariableDeclarationStatement
Rule 152   blockStatement -> classOrInterfaceDeclaration
Rule 153   blockStatement -> statement
Rule 154   localVariableDeclarationStatement -> localVariableDeclaration SEMI
Rule 155   localVariableDeclaration -> variableModifiers type variableDeclarators
Rule 156   localVariableDeclaration -> type variableDeclarators
Rule 157   variableModifiers -> expr_variableModifier
Rule 158   statement -> block
Rule 159   statement -> ASSERT expression expr_60 SEMI
Rule 160   statement -> IF parExpression statement expr_61
Rule 161   statement -> FOR LPAREN forControl RPAREN statement
Rule 162   statement -> WHILE parExpression statement
Rule 163   statement -> DO statement WHILE parExpression SEMI
Rule 164   statement -> TRY block expr_62
Rule 165   statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
Rule 166   statement -> SYNCHRONIZED parExpression block
Rule 167   statement -> RETURN expr_63 SEMI
Rule 168   statement -> THROW expression SEMI
Rule 169   statement -> BREAK expr_64 SEMI
Rule 170   statement -> CONTINUE expr_64 SEMI
Rule 171   statement -> SEMI
Rule 172   statement -> statementExpression SEMI
Rule 173   statement -> Identifier COLON statement
Rule 174   catches -> catchClause expr_65
Rule 175   catchClause -> CATCH LPAREN formalParameter RPAREN block
Rule 176   formalParameter -> variableModifiers type variableDeclaratorId
Rule 177   switchBlockStatementGroups -> expr_66
Rule 178   switchBlockStatementGroup -> expr_67 expr_blockStatment
Rule 179   switchLabel -> CASE constantExpression COLON
Rule 180   switchLabel -> CASE enumConstantName COLON
Rule 181   switchLabel -> DEFAULT COLON
Rule 182   forControl -> enhancedForControl
Rule 183   forControl -> expr_68 SEMI expr_69 SEMI expr_70
Rule 184   forInit -> localVariableDeclaration
Rule 185   forInit -> expressionList
Rule 186   enhancedForControl -> variableModifiers type Identifier COLON expression
Rule 187   forUpdate -> expressionList
Rule 188   parExpression -> LPAREN expression RPAREN
Rule 189   expressionList -> expression expr_71
Rule 190   statementExpression -> expression
Rule 191   constantExpression -> expression
Rule 192   expression -> conditionalExpression expr_72
Rule 193   assignmentOperator -> EQUALS
Rule 194   assignmentOperator -> ASS_ADD
Rule 195   assignmentOperator -> ASS_SUB
Rule 196   assignmentOperator -> ASS_MUL
Rule 197   assignmentOperator -> ASS_DIV
Rule 198   assignmentOperator -> ASS_AND
Rule 199   assignmentOperator -> ASS_OR
Rule 200   assignmentOperator -> ASS_XOR
Rule 201   assignmentOperator -> ASS_MOD
Rule 202   assignmentOperator -> LESS LESS EQUALS
Rule 203   assignmentOperator -> MORE MORE MORE EQUALS
Rule 204   assignmentOperator -> MORE MORE EQUALS
Rule 205   conditionalExpression -> conditionalOrExpression expr_73
Rule 206   conditionalOrExpression -> conditionalAndExpression expr_74
Rule 207   conditionalAndExpression -> inclusiveOrExpression expr_75
Rule 208   inclusiveOrExpression -> exclusiveOrExpression expr_76
Rule 209   exclusiveOrExpression -> andExpression expr_77
Rule 210   andExpression -> equalityExpression expr_78
Rule 211   equalityExpression -> instanceOfExpression expr_80
Rule 212   instanceOfExpression -> relationalExpression expr_81
Rule 213   relationalExpression -> shiftExpression expr_82
Rule 214   relationalOp -> LESS EQUALS
Rule 215   relationalOp -> MORE EQUALS
Rule 216   relationalOp -> LESS
Rule 217   relationalOp -> MORE
Rule 218   shiftExpression -> additiveExpression expr_83
Rule 219   shiftOp -> LESS LESS
Rule 220   shiftOp -> MORE MORE MORE
Rule 221   shiftOp -> MORE MORE
Rule 222   additiveExpression -> multiplicativeExpression expr_85
Rule 223   multiplicativeExpression -> unaryExpression expr_87
Rule 224   unaryExpression -> PLUS unaryExpression
Rule 225   unaryExpression -> DASH unaryExpression
Rule 226   unaryExpression -> OP_INC unaryExpression
Rule 227   unaryExpression -> OP_DEC unaryExpression
Rule 228   unaryExpression -> unaryExpressionNotPlusMinus
Rule 229   unaryExpressionNotPlusMinus -> TILDE unaryExpression
Rule 230   unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression
Rule 231   unaryExpressionNotPlusMinus -> castExpression
Rule 232   unaryExpressionNotPlusMinus -> primary expr_88 expr_89
Rule 233   castExpression -> LPAREN primitiveType RPAREN unaryExpression
Rule 234   castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
Rule 235   primary -> parExpression
Rule 236   primary -> THIS expr_49 expr_91
Rule 237   primary -> SUPER superSuffix
Rule 238   primary -> literal
Rule 239   primary -> NEW creator
Rule 240   primary -> Identifier expr_49 expr_91
Rule 241   primary -> primitiveType expr_28 DOT CLASS
Rule 242   primary -> VOID DOT CLASS
Rule 243   identifierSuffix -> expr_28 DOT CLASS
Rule 244   identifierSuffix -> expr_92
Rule 245   identifierSuffix -> arguments
Rule 246   identifierSuffix -> DOT CLASS
Rule 247   identifierSuffix -> DOT explicitGenericInvocation
Rule 248   identifierSuffix -> DOT THIS
Rule 249   identifierSuffix -> DOT SUPER arguments
Rule 250   identifierSuffix -> DOT NEW innerCreator
Rule 251   creator -> nonWildcardTypeArguments createdName classCreatorRest
Rule 252   creator -> createdName expr_93
Rule 253   createdName -> classOrInterfaceType
Rule 254   createdName -> primitiveType
Rule 255   innerCreator -> expr_47 Identifier classCreatorRest
Rule 256   arrayCreatorRest -> FLPAREN expr_94
Rule 257   classCreatorRest -> arguments expr_21
Rule 258   explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments
Rule 259   nonWildcardTypeArguments -> LESS typeList MORE
Rule 260   selector -> DOT Identifier expr_20
Rule 261   selector -> DOT THIS
Rule 262   selector -> DOT SUPER superSuffix
Rule 263   selector -> DOT NEW innerCreator
Rule 264   selector -> FLPAREN expression FRPAREN
Rule 265   superSuffix -> arguments
Rule 266   superSuffix -> DOT Identifier expr_20
Rule 267   arguments -> LPAREN expr_95 RPAREN
Rule 268   expr_0 -> importDeclaration
Rule 269   expr_0 -> expr_0 importDeclaration
Rule 270   expr_0 -> empty
Rule 271   expr_1 -> typeDeclaration
Rule 272   expr_1 -> expr_1 typeDeclaration
Rule 273   expr_1 -> empty
Rule 274   expr_2 -> packageDeclaration expr_0 expr_1
Rule 275   expr_2 -> classOrInterfaceDeclaration expr_1
Rule 276   expr_3 -> packageDeclaration
Rule 277   expr_3 -> empty
Rule 278   expr_4 -> STATIC
Rule 279   expr_4 -> empty
Rule 280   expr_5 -> DOT MULT
Rule 281   expr_5 -> empty
Rule 282   expr_6 -> classDeclaration
Rule 283   expr_6 -> interfaceDeclaration
Rule 284   expr_7 -> classOrInterfaceModifier
Rule 285   expr_7 -> expr_7 classOrInterfaceModifier
Rule 286   expr_7 -> empty
Rule 287   expr_8 -> modifier
Rule 288   expr_8 -> expr_8 modifier
Rule 289   expr_8 -> empty
Rule 290   expr_9 -> typeParameters
Rule 291   expr_9 -> empty
Rule 292   expr_10 -> EXTENDS type
Rule 293   expr_10 -> empty
Rule 294   expr_11 -> IMPLEMENTS typeList
Rule 295   expr_11 -> empty
Rule 296   expr_12 -> COMMA typeParameter
Rule 297   expr_12 -> expr_12 COMMA typeParameter
Rule 298   expr_12 -> empty
Rule 299   expr_13 -> EXTENDS typeBound
Rule 300   expr_13 -> empty
Rule 301   expr_14 -> AND type
Rule 302   expr_14 -> expr_14 AND type
Rule 303   expr_14 -> empty
Rule 304   expr_15 -> enumConstants
Rule 305   expr_15 -> empty
Rule 306   expr_16 -> COMMA
Rule 307   expr_16 -> empty
Rule 308   expr_17 -> enumBodyDeclarations
Rule 309   expr_17 -> empty
Rule 310   expr_18 -> COMMA enumConstant
Rule 311   expr_18 -> expr_18 COMMA enumConstant
Rule 312   expr_18 -> empty
Rule 313   expr_19 -> annotations
Rule 314   expr_19 -> empty
Rule 315   expr_20 -> arguments
Rule 316   expr_20 -> empty
Rule 317   expr_21 -> classBody
Rule 318   expr_21 -> empty
Rule 319   expr_22 -> classBodyDeclaration
Rule 320   expr_22 -> expr_22 classBodyDeclaration
Rule 321   expr_22 -> empty
Rule 322   expr_23 -> EXTENDS typeList
Rule 323   expr_23 -> empty
Rule 324   expr_24 -> COMMA type
Rule 325   expr_24 -> expr_24 COMMA type
Rule 326   expr_24 -> empty
Rule 327   expr_25 -> interfaceBodyDeclaration
Rule 328   expr_25 -> expr_25 interfaceBodyDeclaration
Rule 329   expr_25 -> empty
Rule 330   expr_26 -> methodDeclaration
Rule 331   expr_26 -> fieldDeclaration
Rule 332   expr_27 -> type
Rule 333   expr_27 -> VOID
Rule 334   expr_28 -> FLPAREN FRPAREN
Rule 335   expr_28 -> expr_28 FLPAREN FRPAREN
Rule 336   expr_28 -> empty
Rule 337   throwsList -> THROWS qualifiedNameList
Rule 338   throwsList -> empty
Rule 339   expr_methdoBody -> methodBody
Rule 340   expr_methdoBody -> SEMI
Rule 341   expr_31 -> COMMA variableDeclarator
Rule 342   expr_31 -> expr_31 COMMA variableDeclarator
Rule 343   expr_31 -> empty
Rule 344   expr_32 -> EQUALS variableInitializer
Rule 345   expr_32 -> empty
Rule 346   expr_33 -> COMMA constantDeclarator
Rule 347   expr_33 -> expr_33 COMMA constantDeclarator
Rule 348   expr_33 -> empty
Rule 349   expr_34 -> COMMA variableInitializer
Rule 350   expr_34 -> expr_34 COMMA variableInitializer
Rule 351   expr_34 -> empty
Rule 352   expr_35 -> COMMA
Rule 353   expr_35 -> empty
Rule 354   expr_36 -> variableInitializer expr_34 expr_35
Rule 355   expr_36 -> empty
Rule 356   expr_typeArguments -> typeArguments
Rule 357   expr_typeArguments -> empty
Rule 358   expr_38 -> DOT Identifier expr_typeArguments
Rule 359   expr_38 -> expr_38 DOT Identifier expr_typeArguments
Rule 360   expr_38 -> empty
Rule 361   expr_39 -> COMMA typeArgument
Rule 362   expr_39 -> expr_39 COMMA typeArgument
Rule 363   expr_39 -> empty
Rule 364   expr_40 -> EXTENDS
Rule 365   expr_40 -> SUPER
Rule 366   expr_41 -> expr_40 type
Rule 367   expr_41 -> empty
Rule 368   expr_42 -> COMMA qualifiedName
Rule 369   expr_42 -> expr_42 COMMA qualifiedName
Rule 370   expr_42 -> empty
Rule 371   expr_43 -> formalParameterDecls
Rule 372   expr_43 -> empty
Rule 373   expr_44 -> COMMA formalParameterDecls
Rule 374   expr_44 -> empty
Rule 375   expr_45 -> explicitConstructorInvocation
Rule 376   expr_45 -> empty
Rule 377   expr_blockStatment -> blockStatement
Rule 378   expr_blockStatment -> expr_blockStatment blockStatement
Rule 379   expr_blockStatment -> empty
Rule 380   expr_47 -> nonWildcardTypeArguments
Rule 381   expr_47 -> empty
Rule 382   expr_48 -> THIS
Rule 383   expr_48 -> SUPER
Rule 384   expr_49 -> DOT Identifier
Rule 385   expr_49 -> expr_49 DOT Identifier
Rule 386   expr_49 -> empty
Rule 387   expr_50 -> annotation
Rule 388   expr_50 -> expr_50 annotation
Rule 389   expr_51 -> elementValuePairs
Rule 390   expr_51 -> elementValue
Rule 391   expr_52 -> LPAREN expr_51 RPAREN
Rule 392   expr_52 -> empty
Rule 393   expr_53 -> COMMA elementValuePair
Rule 394   expr_53 -> expr_53 COMMA elementValuePair
Rule 395   expr_53 -> empty
Rule 396   expr_54 -> COMMA elementValue
Rule 397   expr_54 -> expr_54 COMMA elementValue
Rule 398   expr_54 -> empty
Rule 399   expr_55 -> elementValue expr_54
Rule 400   expr_55 -> empty
Rule 401   expr_56 -> annotationTypeElementDeclaration
Rule 402   expr_56 -> expr_56 annotationTypeElementDeclaration
Rule 403   expr_56 -> empty
Rule 404   expr_57 -> SEMI
Rule 405   expr_57 -> empty
Rule 406   expr_58 -> defaultValue
Rule 407   expr_58 -> empty
Rule 408   expr_variableModifier -> variableModifier
Rule 409   expr_variableModifier -> expr_variableModifier variableModifier
Rule 410   expr_variableModifier -> empty
Rule 411   expr_60 -> COLON expression
Rule 412   expr_60 -> empty
Rule 413   expr_61 -> ELSE statement
Rule 414   expr_61 -> empty
Rule 415   expr_62 -> catches FINALLY block
Rule 416   expr_62 -> catches
Rule 417   expr_62 -> FINALLY block
Rule 418   expr_63 -> expression
Rule 419   expr_63 -> empty
Rule 420   expr_64 -> Identifier
Rule 421   expr_64 -> empty
Rule 422   expr_65 -> catchClause
Rule 423   expr_65 -> expr_65 catchClause
Rule 424   expr_65 -> empty
Rule 425   expr_66 -> switchBlockStatementGroup
Rule 426   expr_66 -> expr_66 switchBlockStatementGroup
Rule 427   expr_66 -> empty
Rule 428   expr_67 -> switchLabel
Rule 429   expr_67 -> expr_67 switchLabel
Rule 430   expr_68 -> forInit
Rule 431   expr_68 -> empty
Rule 432   expr_69 -> expression
Rule 433   expr_69 -> empty
Rule 434   expr_70 -> forUpdate
Rule 435   expr_70 -> empty
Rule 436   expr_71 -> COMMA expression
Rule 437   expr_71 -> expr_71 COMMA expression
Rule 438   expr_71 -> empty
Rule 439   expr_72 -> assignmentOperator expression
Rule 440   expr_72 -> empty
Rule 441   expr_73 -> QUES expression COLON expression
Rule 442   expr_73 -> empty
Rule 443   expr_74 -> OP_LOR conditionalAndExpression
Rule 444   expr_74 -> expr_74 OP_LOR conditionalAndExpression
Rule 445   expr_74 -> empty
Rule 446   expr_75 -> OP_LAND inclusiveOrExpression
Rule 447   expr_75 -> expr_75 OP_LAND inclusiveOrExpression
Rule 448   expr_75 -> empty
Rule 449   expr_76 -> VERTICAL exclusiveOrExpression
Rule 450   expr_76 -> expr_76 VERTICAL exclusiveOrExpression
Rule 451   expr_76 -> empty
Rule 452   expr_77 -> CARET andExpression
Rule 453   expr_77 -> expr_77 CARET andExpression
Rule 454   expr_77 -> empty
Rule 455   expr_78 -> AND equalityExpression
Rule 456   expr_78 -> expr_78 AND equalityExpression
Rule 457   expr_78 -> empty
Rule 458   expr_79 -> OP_EQ
Rule 459   expr_79 -> OP_NE
Rule 460   expr_80 -> expr_79 instanceOfExpression
Rule 461   expr_80 -> expr_80 expr_79 instanceOfExpression
Rule 462   expr_80 -> empty
Rule 463   expr_81 -> INSTANCEOF type
Rule 464   expr_81 -> empty
Rule 465   expr_82 -> relationalOp shiftExpression
Rule 466   expr_82 -> expr_82 relationalOp shiftExpression
Rule 467   expr_82 -> empty
Rule 468   expr_83 -> shiftOp additiveExpression
Rule 469   expr_83 -> expr_83 shiftOp additiveExpression
Rule 470   expr_83 -> empty
Rule 471   expr_84 -> PLUS
Rule 472   expr_84 -> DASH
Rule 473   expr_85 -> expr_84 multiplicativeExpression
Rule 474   expr_85 -> expr_85 expr_84 multiplicativeExpression
Rule 475   expr_85 -> empty
Rule 476   expr_86 -> MULT
Rule 477   expr_86 -> SLASH
Rule 478   expr_86 -> PERCENT
Rule 479   expr_87 -> expr_86 unaryExpression
Rule 480   expr_87 -> expr_87 expr_86 unaryExpression
Rule 481   expr_87 -> empty
Rule 482   expr_88 -> selector
Rule 483   expr_88 -> expr_88 selector
Rule 484   expr_88 -> empty
Rule 485   expr_89 -> OP_INC
Rule 486   expr_89 -> OP_DEC
Rule 487   expr_90 -> type
Rule 488   expr_90 -> expression
Rule 489   expr_91 -> identifierSuffix
Rule 490   expr_91 -> empty
Rule 491   expr_92 -> FLPAREN expression FRPAREN
Rule 492   expr_92 -> expr_92 FLPAREN expression FRPAREN
Rule 493   expr_93 -> arrayCreatorRest
Rule 494   expr_93 -> classCreatorRest
Rule 495   expr_94 -> FRPAREN expr_28 arrayInitializer
Rule 496   expr_94 -> expression FRPAREN expr_92 expr_28
Rule 497   expr_95 -> expressionList
Rule 498   expr_95 -> empty
Rule 499   FloatingPointLiteral -> NON_INTEGER_1
Rule 500   FloatingPointLiteral -> NON_INTEGER_2
Rule 501   FloatingPointLiteral -> NON_INTEGER_3
Rule 502   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 13 80
AND                  : 301 302 455 456
ASSERT               : 159
ASS_ADD              : 194
ASS_AND              : 198
ASS_DIV              : 197
ASS_MOD              : 201
ASS_MUL              : 196
ASS_OR               : 199
ASS_SHL              : 
ASS_SHR              : 
ASS_SHRR             : 
ASS_SUB              : 195
ASS_XOR              : 200
AT                   : 129 137
BLPAREN              : 25 33 34 74 112 136 138 150 165
BOOLEAN              : 93
BREAK                : 169
BRPAREN              : 25 33 34 74 112 136 138 150 165
BYTE                 : 95
CARET                : 452 453
CASE                 : 179 180
CAST                 : 
CATCH                : 175
CHAR                 : 94
CLASS                : 20 241 242 243 246
COLON                : 173 179 180 181 186 411 441
COMMA                : 296 297 306 310 311 324 325 341 342 346 347 349 350 352 361 362 368 369 373 393 394 396 397 436 437
CONST                : 
CONTINUE             : 170
CharacterLiteral     : 118
DASH                 : 225 472
DEFAULT              : 149 181
DO                   : 163
DOT                  : 114 241 242 243 246 247 248 249 250 260 261 262 263 266 280 358 359 384 385
DOUBLE               : 100
ELSE                 : 413
ENUM                 : 24
EQUALS               : 70 132 193 202 203 204 214 215 344
EXCLAMATION          : 230
EXTENDS              : 292 299 322 364
FALSE                : 127
FINAL                : 15 81 101
FINALLY              : 415 417
FLOAT                : 99
FLPAREN              : 256 264 334 335 491 492
FOR                  : 161
FRPAREN              : 264 334 335 491 492 495 496
FUTURE               : 
GENERIC              : 
GOTO                 : 
HEX_NUMBER           : 123
IF                   : 160
IMPLEMENTS           : 294
IMPORT               : 4
INNER                : 
INSTANCEOF           : 463
INT                  : 97
INTERFACE            : 31 137
Identifier           : 20 22 24 27 31 40 41 46 47 48 54 57 63 66 71 88 92 115 130 132 137 147 173 186 240 255 258 260 266 358 359 384 385 420
LCOMMENT             : 
LESS                 : 21 103 202 202 214 216 219 219 259
LONG                 : 98
LONG_HEX_NUMBER      : 125
LONG_NUMBER          : 124
LPAREN               : 107 147 161 175 188 233 234 267 391
MCOMMENT             : 
MORE                 : 21 103 203 203 203 204 204 215 217 220 220 220 221 221 259
MULT                 : 280 476
NATIVE               : 82
NEW                  : 239 250 263
NEWLINE              : 
NON_INTEGER_1        : 499
NON_INTEGER_2        : 500
NON_INTEGER_3        : 501
NULL                 : 121
NUMBER               : 122
OPERATOR             : 
OP_ARRAY             : 110
OP_DEC               : 227 486
OP_EQ                : 458
OP_GE                : 
OP_INC               : 226 485
OP_LAND              : 446 447
OP_LE                : 
OP_LOR               : 443 444
OP_NE                : 459
OP_SHL               : 
OP_SHR               : 
OP_SHRR              : 
OUTER                : 
PACKAGE              : 3
PERCENT              : 478
PLUS                 : 224 471
PRIVATE              : 12 78
PROTECTED            : 11 77
PUBLIC               : 10 76
QUES                 : 105 441
REST                 : 
RETURN               : 167
RPAREN               : 107 147 161 175 188 233 234 267 391
SEMI                 : 3 4 6 28 35 49 51 58 62 64 113 114 140 154 159 163 167 168 169 170 171 172 183 183 340 404
SHORT                : 96
SLASH                : 477
STATIC               : 14 79 278
STRICTFP             : 16 86
SUPER                : 114 237 249 262 365 383
SWITCH               : 165
SYNCHRONIZED         : 83 166
StringLiteral        : 119
THIS                 : 236 248 261 382
THROW                : 168
THROWS               : 337
TILDE                : 229
TRANSIENT            : 84
TRUE                 : 126
TRY                  : 164
VAR                  : 
VERTICAL             : 449 450
VOID                 : 40 54 242 333
VOLATILE             : 85
WHILE                : 162 163
error                : 

Nonterminals, with rules where they appear

FloatingPointLiteral : 117
additiveExpression   : 218 468 469
andExpression        : 209 452 453
annotation           : 9 75 102 134 387 388
annotationConstantRest : 146
annotationMethodOrConstantRest : 140
annotationMethodRest : 145
annotationName       : 129
annotationTypeBody   : 137
annotationTypeDeclaration : 30 144
annotationTypeElementDeclaration : 401 402
annotationTypeElementRest : 139
annotations          : 1 313
arguments            : 113 114 245 249 257 258 265 315
arrayCreatorRest     : 493
arrayInitializer     : 72 495
assignmentOperator   : 439
block                : 36 111 158 164 166 175 415 417
blockStatement       : 377 378
booleanLiteral       : 120
castExpression       : 231
catchClause          : 174 422 423
catches              : 415 416
classBody            : 20 317
classBodyDeclaration : 319 320
classCreatorRest     : 251 255 494
classDeclaration     : 43 56 282
classOrInterfaceDeclaration : 5 152 275
classOrInterfaceModifier : 284 285
classOrInterfaceModifiers : 7
classOrInterfaceType : 90 253
compilationUnit      : 0
conditionalAndExpression : 206 443 444
conditionalExpression : 133 192
conditionalOrExpression : 205
constantDeclarator   : 346 347
constantDeclaratorRest : 66 69
constantDeclaratorsRest : 58
constantExpression   : 179
constructorBody      : 65
constructorDeclaratorRest : 41 47
createdName          : 251 252
creator              : 239
defaultValue         : 406
elementValue         : 132 149 390 396 397 399
elementValueArrayInitializer : 135
elementValuePair     : 131 393 394
elementValuePairs    : 389
empty                : 270 273 277 279 281 286 289 291 293 295 298 300 303 305 307 309 312 314 316 318 321 323 326 329 336 338 343 345 348 351 353 355 357 360 363 367 370 372 374 376 379 381 386 392 395 398 400 403 405 407 410 412 414 419 421 424 427 431 433 435 438 440 442 445 448 451 454 457 462 464 467 470 475 481 484 490 498
enhancedForControl   : 182
enumBody             : 24
enumBodyDeclarations : 308
enumConstant         : 26 310 311
enumConstantName     : 180
enumConstants        : 304
enumDeclaration      : 19 143
equalityExpression   : 210 455 456
exclusiveOrExpression : 208 449 450
explicitConstructorInvocation : 375
explicitGenericInvocation : 247
expr_0               : 2 269 274
expr_1               : 2 272 274 275
expr_10              : 20
expr_11              : 20 24
expr_12              : 21 297
expr_13              : 22
expr_14              : 23 302
expr_15              : 25
expr_16              : 25
expr_17              : 25
expr_18              : 26 311
expr_19              : 27
expr_2               : 1
expr_20              : 27 260 266
expr_21              : 27 257
expr_22              : 28 33 320
expr_23              : 31
expr_24              : 32 325
expr_25              : 34 328
expr_26              : 44
expr_27              : 46 63
expr_28              : 60 62 70 71 90 91 241 243 335 495 496
expr_3               : 2
expr_31              : 67 342
expr_32              : 68
expr_33              : 69 347
expr_34              : 350 354
expr_35              : 136 354
expr_36              : 74
expr_38              : 92 359
expr_39              : 103 362
expr_4               : 4 36
expr_40              : 366
expr_41              : 105
expr_42              : 106 369
expr_43              : 107
expr_44              : 109
expr_45              : 112
expr_47              : 113 114 255
expr_48              : 113
expr_49              : 115 130 236 240 385
expr_5               : 4
expr_50              : 128 388
expr_51              : 391
expr_52              : 129
expr_53              : 131 394
expr_54              : 397 399
expr_55              : 136
expr_56              : 138 402
expr_57              : 141 142 143 144
expr_58              : 147
expr_6               : 7
expr_60              : 159
expr_61              : 160
expr_62              : 164
expr_63              : 167
expr_64              : 169 170
expr_65              : 174 423
expr_66              : 177 426
expr_67              : 178 429
expr_68              : 183
expr_69              : 183
expr_7               : 8 285
expr_70              : 183
expr_71              : 189 437
expr_72              : 192
expr_73              : 205
expr_74              : 206 444
expr_75              : 207 447
expr_76              : 208 450
expr_77              : 209 453
expr_78              : 210 456
expr_79              : 460 461
expr_8               : 17 288
expr_80              : 211 461
expr_81              : 212
expr_82              : 213 466
expr_83              : 218 469
expr_84              : 473 474
expr_85              : 222 474
expr_86              : 479 480
expr_87              : 223 480
expr_88              : 232 483
expr_89              : 232
expr_9               : 20 31
expr_90              : 234
expr_91              : 236 240
expr_92              : 244 492 496
expr_93              : 252
expr_94              : 256
expr_95              : 267
expr_blockStatment   : 112 150 178 378
expr_methdoBody      : 60 61
expr_typeArguments   : 92 358 359
expr_variableModifier : 157 409
expression           : 73 159 168 186 188 189 190 191 264 411 418 432 436 437 439 441 441 488 491 492 496
expressionList       : 185 187 497
fieldDeclaration     : 331
forControl           : 161
forInit              : 430
forUpdate            : 434
formalParameter      : 175
formalParameterDecls : 371 373
formalParameterDeclsRest : 108
formalParameters     : 60 61 62 64 65
genericMethodOrConstructorDecl : 38
genericMethodOrConstructorRest : 45
identifierSuffix     : 489
importDeclaration    : 268 269
inclusiveOrExpression : 207 446 447
innerCreator         : 250 263
instanceOfExpression : 211 460 461
integerLiteral       : 116
interfaceBody        : 31
interfaceBodyDeclaration : 327 328
interfaceDeclaration : 42 55 283
interfaceGenericMethodDecl : 53
interfaceMemberDecl  : 50
interfaceMethodDeclaratorRest : 59 63
interfaceMethodOrFieldDecl : 52
interfaceMethodOrFieldRest : 57
literal              : 238
localVariableDeclaration : 154 184
localVariableDeclarationStatement : 151
memberDecl           : 37
memberDeclaration    : 39
methodBody           : 339
methodDeclaration    : 330
methodDeclaratorRest : 46 48
modifier             : 287 288
modifiers            : 37 50 139
multiplicativeExpression : 222 473 474
nonWildcardTypeArguments : 251 258 380
normalClassDeclaration : 18 141
normalInterfaceDeclaration : 29 142
packageDeclaration   : 274 276
packageOrTypeName    : 
parExpression        : 160 162 163 165 166 235
primary              : 114 232
primitiveType        : 91 233 241 254
qualifiedName        : 3 4 87 89 106 368 369
qualifiedNameList    : 337
relationalExpression : 212
relationalOp         : 465 466
selector             : 482 483
shiftExpression      : 213 465 466
shiftOp              : 468 469
statement            : 153 160 161 162 163 173 413
statementExpression  : 172
superSuffix          : 237 262
switchBlockStatementGroup : 425 426
switchBlockStatementGroups : 165
switchLabel          : 428 429
throwsList           : 60 61 62 64 65
type                 : 23 32 44 57 104 108 140 155 156 176 186 292 301 302 324 325 332 366 463 487
typeArgument         : 103 361 362
typeArguments        : 356
typeBound            : 299
typeDeclaration      : 271 272
typeList             : 259 294 322
typeName             : 
typeParameter        : 21 296 297
typeParameters       : 45 63 290
unaryExpression      : 223 224 225 226 227 229 230 233 479 480
unaryExpressionNotPlusMinus : 228 234
variableDeclarator   : 67 341 342
variableDeclaratorId : 68 109 110 176
variableDeclarators  : 49 148 155 156
variableInitializer  : 70 344 349 350 354
variableModifier     : 408 409
variableModifiers    : 108 155 176 186
voidInterfaceMethodDeclaratorRest : 54
voidMethodDeclaratorRest : 40


Parsing method: LALR


state 0

    (0) S' -> . compilationUnit
    (1) compilationUnit -> . annotations expr_2
    (2) compilationUnit -> . expr_3 expr_0 expr_1
    (128) annotations -> . expr_50
    (276) expr_3 -> . packageDeclaration
    (277) expr_3 -> . empty
    (387) expr_50 -> . annotation
    (388) expr_50 -> . expr_50 annotation
    (3) packageDeclaration -> . PACKAGE qualifiedName SEMI
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for AT resolved as shift.
    PACKAGE         shift and go to state 2
    IMPORT          reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! AT              [ reduce using rule 502 (empty -> .) ]

    expr_50                        shift and go to state 1
    compilationUnit                shift and go to state 3
    packageDeclaration             shift and go to state 4
    expr_3                         shift and go to state 5
    empty                          shift and go to state 7
    annotation                     shift and go to state 8
    annotations                    shift and go to state 9

state 1

    (128) annotations -> expr_50 .
    (388) expr_50 -> expr_50 . annotation
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for AT resolved as shift.
    Identifier      reduce using rule 128 (annotations -> expr_50 .)
    PACKAGE         reduce using rule 128 (annotations -> expr_50 .)
    PUBLIC          reduce using rule 128 (annotations -> expr_50 .)
    PROTECTED       reduce using rule 128 (annotations -> expr_50 .)
    PRIVATE         reduce using rule 128 (annotations -> expr_50 .)
    ABSTRACT        reduce using rule 128 (annotations -> expr_50 .)
    STATIC          reduce using rule 128 (annotations -> expr_50 .)
    FINAL           reduce using rule 128 (annotations -> expr_50 .)
    STRICTFP        reduce using rule 128 (annotations -> expr_50 .)
    CLASS           reduce using rule 128 (annotations -> expr_50 .)
    ENUM            reduce using rule 128 (annotations -> expr_50 .)
    INTERFACE       reduce using rule 128 (annotations -> expr_50 .)
    AT              shift and go to state 6

  ! AT              [ reduce using rule 128 (annotations -> expr_50 .) ]

    annotation                     shift and go to state 10

state 2

    (3) packageDeclaration -> PACKAGE . qualifiedName SEMI
    (115) qualifiedName -> . Identifier expr_49

    Identifier      shift and go to state 12


    qualifiedName                  shift and go to state 11

state 3

    (0) S' -> compilationUnit .




state 4

    (276) expr_3 -> packageDeclaration .

    IMPORT          reduce using rule 276 (expr_3 -> packageDeclaration .)
    SEMI            reduce using rule 276 (expr_3 -> packageDeclaration .)
    PUBLIC          reduce using rule 276 (expr_3 -> packageDeclaration .)
    PROTECTED       reduce using rule 276 (expr_3 -> packageDeclaration .)
    PRIVATE         reduce using rule 276 (expr_3 -> packageDeclaration .)
    ABSTRACT        reduce using rule 276 (expr_3 -> packageDeclaration .)
    STATIC          reduce using rule 276 (expr_3 -> packageDeclaration .)
    FINAL           reduce using rule 276 (expr_3 -> packageDeclaration .)
    STRICTFP        reduce using rule 276 (expr_3 -> packageDeclaration .)
    AT              reduce using rule 276 (expr_3 -> packageDeclaration .)
    CLASS           reduce using rule 276 (expr_3 -> packageDeclaration .)
    ENUM            reduce using rule 276 (expr_3 -> packageDeclaration .)
    INTERFACE       reduce using rule 276 (expr_3 -> packageDeclaration .)
    $end            reduce using rule 276 (expr_3 -> packageDeclaration .)



state 5

    (2) compilationUnit -> expr_3 . expr_0 expr_1
    (268) expr_0 -> . importDeclaration
    (269) expr_0 -> . expr_0 importDeclaration
    (270) expr_0 -> . empty
    (4) importDeclaration -> . IMPORT expr_4 qualifiedName expr_5 SEMI
    (502) empty -> .

  ! shift/reduce conflict for IMPORT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)

  ! IMPORT          [ reduce using rule 502 (empty -> .) ]

    importDeclaration              shift and go to state 13
    expr_0                         shift and go to state 14
    empty                          shift and go to state 16

state 6

    (129) annotation -> AT . annotationName expr_52
    (130) annotationName -> . Identifier expr_49

    Identifier      shift and go to state 17


    annotationName                 shift and go to state 18

state 7

    (277) expr_3 -> empty .

    IMPORT          reduce using rule 277 (expr_3 -> empty .)
    SEMI            reduce using rule 277 (expr_3 -> empty .)
    PUBLIC          reduce using rule 277 (expr_3 -> empty .)
    PROTECTED       reduce using rule 277 (expr_3 -> empty .)
    PRIVATE         reduce using rule 277 (expr_3 -> empty .)
    ABSTRACT        reduce using rule 277 (expr_3 -> empty .)
    STATIC          reduce using rule 277 (expr_3 -> empty .)
    FINAL           reduce using rule 277 (expr_3 -> empty .)
    STRICTFP        reduce using rule 277 (expr_3 -> empty .)
    AT              reduce using rule 277 (expr_3 -> empty .)
    CLASS           reduce using rule 277 (expr_3 -> empty .)
    ENUM            reduce using rule 277 (expr_3 -> empty .)
    INTERFACE       reduce using rule 277 (expr_3 -> empty .)
    $end            reduce using rule 277 (expr_3 -> empty .)



state 8

    (387) expr_50 -> annotation .

    AT              reduce using rule 387 (expr_50 -> annotation .)
    Identifier      reduce using rule 387 (expr_50 -> annotation .)
    PACKAGE         reduce using rule 387 (expr_50 -> annotation .)
    PUBLIC          reduce using rule 387 (expr_50 -> annotation .)
    PROTECTED       reduce using rule 387 (expr_50 -> annotation .)
    PRIVATE         reduce using rule 387 (expr_50 -> annotation .)
    ABSTRACT        reduce using rule 387 (expr_50 -> annotation .)
    STATIC          reduce using rule 387 (expr_50 -> annotation .)
    FINAL           reduce using rule 387 (expr_50 -> annotation .)
    STRICTFP        reduce using rule 387 (expr_50 -> annotation .)
    CLASS           reduce using rule 387 (expr_50 -> annotation .)
    ENUM            reduce using rule 387 (expr_50 -> annotation .)
    INTERFACE       reduce using rule 387 (expr_50 -> annotation .)



state 9

    (1) compilationUnit -> annotations . expr_2
    (274) expr_2 -> . packageDeclaration expr_0 expr_1
    (275) expr_2 -> . classOrInterfaceDeclaration expr_1
    (3) packageDeclaration -> . PACKAGE qualifiedName SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    PACKAGE         shift and go to state 2
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceDeclaration    shift and go to state 28
    classOrInterfaceModifier       shift and go to state 31
    packageDeclaration             shift and go to state 29
    annotation                     shift and go to state 30
    classOrInterfaceModifiers      shift and go to state 32
    empty                          shift and go to state 27
    expr_7                         shift and go to state 25
    expr_2                         shift and go to state 26

state 10

    (388) expr_50 -> expr_50 annotation .

    AT              reduce using rule 388 (expr_50 -> expr_50 annotation .)
    Identifier      reduce using rule 388 (expr_50 -> expr_50 annotation .)
    PACKAGE         reduce using rule 388 (expr_50 -> expr_50 annotation .)
    PUBLIC          reduce using rule 388 (expr_50 -> expr_50 annotation .)
    PROTECTED       reduce using rule 388 (expr_50 -> expr_50 annotation .)
    PRIVATE         reduce using rule 388 (expr_50 -> expr_50 annotation .)
    ABSTRACT        reduce using rule 388 (expr_50 -> expr_50 annotation .)
    STATIC          reduce using rule 388 (expr_50 -> expr_50 annotation .)
    FINAL           reduce using rule 388 (expr_50 -> expr_50 annotation .)
    STRICTFP        reduce using rule 388 (expr_50 -> expr_50 annotation .)
    CLASS           reduce using rule 388 (expr_50 -> expr_50 annotation .)
    ENUM            reduce using rule 388 (expr_50 -> expr_50 annotation .)
    INTERFACE       reduce using rule 388 (expr_50 -> expr_50 annotation .)



state 11

    (3) packageDeclaration -> PACKAGE qualifiedName . SEMI

    SEMI            shift and go to state 34



state 12

    (115) qualifiedName -> Identifier . expr_49
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 37
    SEMI            reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 35
    empty                          shift and go to state 36

state 13

    (268) expr_0 -> importDeclaration .

    IMPORT          reduce using rule 268 (expr_0 -> importDeclaration .)
    SEMI            reduce using rule 268 (expr_0 -> importDeclaration .)
    PUBLIC          reduce using rule 268 (expr_0 -> importDeclaration .)
    PROTECTED       reduce using rule 268 (expr_0 -> importDeclaration .)
    PRIVATE         reduce using rule 268 (expr_0 -> importDeclaration .)
    ABSTRACT        reduce using rule 268 (expr_0 -> importDeclaration .)
    STATIC          reduce using rule 268 (expr_0 -> importDeclaration .)
    FINAL           reduce using rule 268 (expr_0 -> importDeclaration .)
    STRICTFP        reduce using rule 268 (expr_0 -> importDeclaration .)
    AT              reduce using rule 268 (expr_0 -> importDeclaration .)
    CLASS           reduce using rule 268 (expr_0 -> importDeclaration .)
    ENUM            reduce using rule 268 (expr_0 -> importDeclaration .)
    INTERFACE       reduce using rule 268 (expr_0 -> importDeclaration .)
    $end            reduce using rule 268 (expr_0 -> importDeclaration .)



state 14

    (2) compilationUnit -> expr_3 expr_0 . expr_1
    (269) expr_0 -> expr_0 . importDeclaration
    (271) expr_1 -> . typeDeclaration
    (272) expr_1 -> . expr_1 typeDeclaration
    (273) expr_1 -> . empty
    (4) importDeclaration -> . IMPORT expr_4 qualifiedName expr_5 SEMI
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (502) empty -> .
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            shift and go to state 40
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    importDeclaration              shift and go to state 39
    typeDeclaration                shift and go to state 38
    annotation                     shift and go to state 30
    classOrInterfaceModifiers      shift and go to state 32
    expr_7                         shift and go to state 25
    empty                          shift and go to state 43
    expr_1                         shift and go to state 41

state 15

    (4) importDeclaration -> IMPORT . expr_4 qualifiedName expr_5 SEMI
    (278) expr_4 -> . STATIC
    (279) expr_4 -> . empty
    (502) empty -> .

    STATIC          shift and go to state 44
    Identifier      reduce using rule 502 (empty -> .)


    expr_4                         shift and go to state 45
    empty                          shift and go to state 46

state 16

    (270) expr_0 -> empty .

    IMPORT          reduce using rule 270 (expr_0 -> empty .)
    SEMI            reduce using rule 270 (expr_0 -> empty .)
    PUBLIC          reduce using rule 270 (expr_0 -> empty .)
    PROTECTED       reduce using rule 270 (expr_0 -> empty .)
    PRIVATE         reduce using rule 270 (expr_0 -> empty .)
    ABSTRACT        reduce using rule 270 (expr_0 -> empty .)
    STATIC          reduce using rule 270 (expr_0 -> empty .)
    FINAL           reduce using rule 270 (expr_0 -> empty .)
    STRICTFP        reduce using rule 270 (expr_0 -> empty .)
    AT              reduce using rule 270 (expr_0 -> empty .)
    CLASS           reduce using rule 270 (expr_0 -> empty .)
    ENUM            reduce using rule 270 (expr_0 -> empty .)
    INTERFACE       reduce using rule 270 (expr_0 -> empty .)
    $end            reduce using rule 270 (expr_0 -> empty .)



state 17

    (130) annotationName -> Identifier . expr_49
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 37
    LPAREN          reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    PACKAGE         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 47
    empty                          shift and go to state 36

state 18

    (129) annotation -> AT annotationName . expr_52
    (391) expr_52 -> . LPAREN expr_51 RPAREN
    (392) expr_52 -> . empty
    (502) empty -> .

    LPAREN          shift and go to state 49
    AT              reduce using rule 502 (empty -> .)
    PACKAGE         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)


    expr_52                        shift and go to state 48
    empty                          shift and go to state 50

state 19

    (13) classOrInterfaceModifier -> ABSTRACT .

    PUBLIC          reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    PROTECTED       reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    PRIVATE         reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    STATIC          reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    FINAL           reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    STRICTFP        reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    AT              reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    CLASS           reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    ENUM            reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)
    INTERFACE       reduce using rule 13 (classOrInterfaceModifier -> ABSTRACT .)



state 20

    (11) classOrInterfaceModifier -> PROTECTED .

    PUBLIC          reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    PROTECTED       reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    PRIVATE         reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    ABSTRACT        reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    STATIC          reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    FINAL           reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    STRICTFP        reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    AT              reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    CLASS           reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    ENUM            reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)
    INTERFACE       reduce using rule 11 (classOrInterfaceModifier -> PROTECTED .)



state 21

    (14) classOrInterfaceModifier -> STATIC .

    PUBLIC          reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    PROTECTED       reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    PRIVATE         reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    ABSTRACT        reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    STATIC          reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    FINAL           reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    STRICTFP        reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    AT              reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    CLASS           reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    ENUM            reduce using rule 14 (classOrInterfaceModifier -> STATIC .)
    INTERFACE       reduce using rule 14 (classOrInterfaceModifier -> STATIC .)



state 22

    (15) classOrInterfaceModifier -> FINAL .

    PUBLIC          reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    PROTECTED       reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    PRIVATE         reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    ABSTRACT        reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    STATIC          reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    FINAL           reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    STRICTFP        reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    AT              reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    CLASS           reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    ENUM            reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    INTERFACE       reduce using rule 15 (classOrInterfaceModifier -> FINAL .)



state 23

    (12) classOrInterfaceModifier -> PRIVATE .

    PUBLIC          reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    PROTECTED       reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    PRIVATE         reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    ABSTRACT        reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    STATIC          reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    FINAL           reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    STRICTFP        reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    AT              reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    CLASS           reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    ENUM            reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)
    INTERFACE       reduce using rule 12 (classOrInterfaceModifier -> PRIVATE .)



state 24

    (16) classOrInterfaceModifier -> STRICTFP .

    PUBLIC          reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    PROTECTED       reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    PRIVATE         reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    ABSTRACT        reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    STATIC          reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    FINAL           reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    STRICTFP        reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    AT              reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    CLASS           reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    ENUM            reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)
    INTERFACE       reduce using rule 16 (classOrInterfaceModifier -> STRICTFP .)



state 25

    (8) classOrInterfaceModifiers -> expr_7 .
    (285) expr_7 -> expr_7 . classOrInterfaceModifier
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for AT resolved as shift.
    CLASS           reduce using rule 8 (classOrInterfaceModifiers -> expr_7 .)
    ENUM            reduce using rule 8 (classOrInterfaceModifiers -> expr_7 .)
    INTERFACE       reduce using rule 8 (classOrInterfaceModifiers -> expr_7 .)
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6

  ! AT              [ reduce using rule 8 (classOrInterfaceModifiers -> expr_7 .) ]

    classOrInterfaceModifier       shift and go to state 51
    annotation                     shift and go to state 30

state 26

    (1) compilationUnit -> annotations expr_2 .

    $end            reduce using rule 1 (compilationUnit -> annotations expr_2 .)



state 27

    (286) expr_7 -> empty .

    PUBLIC          reduce using rule 286 (expr_7 -> empty .)
    PROTECTED       reduce using rule 286 (expr_7 -> empty .)
    PRIVATE         reduce using rule 286 (expr_7 -> empty .)
    ABSTRACT        reduce using rule 286 (expr_7 -> empty .)
    STATIC          reduce using rule 286 (expr_7 -> empty .)
    FINAL           reduce using rule 286 (expr_7 -> empty .)
    STRICTFP        reduce using rule 286 (expr_7 -> empty .)
    AT              reduce using rule 286 (expr_7 -> empty .)
    CLASS           reduce using rule 286 (expr_7 -> empty .)
    ENUM            reduce using rule 286 (expr_7 -> empty .)
    INTERFACE       reduce using rule 286 (expr_7 -> empty .)



state 28

    (275) expr_2 -> classOrInterfaceDeclaration . expr_1
    (271) expr_1 -> . typeDeclaration
    (272) expr_1 -> . expr_1 typeDeclaration
    (273) expr_1 -> . empty
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (502) empty -> .
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 40
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    typeDeclaration                shift and go to state 38
    classOrInterfaceModifiers      shift and go to state 32
    expr_7                         shift and go to state 25
    annotation                     shift and go to state 30
    empty                          shift and go to state 43
    expr_1                         shift and go to state 52

state 29

    (274) expr_2 -> packageDeclaration . expr_0 expr_1
    (268) expr_0 -> . importDeclaration
    (269) expr_0 -> . expr_0 importDeclaration
    (270) expr_0 -> . empty
    (4) importDeclaration -> . IMPORT expr_4 qualifiedName expr_5 SEMI
    (502) empty -> .

  ! shift/reduce conflict for IMPORT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)

  ! IMPORT          [ reduce using rule 502 (empty -> .) ]

    importDeclaration              shift and go to state 13
    expr_0                         shift and go to state 53
    empty                          shift and go to state 16

state 30

    (9) classOrInterfaceModifier -> annotation .

    PUBLIC          reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    PROTECTED       reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    PRIVATE         reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    ABSTRACT        reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    STATIC          reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    FINAL           reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    STRICTFP        reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    AT              reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    CLASS           reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    ENUM            reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    INTERFACE       reduce using rule 9 (classOrInterfaceModifier -> annotation .)



state 31

    (284) expr_7 -> classOrInterfaceModifier .

    PUBLIC          reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    PROTECTED       reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    PRIVATE         reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    ABSTRACT        reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    STATIC          reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    FINAL           reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    STRICTFP        reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    AT              reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    CLASS           reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    ENUM            reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)
    INTERFACE       reduce using rule 284 (expr_7 -> classOrInterfaceModifier .)



state 32

    (7) classOrInterfaceDeclaration -> classOrInterfaceModifiers . expr_6
    (282) expr_6 -> . classDeclaration
    (283) expr_6 -> . interfaceDeclaration
    (18) classDeclaration -> . normalClassDeclaration
    (19) classDeclaration -> . enumDeclaration
    (29) interfaceDeclaration -> . normalInterfaceDeclaration
    (30) interfaceDeclaration -> . annotationTypeDeclaration
    (20) normalClassDeclaration -> . CLASS Identifier expr_9 expr_10 expr_11 classBody
    (24) enumDeclaration -> . ENUM Identifier expr_11 enumBody
    (31) normalInterfaceDeclaration -> . INTERFACE Identifier expr_9 expr_23 interfaceBody
    (137) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody

    CLASS           shift and go to state 63
    ENUM            shift and go to state 56
    INTERFACE       shift and go to state 59
    AT              shift and go to state 64


    enumDeclaration                shift and go to state 54
    normalClassDeclaration         shift and go to state 55
    interfaceDeclaration           shift and go to state 57
    annotationTypeDeclaration      shift and go to state 58
    classDeclaration               shift and go to state 60
    expr_6                         shift and go to state 61
    normalInterfaceDeclaration     shift and go to state 62

state 33

    (10) classOrInterfaceModifier -> PUBLIC .

    PUBLIC          reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    PROTECTED       reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    PRIVATE         reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    ABSTRACT        reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    STATIC          reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    FINAL           reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    STRICTFP        reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    AT              reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    CLASS           reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    ENUM            reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)
    INTERFACE       reduce using rule 10 (classOrInterfaceModifier -> PUBLIC .)



state 34

    (3) packageDeclaration -> PACKAGE qualifiedName SEMI .

    IMPORT          reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    SEMI            reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PUBLIC          reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PROTECTED       reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PRIVATE         reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    ABSTRACT        reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STATIC          reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    FINAL           reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STRICTFP        reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    AT              reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    CLASS           reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    ENUM            reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    INTERFACE       reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    $end            reduce using rule 3 (packageDeclaration -> PACKAGE qualifiedName SEMI .)



state 35

    (115) qualifiedName -> Identifier expr_49 .
    (385) expr_49 -> expr_49 . DOT Identifier

  ! shift/reduce conflict for DOT resolved as shift.
    SEMI            reduce using rule 115 (qualifiedName -> Identifier expr_49 .)
    COMMA           reduce using rule 115 (qualifiedName -> Identifier expr_49 .)
    BLPAREN         reduce using rule 115 (qualifiedName -> Identifier expr_49 .)
    DOT             shift and go to state 65

  ! DOT             [ reduce using rule 115 (qualifiedName -> Identifier expr_49 .) ]


state 36

    (386) expr_49 -> empty .

    DOT             reduce using rule 386 (expr_49 -> empty .)
    LPAREN          reduce using rule 386 (expr_49 -> empty .)
    AT              reduce using rule 386 (expr_49 -> empty .)
    PACKAGE         reduce using rule 386 (expr_49 -> empty .)
    PUBLIC          reduce using rule 386 (expr_49 -> empty .)
    PROTECTED       reduce using rule 386 (expr_49 -> empty .)
    PRIVATE         reduce using rule 386 (expr_49 -> empty .)
    ABSTRACT        reduce using rule 386 (expr_49 -> empty .)
    STATIC          reduce using rule 386 (expr_49 -> empty .)
    FINAL           reduce using rule 386 (expr_49 -> empty .)
    STRICTFP        reduce using rule 386 (expr_49 -> empty .)
    CLASS           reduce using rule 386 (expr_49 -> empty .)
    ENUM            reduce using rule 386 (expr_49 -> empty .)
    INTERFACE       reduce using rule 386 (expr_49 -> empty .)
    Identifier      reduce using rule 386 (expr_49 -> empty .)
    RPAREN          reduce using rule 386 (expr_49 -> empty .)
    COMMA           reduce using rule 386 (expr_49 -> empty .)
    BRPAREN         reduce using rule 386 (expr_49 -> empty .)
    NATIVE          reduce using rule 386 (expr_49 -> empty .)
    SYNCHRONIZED    reduce using rule 386 (expr_49 -> empty .)
    TRANSIENT       reduce using rule 386 (expr_49 -> empty .)
    VOLATILE        reduce using rule 386 (expr_49 -> empty .)
    BOOLEAN         reduce using rule 386 (expr_49 -> empty .)
    CHAR            reduce using rule 386 (expr_49 -> empty .)
    BYTE            reduce using rule 386 (expr_49 -> empty .)
    SHORT           reduce using rule 386 (expr_49 -> empty .)
    INT             reduce using rule 386 (expr_49 -> empty .)
    LONG            reduce using rule 386 (expr_49 -> empty .)
    FLOAT           reduce using rule 386 (expr_49 -> empty .)
    DOUBLE          reduce using rule 386 (expr_49 -> empty .)
    VOID            reduce using rule 386 (expr_49 -> empty .)
    LESS            reduce using rule 386 (expr_49 -> empty .)
    SEMI            reduce using rule 386 (expr_49 -> empty .)
    FLPAREN         reduce using rule 386 (expr_49 -> empty .)
    OP_INC          reduce using rule 386 (expr_49 -> empty .)
    OP_DEC          reduce using rule 386 (expr_49 -> empty .)
    BLPAREN         reduce using rule 386 (expr_49 -> empty .)



state 37

    (384) expr_49 -> DOT . Identifier

    Identifier      shift and go to state 66



state 38

    (271) expr_1 -> typeDeclaration .

    SEMI            reduce using rule 271 (expr_1 -> typeDeclaration .)
    PUBLIC          reduce using rule 271 (expr_1 -> typeDeclaration .)
    PROTECTED       reduce using rule 271 (expr_1 -> typeDeclaration .)
    PRIVATE         reduce using rule 271 (expr_1 -> typeDeclaration .)
    ABSTRACT        reduce using rule 271 (expr_1 -> typeDeclaration .)
    STATIC          reduce using rule 271 (expr_1 -> typeDeclaration .)
    FINAL           reduce using rule 271 (expr_1 -> typeDeclaration .)
    STRICTFP        reduce using rule 271 (expr_1 -> typeDeclaration .)
    AT              reduce using rule 271 (expr_1 -> typeDeclaration .)
    CLASS           reduce using rule 271 (expr_1 -> typeDeclaration .)
    ENUM            reduce using rule 271 (expr_1 -> typeDeclaration .)
    INTERFACE       reduce using rule 271 (expr_1 -> typeDeclaration .)
    $end            reduce using rule 271 (expr_1 -> typeDeclaration .)



state 39

    (269) expr_0 -> expr_0 importDeclaration .

    IMPORT          reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    SEMI            reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    PUBLIC          reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    PROTECTED       reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    PRIVATE         reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    ABSTRACT        reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    STATIC          reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    FINAL           reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    STRICTFP        reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    AT              reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    CLASS           reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    ENUM            reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    INTERFACE       reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)
    $end            reduce using rule 269 (expr_0 -> expr_0 importDeclaration .)



state 40

    (6) typeDeclaration -> SEMI .

    SEMI            reduce using rule 6 (typeDeclaration -> SEMI .)
    PUBLIC          reduce using rule 6 (typeDeclaration -> SEMI .)
    PROTECTED       reduce using rule 6 (typeDeclaration -> SEMI .)
    PRIVATE         reduce using rule 6 (typeDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 6 (typeDeclaration -> SEMI .)
    STATIC          reduce using rule 6 (typeDeclaration -> SEMI .)
    FINAL           reduce using rule 6 (typeDeclaration -> SEMI .)
    STRICTFP        reduce using rule 6 (typeDeclaration -> SEMI .)
    AT              reduce using rule 6 (typeDeclaration -> SEMI .)
    CLASS           reduce using rule 6 (typeDeclaration -> SEMI .)
    ENUM            reduce using rule 6 (typeDeclaration -> SEMI .)
    INTERFACE       reduce using rule 6 (typeDeclaration -> SEMI .)
    $end            reduce using rule 6 (typeDeclaration -> SEMI .)



state 41

    (2) compilationUnit -> expr_3 expr_0 expr_1 .
    (272) expr_1 -> expr_1 . typeDeclaration
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    $end            reduce using rule 2 (compilationUnit -> expr_3 expr_0 expr_1 .)
    SEMI            shift and go to state 40
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    typeDeclaration                shift and go to state 67
    annotation                     shift and go to state 30
    classOrInterfaceModifiers      shift and go to state 32
    empty                          shift and go to state 27
    expr_7                         shift and go to state 25

state 42

    (5) typeDeclaration -> classOrInterfaceDeclaration .

    SEMI            reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    AT              reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    CLASS           reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    ENUM            reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    INTERFACE       reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    $end            reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)



state 43

    (273) expr_1 -> empty .
    (286) expr_7 -> empty .

  ! reduce/reduce conflict for PUBLIC resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for PROTECTED resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for PRIVATE resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for ABSTRACT resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for STATIC resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for STRICTFP resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for CLASS resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for ENUM resolved using rule 273 (expr_1 -> empty .).
  ! reduce/reduce conflict for INTERFACE resolved using rule 273 (expr_1 -> empty .).
    SEMI            reduce using rule 273 (expr_1 -> empty .)
    PUBLIC          reduce using rule 273 (expr_1 -> empty .)
    PROTECTED       reduce using rule 273 (expr_1 -> empty .)
    PRIVATE         reduce using rule 273 (expr_1 -> empty .)
    ABSTRACT        reduce using rule 273 (expr_1 -> empty .)
    STATIC          reduce using rule 273 (expr_1 -> empty .)
    FINAL           reduce using rule 273 (expr_1 -> empty .)
    STRICTFP        reduce using rule 273 (expr_1 -> empty .)
    AT              reduce using rule 273 (expr_1 -> empty .)
    CLASS           reduce using rule 273 (expr_1 -> empty .)
    ENUM            reduce using rule 273 (expr_1 -> empty .)
    INTERFACE       reduce using rule 273 (expr_1 -> empty .)
    $end            reduce using rule 273 (expr_1 -> empty .)

  ! PUBLIC          [ reduce using rule 286 (expr_7 -> empty .) ]
  ! PROTECTED       [ reduce using rule 286 (expr_7 -> empty .) ]
  ! PRIVATE         [ reduce using rule 286 (expr_7 -> empty .) ]
  ! ABSTRACT        [ reduce using rule 286 (expr_7 -> empty .) ]
  ! STATIC          [ reduce using rule 286 (expr_7 -> empty .) ]
  ! FINAL           [ reduce using rule 286 (expr_7 -> empty .) ]
  ! STRICTFP        [ reduce using rule 286 (expr_7 -> empty .) ]
  ! AT              [ reduce using rule 286 (expr_7 -> empty .) ]
  ! CLASS           [ reduce using rule 286 (expr_7 -> empty .) ]
  ! ENUM            [ reduce using rule 286 (expr_7 -> empty .) ]
  ! INTERFACE       [ reduce using rule 286 (expr_7 -> empty .) ]


state 44

    (278) expr_4 -> STATIC .

    Identifier      reduce using rule 278 (expr_4 -> STATIC .)



state 45

    (4) importDeclaration -> IMPORT expr_4 . qualifiedName expr_5 SEMI
    (115) qualifiedName -> . Identifier expr_49

    Identifier      shift and go to state 12


    qualifiedName                  shift and go to state 68

state 46

    (279) expr_4 -> empty .

    Identifier      reduce using rule 279 (expr_4 -> empty .)



state 47

    (130) annotationName -> Identifier expr_49 .
    (385) expr_49 -> expr_49 . DOT Identifier

    LPAREN          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    AT              reduce using rule 130 (annotationName -> Identifier expr_49 .)
    PACKAGE         reduce using rule 130 (annotationName -> Identifier expr_49 .)
    PUBLIC          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    PROTECTED       reduce using rule 130 (annotationName -> Identifier expr_49 .)
    PRIVATE         reduce using rule 130 (annotationName -> Identifier expr_49 .)
    ABSTRACT        reduce using rule 130 (annotationName -> Identifier expr_49 .)
    STATIC          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    FINAL           reduce using rule 130 (annotationName -> Identifier expr_49 .)
    STRICTFP        reduce using rule 130 (annotationName -> Identifier expr_49 .)
    CLASS           reduce using rule 130 (annotationName -> Identifier expr_49 .)
    ENUM            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    INTERFACE       reduce using rule 130 (annotationName -> Identifier expr_49 .)
    Identifier      reduce using rule 130 (annotationName -> Identifier expr_49 .)
    RPAREN          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    COMMA           reduce using rule 130 (annotationName -> Identifier expr_49 .)
    BRPAREN         reduce using rule 130 (annotationName -> Identifier expr_49 .)
    NATIVE          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    SYNCHRONIZED    reduce using rule 130 (annotationName -> Identifier expr_49 .)
    TRANSIENT       reduce using rule 130 (annotationName -> Identifier expr_49 .)
    VOLATILE        reduce using rule 130 (annotationName -> Identifier expr_49 .)
    BOOLEAN         reduce using rule 130 (annotationName -> Identifier expr_49 .)
    CHAR            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    BYTE            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    SHORT           reduce using rule 130 (annotationName -> Identifier expr_49 .)
    INT             reduce using rule 130 (annotationName -> Identifier expr_49 .)
    LONG            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    FLOAT           reduce using rule 130 (annotationName -> Identifier expr_49 .)
    DOUBLE          reduce using rule 130 (annotationName -> Identifier expr_49 .)
    VOID            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    LESS            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    SEMI            reduce using rule 130 (annotationName -> Identifier expr_49 .)
    DOT             shift and go to state 65



state 48

    (129) annotation -> AT annotationName expr_52 .

    FINAL           reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    AT              reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    Identifier      reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    BOOLEAN         reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    CHAR            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    BYTE            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    SHORT           reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    INT             reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    LONG            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    FLOAT           reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    DOUBLE          reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    PUBLIC          reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    PROTECTED       reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    PRIVATE         reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    STATIC          reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    ABSTRACT        reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    NATIVE          reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    SYNCHRONIZED    reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    TRANSIENT       reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    VOLATILE        reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    STRICTFP        reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    VOID            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    LESS            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    INTERFACE       reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    CLASS           reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    ENUM            reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    RPAREN          reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    COMMA           reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    BRPAREN         reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    PACKAGE         reduce using rule 129 (annotation -> AT annotationName expr_52 .)
    SEMI            reduce using rule 129 (annotation -> AT annotationName expr_52 .)



state 49

    (391) expr_52 -> LPAREN . expr_51 RPAREN
    (389) expr_51 -> . elementValuePairs
    (390) expr_51 -> . elementValue
    (131) elementValuePairs -> . elementValuePair expr_53
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (132) elementValuePair -> . Identifier EQUALS elementValue
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    Identifier      shift and go to state 103
    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    elementValuePair               shift and go to state 87
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    expr_51                        shift and go to state 76
    conditionalExpression          shift and go to state 106
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    elementValuePairs              shift and go to state 124
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 129

state 50

    (392) expr_52 -> empty .

    AT              reduce using rule 392 (expr_52 -> empty .)
    PACKAGE         reduce using rule 392 (expr_52 -> empty .)
    PUBLIC          reduce using rule 392 (expr_52 -> empty .)
    PROTECTED       reduce using rule 392 (expr_52 -> empty .)
    PRIVATE         reduce using rule 392 (expr_52 -> empty .)
    ABSTRACT        reduce using rule 392 (expr_52 -> empty .)
    STATIC          reduce using rule 392 (expr_52 -> empty .)
    FINAL           reduce using rule 392 (expr_52 -> empty .)
    STRICTFP        reduce using rule 392 (expr_52 -> empty .)
    CLASS           reduce using rule 392 (expr_52 -> empty .)
    ENUM            reduce using rule 392 (expr_52 -> empty .)
    INTERFACE       reduce using rule 392 (expr_52 -> empty .)
    Identifier      reduce using rule 392 (expr_52 -> empty .)
    RPAREN          reduce using rule 392 (expr_52 -> empty .)
    COMMA           reduce using rule 392 (expr_52 -> empty .)
    BRPAREN         reduce using rule 392 (expr_52 -> empty .)
    NATIVE          reduce using rule 392 (expr_52 -> empty .)
    SYNCHRONIZED    reduce using rule 392 (expr_52 -> empty .)
    TRANSIENT       reduce using rule 392 (expr_52 -> empty .)
    VOLATILE        reduce using rule 392 (expr_52 -> empty .)
    BOOLEAN         reduce using rule 392 (expr_52 -> empty .)
    CHAR            reduce using rule 392 (expr_52 -> empty .)
    BYTE            reduce using rule 392 (expr_52 -> empty .)
    SHORT           reduce using rule 392 (expr_52 -> empty .)
    INT             reduce using rule 392 (expr_52 -> empty .)
    LONG            reduce using rule 392 (expr_52 -> empty .)
    FLOAT           reduce using rule 392 (expr_52 -> empty .)
    DOUBLE          reduce using rule 392 (expr_52 -> empty .)
    VOID            reduce using rule 392 (expr_52 -> empty .)
    LESS            reduce using rule 392 (expr_52 -> empty .)
    SEMI            reduce using rule 392 (expr_52 -> empty .)



state 51

    (285) expr_7 -> expr_7 classOrInterfaceModifier .

    PUBLIC          reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    PROTECTED       reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    PRIVATE         reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    ABSTRACT        reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    STATIC          reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    FINAL           reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    STRICTFP        reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    AT              reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    CLASS           reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    ENUM            reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)
    INTERFACE       reduce using rule 285 (expr_7 -> expr_7 classOrInterfaceModifier .)



state 52

    (275) expr_2 -> classOrInterfaceDeclaration expr_1 .
    (272) expr_1 -> expr_1 . typeDeclaration
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    $end            reduce using rule 275 (expr_2 -> classOrInterfaceDeclaration expr_1 .)
    SEMI            shift and go to state 40
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    typeDeclaration                shift and go to state 67
    classOrInterfaceModifiers      shift and go to state 32
    expr_7                         shift and go to state 25
    annotation                     shift and go to state 30
    empty                          shift and go to state 27

state 53

    (274) expr_2 -> packageDeclaration expr_0 . expr_1
    (269) expr_0 -> expr_0 . importDeclaration
    (271) expr_1 -> . typeDeclaration
    (272) expr_1 -> . expr_1 typeDeclaration
    (273) expr_1 -> . empty
    (4) importDeclaration -> . IMPORT expr_4 qualifiedName expr_5 SEMI
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (502) empty -> .
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            shift and go to state 40
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    $end            reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    importDeclaration              shift and go to state 39
    typeDeclaration                shift and go to state 38
    classOrInterfaceModifiers      shift and go to state 32
    expr_7                         shift and go to state 25
    annotation                     shift and go to state 30
    empty                          shift and go to state 43
    expr_1                         shift and go to state 130

state 54

    (19) classDeclaration -> enumDeclaration .

    SEMI            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    PUBLIC          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    PROTECTED       reduce using rule 19 (classDeclaration -> enumDeclaration .)
    PRIVATE         reduce using rule 19 (classDeclaration -> enumDeclaration .)
    ABSTRACT        reduce using rule 19 (classDeclaration -> enumDeclaration .)
    STATIC          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    FINAL           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    STRICTFP        reduce using rule 19 (classDeclaration -> enumDeclaration .)
    AT              reduce using rule 19 (classDeclaration -> enumDeclaration .)
    CLASS           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    ENUM            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    INTERFACE       reduce using rule 19 (classDeclaration -> enumDeclaration .)
    $end            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    BRPAREN         reduce using rule 19 (classDeclaration -> enumDeclaration .)
    ASSERT          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    IF              reduce using rule 19 (classDeclaration -> enumDeclaration .)
    FOR             reduce using rule 19 (classDeclaration -> enumDeclaration .)
    WHILE           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    DO              reduce using rule 19 (classDeclaration -> enumDeclaration .)
    TRY             reduce using rule 19 (classDeclaration -> enumDeclaration .)
    SWITCH          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    SYNCHRONIZED    reduce using rule 19 (classDeclaration -> enumDeclaration .)
    RETURN          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    THROW           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    BREAK           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    CONTINUE        reduce using rule 19 (classDeclaration -> enumDeclaration .)
    Identifier      reduce using rule 19 (classDeclaration -> enumDeclaration .)
    BLPAREN         reduce using rule 19 (classDeclaration -> enumDeclaration .)
    BOOLEAN         reduce using rule 19 (classDeclaration -> enumDeclaration .)
    CHAR            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    BYTE            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    SHORT           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    INT             reduce using rule 19 (classDeclaration -> enumDeclaration .)
    LONG            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    FLOAT           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    DOUBLE          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    PLUS            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    DASH            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    OP_INC          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    OP_DEC          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    TILDE           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    EXCLAMATION     reduce using rule 19 (classDeclaration -> enumDeclaration .)
    LPAREN          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    THIS            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    SUPER           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NEW             reduce using rule 19 (classDeclaration -> enumDeclaration .)
    VOID            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    CharacterLiteral reduce using rule 19 (classDeclaration -> enumDeclaration .)
    StringLiteral   reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NULL            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NUMBER          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    HEX_NUMBER      reduce using rule 19 (classDeclaration -> enumDeclaration .)
    LONG_NUMBER     reduce using rule 19 (classDeclaration -> enumDeclaration .)
    LONG_HEX_NUMBER reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_1   reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_2   reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_3   reduce using rule 19 (classDeclaration -> enumDeclaration .)
    TRUE            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    FALSE           reduce using rule 19 (classDeclaration -> enumDeclaration .)
    CASE            reduce using rule 19 (classDeclaration -> enumDeclaration .)
    DEFAULT         reduce using rule 19 (classDeclaration -> enumDeclaration .)
    NATIVE          reduce using rule 19 (classDeclaration -> enumDeclaration .)
    TRANSIENT       reduce using rule 19 (classDeclaration -> enumDeclaration .)
    VOLATILE        reduce using rule 19 (classDeclaration -> enumDeclaration .)
    LESS            reduce using rule 19 (classDeclaration -> enumDeclaration .)



state 55

    (18) classDeclaration -> normalClassDeclaration .

    SEMI            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    PUBLIC          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    PROTECTED       reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    PRIVATE         reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    ABSTRACT        reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    STATIC          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    FINAL           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    STRICTFP        reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    AT              reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    CLASS           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    ENUM            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    INTERFACE       reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    $end            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    BRPAREN         reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    ASSERT          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    IF              reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    FOR             reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    WHILE           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    DO              reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    TRY             reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    SWITCH          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    SYNCHRONIZED    reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    RETURN          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    THROW           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    BREAK           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    CONTINUE        reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    Identifier      reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    BLPAREN         reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    BOOLEAN         reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    CHAR            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    BYTE            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    SHORT           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    INT             reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    LONG            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    FLOAT           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    DOUBLE          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    PLUS            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    DASH            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    OP_INC          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    OP_DEC          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    TILDE           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    EXCLAMATION     reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    LPAREN          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    THIS            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    SUPER           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NEW             reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    VOID            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    CharacterLiteral reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    StringLiteral   reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NULL            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NUMBER          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    HEX_NUMBER      reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    LONG_NUMBER     reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    LONG_HEX_NUMBER reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_1   reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_2   reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_3   reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    TRUE            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    FALSE           reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    CASE            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    DEFAULT         reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    NATIVE          reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    TRANSIENT       reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    VOLATILE        reduce using rule 18 (classDeclaration -> normalClassDeclaration .)
    LESS            reduce using rule 18 (classDeclaration -> normalClassDeclaration .)



state 56

    (24) enumDeclaration -> ENUM . Identifier expr_11 enumBody

    Identifier      shift and go to state 131



state 57

    (283) expr_6 -> interfaceDeclaration .

    SEMI            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    PUBLIC          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    PROTECTED       reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    PRIVATE         reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    STATIC          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    FINAL           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    STRICTFP        reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    AT              reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    CLASS           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    ENUM            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    INTERFACE       reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    $end            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    BRPAREN         reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    ASSERT          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    IF              reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    FOR             reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    WHILE           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    DO              reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    TRY             reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    SWITCH          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    RETURN          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    THROW           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    BREAK           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    CONTINUE        reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    Identifier      reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    BLPAREN         reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    CHAR            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    BYTE            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    SHORT           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    INT             reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    LONG            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    FLOAT           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    DOUBLE          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    PLUS            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    DASH            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    OP_INC          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    OP_DEC          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    TILDE           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    EXCLAMATION     reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    LPAREN          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    THIS            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    SUPER           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NEW             reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    VOID            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    CharacterLiteral reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    StringLiteral   reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NULL            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NUMBER          reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    HEX_NUMBER      reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    LONG_NUMBER     reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    TRUE            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    FALSE           reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    CASE            reduce using rule 283 (expr_6 -> interfaceDeclaration .)
    DEFAULT         reduce using rule 283 (expr_6 -> interfaceDeclaration .)



state 58

    (30) interfaceDeclaration -> annotationTypeDeclaration .

    BRPAREN         reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    SEMI            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    PUBLIC          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    PROTECTED       reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    PRIVATE         reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    STATIC          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    ABSTRACT        reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    FINAL           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NATIVE          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    SYNCHRONIZED    reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRANSIENT       reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOLATILE        reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    STRICTFP        reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    AT              reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOID            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    LESS            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    INTERFACE       reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    CLASS           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    ENUM            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    Identifier      reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    BOOLEAN         reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    CHAR            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    BYTE            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    SHORT           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    INT             reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    FLOAT           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    DOUBLE          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    $end            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    ASSERT          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    IF              reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    FOR             reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    WHILE           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    DO              reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRY             reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    SWITCH          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    RETURN          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    THROW           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    BREAK           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    CONTINUE        reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    BLPAREN         reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    PLUS            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    DASH            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_INC          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_DEC          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    TILDE           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    EXCLAMATION     reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    LPAREN          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    THIS            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    SUPER           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NEW             reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    CharacterLiteral reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    StringLiteral   reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NULL            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NUMBER          reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    HEX_NUMBER      reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_NUMBER     reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_HEX_NUMBER reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_1   reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_2   reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_3   reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRUE            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    FALSE           reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    CASE            reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)
    DEFAULT         reduce using rule 30 (interfaceDeclaration -> annotationTypeDeclaration .)



state 59

    (31) normalInterfaceDeclaration -> INTERFACE . Identifier expr_9 expr_23 interfaceBody

    Identifier      shift and go to state 132



state 60

    (282) expr_6 -> classDeclaration .

    SEMI            reduce using rule 282 (expr_6 -> classDeclaration .)
    PUBLIC          reduce using rule 282 (expr_6 -> classDeclaration .)
    PROTECTED       reduce using rule 282 (expr_6 -> classDeclaration .)
    PRIVATE         reduce using rule 282 (expr_6 -> classDeclaration .)
    ABSTRACT        reduce using rule 282 (expr_6 -> classDeclaration .)
    STATIC          reduce using rule 282 (expr_6 -> classDeclaration .)
    FINAL           reduce using rule 282 (expr_6 -> classDeclaration .)
    STRICTFP        reduce using rule 282 (expr_6 -> classDeclaration .)
    AT              reduce using rule 282 (expr_6 -> classDeclaration .)
    CLASS           reduce using rule 282 (expr_6 -> classDeclaration .)
    ENUM            reduce using rule 282 (expr_6 -> classDeclaration .)
    INTERFACE       reduce using rule 282 (expr_6 -> classDeclaration .)
    $end            reduce using rule 282 (expr_6 -> classDeclaration .)
    BRPAREN         reduce using rule 282 (expr_6 -> classDeclaration .)
    ASSERT          reduce using rule 282 (expr_6 -> classDeclaration .)
    IF              reduce using rule 282 (expr_6 -> classDeclaration .)
    FOR             reduce using rule 282 (expr_6 -> classDeclaration .)
    WHILE           reduce using rule 282 (expr_6 -> classDeclaration .)
    DO              reduce using rule 282 (expr_6 -> classDeclaration .)
    TRY             reduce using rule 282 (expr_6 -> classDeclaration .)
    SWITCH          reduce using rule 282 (expr_6 -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 282 (expr_6 -> classDeclaration .)
    RETURN          reduce using rule 282 (expr_6 -> classDeclaration .)
    THROW           reduce using rule 282 (expr_6 -> classDeclaration .)
    BREAK           reduce using rule 282 (expr_6 -> classDeclaration .)
    CONTINUE        reduce using rule 282 (expr_6 -> classDeclaration .)
    Identifier      reduce using rule 282 (expr_6 -> classDeclaration .)
    BLPAREN         reduce using rule 282 (expr_6 -> classDeclaration .)
    BOOLEAN         reduce using rule 282 (expr_6 -> classDeclaration .)
    CHAR            reduce using rule 282 (expr_6 -> classDeclaration .)
    BYTE            reduce using rule 282 (expr_6 -> classDeclaration .)
    SHORT           reduce using rule 282 (expr_6 -> classDeclaration .)
    INT             reduce using rule 282 (expr_6 -> classDeclaration .)
    LONG            reduce using rule 282 (expr_6 -> classDeclaration .)
    FLOAT           reduce using rule 282 (expr_6 -> classDeclaration .)
    DOUBLE          reduce using rule 282 (expr_6 -> classDeclaration .)
    PLUS            reduce using rule 282 (expr_6 -> classDeclaration .)
    DASH            reduce using rule 282 (expr_6 -> classDeclaration .)
    OP_INC          reduce using rule 282 (expr_6 -> classDeclaration .)
    OP_DEC          reduce using rule 282 (expr_6 -> classDeclaration .)
    TILDE           reduce using rule 282 (expr_6 -> classDeclaration .)
    EXCLAMATION     reduce using rule 282 (expr_6 -> classDeclaration .)
    LPAREN          reduce using rule 282 (expr_6 -> classDeclaration .)
    THIS            reduce using rule 282 (expr_6 -> classDeclaration .)
    SUPER           reduce using rule 282 (expr_6 -> classDeclaration .)
    NEW             reduce using rule 282 (expr_6 -> classDeclaration .)
    VOID            reduce using rule 282 (expr_6 -> classDeclaration .)
    CharacterLiteral reduce using rule 282 (expr_6 -> classDeclaration .)
    StringLiteral   reduce using rule 282 (expr_6 -> classDeclaration .)
    NULL            reduce using rule 282 (expr_6 -> classDeclaration .)
    NUMBER          reduce using rule 282 (expr_6 -> classDeclaration .)
    HEX_NUMBER      reduce using rule 282 (expr_6 -> classDeclaration .)
    LONG_NUMBER     reduce using rule 282 (expr_6 -> classDeclaration .)
    LONG_HEX_NUMBER reduce using rule 282 (expr_6 -> classDeclaration .)
    NON_INTEGER_1   reduce using rule 282 (expr_6 -> classDeclaration .)
    NON_INTEGER_2   reduce using rule 282 (expr_6 -> classDeclaration .)
    NON_INTEGER_3   reduce using rule 282 (expr_6 -> classDeclaration .)
    TRUE            reduce using rule 282 (expr_6 -> classDeclaration .)
    FALSE           reduce using rule 282 (expr_6 -> classDeclaration .)
    CASE            reduce using rule 282 (expr_6 -> classDeclaration .)
    DEFAULT         reduce using rule 282 (expr_6 -> classDeclaration .)



state 61

    (7) classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .

    SEMI            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    PUBLIC          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    PROTECTED       reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    PRIVATE         reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    ABSTRACT        reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    STATIC          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    FINAL           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    STRICTFP        reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    AT              reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    CLASS           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    ENUM            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    INTERFACE       reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    $end            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    BRPAREN         reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    ASSERT          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    IF              reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    FOR             reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    WHILE           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    DO              reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    TRY             reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    SWITCH          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    SYNCHRONIZED    reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    RETURN          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    THROW           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    BREAK           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    CONTINUE        reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    Identifier      reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    BLPAREN         reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    BOOLEAN         reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    CHAR            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    BYTE            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    SHORT           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    INT             reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    LONG            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    FLOAT           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    DOUBLE          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    PLUS            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    DASH            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    OP_INC          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    OP_DEC          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    TILDE           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    EXCLAMATION     reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    LPAREN          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    THIS            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    SUPER           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NEW             reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    VOID            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    CharacterLiteral reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    StringLiteral   reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NULL            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NUMBER          reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    HEX_NUMBER      reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    LONG_NUMBER     reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    LONG_HEX_NUMBER reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NON_INTEGER_1   reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NON_INTEGER_2   reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    NON_INTEGER_3   reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    TRUE            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    FALSE           reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    CASE            reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)
    DEFAULT         reduce using rule 7 (classOrInterfaceDeclaration -> classOrInterfaceModifiers expr_6 .)



state 62

    (29) interfaceDeclaration -> normalInterfaceDeclaration .

    BRPAREN         reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SEMI            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PUBLIC          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PROTECTED       reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PRIVATE         reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STATIC          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ABSTRACT        reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FINAL           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NATIVE          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRANSIENT       reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOLATILE        reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STRICTFP        reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    AT              reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOID            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LESS            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    INTERFACE       reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CLASS           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ENUM            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    Identifier      reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BOOLEAN         reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CHAR            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BYTE            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SHORT           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    INT             reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FLOAT           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DOUBLE          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    $end            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ASSERT          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    IF              reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FOR             reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    WHILE           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DO              reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRY             reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SWITCH          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    RETURN          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THROW           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BREAK           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CONTINUE        reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BLPAREN         reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PLUS            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DASH            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_INC          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_DEC          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TILDE           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LPAREN          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THIS            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SUPER           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NEW             reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CharacterLiteral reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    StringLiteral   reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NULL            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NUMBER          reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRUE            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FALSE           reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CASE            reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DEFAULT         reduce using rule 29 (interfaceDeclaration -> normalInterfaceDeclaration .)



state 63

    (20) normalClassDeclaration -> CLASS . Identifier expr_9 expr_10 expr_11 classBody

    Identifier      shift and go to state 133



state 64

    (137) annotationTypeDeclaration -> AT . INTERFACE Identifier annotationTypeBody

    INTERFACE       shift and go to state 134



state 65

    (385) expr_49 -> expr_49 DOT . Identifier

    Identifier      shift and go to state 135



state 66

    (384) expr_49 -> DOT Identifier .

    DOT             reduce using rule 384 (expr_49 -> DOT Identifier .)
    LPAREN          reduce using rule 384 (expr_49 -> DOT Identifier .)
    AT              reduce using rule 384 (expr_49 -> DOT Identifier .)
    PACKAGE         reduce using rule 384 (expr_49 -> DOT Identifier .)
    PUBLIC          reduce using rule 384 (expr_49 -> DOT Identifier .)
    PROTECTED       reduce using rule 384 (expr_49 -> DOT Identifier .)
    PRIVATE         reduce using rule 384 (expr_49 -> DOT Identifier .)
    ABSTRACT        reduce using rule 384 (expr_49 -> DOT Identifier .)
    STATIC          reduce using rule 384 (expr_49 -> DOT Identifier .)
    FINAL           reduce using rule 384 (expr_49 -> DOT Identifier .)
    STRICTFP        reduce using rule 384 (expr_49 -> DOT Identifier .)
    CLASS           reduce using rule 384 (expr_49 -> DOT Identifier .)
    ENUM            reduce using rule 384 (expr_49 -> DOT Identifier .)
    INTERFACE       reduce using rule 384 (expr_49 -> DOT Identifier .)
    Identifier      reduce using rule 384 (expr_49 -> DOT Identifier .)
    RPAREN          reduce using rule 384 (expr_49 -> DOT Identifier .)
    COMMA           reduce using rule 384 (expr_49 -> DOT Identifier .)
    BRPAREN         reduce using rule 384 (expr_49 -> DOT Identifier .)
    NATIVE          reduce using rule 384 (expr_49 -> DOT Identifier .)
    SYNCHRONIZED    reduce using rule 384 (expr_49 -> DOT Identifier .)
    TRANSIENT       reduce using rule 384 (expr_49 -> DOT Identifier .)
    VOLATILE        reduce using rule 384 (expr_49 -> DOT Identifier .)
    BOOLEAN         reduce using rule 384 (expr_49 -> DOT Identifier .)
    CHAR            reduce using rule 384 (expr_49 -> DOT Identifier .)
    BYTE            reduce using rule 384 (expr_49 -> DOT Identifier .)
    SHORT           reduce using rule 384 (expr_49 -> DOT Identifier .)
    INT             reduce using rule 384 (expr_49 -> DOT Identifier .)
    LONG            reduce using rule 384 (expr_49 -> DOT Identifier .)
    FLOAT           reduce using rule 384 (expr_49 -> DOT Identifier .)
    DOUBLE          reduce using rule 384 (expr_49 -> DOT Identifier .)
    VOID            reduce using rule 384 (expr_49 -> DOT Identifier .)
    LESS            reduce using rule 384 (expr_49 -> DOT Identifier .)
    SEMI            reduce using rule 384 (expr_49 -> DOT Identifier .)
    FLPAREN         reduce using rule 384 (expr_49 -> DOT Identifier .)
    OP_INC          reduce using rule 384 (expr_49 -> DOT Identifier .)
    OP_DEC          reduce using rule 384 (expr_49 -> DOT Identifier .)
    BLPAREN         reduce using rule 384 (expr_49 -> DOT Identifier .)



state 67

    (272) expr_1 -> expr_1 typeDeclaration .

    SEMI            reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    PUBLIC          reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    PROTECTED       reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    PRIVATE         reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    ABSTRACT        reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    STATIC          reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    FINAL           reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    STRICTFP        reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    AT              reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    CLASS           reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    ENUM            reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    INTERFACE       reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)
    $end            reduce using rule 272 (expr_1 -> expr_1 typeDeclaration .)



state 68

    (4) importDeclaration -> IMPORT expr_4 qualifiedName . expr_5 SEMI
    (280) expr_5 -> . DOT MULT
    (281) expr_5 -> . empty
    (502) empty -> .

    DOT             shift and go to state 138
    SEMI            reduce using rule 502 (empty -> .)


    expr_5                         shift and go to state 137
    empty                          shift and go to state 136

state 69

    (230) unaryExpressionNotPlusMinus -> EXCLAMATION . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 139
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 70

    (206) conditionalOrExpression -> conditionalAndExpression . expr_74
    (443) expr_74 -> . OP_LOR conditionalAndExpression
    (444) expr_74 -> . expr_74 OP_LOR conditionalAndExpression
    (445) expr_74 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for OP_LOR resolved as shift.
    OP_LOR          shift and go to state 143
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! OP_LOR          [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 141
    expr_74                        shift and go to state 142

state 71

    (126) booleanLiteral -> TRUE .

    DOT             reduce using rule 126 (booleanLiteral -> TRUE .)
    FLPAREN         reduce using rule 126 (booleanLiteral -> TRUE .)
    OP_INC          reduce using rule 126 (booleanLiteral -> TRUE .)
    OP_DEC          reduce using rule 126 (booleanLiteral -> TRUE .)



state 72

    (98) primitiveType -> LONG .

    FLPAREN         reduce using rule 98 (primitiveType -> LONG .)
    DOT             reduce using rule 98 (primitiveType -> LONG .)
    AND             reduce using rule 98 (primitiveType -> LONG .)
    COMMA           reduce using rule 98 (primitiveType -> LONG .)
    MORE            reduce using rule 98 (primitiveType -> LONG .)
    Identifier      reduce using rule 98 (primitiveType -> LONG .)
    BLPAREN         reduce using rule 98 (primitiveType -> LONG .)
    IMPLEMENTS      reduce using rule 98 (primitiveType -> LONG .)
    LPAREN          reduce using rule 98 (primitiveType -> LONG .)
    OP_ARRAY        reduce using rule 98 (primitiveType -> LONG .)
    OP_EQ           reduce using rule 98 (primitiveType -> LONG .)
    OP_NE           reduce using rule 98 (primitiveType -> LONG .)
    CARET           reduce using rule 98 (primitiveType -> LONG .)
    VERTICAL        reduce using rule 98 (primitiveType -> LONG .)
    OP_LAND         reduce using rule 98 (primitiveType -> LONG .)
    OP_LOR          reduce using rule 98 (primitiveType -> LONG .)
    QUES            reduce using rule 98 (primitiveType -> LONG .)
    RPAREN          reduce using rule 98 (primitiveType -> LONG .)
    BRPAREN         reduce using rule 98 (primitiveType -> LONG .)
    EQUALS          reduce using rule 98 (primitiveType -> LONG .)
    ASS_ADD         reduce using rule 98 (primitiveType -> LONG .)
    ASS_SUB         reduce using rule 98 (primitiveType -> LONG .)
    ASS_MUL         reduce using rule 98 (primitiveType -> LONG .)
    ASS_DIV         reduce using rule 98 (primitiveType -> LONG .)
    ASS_AND         reduce using rule 98 (primitiveType -> LONG .)
    ASS_OR          reduce using rule 98 (primitiveType -> LONG .)
    ASS_XOR         reduce using rule 98 (primitiveType -> LONG .)
    ASS_MOD         reduce using rule 98 (primitiveType -> LONG .)
    LESS            reduce using rule 98 (primitiveType -> LONG .)
    COLON           reduce using rule 98 (primitiveType -> LONG .)
    FRPAREN         reduce using rule 98 (primitiveType -> LONG .)
    SEMI            reduce using rule 98 (primitiveType -> LONG .)



state 73

    (120) literal -> booleanLiteral .

    DOT             reduce using rule 120 (literal -> booleanLiteral .)
    FLPAREN         reduce using rule 120 (literal -> booleanLiteral .)
    OP_INC          reduce using rule 120 (literal -> booleanLiteral .)
    OP_DEC          reduce using rule 120 (literal -> booleanLiteral .)



state 74

    (224) unaryExpression -> PLUS . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 144
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 75

    (242) primary -> VOID . DOT CLASS

    DOT             shift and go to state 145



state 76

    (391) expr_52 -> LPAREN expr_51 . RPAREN

    RPAREN          shift and go to state 146



state 77

    (225) unaryExpression -> DASH . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 147
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 78

    (212) instanceOfExpression -> relationalExpression . expr_81
    (463) expr_81 -> . INSTANCEOF type
    (464) expr_81 -> . empty
    (502) empty -> .

    INSTANCEOF      shift and go to state 148
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)


    empty                          shift and go to state 149
    expr_81                        shift and go to state 150

state 79

    (127) booleanLiteral -> FALSE .

    DOT             reduce using rule 127 (booleanLiteral -> FALSE .)
    FLPAREN         reduce using rule 127 (booleanLiteral -> FALSE .)
    OP_INC          reduce using rule 127 (booleanLiteral -> FALSE .)
    OP_DEC          reduce using rule 127 (booleanLiteral -> FALSE .)



state 80

    (211) equalityExpression -> instanceOfExpression . expr_80
    (460) expr_80 -> . expr_79 instanceOfExpression
    (461) expr_80 -> . expr_80 expr_79 instanceOfExpression
    (462) expr_80 -> . empty
    (458) expr_79 -> . OP_EQ
    (459) expr_79 -> . OP_NE
    (502) empty -> .

  ! shift/reduce conflict for OP_EQ resolved as shift.
  ! shift/reduce conflict for OP_NE resolved as shift.
    OP_EQ           shift and go to state 152
    OP_NE           shift and go to state 151
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! OP_EQ           [ reduce using rule 502 (empty -> .) ]
  ! OP_NE           [ reduce using rule 502 (empty -> .) ]

    expr_79                        shift and go to state 154
    empty                          shift and go to state 155
    expr_80                        shift and go to state 153

state 81

    (236) primary -> THIS . expr_49 expr_91
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 37
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 156
    empty                          shift and go to state 36

state 82

    (100) primitiveType -> DOUBLE .

    FLPAREN         reduce using rule 100 (primitiveType -> DOUBLE .)
    DOT             reduce using rule 100 (primitiveType -> DOUBLE .)
    AND             reduce using rule 100 (primitiveType -> DOUBLE .)
    COMMA           reduce using rule 100 (primitiveType -> DOUBLE .)
    MORE            reduce using rule 100 (primitiveType -> DOUBLE .)
    Identifier      reduce using rule 100 (primitiveType -> DOUBLE .)
    BLPAREN         reduce using rule 100 (primitiveType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 100 (primitiveType -> DOUBLE .)
    LPAREN          reduce using rule 100 (primitiveType -> DOUBLE .)
    OP_ARRAY        reduce using rule 100 (primitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 100 (primitiveType -> DOUBLE .)
    OP_NE           reduce using rule 100 (primitiveType -> DOUBLE .)
    CARET           reduce using rule 100 (primitiveType -> DOUBLE .)
    VERTICAL        reduce using rule 100 (primitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 100 (primitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 100 (primitiveType -> DOUBLE .)
    QUES            reduce using rule 100 (primitiveType -> DOUBLE .)
    RPAREN          reduce using rule 100 (primitiveType -> DOUBLE .)
    BRPAREN         reduce using rule 100 (primitiveType -> DOUBLE .)
    EQUALS          reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_ADD         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_SUB         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_MUL         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_DIV         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_AND         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_OR          reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_XOR         reduce using rule 100 (primitiveType -> DOUBLE .)
    ASS_MOD         reduce using rule 100 (primitiveType -> DOUBLE .)
    LESS            reduce using rule 100 (primitiveType -> DOUBLE .)
    COLON           reduce using rule 100 (primitiveType -> DOUBLE .)
    FRPAREN         reduce using rule 100 (primitiveType -> DOUBLE .)
    SEMI            reduce using rule 100 (primitiveType -> DOUBLE .)



state 83

    (116) literal -> integerLiteral .

    DOT             reduce using rule 116 (literal -> integerLiteral .)
    FLPAREN         reduce using rule 116 (literal -> integerLiteral .)
    OP_INC          reduce using rule 116 (literal -> integerLiteral .)
    OP_DEC          reduce using rule 116 (literal -> integerLiteral .)



state 84

    (96) primitiveType -> SHORT .

    FLPAREN         reduce using rule 96 (primitiveType -> SHORT .)
    DOT             reduce using rule 96 (primitiveType -> SHORT .)
    AND             reduce using rule 96 (primitiveType -> SHORT .)
    COMMA           reduce using rule 96 (primitiveType -> SHORT .)
    MORE            reduce using rule 96 (primitiveType -> SHORT .)
    Identifier      reduce using rule 96 (primitiveType -> SHORT .)
    BLPAREN         reduce using rule 96 (primitiveType -> SHORT .)
    IMPLEMENTS      reduce using rule 96 (primitiveType -> SHORT .)
    LPAREN          reduce using rule 96 (primitiveType -> SHORT .)
    OP_ARRAY        reduce using rule 96 (primitiveType -> SHORT .)
    OP_EQ           reduce using rule 96 (primitiveType -> SHORT .)
    OP_NE           reduce using rule 96 (primitiveType -> SHORT .)
    CARET           reduce using rule 96 (primitiveType -> SHORT .)
    VERTICAL        reduce using rule 96 (primitiveType -> SHORT .)
    OP_LAND         reduce using rule 96 (primitiveType -> SHORT .)
    OP_LOR          reduce using rule 96 (primitiveType -> SHORT .)
    QUES            reduce using rule 96 (primitiveType -> SHORT .)
    RPAREN          reduce using rule 96 (primitiveType -> SHORT .)
    BRPAREN         reduce using rule 96 (primitiveType -> SHORT .)
    EQUALS          reduce using rule 96 (primitiveType -> SHORT .)
    ASS_ADD         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_SUB         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_MUL         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_DIV         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_AND         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_OR          reduce using rule 96 (primitiveType -> SHORT .)
    ASS_XOR         reduce using rule 96 (primitiveType -> SHORT .)
    ASS_MOD         reduce using rule 96 (primitiveType -> SHORT .)
    LESS            reduce using rule 96 (primitiveType -> SHORT .)
    COLON           reduce using rule 96 (primitiveType -> SHORT .)
    FRPAREN         reduce using rule 96 (primitiveType -> SHORT .)
    SEMI            reduce using rule 96 (primitiveType -> SHORT .)



state 85

    (207) conditionalAndExpression -> inclusiveOrExpression . expr_75
    (446) expr_75 -> . OP_LAND inclusiveOrExpression
    (447) expr_75 -> . expr_75 OP_LAND inclusiveOrExpression
    (448) expr_75 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for OP_LAND resolved as shift.
    OP_LAND         shift and go to state 157
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! OP_LAND         [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 158
    expr_75                        shift and go to state 159

state 86

    (124) integerLiteral -> LONG_NUMBER .

    DOT             reduce using rule 124 (integerLiteral -> LONG_NUMBER .)
    FLPAREN         reduce using rule 124 (integerLiteral -> LONG_NUMBER .)
    OP_INC          reduce using rule 124 (integerLiteral -> LONG_NUMBER .)
    OP_DEC          reduce using rule 124 (integerLiteral -> LONG_NUMBER .)



state 87

    (131) elementValuePairs -> elementValuePair . expr_53
    (393) expr_53 -> . COMMA elementValuePair
    (394) expr_53 -> . expr_53 COMMA elementValuePair
    (395) expr_53 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 161
    RPAREN          reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_53                        shift and go to state 160
    empty                          shift and go to state 162

state 88

    (218) shiftExpression -> additiveExpression . expr_83
    (468) expr_83 -> . shiftOp additiveExpression
    (469) expr_83 -> . expr_83 shiftOp additiveExpression
    (470) expr_83 -> . empty
    (219) shiftOp -> . LESS LESS
    (220) shiftOp -> . MORE MORE MORE
    (221) shiftOp -> . MORE MORE
    (502) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    LESS            shift and go to state 164
    MORE            shift and go to state 167
    INSTANCEOF      reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! LESS            [ reduce using rule 502 (empty -> .) ]
  ! MORE            [ reduce using rule 502 (empty -> .) ]

    expr_83                        shift and go to state 163
    empty                          shift and go to state 166
    shiftOp                        shift and go to state 165

state 89

    (118) literal -> CharacterLiteral .

    DOT             reduce using rule 118 (literal -> CharacterLiteral .)
    FLPAREN         reduce using rule 118 (literal -> CharacterLiteral .)
    OP_INC          reduce using rule 118 (literal -> CharacterLiteral .)
    OP_DEC          reduce using rule 118 (literal -> CharacterLiteral .)



state 90

    (97) primitiveType -> INT .

    FLPAREN         reduce using rule 97 (primitiveType -> INT .)
    DOT             reduce using rule 97 (primitiveType -> INT .)
    AND             reduce using rule 97 (primitiveType -> INT .)
    COMMA           reduce using rule 97 (primitiveType -> INT .)
    MORE            reduce using rule 97 (primitiveType -> INT .)
    Identifier      reduce using rule 97 (primitiveType -> INT .)
    BLPAREN         reduce using rule 97 (primitiveType -> INT .)
    IMPLEMENTS      reduce using rule 97 (primitiveType -> INT .)
    LPAREN          reduce using rule 97 (primitiveType -> INT .)
    OP_ARRAY        reduce using rule 97 (primitiveType -> INT .)
    OP_EQ           reduce using rule 97 (primitiveType -> INT .)
    OP_NE           reduce using rule 97 (primitiveType -> INT .)
    CARET           reduce using rule 97 (primitiveType -> INT .)
    VERTICAL        reduce using rule 97 (primitiveType -> INT .)
    OP_LAND         reduce using rule 97 (primitiveType -> INT .)
    OP_LOR          reduce using rule 97 (primitiveType -> INT .)
    QUES            reduce using rule 97 (primitiveType -> INT .)
    RPAREN          reduce using rule 97 (primitiveType -> INT .)
    BRPAREN         reduce using rule 97 (primitiveType -> INT .)
    EQUALS          reduce using rule 97 (primitiveType -> INT .)
    ASS_ADD         reduce using rule 97 (primitiveType -> INT .)
    ASS_SUB         reduce using rule 97 (primitiveType -> INT .)
    ASS_MUL         reduce using rule 97 (primitiveType -> INT .)
    ASS_DIV         reduce using rule 97 (primitiveType -> INT .)
    ASS_AND         reduce using rule 97 (primitiveType -> INT .)
    ASS_OR          reduce using rule 97 (primitiveType -> INT .)
    ASS_XOR         reduce using rule 97 (primitiveType -> INT .)
    ASS_MOD         reduce using rule 97 (primitiveType -> INT .)
    LESS            reduce using rule 97 (primitiveType -> INT .)
    COLON           reduce using rule 97 (primitiveType -> INT .)
    FRPAREN         reduce using rule 97 (primitiveType -> INT .)
    SEMI            reduce using rule 97 (primitiveType -> INT .)



state 91

    (228) unaryExpression -> unaryExpressionNotPlusMinus .

    MULT            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    AND             reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 228 (unaryExpression -> unaryExpressionNotPlusMinus .)



state 92

    (209) exclusiveOrExpression -> andExpression . expr_77
    (452) expr_77 -> . CARET andExpression
    (453) expr_77 -> . expr_77 CARET andExpression
    (454) expr_77 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for CARET resolved as shift.
    CARET           shift and go to state 168
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! CARET           [ reduce using rule 502 (empty -> .) ]

    expr_77                        shift and go to state 169
    empty                          shift and go to state 170

state 93

    (136) elementValueArrayInitializer -> BLPAREN . expr_55 expr_35 BRPAREN
    (399) expr_55 -> . elementValue expr_54
    (400) expr_55 -> . empty
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    unaryExpression                shift and go to state 121
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    empty                          shift and go to state 172
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 106
    expr_55                        shift and go to state 171
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 173

state 94

    (210) andExpression -> equalityExpression . expr_78
    (455) expr_78 -> . AND equalityExpression
    (456) expr_78 -> . expr_78 AND equalityExpression
    (457) expr_78 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for AND resolved as shift.
    AND             shift and go to state 174
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! AND             [ reduce using rule 502 (empty -> .) ]

    expr_78                        shift and go to state 175
    empty                          shift and go to state 176

state 95

    (205) conditionalExpression -> conditionalOrExpression . expr_73
    (441) expr_73 -> . QUES expression COLON expression
    (442) expr_73 -> . empty
    (502) empty -> .

    QUES            shift and go to state 178
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)


    expr_73                        shift and go to state 177
    empty                          shift and go to state 179

state 96

    (208) inclusiveOrExpression -> exclusiveOrExpression . expr_76
    (449) expr_76 -> . VERTICAL exclusiveOrExpression
    (450) expr_76 -> . expr_76 VERTICAL exclusiveOrExpression
    (451) expr_76 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for VERTICAL resolved as shift.
    VERTICAL        shift and go to state 182
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! VERTICAL        [ reduce using rule 502 (empty -> .) ]

    expr_76                        shift and go to state 180
    empty                          shift and go to state 181

state 97

    (232) unaryExpressionNotPlusMinus -> primary . expr_88 expr_89
    (482) expr_88 -> . selector
    (483) expr_88 -> . expr_88 selector
    (484) expr_88 -> . empty
    (260) selector -> . DOT Identifier expr_20
    (261) selector -> . DOT THIS
    (262) selector -> . DOT SUPER superSuffix
    (263) selector -> . DOT NEW innerCreator
    (264) selector -> . FLPAREN expression FRPAREN
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 185
    FLPAREN         shift and go to state 183
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    selector                       shift and go to state 184
    expr_88                        shift and go to state 186
    empty                          shift and go to state 187

state 98

    (94) primitiveType -> CHAR .

    FLPAREN         reduce using rule 94 (primitiveType -> CHAR .)
    DOT             reduce using rule 94 (primitiveType -> CHAR .)
    AND             reduce using rule 94 (primitiveType -> CHAR .)
    COMMA           reduce using rule 94 (primitiveType -> CHAR .)
    MORE            reduce using rule 94 (primitiveType -> CHAR .)
    Identifier      reduce using rule 94 (primitiveType -> CHAR .)
    BLPAREN         reduce using rule 94 (primitiveType -> CHAR .)
    IMPLEMENTS      reduce using rule 94 (primitiveType -> CHAR .)
    LPAREN          reduce using rule 94 (primitiveType -> CHAR .)
    OP_ARRAY        reduce using rule 94 (primitiveType -> CHAR .)
    OP_EQ           reduce using rule 94 (primitiveType -> CHAR .)
    OP_NE           reduce using rule 94 (primitiveType -> CHAR .)
    CARET           reduce using rule 94 (primitiveType -> CHAR .)
    VERTICAL        reduce using rule 94 (primitiveType -> CHAR .)
    OP_LAND         reduce using rule 94 (primitiveType -> CHAR .)
    OP_LOR          reduce using rule 94 (primitiveType -> CHAR .)
    QUES            reduce using rule 94 (primitiveType -> CHAR .)
    RPAREN          reduce using rule 94 (primitiveType -> CHAR .)
    BRPAREN         reduce using rule 94 (primitiveType -> CHAR .)
    EQUALS          reduce using rule 94 (primitiveType -> CHAR .)
    ASS_ADD         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_SUB         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_MUL         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_DIV         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_AND         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_OR          reduce using rule 94 (primitiveType -> CHAR .)
    ASS_XOR         reduce using rule 94 (primitiveType -> CHAR .)
    ASS_MOD         reduce using rule 94 (primitiveType -> CHAR .)
    LESS            reduce using rule 94 (primitiveType -> CHAR .)
    COLON           reduce using rule 94 (primitiveType -> CHAR .)
    FRPAREN         reduce using rule 94 (primitiveType -> CHAR .)
    SEMI            reduce using rule 94 (primitiveType -> CHAR .)



state 99

    (226) unaryExpression -> OP_INC . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 188
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 100

    (125) integerLiteral -> LONG_HEX_NUMBER .

    DOT             reduce using rule 125 (integerLiteral -> LONG_HEX_NUMBER .)
    FLPAREN         reduce using rule 125 (integerLiteral -> LONG_HEX_NUMBER .)
    OP_INC          reduce using rule 125 (integerLiteral -> LONG_HEX_NUMBER .)
    OP_DEC          reduce using rule 125 (integerLiteral -> LONG_HEX_NUMBER .)



state 101

    (227) unaryExpression -> OP_DEC . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 189
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 102

    (239) primary -> NEW . creator
    (251) creator -> . nonWildcardTypeArguments createdName classCreatorRest
    (252) creator -> . createdName expr_93
    (259) nonWildcardTypeArguments -> . LESS typeList MORE
    (253) createdName -> . classOrInterfaceType
    (254) createdName -> . primitiveType
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    LESS            shift and go to state 190
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    createdName                    shift and go to state 195
    creator                        shift and go to state 191
    classOrInterfaceType           shift and go to state 192
    primitiveType                  shift and go to state 196
    nonWildcardTypeArguments       shift and go to state 193

state 103

    (132) elementValuePair -> Identifier . EQUALS elementValue
    (240) primary -> Identifier . expr_49 expr_91
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    EQUALS          shift and go to state 198
    DOT             shift and go to state 37
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 197
    empty                          shift and go to state 36

state 104

    (238) primary -> literal .

    DOT             reduce using rule 238 (primary -> literal .)
    FLPAREN         reduce using rule 238 (primary -> literal .)
    OP_INC          reduce using rule 238 (primary -> literal .)
    OP_DEC          reduce using rule 238 (primary -> literal .)



state 105

    (229) unaryExpressionNotPlusMinus -> TILDE . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 199
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 106

    (133) elementValue -> conditionalExpression .

    COMMA           reduce using rule 133 (elementValue -> conditionalExpression .)
    BRPAREN         reduce using rule 133 (elementValue -> conditionalExpression .)
    RPAREN          reduce using rule 133 (elementValue -> conditionalExpression .)
    SEMI            reduce using rule 133 (elementValue -> conditionalExpression .)



state 107

    (117) literal -> FloatingPointLiteral .

    DOT             reduce using rule 117 (literal -> FloatingPointLiteral .)
    FLPAREN         reduce using rule 117 (literal -> FloatingPointLiteral .)
    OP_INC          reduce using rule 117 (literal -> FloatingPointLiteral .)
    OP_DEC          reduce using rule 117 (literal -> FloatingPointLiteral .)



state 108

    (95) primitiveType -> BYTE .

    FLPAREN         reduce using rule 95 (primitiveType -> BYTE .)
    DOT             reduce using rule 95 (primitiveType -> BYTE .)
    AND             reduce using rule 95 (primitiveType -> BYTE .)
    COMMA           reduce using rule 95 (primitiveType -> BYTE .)
    MORE            reduce using rule 95 (primitiveType -> BYTE .)
    Identifier      reduce using rule 95 (primitiveType -> BYTE .)
    BLPAREN         reduce using rule 95 (primitiveType -> BYTE .)
    IMPLEMENTS      reduce using rule 95 (primitiveType -> BYTE .)
    LPAREN          reduce using rule 95 (primitiveType -> BYTE .)
    OP_ARRAY        reduce using rule 95 (primitiveType -> BYTE .)
    OP_EQ           reduce using rule 95 (primitiveType -> BYTE .)
    OP_NE           reduce using rule 95 (primitiveType -> BYTE .)
    CARET           reduce using rule 95 (primitiveType -> BYTE .)
    VERTICAL        reduce using rule 95 (primitiveType -> BYTE .)
    OP_LAND         reduce using rule 95 (primitiveType -> BYTE .)
    OP_LOR          reduce using rule 95 (primitiveType -> BYTE .)
    QUES            reduce using rule 95 (primitiveType -> BYTE .)
    RPAREN          reduce using rule 95 (primitiveType -> BYTE .)
    BRPAREN         reduce using rule 95 (primitiveType -> BYTE .)
    EQUALS          reduce using rule 95 (primitiveType -> BYTE .)
    ASS_ADD         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_SUB         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_MUL         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_DIV         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_AND         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_OR          reduce using rule 95 (primitiveType -> BYTE .)
    ASS_XOR         reduce using rule 95 (primitiveType -> BYTE .)
    ASS_MOD         reduce using rule 95 (primitiveType -> BYTE .)
    LESS            reduce using rule 95 (primitiveType -> BYTE .)
    COLON           reduce using rule 95 (primitiveType -> BYTE .)
    FRPAREN         reduce using rule 95 (primitiveType -> BYTE .)
    SEMI            reduce using rule 95 (primitiveType -> BYTE .)



state 109

    (119) literal -> StringLiteral .

    DOT             reduce using rule 119 (literal -> StringLiteral .)
    FLPAREN         reduce using rule 119 (literal -> StringLiteral .)
    OP_INC          reduce using rule 119 (literal -> StringLiteral .)
    OP_DEC          reduce using rule 119 (literal -> StringLiteral .)



state 110

    (241) primary -> primitiveType . expr_28 DOT CLASS
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    DOT             reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 201
    empty                          shift and go to state 202

state 111

    (93) primitiveType -> BOOLEAN .

    FLPAREN         reduce using rule 93 (primitiveType -> BOOLEAN .)
    DOT             reduce using rule 93 (primitiveType -> BOOLEAN .)
    AND             reduce using rule 93 (primitiveType -> BOOLEAN .)
    COMMA           reduce using rule 93 (primitiveType -> BOOLEAN .)
    MORE            reduce using rule 93 (primitiveType -> BOOLEAN .)
    Identifier      reduce using rule 93 (primitiveType -> BOOLEAN .)
    BLPAREN         reduce using rule 93 (primitiveType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 93 (primitiveType -> BOOLEAN .)
    LPAREN          reduce using rule 93 (primitiveType -> BOOLEAN .)
    OP_ARRAY        reduce using rule 93 (primitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 93 (primitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 93 (primitiveType -> BOOLEAN .)
    CARET           reduce using rule 93 (primitiveType -> BOOLEAN .)
    VERTICAL        reduce using rule 93 (primitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 93 (primitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 93 (primitiveType -> BOOLEAN .)
    QUES            reduce using rule 93 (primitiveType -> BOOLEAN .)
    RPAREN          reduce using rule 93 (primitiveType -> BOOLEAN .)
    BRPAREN         reduce using rule 93 (primitiveType -> BOOLEAN .)
    EQUALS          reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_ADD         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_SUB         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_MUL         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_DIV         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_AND         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_OR          reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_XOR         reduce using rule 93 (primitiveType -> BOOLEAN .)
    ASS_MOD         reduce using rule 93 (primitiveType -> BOOLEAN .)
    LESS            reduce using rule 93 (primitiveType -> BOOLEAN .)
    COLON           reduce using rule 93 (primitiveType -> BOOLEAN .)
    FRPAREN         reduce using rule 93 (primitiveType -> BOOLEAN .)
    SEMI            reduce using rule 93 (primitiveType -> BOOLEAN .)



state 112

    (135) elementValue -> elementValueArrayInitializer .

    COMMA           reduce using rule 135 (elementValue -> elementValueArrayInitializer .)
    BRPAREN         reduce using rule 135 (elementValue -> elementValueArrayInitializer .)
    RPAREN          reduce using rule 135 (elementValue -> elementValueArrayInitializer .)
    SEMI            reduce using rule 135 (elementValue -> elementValueArrayInitializer .)



state 113

    (123) integerLiteral -> HEX_NUMBER .

    DOT             reduce using rule 123 (integerLiteral -> HEX_NUMBER .)
    FLPAREN         reduce using rule 123 (integerLiteral -> HEX_NUMBER .)
    OP_INC          reduce using rule 123 (integerLiteral -> HEX_NUMBER .)
    OP_DEC          reduce using rule 123 (integerLiteral -> HEX_NUMBER .)



state 114

    (500) FloatingPointLiteral -> NON_INTEGER_2 .

    DOT             reduce using rule 500 (FloatingPointLiteral -> NON_INTEGER_2 .)
    FLPAREN         reduce using rule 500 (FloatingPointLiteral -> NON_INTEGER_2 .)
    OP_INC          reduce using rule 500 (FloatingPointLiteral -> NON_INTEGER_2 .)
    OP_DEC          reduce using rule 500 (FloatingPointLiteral -> NON_INTEGER_2 .)



state 115

    (501) FloatingPointLiteral -> NON_INTEGER_3 .

    DOT             reduce using rule 501 (FloatingPointLiteral -> NON_INTEGER_3 .)
    FLPAREN         reduce using rule 501 (FloatingPointLiteral -> NON_INTEGER_3 .)
    OP_INC          reduce using rule 501 (FloatingPointLiteral -> NON_INTEGER_3 .)
    OP_DEC          reduce using rule 501 (FloatingPointLiteral -> NON_INTEGER_3 .)



state 116

    (499) FloatingPointLiteral -> NON_INTEGER_1 .

    DOT             reduce using rule 499 (FloatingPointLiteral -> NON_INTEGER_1 .)
    FLPAREN         reduce using rule 499 (FloatingPointLiteral -> NON_INTEGER_1 .)
    OP_INC          reduce using rule 499 (FloatingPointLiteral -> NON_INTEGER_1 .)
    OP_DEC          reduce using rule 499 (FloatingPointLiteral -> NON_INTEGER_1 .)



state 117

    (222) additiveExpression -> multiplicativeExpression . expr_85
    (473) expr_85 -> . expr_84 multiplicativeExpression
    (474) expr_85 -> . expr_85 expr_84 multiplicativeExpression
    (475) expr_85 -> . empty
    (471) expr_84 -> . PLUS
    (472) expr_84 -> . DASH
    (502) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
    PLUS            shift and go to state 206
    DASH            shift and go to state 205
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    INSTANCEOF      reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! PLUS            [ reduce using rule 502 (empty -> .) ]
  ! DASH            [ reduce using rule 502 (empty -> .) ]

    expr_85                        shift and go to state 203
    expr_84                        shift and go to state 204
    empty                          shift and go to state 207

state 118

    (122) integerLiteral -> NUMBER .

    DOT             reduce using rule 122 (integerLiteral -> NUMBER .)
    FLPAREN         reduce using rule 122 (integerLiteral -> NUMBER .)
    OP_INC          reduce using rule 122 (integerLiteral -> NUMBER .)
    OP_DEC          reduce using rule 122 (integerLiteral -> NUMBER .)



state 119

    (121) literal -> NULL .

    DOT             reduce using rule 121 (literal -> NULL .)
    FLPAREN         reduce using rule 121 (literal -> NULL .)
    OP_INC          reduce using rule 121 (literal -> NULL .)
    OP_DEC          reduce using rule 121 (literal -> NULL .)



state 120

    (213) relationalExpression -> shiftExpression . expr_82
    (465) expr_82 -> . relationalOp shiftExpression
    (466) expr_82 -> . expr_82 relationalOp shiftExpression
    (467) expr_82 -> . empty
    (214) relationalOp -> . LESS EQUALS
    (215) relationalOp -> . MORE EQUALS
    (216) relationalOp -> . LESS
    (217) relationalOp -> . MORE
    (502) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    LESS            shift and go to state 209
    MORE            shift and go to state 212
    INSTANCEOF      reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! LESS            [ reduce using rule 502 (empty -> .) ]
  ! MORE            [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 211
    relationalOp                   shift and go to state 210
    expr_82                        shift and go to state 208

state 121

    (223) multiplicativeExpression -> unaryExpression . expr_87
    (479) expr_87 -> . expr_86 unaryExpression
    (480) expr_87 -> . expr_87 expr_86 unaryExpression
    (481) expr_87 -> . empty
    (476) expr_86 -> . MULT
    (477) expr_86 -> . SLASH
    (478) expr_86 -> . PERCENT
    (502) empty -> .

  ! shift/reduce conflict for MULT resolved as shift.
  ! shift/reduce conflict for SLASH resolved as shift.
  ! shift/reduce conflict for PERCENT resolved as shift.
    MULT            shift and go to state 218
    SLASH           shift and go to state 217
    PERCENT         shift and go to state 215
    PLUS            reduce using rule 502 (empty -> .)
    DASH            reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    INSTANCEOF      reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! MULT            [ reduce using rule 502 (empty -> .) ]
  ! SLASH           [ reduce using rule 502 (empty -> .) ]
  ! PERCENT         [ reduce using rule 502 (empty -> .) ]

    expr_87                        shift and go to state 213
    expr_86                        shift and go to state 214
    empty                          shift and go to state 216

state 122

    (235) primary -> parExpression .

    DOT             reduce using rule 235 (primary -> parExpression .)
    FLPAREN         reduce using rule 235 (primary -> parExpression .)
    OP_INC          reduce using rule 235 (primary -> parExpression .)
    OP_DEC          reduce using rule 235 (primary -> parExpression .)



state 123

    (233) castExpression -> LPAREN . primitiveType RPAREN unaryExpression
    (234) castExpression -> LPAREN . expr_90 RPAREN unaryExpressionNotPlusMinus
    (188) parExpression -> LPAREN . expression RPAREN
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (487) expr_90 -> . type
    (488) expr_90 -> . expression
    (192) expression -> . conditionalExpression expr_72
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    Identifier      shift and go to state 222
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    type                           shift and go to state 220
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    expr_90                        shift and go to state 223
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 224
    andExpression                  shift and go to state 92
    expression                     shift and go to state 225

state 124

    (389) expr_51 -> elementValuePairs .

    RPAREN          reduce using rule 389 (expr_51 -> elementValuePairs .)



state 125

    (134) elementValue -> annotation .

    COMMA           reduce using rule 134 (elementValue -> annotation .)
    BRPAREN         reduce using rule 134 (elementValue -> annotation .)
    RPAREN          reduce using rule 134 (elementValue -> annotation .)
    SEMI            reduce using rule 134 (elementValue -> annotation .)



state 126

    (231) unaryExpressionNotPlusMinus -> castExpression .

    MULT            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    SLASH           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    PERCENT         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    PLUS            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    DASH            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    LESS            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    MORE            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    INSTANCEOF      reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_EQ           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_NE           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    AND             reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    CARET           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    VERTICAL        reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LAND         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LOR          reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    QUES            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    COMMA           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    BRPAREN         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    EQUALS          reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_ADD         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_SUB         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MUL         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_DIV         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_AND         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_OR          reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_XOR         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MOD         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    RPAREN          reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    SEMI            reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    COLON           reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)
    FRPAREN         reduce using rule 231 (unaryExpressionNotPlusMinus -> castExpression .)



state 127

    (99) primitiveType -> FLOAT .

    FLPAREN         reduce using rule 99 (primitiveType -> FLOAT .)
    DOT             reduce using rule 99 (primitiveType -> FLOAT .)
    AND             reduce using rule 99 (primitiveType -> FLOAT .)
    COMMA           reduce using rule 99 (primitiveType -> FLOAT .)
    MORE            reduce using rule 99 (primitiveType -> FLOAT .)
    Identifier      reduce using rule 99 (primitiveType -> FLOAT .)
    BLPAREN         reduce using rule 99 (primitiveType -> FLOAT .)
    IMPLEMENTS      reduce using rule 99 (primitiveType -> FLOAT .)
    LPAREN          reduce using rule 99 (primitiveType -> FLOAT .)
    OP_ARRAY        reduce using rule 99 (primitiveType -> FLOAT .)
    OP_EQ           reduce using rule 99 (primitiveType -> FLOAT .)
    OP_NE           reduce using rule 99 (primitiveType -> FLOAT .)
    CARET           reduce using rule 99 (primitiveType -> FLOAT .)
    VERTICAL        reduce using rule 99 (primitiveType -> FLOAT .)
    OP_LAND         reduce using rule 99 (primitiveType -> FLOAT .)
    OP_LOR          reduce using rule 99 (primitiveType -> FLOAT .)
    QUES            reduce using rule 99 (primitiveType -> FLOAT .)
    RPAREN          reduce using rule 99 (primitiveType -> FLOAT .)
    BRPAREN         reduce using rule 99 (primitiveType -> FLOAT .)
    EQUALS          reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_ADD         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_SUB         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_MUL         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_DIV         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_AND         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_OR          reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_XOR         reduce using rule 99 (primitiveType -> FLOAT .)
    ASS_MOD         reduce using rule 99 (primitiveType -> FLOAT .)
    LESS            reduce using rule 99 (primitiveType -> FLOAT .)
    COLON           reduce using rule 99 (primitiveType -> FLOAT .)
    FRPAREN         reduce using rule 99 (primitiveType -> FLOAT .)
    SEMI            reduce using rule 99 (primitiveType -> FLOAT .)



state 128

    (237) primary -> SUPER . superSuffix
    (265) superSuffix -> . arguments
    (266) superSuffix -> . DOT Identifier expr_20
    (267) arguments -> . LPAREN expr_95 RPAREN

    DOT             shift and go to state 229
    LPAREN          shift and go to state 228


    superSuffix                    shift and go to state 226
    arguments                      shift and go to state 227

state 129

    (390) expr_51 -> elementValue .

    RPAREN          reduce using rule 390 (expr_51 -> elementValue .)



state 130

    (274) expr_2 -> packageDeclaration expr_0 expr_1 .
    (272) expr_1 -> expr_1 . typeDeclaration
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (8) classOrInterfaceModifiers -> . expr_7
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    $end            reduce using rule 274 (expr_2 -> packageDeclaration expr_0 expr_1 .)
    SEMI            shift and go to state 40
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 22
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    classOrInterfaceModifier       shift and go to state 31
    classOrInterfaceDeclaration    shift and go to state 42
    typeDeclaration                shift and go to state 67
    classOrInterfaceModifiers      shift and go to state 32
    empty                          shift and go to state 27
    expr_7                         shift and go to state 25
    annotation                     shift and go to state 30

state 131

    (24) enumDeclaration -> ENUM Identifier . expr_11 enumBody
    (294) expr_11 -> . IMPLEMENTS typeList
    (295) expr_11 -> . empty
    (502) empty -> .

    IMPLEMENTS      shift and go to state 230
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_11                        shift and go to state 231
    empty                          shift and go to state 232

state 132

    (31) normalInterfaceDeclaration -> INTERFACE Identifier . expr_9 expr_23 interfaceBody
    (290) expr_9 -> . typeParameters
    (291) expr_9 -> . empty
    (21) typeParameters -> . LESS typeParameter expr_12 MORE
    (502) empty -> .

    LESS            shift and go to state 233
    EXTENDS         reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_9                         shift and go to state 234
    typeParameters                 shift and go to state 235
    empty                          shift and go to state 236

state 133

    (20) normalClassDeclaration -> CLASS Identifier . expr_9 expr_10 expr_11 classBody
    (290) expr_9 -> . typeParameters
    (291) expr_9 -> . empty
    (21) typeParameters -> . LESS typeParameter expr_12 MORE
    (502) empty -> .

    LESS            shift and go to state 233
    EXTENDS         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_9                         shift and go to state 237
    typeParameters                 shift and go to state 235
    empty                          shift and go to state 236

state 134

    (137) annotationTypeDeclaration -> AT INTERFACE . Identifier annotationTypeBody

    Identifier      shift and go to state 238



state 135

    (385) expr_49 -> expr_49 DOT Identifier .

    DOT             reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    LPAREN          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    AT              reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    PACKAGE         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    PUBLIC          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    PROTECTED       reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    PRIVATE         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    ABSTRACT        reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    STATIC          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    FINAL           reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    STRICTFP        reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    CLASS           reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    ENUM            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    INTERFACE       reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    Identifier      reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    RPAREN          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    COMMA           reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    BRPAREN         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    NATIVE          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    SYNCHRONIZED    reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    TRANSIENT       reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    VOLATILE        reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    BOOLEAN         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    CHAR            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    BYTE            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    SHORT           reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    INT             reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    LONG            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    FLOAT           reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    DOUBLE          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    VOID            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    LESS            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    SEMI            reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    FLPAREN         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    OP_INC          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    OP_DEC          reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)
    BLPAREN         reduce using rule 385 (expr_49 -> expr_49 DOT Identifier .)



state 136

    (281) expr_5 -> empty .

    SEMI            reduce using rule 281 (expr_5 -> empty .)



state 137

    (4) importDeclaration -> IMPORT expr_4 qualifiedName expr_5 . SEMI

    SEMI            shift and go to state 239



state 138

    (280) expr_5 -> DOT . MULT

    MULT            shift and go to state 240



state 139

    (230) unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .

    MULT            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SLASH           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PERCENT         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    DASH            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    MORE            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    INSTANCEOF      reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_EQ           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_NE           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    AND             reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    CARET           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    VERTICAL        reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LAND         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LOR          reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    QUES            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    BRPAREN         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    EQUALS          reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_ADD         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_SUB         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MUL         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_DIV         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_AND         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_OR          reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_XOR         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MOD         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SEMI            reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    FRPAREN         reduce using rule 230 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)



state 140

    (240) primary -> Identifier . expr_49 expr_91
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 37
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 197
    empty                          shift and go to state 36

state 141

    (445) expr_74 -> empty .

    OP_LOR          reduce using rule 445 (expr_74 -> empty .)
    QUES            reduce using rule 445 (expr_74 -> empty .)
    RPAREN          reduce using rule 445 (expr_74 -> empty .)
    COMMA           reduce using rule 445 (expr_74 -> empty .)
    BRPAREN         reduce using rule 445 (expr_74 -> empty .)
    EQUALS          reduce using rule 445 (expr_74 -> empty .)
    ASS_ADD         reduce using rule 445 (expr_74 -> empty .)
    ASS_SUB         reduce using rule 445 (expr_74 -> empty .)
    ASS_MUL         reduce using rule 445 (expr_74 -> empty .)
    ASS_DIV         reduce using rule 445 (expr_74 -> empty .)
    ASS_AND         reduce using rule 445 (expr_74 -> empty .)
    ASS_OR          reduce using rule 445 (expr_74 -> empty .)
    ASS_XOR         reduce using rule 445 (expr_74 -> empty .)
    ASS_MOD         reduce using rule 445 (expr_74 -> empty .)
    LESS            reduce using rule 445 (expr_74 -> empty .)
    MORE            reduce using rule 445 (expr_74 -> empty .)
    COLON           reduce using rule 445 (expr_74 -> empty .)
    FRPAREN         reduce using rule 445 (expr_74 -> empty .)
    SEMI            reduce using rule 445 (expr_74 -> empty .)



state 142

    (206) conditionalOrExpression -> conditionalAndExpression expr_74 .
    (444) expr_74 -> expr_74 . OP_LOR conditionalAndExpression

    QUES            reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    EQUALS          reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_ADD         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_SUB         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_MUL         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_DIV         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_AND         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_OR          reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_XOR         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    ASS_MOD         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    LESS            reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    MORE            reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    COMMA           reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    RPAREN          reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    COLON           reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    FRPAREN         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    BRPAREN         reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    SEMI            reduce using rule 206 (conditionalOrExpression -> conditionalAndExpression expr_74 .)
    OP_LOR          shift and go to state 241



state 143

    (443) expr_74 -> OP_LOR . conditionalAndExpression
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 242
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 144

    (224) unaryExpression -> PLUS unaryExpression .

    MULT            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    SLASH           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    PERCENT         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    PLUS            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    DASH            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    LESS            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    MORE            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    INSTANCEOF      reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    OP_EQ           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    OP_NE           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    AND             reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    CARET           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    VERTICAL        reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    OP_LAND         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    OP_LOR          reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    QUES            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    RPAREN          reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    COMMA           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    BRPAREN         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    EQUALS          reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_ADD         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_SUB         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_MUL         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_DIV         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_AND         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_OR          reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_XOR         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    ASS_MOD         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    COLON           reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    FRPAREN         reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)
    SEMI            reduce using rule 224 (unaryExpression -> PLUS unaryExpression .)



state 145

    (242) primary -> VOID DOT . CLASS

    CLASS           shift and go to state 243



state 146

    (391) expr_52 -> LPAREN expr_51 RPAREN .

    AT              reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    PACKAGE         reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    PUBLIC          reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    PROTECTED       reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    PRIVATE         reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    ABSTRACT        reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    STATIC          reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    FINAL           reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    STRICTFP        reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    CLASS           reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    ENUM            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    INTERFACE       reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    Identifier      reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    RPAREN          reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    COMMA           reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    BRPAREN         reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    NATIVE          reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    SYNCHRONIZED    reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    TRANSIENT       reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    VOLATILE        reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    BOOLEAN         reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    CHAR            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    BYTE            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    SHORT           reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    INT             reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    LONG            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    FLOAT           reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    DOUBLE          reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    VOID            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    LESS            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)
    SEMI            reduce using rule 391 (expr_52 -> LPAREN expr_51 RPAREN .)



state 147

    (225) unaryExpression -> DASH unaryExpression .

    MULT            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    SLASH           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    PERCENT         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    PLUS            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    DASH            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    LESS            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    MORE            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    INSTANCEOF      reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    OP_EQ           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    OP_NE           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    AND             reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    CARET           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    VERTICAL        reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    OP_LAND         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    OP_LOR          reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    QUES            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    RPAREN          reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    COMMA           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    BRPAREN         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    EQUALS          reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_ADD         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_SUB         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_MUL         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_DIV         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_AND         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_OR          reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_XOR         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    ASS_MOD         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    COLON           reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    FRPAREN         reduce using rule 225 (unaryExpression -> DASH unaryExpression .)
    SEMI            reduce using rule 225 (unaryExpression -> DASH unaryExpression .)



state 148

    (463) expr_81 -> INSTANCEOF . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    primitiveType                  shift and go to state 244
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 245

state 149

    (464) expr_81 -> empty .

    OP_EQ           reduce using rule 464 (expr_81 -> empty .)
    OP_NE           reduce using rule 464 (expr_81 -> empty .)
    AND             reduce using rule 464 (expr_81 -> empty .)
    CARET           reduce using rule 464 (expr_81 -> empty .)
    VERTICAL        reduce using rule 464 (expr_81 -> empty .)
    OP_LAND         reduce using rule 464 (expr_81 -> empty .)
    OP_LOR          reduce using rule 464 (expr_81 -> empty .)
    QUES            reduce using rule 464 (expr_81 -> empty .)
    RPAREN          reduce using rule 464 (expr_81 -> empty .)
    COMMA           reduce using rule 464 (expr_81 -> empty .)
    BRPAREN         reduce using rule 464 (expr_81 -> empty .)
    EQUALS          reduce using rule 464 (expr_81 -> empty .)
    ASS_ADD         reduce using rule 464 (expr_81 -> empty .)
    ASS_SUB         reduce using rule 464 (expr_81 -> empty .)
    ASS_MUL         reduce using rule 464 (expr_81 -> empty .)
    ASS_DIV         reduce using rule 464 (expr_81 -> empty .)
    ASS_AND         reduce using rule 464 (expr_81 -> empty .)
    ASS_OR          reduce using rule 464 (expr_81 -> empty .)
    ASS_XOR         reduce using rule 464 (expr_81 -> empty .)
    ASS_MOD         reduce using rule 464 (expr_81 -> empty .)
    LESS            reduce using rule 464 (expr_81 -> empty .)
    MORE            reduce using rule 464 (expr_81 -> empty .)
    COLON           reduce using rule 464 (expr_81 -> empty .)
    FRPAREN         reduce using rule 464 (expr_81 -> empty .)
    SEMI            reduce using rule 464 (expr_81 -> empty .)



state 150

    (212) instanceOfExpression -> relationalExpression expr_81 .

    OP_EQ           reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    OP_NE           reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    AND             reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    CARET           reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    VERTICAL        reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    OP_LAND         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    OP_LOR          reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    QUES            reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    EQUALS          reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_ADD         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_SUB         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_MUL         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_DIV         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_AND         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_OR          reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_XOR         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    ASS_MOD         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    LESS            reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    MORE            reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    COMMA           reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    BRPAREN         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    COLON           reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    SEMI            reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    RPAREN          reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)
    FRPAREN         reduce using rule 212 (instanceOfExpression -> relationalExpression expr_81 .)



state 151

    (459) expr_79 -> OP_NE .

    PLUS            reduce using rule 459 (expr_79 -> OP_NE .)
    DASH            reduce using rule 459 (expr_79 -> OP_NE .)
    OP_INC          reduce using rule 459 (expr_79 -> OP_NE .)
    OP_DEC          reduce using rule 459 (expr_79 -> OP_NE .)
    TILDE           reduce using rule 459 (expr_79 -> OP_NE .)
    EXCLAMATION     reduce using rule 459 (expr_79 -> OP_NE .)
    LPAREN          reduce using rule 459 (expr_79 -> OP_NE .)
    THIS            reduce using rule 459 (expr_79 -> OP_NE .)
    SUPER           reduce using rule 459 (expr_79 -> OP_NE .)
    NEW             reduce using rule 459 (expr_79 -> OP_NE .)
    Identifier      reduce using rule 459 (expr_79 -> OP_NE .)
    VOID            reduce using rule 459 (expr_79 -> OP_NE .)
    CharacterLiteral reduce using rule 459 (expr_79 -> OP_NE .)
    StringLiteral   reduce using rule 459 (expr_79 -> OP_NE .)
    NULL            reduce using rule 459 (expr_79 -> OP_NE .)
    BOOLEAN         reduce using rule 459 (expr_79 -> OP_NE .)
    CHAR            reduce using rule 459 (expr_79 -> OP_NE .)
    BYTE            reduce using rule 459 (expr_79 -> OP_NE .)
    SHORT           reduce using rule 459 (expr_79 -> OP_NE .)
    INT             reduce using rule 459 (expr_79 -> OP_NE .)
    LONG            reduce using rule 459 (expr_79 -> OP_NE .)
    FLOAT           reduce using rule 459 (expr_79 -> OP_NE .)
    DOUBLE          reduce using rule 459 (expr_79 -> OP_NE .)
    NUMBER          reduce using rule 459 (expr_79 -> OP_NE .)
    HEX_NUMBER      reduce using rule 459 (expr_79 -> OP_NE .)
    LONG_NUMBER     reduce using rule 459 (expr_79 -> OP_NE .)
    LONG_HEX_NUMBER reduce using rule 459 (expr_79 -> OP_NE .)
    NON_INTEGER_1   reduce using rule 459 (expr_79 -> OP_NE .)
    NON_INTEGER_2   reduce using rule 459 (expr_79 -> OP_NE .)
    NON_INTEGER_3   reduce using rule 459 (expr_79 -> OP_NE .)
    TRUE            reduce using rule 459 (expr_79 -> OP_NE .)
    FALSE           reduce using rule 459 (expr_79 -> OP_NE .)



state 152

    (458) expr_79 -> OP_EQ .

    PLUS            reduce using rule 458 (expr_79 -> OP_EQ .)
    DASH            reduce using rule 458 (expr_79 -> OP_EQ .)
    OP_INC          reduce using rule 458 (expr_79 -> OP_EQ .)
    OP_DEC          reduce using rule 458 (expr_79 -> OP_EQ .)
    TILDE           reduce using rule 458 (expr_79 -> OP_EQ .)
    EXCLAMATION     reduce using rule 458 (expr_79 -> OP_EQ .)
    LPAREN          reduce using rule 458 (expr_79 -> OP_EQ .)
    THIS            reduce using rule 458 (expr_79 -> OP_EQ .)
    SUPER           reduce using rule 458 (expr_79 -> OP_EQ .)
    NEW             reduce using rule 458 (expr_79 -> OP_EQ .)
    Identifier      reduce using rule 458 (expr_79 -> OP_EQ .)
    VOID            reduce using rule 458 (expr_79 -> OP_EQ .)
    CharacterLiteral reduce using rule 458 (expr_79 -> OP_EQ .)
    StringLiteral   reduce using rule 458 (expr_79 -> OP_EQ .)
    NULL            reduce using rule 458 (expr_79 -> OP_EQ .)
    BOOLEAN         reduce using rule 458 (expr_79 -> OP_EQ .)
    CHAR            reduce using rule 458 (expr_79 -> OP_EQ .)
    BYTE            reduce using rule 458 (expr_79 -> OP_EQ .)
    SHORT           reduce using rule 458 (expr_79 -> OP_EQ .)
    INT             reduce using rule 458 (expr_79 -> OP_EQ .)
    LONG            reduce using rule 458 (expr_79 -> OP_EQ .)
    FLOAT           reduce using rule 458 (expr_79 -> OP_EQ .)
    DOUBLE          reduce using rule 458 (expr_79 -> OP_EQ .)
    NUMBER          reduce using rule 458 (expr_79 -> OP_EQ .)
    HEX_NUMBER      reduce using rule 458 (expr_79 -> OP_EQ .)
    LONG_NUMBER     reduce using rule 458 (expr_79 -> OP_EQ .)
    LONG_HEX_NUMBER reduce using rule 458 (expr_79 -> OP_EQ .)
    NON_INTEGER_1   reduce using rule 458 (expr_79 -> OP_EQ .)
    NON_INTEGER_2   reduce using rule 458 (expr_79 -> OP_EQ .)
    NON_INTEGER_3   reduce using rule 458 (expr_79 -> OP_EQ .)
    TRUE            reduce using rule 458 (expr_79 -> OP_EQ .)
    FALSE           reduce using rule 458 (expr_79 -> OP_EQ .)



state 153

    (211) equalityExpression -> instanceOfExpression expr_80 .
    (461) expr_80 -> expr_80 . expr_79 instanceOfExpression
    (458) expr_79 -> . OP_EQ
    (459) expr_79 -> . OP_NE

    AND             reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    CARET           reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    VERTICAL        reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    OP_LAND         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    OP_LOR          reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    QUES            reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    EQUALS          reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_ADD         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_SUB         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_MUL         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_DIV         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_AND         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_OR          reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_XOR         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    ASS_MOD         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    LESS            reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    MORE            reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    FRPAREN         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    RPAREN          reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    COMMA           reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    BRPAREN         reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    COLON           reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    SEMI            reduce using rule 211 (equalityExpression -> instanceOfExpression expr_80 .)
    OP_EQ           shift and go to state 152
    OP_NE           shift and go to state 151


    expr_79                        shift and go to state 246

state 154

    (460) expr_80 -> expr_79 . instanceOfExpression
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    castExpression                 shift and go to state 126
    instanceOfExpression           shift and go to state 247
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 155

    (462) expr_80 -> empty .

    OP_EQ           reduce using rule 462 (expr_80 -> empty .)
    OP_NE           reduce using rule 462 (expr_80 -> empty .)
    AND             reduce using rule 462 (expr_80 -> empty .)
    CARET           reduce using rule 462 (expr_80 -> empty .)
    VERTICAL        reduce using rule 462 (expr_80 -> empty .)
    OP_LAND         reduce using rule 462 (expr_80 -> empty .)
    OP_LOR          reduce using rule 462 (expr_80 -> empty .)
    QUES            reduce using rule 462 (expr_80 -> empty .)
    RPAREN          reduce using rule 462 (expr_80 -> empty .)
    COMMA           reduce using rule 462 (expr_80 -> empty .)
    BRPAREN         reduce using rule 462 (expr_80 -> empty .)
    EQUALS          reduce using rule 462 (expr_80 -> empty .)
    ASS_ADD         reduce using rule 462 (expr_80 -> empty .)
    ASS_SUB         reduce using rule 462 (expr_80 -> empty .)
    ASS_MUL         reduce using rule 462 (expr_80 -> empty .)
    ASS_DIV         reduce using rule 462 (expr_80 -> empty .)
    ASS_AND         reduce using rule 462 (expr_80 -> empty .)
    ASS_OR          reduce using rule 462 (expr_80 -> empty .)
    ASS_XOR         reduce using rule 462 (expr_80 -> empty .)
    ASS_MOD         reduce using rule 462 (expr_80 -> empty .)
    LESS            reduce using rule 462 (expr_80 -> empty .)
    MORE            reduce using rule 462 (expr_80 -> empty .)
    COLON           reduce using rule 462 (expr_80 -> empty .)
    FRPAREN         reduce using rule 462 (expr_80 -> empty .)
    SEMI            reduce using rule 462 (expr_80 -> empty .)



state 156

    (236) primary -> THIS expr_49 . expr_91
    (385) expr_49 -> expr_49 . DOT Identifier
    (489) expr_91 -> . identifierSuffix
    (490) expr_91 -> . empty
    (243) identifierSuffix -> . expr_28 DOT CLASS
    (244) identifierSuffix -> . expr_92
    (245) identifierSuffix -> . arguments
    (246) identifierSuffix -> . DOT CLASS
    (247) identifierSuffix -> . DOT explicitGenericInvocation
    (248) identifierSuffix -> . DOT THIS
    (249) identifierSuffix -> . DOT SUPER arguments
    (250) identifierSuffix -> . DOT NEW innerCreator
    (502) empty -> .
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (491) expr_92 -> . FLPAREN expression FRPAREN
    (492) expr_92 -> . expr_92 FLPAREN expression FRPAREN
    (267) arguments -> . LPAREN expr_95 RPAREN

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 254
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    FLPAREN         shift and go to state 251
    LPAREN          shift and go to state 228

  ! DOT             [ reduce using rule 502 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    identifierSuffix               shift and go to state 248
    expr_91                        shift and go to state 249
    expr_92                        shift and go to state 250
    expr_28                        shift and go to state 252
    arguments                      shift and go to state 255
    empty                          shift and go to state 253

state 157

    (446) expr_75 -> OP_LAND . inclusiveOrExpression
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    inclusiveOrExpression          shift and go to state 256
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 158

    (448) expr_75 -> empty .

    OP_LAND         reduce using rule 448 (expr_75 -> empty .)
    OP_LOR          reduce using rule 448 (expr_75 -> empty .)
    QUES            reduce using rule 448 (expr_75 -> empty .)
    RPAREN          reduce using rule 448 (expr_75 -> empty .)
    COMMA           reduce using rule 448 (expr_75 -> empty .)
    BRPAREN         reduce using rule 448 (expr_75 -> empty .)
    EQUALS          reduce using rule 448 (expr_75 -> empty .)
    ASS_ADD         reduce using rule 448 (expr_75 -> empty .)
    ASS_SUB         reduce using rule 448 (expr_75 -> empty .)
    ASS_MUL         reduce using rule 448 (expr_75 -> empty .)
    ASS_DIV         reduce using rule 448 (expr_75 -> empty .)
    ASS_AND         reduce using rule 448 (expr_75 -> empty .)
    ASS_OR          reduce using rule 448 (expr_75 -> empty .)
    ASS_XOR         reduce using rule 448 (expr_75 -> empty .)
    ASS_MOD         reduce using rule 448 (expr_75 -> empty .)
    LESS            reduce using rule 448 (expr_75 -> empty .)
    MORE            reduce using rule 448 (expr_75 -> empty .)
    COLON           reduce using rule 448 (expr_75 -> empty .)
    FRPAREN         reduce using rule 448 (expr_75 -> empty .)
    SEMI            reduce using rule 448 (expr_75 -> empty .)



state 159

    (207) conditionalAndExpression -> inclusiveOrExpression expr_75 .
    (447) expr_75 -> expr_75 . OP_LAND inclusiveOrExpression

    OP_LOR          reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    QUES            reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    EQUALS          reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_ADD         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_SUB         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_MUL         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_DIV         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_AND         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_OR          reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_XOR         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    ASS_MOD         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    LESS            reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    MORE            reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    COLON           reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    RPAREN          reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    FRPAREN         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    COMMA           reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    BRPAREN         reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    SEMI            reduce using rule 207 (conditionalAndExpression -> inclusiveOrExpression expr_75 .)
    OP_LAND         shift and go to state 257



state 160

    (131) elementValuePairs -> elementValuePair expr_53 .
    (394) expr_53 -> expr_53 . COMMA elementValuePair

    RPAREN          reduce using rule 131 (elementValuePairs -> elementValuePair expr_53 .)
    COMMA           shift and go to state 258



state 161

    (393) expr_53 -> COMMA . elementValuePair
    (132) elementValuePair -> . Identifier EQUALS elementValue

    Identifier      shift and go to state 259


    elementValuePair               shift and go to state 260

state 162

    (395) expr_53 -> empty .

    COMMA           reduce using rule 395 (expr_53 -> empty .)
    RPAREN          reduce using rule 395 (expr_53 -> empty .)



state 163

    (218) shiftExpression -> additiveExpression expr_83 .
    (469) expr_83 -> expr_83 . shiftOp additiveExpression
    (219) shiftOp -> . LESS LESS
    (220) shiftOp -> . MORE MORE MORE
    (221) shiftOp -> . MORE MORE

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    INSTANCEOF      reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    OP_EQ           reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    OP_NE           reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    AND             reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    CARET           reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    VERTICAL        reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    OP_LAND         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    OP_LOR          reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    QUES            reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    EQUALS          reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_ADD         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_SUB         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_MUL         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_DIV         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_AND         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_OR          reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_XOR         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    ASS_MOD         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    RPAREN          reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    SEMI            reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    COLON           reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    FRPAREN         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    COMMA           reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    BRPAREN         reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .)
    LESS            shift and go to state 164
    MORE            shift and go to state 167

  ! LESS            [ reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .) ]
  ! MORE            [ reduce using rule 218 (shiftExpression -> additiveExpression expr_83 .) ]

    shiftOp                        shift and go to state 261

state 164

    (219) shiftOp -> LESS . LESS

    LESS            shift and go to state 262



state 165

    (468) expr_83 -> shiftOp . additiveExpression
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 263
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 166

    (470) expr_83 -> empty .

    LESS            reduce using rule 470 (expr_83 -> empty .)
    MORE            reduce using rule 470 (expr_83 -> empty .)
    INSTANCEOF      reduce using rule 470 (expr_83 -> empty .)
    OP_EQ           reduce using rule 470 (expr_83 -> empty .)
    OP_NE           reduce using rule 470 (expr_83 -> empty .)
    AND             reduce using rule 470 (expr_83 -> empty .)
    CARET           reduce using rule 470 (expr_83 -> empty .)
    VERTICAL        reduce using rule 470 (expr_83 -> empty .)
    OP_LAND         reduce using rule 470 (expr_83 -> empty .)
    OP_LOR          reduce using rule 470 (expr_83 -> empty .)
    QUES            reduce using rule 470 (expr_83 -> empty .)
    RPAREN          reduce using rule 470 (expr_83 -> empty .)
    COMMA           reduce using rule 470 (expr_83 -> empty .)
    BRPAREN         reduce using rule 470 (expr_83 -> empty .)
    EQUALS          reduce using rule 470 (expr_83 -> empty .)
    ASS_ADD         reduce using rule 470 (expr_83 -> empty .)
    ASS_SUB         reduce using rule 470 (expr_83 -> empty .)
    ASS_MUL         reduce using rule 470 (expr_83 -> empty .)
    ASS_DIV         reduce using rule 470 (expr_83 -> empty .)
    ASS_AND         reduce using rule 470 (expr_83 -> empty .)
    ASS_OR          reduce using rule 470 (expr_83 -> empty .)
    ASS_XOR         reduce using rule 470 (expr_83 -> empty .)
    ASS_MOD         reduce using rule 470 (expr_83 -> empty .)
    COLON           reduce using rule 470 (expr_83 -> empty .)
    FRPAREN         reduce using rule 470 (expr_83 -> empty .)
    SEMI            reduce using rule 470 (expr_83 -> empty .)



state 167

    (220) shiftOp -> MORE . MORE MORE
    (221) shiftOp -> MORE . MORE

    MORE            shift and go to state 264



state 168

    (452) expr_77 -> CARET . andExpression
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 265

state 169

    (209) exclusiveOrExpression -> andExpression expr_77 .
    (453) expr_77 -> expr_77 . CARET andExpression

    VERTICAL        reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    OP_LAND         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    OP_LOR          reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    QUES            reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    EQUALS          reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_ADD         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_SUB         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_MUL         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_DIV         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_AND         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_OR          reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_XOR         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    ASS_MOD         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    LESS            reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    MORE            reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    COMMA           reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    RPAREN          reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    SEMI            reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    BRPAREN         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    COLON           reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    FRPAREN         reduce using rule 209 (exclusiveOrExpression -> andExpression expr_77 .)
    CARET           shift and go to state 266



state 170

    (454) expr_77 -> empty .

    CARET           reduce using rule 454 (expr_77 -> empty .)
    VERTICAL        reduce using rule 454 (expr_77 -> empty .)
    OP_LAND         reduce using rule 454 (expr_77 -> empty .)
    OP_LOR          reduce using rule 454 (expr_77 -> empty .)
    QUES            reduce using rule 454 (expr_77 -> empty .)
    RPAREN          reduce using rule 454 (expr_77 -> empty .)
    COMMA           reduce using rule 454 (expr_77 -> empty .)
    BRPAREN         reduce using rule 454 (expr_77 -> empty .)
    EQUALS          reduce using rule 454 (expr_77 -> empty .)
    ASS_ADD         reduce using rule 454 (expr_77 -> empty .)
    ASS_SUB         reduce using rule 454 (expr_77 -> empty .)
    ASS_MUL         reduce using rule 454 (expr_77 -> empty .)
    ASS_DIV         reduce using rule 454 (expr_77 -> empty .)
    ASS_AND         reduce using rule 454 (expr_77 -> empty .)
    ASS_OR          reduce using rule 454 (expr_77 -> empty .)
    ASS_XOR         reduce using rule 454 (expr_77 -> empty .)
    ASS_MOD         reduce using rule 454 (expr_77 -> empty .)
    LESS            reduce using rule 454 (expr_77 -> empty .)
    MORE            reduce using rule 454 (expr_77 -> empty .)
    COLON           reduce using rule 454 (expr_77 -> empty .)
    FRPAREN         reduce using rule 454 (expr_77 -> empty .)
    SEMI            reduce using rule 454 (expr_77 -> empty .)



state 171

    (136) elementValueArrayInitializer -> BLPAREN expr_55 . expr_35 BRPAREN
    (352) expr_35 -> . COMMA
    (353) expr_35 -> . empty
    (502) empty -> .

    COMMA           shift and go to state 268
    BRPAREN         reduce using rule 502 (empty -> .)


    expr_35                        shift and go to state 267
    empty                          shift and go to state 269

state 172

    (400) expr_55 -> empty .

    COMMA           reduce using rule 400 (expr_55 -> empty .)
    BRPAREN         reduce using rule 400 (expr_55 -> empty .)



state 173

    (399) expr_55 -> elementValue . expr_54
    (396) expr_54 -> . COMMA elementValue
    (397) expr_54 -> . expr_54 COMMA elementValue
    (398) expr_54 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 270
    BRPAREN         reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_54                        shift and go to state 271
    empty                          shift and go to state 272

state 174

    (455) expr_78 -> AND . equalityExpression
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 273
    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 175

    (210) andExpression -> equalityExpression expr_78 .
    (456) expr_78 -> expr_78 . AND equalityExpression

    CARET           reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    VERTICAL        reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    OP_LAND         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    OP_LOR          reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    QUES            reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    EQUALS          reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_ADD         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_SUB         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_MUL         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_DIV         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_AND         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_OR          reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_XOR         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    ASS_MOD         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    LESS            reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    MORE            reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    SEMI            reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    COMMA           reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    RPAREN          reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    BRPAREN         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    COLON           reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    FRPAREN         reduce using rule 210 (andExpression -> equalityExpression expr_78 .)
    AND             shift and go to state 274



state 176

    (457) expr_78 -> empty .

    AND             reduce using rule 457 (expr_78 -> empty .)
    CARET           reduce using rule 457 (expr_78 -> empty .)
    VERTICAL        reduce using rule 457 (expr_78 -> empty .)
    OP_LAND         reduce using rule 457 (expr_78 -> empty .)
    OP_LOR          reduce using rule 457 (expr_78 -> empty .)
    QUES            reduce using rule 457 (expr_78 -> empty .)
    RPAREN          reduce using rule 457 (expr_78 -> empty .)
    COMMA           reduce using rule 457 (expr_78 -> empty .)
    BRPAREN         reduce using rule 457 (expr_78 -> empty .)
    EQUALS          reduce using rule 457 (expr_78 -> empty .)
    ASS_ADD         reduce using rule 457 (expr_78 -> empty .)
    ASS_SUB         reduce using rule 457 (expr_78 -> empty .)
    ASS_MUL         reduce using rule 457 (expr_78 -> empty .)
    ASS_DIV         reduce using rule 457 (expr_78 -> empty .)
    ASS_AND         reduce using rule 457 (expr_78 -> empty .)
    ASS_OR          reduce using rule 457 (expr_78 -> empty .)
    ASS_XOR         reduce using rule 457 (expr_78 -> empty .)
    ASS_MOD         reduce using rule 457 (expr_78 -> empty .)
    LESS            reduce using rule 457 (expr_78 -> empty .)
    MORE            reduce using rule 457 (expr_78 -> empty .)
    COLON           reduce using rule 457 (expr_78 -> empty .)
    FRPAREN         reduce using rule 457 (expr_78 -> empty .)
    SEMI            reduce using rule 457 (expr_78 -> empty .)



state 177

    (205) conditionalExpression -> conditionalOrExpression expr_73 .

    EQUALS          reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_ADD         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_SUB         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_MUL         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_DIV         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_AND         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_OR          reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_XOR         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    ASS_MOD         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    LESS            reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    MORE            reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    SEMI            reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    RPAREN          reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    COMMA           reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    BRPAREN         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    COLON           reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)
    FRPAREN         reduce using rule 205 (conditionalExpression -> conditionalOrExpression expr_73 .)



state 178

    (441) expr_73 -> QUES . expression COLON expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 275

state 179

    (442) expr_73 -> empty .

    EQUALS          reduce using rule 442 (expr_73 -> empty .)
    ASS_ADD         reduce using rule 442 (expr_73 -> empty .)
    ASS_SUB         reduce using rule 442 (expr_73 -> empty .)
    ASS_MUL         reduce using rule 442 (expr_73 -> empty .)
    ASS_DIV         reduce using rule 442 (expr_73 -> empty .)
    ASS_AND         reduce using rule 442 (expr_73 -> empty .)
    ASS_OR          reduce using rule 442 (expr_73 -> empty .)
    ASS_XOR         reduce using rule 442 (expr_73 -> empty .)
    ASS_MOD         reduce using rule 442 (expr_73 -> empty .)
    LESS            reduce using rule 442 (expr_73 -> empty .)
    MORE            reduce using rule 442 (expr_73 -> empty .)
    RPAREN          reduce using rule 442 (expr_73 -> empty .)
    COLON           reduce using rule 442 (expr_73 -> empty .)
    FRPAREN         reduce using rule 442 (expr_73 -> empty .)
    COMMA           reduce using rule 442 (expr_73 -> empty .)
    BRPAREN         reduce using rule 442 (expr_73 -> empty .)
    SEMI            reduce using rule 442 (expr_73 -> empty .)



state 180

    (208) inclusiveOrExpression -> exclusiveOrExpression expr_76 .
    (450) expr_76 -> expr_76 . VERTICAL exclusiveOrExpression

    OP_LAND         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    OP_LOR          reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    QUES            reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    EQUALS          reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_ADD         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_SUB         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_MUL         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_DIV         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_AND         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_OR          reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_XOR         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    ASS_MOD         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    LESS            reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    MORE            reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    COLON           reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    COMMA           reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    RPAREN          reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    BRPAREN         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    FRPAREN         reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    SEMI            reduce using rule 208 (inclusiveOrExpression -> exclusiveOrExpression expr_76 .)
    VERTICAL        shift and go to state 276



state 181

    (451) expr_76 -> empty .

    VERTICAL        reduce using rule 451 (expr_76 -> empty .)
    OP_LAND         reduce using rule 451 (expr_76 -> empty .)
    OP_LOR          reduce using rule 451 (expr_76 -> empty .)
    QUES            reduce using rule 451 (expr_76 -> empty .)
    RPAREN          reduce using rule 451 (expr_76 -> empty .)
    COMMA           reduce using rule 451 (expr_76 -> empty .)
    BRPAREN         reduce using rule 451 (expr_76 -> empty .)
    EQUALS          reduce using rule 451 (expr_76 -> empty .)
    ASS_ADD         reduce using rule 451 (expr_76 -> empty .)
    ASS_SUB         reduce using rule 451 (expr_76 -> empty .)
    ASS_MUL         reduce using rule 451 (expr_76 -> empty .)
    ASS_DIV         reduce using rule 451 (expr_76 -> empty .)
    ASS_AND         reduce using rule 451 (expr_76 -> empty .)
    ASS_OR          reduce using rule 451 (expr_76 -> empty .)
    ASS_XOR         reduce using rule 451 (expr_76 -> empty .)
    ASS_MOD         reduce using rule 451 (expr_76 -> empty .)
    LESS            reduce using rule 451 (expr_76 -> empty .)
    MORE            reduce using rule 451 (expr_76 -> empty .)
    COLON           reduce using rule 451 (expr_76 -> empty .)
    FRPAREN         reduce using rule 451 (expr_76 -> empty .)
    SEMI            reduce using rule 451 (expr_76 -> empty .)



state 182

    (449) expr_76 -> VERTICAL . exclusiveOrExpression
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 277
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 183

    (264) selector -> FLPAREN . expression FRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 278

state 184

    (482) expr_88 -> selector .

    OP_INC          reduce using rule 482 (expr_88 -> selector .)
    OP_DEC          reduce using rule 482 (expr_88 -> selector .)
    DOT             reduce using rule 482 (expr_88 -> selector .)
    FLPAREN         reduce using rule 482 (expr_88 -> selector .)



state 185

    (260) selector -> DOT . Identifier expr_20
    (261) selector -> DOT . THIS
    (262) selector -> DOT . SUPER superSuffix
    (263) selector -> DOT . NEW innerCreator

    Identifier      shift and go to state 281
    THIS            shift and go to state 279
    SUPER           shift and go to state 282
    NEW             shift and go to state 280



state 186

    (232) unaryExpressionNotPlusMinus -> primary expr_88 . expr_89
    (483) expr_88 -> expr_88 . selector
    (485) expr_89 -> . OP_INC
    (486) expr_89 -> . OP_DEC
    (260) selector -> . DOT Identifier expr_20
    (261) selector -> . DOT THIS
    (262) selector -> . DOT SUPER superSuffix
    (263) selector -> . DOT NEW innerCreator
    (264) selector -> . FLPAREN expression FRPAREN

    OP_INC          shift and go to state 285
    OP_DEC          shift and go to state 286
    DOT             shift and go to state 185
    FLPAREN         shift and go to state 183


    expr_89                        shift and go to state 283
    selector                       shift and go to state 284

state 187

    (484) expr_88 -> empty .

    OP_INC          reduce using rule 484 (expr_88 -> empty .)
    OP_DEC          reduce using rule 484 (expr_88 -> empty .)
    DOT             reduce using rule 484 (expr_88 -> empty .)
    FLPAREN         reduce using rule 484 (expr_88 -> empty .)



state 188

    (226) unaryExpression -> OP_INC unaryExpression .

    MULT            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    SLASH           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    PERCENT         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    PLUS            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    DASH            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    LESS            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    MORE            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    INSTANCEOF      reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    OP_EQ           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    OP_NE           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    AND             reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    CARET           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    VERTICAL        reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    OP_LAND         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    OP_LOR          reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    QUES            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    RPAREN          reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    COMMA           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    BRPAREN         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    EQUALS          reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_ADD         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_SUB         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MUL         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_DIV         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_AND         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_OR          reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_XOR         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MOD         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    COLON           reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    FRPAREN         reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)
    SEMI            reduce using rule 226 (unaryExpression -> OP_INC unaryExpression .)



state 189

    (227) unaryExpression -> OP_DEC unaryExpression .

    MULT            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    SLASH           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    PERCENT         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    PLUS            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    DASH            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    LESS            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    MORE            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    INSTANCEOF      reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    OP_EQ           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    OP_NE           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    AND             reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    CARET           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    VERTICAL        reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LAND         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LOR          reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    QUES            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    RPAREN          reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    COMMA           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    BRPAREN         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    EQUALS          reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_ADD         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_SUB         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MUL         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_DIV         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_AND         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_OR          reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_XOR         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MOD         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    COLON           reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    FRPAREN         reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)
    SEMI            reduce using rule 227 (unaryExpression -> OP_DEC unaryExpression .)



state 190

    (259) nonWildcardTypeArguments -> LESS . typeList MORE
    (32) typeList -> . type expr_24
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    typeList                       shift and go to state 287
    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 288

state 191

    (239) primary -> NEW creator .

    DOT             reduce using rule 239 (primary -> NEW creator .)
    FLPAREN         reduce using rule 239 (primary -> NEW creator .)
    OP_INC          reduce using rule 239 (primary -> NEW creator .)
    OP_DEC          reduce using rule 239 (primary -> NEW creator .)



state 192

    (253) createdName -> classOrInterfaceType .

    LPAREN          reduce using rule 253 (createdName -> classOrInterfaceType .)
    FLPAREN         reduce using rule 253 (createdName -> classOrInterfaceType .)



state 193

    (251) creator -> nonWildcardTypeArguments . createdName classCreatorRest
    (253) createdName -> . classOrInterfaceType
    (254) createdName -> . primitiveType
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    createdName                    shift and go to state 289
    classOrInterfaceType           shift and go to state 192
    primitiveType                  shift and go to state 196

state 194

    (92) classOrInterfaceType -> Identifier . expr_typeArguments expr_38
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 290
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! LESS            [ reduce using rule 502 (empty -> .) ]

    typeArguments                  shift and go to state 291
    expr_typeArguments             shift and go to state 292
    empty                          shift and go to state 293

state 195

    (252) creator -> createdName . expr_93
    (493) expr_93 -> . arrayCreatorRest
    (494) expr_93 -> . classCreatorRest
    (256) arrayCreatorRest -> . FLPAREN expr_94
    (257) classCreatorRest -> . arguments expr_21
    (267) arguments -> . LPAREN expr_95 RPAREN

    FLPAREN         shift and go to state 295
    LPAREN          shift and go to state 228


    expr_93                        shift and go to state 294
    classCreatorRest               shift and go to state 296
    arguments                      shift and go to state 297
    arrayCreatorRest               shift and go to state 298

state 196

    (254) createdName -> primitiveType .

    LPAREN          reduce using rule 254 (createdName -> primitiveType .)
    FLPAREN         reduce using rule 254 (createdName -> primitiveType .)



state 197

    (240) primary -> Identifier expr_49 . expr_91
    (385) expr_49 -> expr_49 . DOT Identifier
    (489) expr_91 -> . identifierSuffix
    (490) expr_91 -> . empty
    (243) identifierSuffix -> . expr_28 DOT CLASS
    (244) identifierSuffix -> . expr_92
    (245) identifierSuffix -> . arguments
    (246) identifierSuffix -> . DOT CLASS
    (247) identifierSuffix -> . DOT explicitGenericInvocation
    (248) identifierSuffix -> . DOT THIS
    (249) identifierSuffix -> . DOT SUPER arguments
    (250) identifierSuffix -> . DOT NEW innerCreator
    (502) empty -> .
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (491) expr_92 -> . FLPAREN expression FRPAREN
    (492) expr_92 -> . expr_92 FLPAREN expression FRPAREN
    (267) arguments -> . LPAREN expr_95 RPAREN

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 254
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    FLPAREN         shift and go to state 251
    LPAREN          shift and go to state 228

  ! DOT             [ reduce using rule 502 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    identifierSuffix               shift and go to state 248
    expr_91                        shift and go to state 299
    expr_92                        shift and go to state 250
    expr_28                        shift and go to state 252
    arguments                      shift and go to state 255
    empty                          shift and go to state 253

state 198

    (132) elementValuePair -> Identifier EQUALS . elementValue
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 106
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 300

state 199

    (229) unaryExpressionNotPlusMinus -> TILDE unaryExpression .

    MULT            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SLASH           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PERCENT         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PLUS            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    DASH            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    LESS            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    MORE            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    INSTANCEOF      reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_EQ           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_NE           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    AND             reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    CARET           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    VERTICAL        reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LAND         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LOR          reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    QUES            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COMMA           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    BRPAREN         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    EQUALS          reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_ADD         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_SUB         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MUL         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_DIV         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_AND         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_OR          reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_XOR         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MOD         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    RPAREN          reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SEMI            reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COLON           reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    FRPAREN         reduce using rule 229 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)



state 200

    (334) expr_28 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 301



state 201

    (241) primary -> primitiveType expr_28 . DOT CLASS
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    DOT             shift and go to state 303
    FLPAREN         shift and go to state 302



state 202

    (336) expr_28 -> empty .

    FLPAREN         reduce using rule 336 (expr_28 -> empty .)
    THROWS          reduce using rule 336 (expr_28 -> empty .)
    SEMI            reduce using rule 336 (expr_28 -> empty .)
    DOT             reduce using rule 336 (expr_28 -> empty .)
    RPAREN          reduce using rule 336 (expr_28 -> empty .)
    OP_EQ           reduce using rule 336 (expr_28 -> empty .)
    OP_NE           reduce using rule 336 (expr_28 -> empty .)
    AND             reduce using rule 336 (expr_28 -> empty .)
    CARET           reduce using rule 336 (expr_28 -> empty .)
    VERTICAL        reduce using rule 336 (expr_28 -> empty .)
    OP_LAND         reduce using rule 336 (expr_28 -> empty .)
    OP_LOR          reduce using rule 336 (expr_28 -> empty .)
    QUES            reduce using rule 336 (expr_28 -> empty .)
    COMMA           reduce using rule 336 (expr_28 -> empty .)
    BRPAREN         reduce using rule 336 (expr_28 -> empty .)
    EQUALS          reduce using rule 336 (expr_28 -> empty .)
    ASS_ADD         reduce using rule 336 (expr_28 -> empty .)
    ASS_SUB         reduce using rule 336 (expr_28 -> empty .)
    ASS_MUL         reduce using rule 336 (expr_28 -> empty .)
    ASS_DIV         reduce using rule 336 (expr_28 -> empty .)
    ASS_AND         reduce using rule 336 (expr_28 -> empty .)
    ASS_OR          reduce using rule 336 (expr_28 -> empty .)
    ASS_XOR         reduce using rule 336 (expr_28 -> empty .)
    ASS_MOD         reduce using rule 336 (expr_28 -> empty .)
    LESS            reduce using rule 336 (expr_28 -> empty .)
    MORE            reduce using rule 336 (expr_28 -> empty .)
    COLON           reduce using rule 336 (expr_28 -> empty .)
    FRPAREN         reduce using rule 336 (expr_28 -> empty .)
    BLPAREN         reduce using rule 336 (expr_28 -> empty .)
    IMPLEMENTS      reduce using rule 336 (expr_28 -> empty .)
    Identifier      reduce using rule 336 (expr_28 -> empty .)
    OP_ARRAY        reduce using rule 336 (expr_28 -> empty .)
    OP_INC          reduce using rule 336 (expr_28 -> empty .)
    OP_DEC          reduce using rule 336 (expr_28 -> empty .)



state 203

    (222) additiveExpression -> multiplicativeExpression expr_85 .
    (474) expr_85 -> expr_85 . expr_84 multiplicativeExpression
    (471) expr_84 -> . PLUS
    (472) expr_84 -> . DASH

    LESS            reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    MORE            reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    INSTANCEOF      reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    OP_EQ           reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    OP_NE           reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    AND             reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    CARET           reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    VERTICAL        reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    OP_LAND         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    OP_LOR          reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    QUES            reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    EQUALS          reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_ADD         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_SUB         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_MUL         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_DIV         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_AND         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_OR          reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_XOR         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    ASS_MOD         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    RPAREN          reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    COLON           reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    FRPAREN         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    COMMA           reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    BRPAREN         reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    SEMI            reduce using rule 222 (additiveExpression -> multiplicativeExpression expr_85 .)
    PLUS            shift and go to state 206
    DASH            shift and go to state 205


    expr_84                        shift and go to state 304

state 204

    (473) expr_85 -> expr_84 . multiplicativeExpression
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 305
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 205

    (472) expr_84 -> DASH .

    PLUS            reduce using rule 472 (expr_84 -> DASH .)
    DASH            reduce using rule 472 (expr_84 -> DASH .)
    OP_INC          reduce using rule 472 (expr_84 -> DASH .)
    OP_DEC          reduce using rule 472 (expr_84 -> DASH .)
    TILDE           reduce using rule 472 (expr_84 -> DASH .)
    EXCLAMATION     reduce using rule 472 (expr_84 -> DASH .)
    LPAREN          reduce using rule 472 (expr_84 -> DASH .)
    THIS            reduce using rule 472 (expr_84 -> DASH .)
    SUPER           reduce using rule 472 (expr_84 -> DASH .)
    NEW             reduce using rule 472 (expr_84 -> DASH .)
    Identifier      reduce using rule 472 (expr_84 -> DASH .)
    VOID            reduce using rule 472 (expr_84 -> DASH .)
    CharacterLiteral reduce using rule 472 (expr_84 -> DASH .)
    StringLiteral   reduce using rule 472 (expr_84 -> DASH .)
    NULL            reduce using rule 472 (expr_84 -> DASH .)
    BOOLEAN         reduce using rule 472 (expr_84 -> DASH .)
    CHAR            reduce using rule 472 (expr_84 -> DASH .)
    BYTE            reduce using rule 472 (expr_84 -> DASH .)
    SHORT           reduce using rule 472 (expr_84 -> DASH .)
    INT             reduce using rule 472 (expr_84 -> DASH .)
    LONG            reduce using rule 472 (expr_84 -> DASH .)
    FLOAT           reduce using rule 472 (expr_84 -> DASH .)
    DOUBLE          reduce using rule 472 (expr_84 -> DASH .)
    NUMBER          reduce using rule 472 (expr_84 -> DASH .)
    HEX_NUMBER      reduce using rule 472 (expr_84 -> DASH .)
    LONG_NUMBER     reduce using rule 472 (expr_84 -> DASH .)
    LONG_HEX_NUMBER reduce using rule 472 (expr_84 -> DASH .)
    NON_INTEGER_1   reduce using rule 472 (expr_84 -> DASH .)
    NON_INTEGER_2   reduce using rule 472 (expr_84 -> DASH .)
    NON_INTEGER_3   reduce using rule 472 (expr_84 -> DASH .)
    TRUE            reduce using rule 472 (expr_84 -> DASH .)
    FALSE           reduce using rule 472 (expr_84 -> DASH .)



state 206

    (471) expr_84 -> PLUS .

    PLUS            reduce using rule 471 (expr_84 -> PLUS .)
    DASH            reduce using rule 471 (expr_84 -> PLUS .)
    OP_INC          reduce using rule 471 (expr_84 -> PLUS .)
    OP_DEC          reduce using rule 471 (expr_84 -> PLUS .)
    TILDE           reduce using rule 471 (expr_84 -> PLUS .)
    EXCLAMATION     reduce using rule 471 (expr_84 -> PLUS .)
    LPAREN          reduce using rule 471 (expr_84 -> PLUS .)
    THIS            reduce using rule 471 (expr_84 -> PLUS .)
    SUPER           reduce using rule 471 (expr_84 -> PLUS .)
    NEW             reduce using rule 471 (expr_84 -> PLUS .)
    Identifier      reduce using rule 471 (expr_84 -> PLUS .)
    VOID            reduce using rule 471 (expr_84 -> PLUS .)
    CharacterLiteral reduce using rule 471 (expr_84 -> PLUS .)
    StringLiteral   reduce using rule 471 (expr_84 -> PLUS .)
    NULL            reduce using rule 471 (expr_84 -> PLUS .)
    BOOLEAN         reduce using rule 471 (expr_84 -> PLUS .)
    CHAR            reduce using rule 471 (expr_84 -> PLUS .)
    BYTE            reduce using rule 471 (expr_84 -> PLUS .)
    SHORT           reduce using rule 471 (expr_84 -> PLUS .)
    INT             reduce using rule 471 (expr_84 -> PLUS .)
    LONG            reduce using rule 471 (expr_84 -> PLUS .)
    FLOAT           reduce using rule 471 (expr_84 -> PLUS .)
    DOUBLE          reduce using rule 471 (expr_84 -> PLUS .)
    NUMBER          reduce using rule 471 (expr_84 -> PLUS .)
    HEX_NUMBER      reduce using rule 471 (expr_84 -> PLUS .)
    LONG_NUMBER     reduce using rule 471 (expr_84 -> PLUS .)
    LONG_HEX_NUMBER reduce using rule 471 (expr_84 -> PLUS .)
    NON_INTEGER_1   reduce using rule 471 (expr_84 -> PLUS .)
    NON_INTEGER_2   reduce using rule 471 (expr_84 -> PLUS .)
    NON_INTEGER_3   reduce using rule 471 (expr_84 -> PLUS .)
    TRUE            reduce using rule 471 (expr_84 -> PLUS .)
    FALSE           reduce using rule 471 (expr_84 -> PLUS .)



state 207

    (475) expr_85 -> empty .

    PLUS            reduce using rule 475 (expr_85 -> empty .)
    DASH            reduce using rule 475 (expr_85 -> empty .)
    LESS            reduce using rule 475 (expr_85 -> empty .)
    MORE            reduce using rule 475 (expr_85 -> empty .)
    INSTANCEOF      reduce using rule 475 (expr_85 -> empty .)
    OP_EQ           reduce using rule 475 (expr_85 -> empty .)
    OP_NE           reduce using rule 475 (expr_85 -> empty .)
    AND             reduce using rule 475 (expr_85 -> empty .)
    CARET           reduce using rule 475 (expr_85 -> empty .)
    VERTICAL        reduce using rule 475 (expr_85 -> empty .)
    OP_LAND         reduce using rule 475 (expr_85 -> empty .)
    OP_LOR          reduce using rule 475 (expr_85 -> empty .)
    QUES            reduce using rule 475 (expr_85 -> empty .)
    RPAREN          reduce using rule 475 (expr_85 -> empty .)
    COMMA           reduce using rule 475 (expr_85 -> empty .)
    BRPAREN         reduce using rule 475 (expr_85 -> empty .)
    EQUALS          reduce using rule 475 (expr_85 -> empty .)
    ASS_ADD         reduce using rule 475 (expr_85 -> empty .)
    ASS_SUB         reduce using rule 475 (expr_85 -> empty .)
    ASS_MUL         reduce using rule 475 (expr_85 -> empty .)
    ASS_DIV         reduce using rule 475 (expr_85 -> empty .)
    ASS_AND         reduce using rule 475 (expr_85 -> empty .)
    ASS_OR          reduce using rule 475 (expr_85 -> empty .)
    ASS_XOR         reduce using rule 475 (expr_85 -> empty .)
    ASS_MOD         reduce using rule 475 (expr_85 -> empty .)
    COLON           reduce using rule 475 (expr_85 -> empty .)
    FRPAREN         reduce using rule 475 (expr_85 -> empty .)
    SEMI            reduce using rule 475 (expr_85 -> empty .)



state 208

    (213) relationalExpression -> shiftExpression expr_82 .
    (466) expr_82 -> expr_82 . relationalOp shiftExpression
    (214) relationalOp -> . LESS EQUALS
    (215) relationalOp -> . MORE EQUALS
    (216) relationalOp -> . LESS
    (217) relationalOp -> . MORE

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    INSTANCEOF      reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    OP_EQ           reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    OP_NE           reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    AND             reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    CARET           reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    VERTICAL        reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    OP_LAND         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    OP_LOR          reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    QUES            reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    EQUALS          reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_ADD         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_SUB         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_MUL         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_DIV         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_AND         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_OR          reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_XOR         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    ASS_MOD         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    COMMA           reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    BRPAREN         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    SEMI            reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    FRPAREN         reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    RPAREN          reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    COLON           reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .)
    LESS            shift and go to state 209
    MORE            shift and go to state 212

  ! LESS            [ reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .) ]
  ! MORE            [ reduce using rule 213 (relationalExpression -> shiftExpression expr_82 .) ]

    relationalOp                   shift and go to state 306

state 209

    (214) relationalOp -> LESS . EQUALS
    (216) relationalOp -> LESS .

    EQUALS          shift and go to state 307
    PLUS            reduce using rule 216 (relationalOp -> LESS .)
    DASH            reduce using rule 216 (relationalOp -> LESS .)
    OP_INC          reduce using rule 216 (relationalOp -> LESS .)
    OP_DEC          reduce using rule 216 (relationalOp -> LESS .)
    TILDE           reduce using rule 216 (relationalOp -> LESS .)
    EXCLAMATION     reduce using rule 216 (relationalOp -> LESS .)
    LPAREN          reduce using rule 216 (relationalOp -> LESS .)
    THIS            reduce using rule 216 (relationalOp -> LESS .)
    SUPER           reduce using rule 216 (relationalOp -> LESS .)
    NEW             reduce using rule 216 (relationalOp -> LESS .)
    Identifier      reduce using rule 216 (relationalOp -> LESS .)
    VOID            reduce using rule 216 (relationalOp -> LESS .)
    CharacterLiteral reduce using rule 216 (relationalOp -> LESS .)
    StringLiteral   reduce using rule 216 (relationalOp -> LESS .)
    NULL            reduce using rule 216 (relationalOp -> LESS .)
    BOOLEAN         reduce using rule 216 (relationalOp -> LESS .)
    CHAR            reduce using rule 216 (relationalOp -> LESS .)
    BYTE            reduce using rule 216 (relationalOp -> LESS .)
    SHORT           reduce using rule 216 (relationalOp -> LESS .)
    INT             reduce using rule 216 (relationalOp -> LESS .)
    LONG            reduce using rule 216 (relationalOp -> LESS .)
    FLOAT           reduce using rule 216 (relationalOp -> LESS .)
    DOUBLE          reduce using rule 216 (relationalOp -> LESS .)
    NUMBER          reduce using rule 216 (relationalOp -> LESS .)
    HEX_NUMBER      reduce using rule 216 (relationalOp -> LESS .)
    LONG_NUMBER     reduce using rule 216 (relationalOp -> LESS .)
    LONG_HEX_NUMBER reduce using rule 216 (relationalOp -> LESS .)
    NON_INTEGER_1   reduce using rule 216 (relationalOp -> LESS .)
    NON_INTEGER_2   reduce using rule 216 (relationalOp -> LESS .)
    NON_INTEGER_3   reduce using rule 216 (relationalOp -> LESS .)
    TRUE            reduce using rule 216 (relationalOp -> LESS .)
    FALSE           reduce using rule 216 (relationalOp -> LESS .)



state 210

    (465) expr_82 -> relationalOp . shiftExpression
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 308
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 211

    (467) expr_82 -> empty .

    LESS            reduce using rule 467 (expr_82 -> empty .)
    MORE            reduce using rule 467 (expr_82 -> empty .)
    INSTANCEOF      reduce using rule 467 (expr_82 -> empty .)
    OP_EQ           reduce using rule 467 (expr_82 -> empty .)
    OP_NE           reduce using rule 467 (expr_82 -> empty .)
    AND             reduce using rule 467 (expr_82 -> empty .)
    CARET           reduce using rule 467 (expr_82 -> empty .)
    VERTICAL        reduce using rule 467 (expr_82 -> empty .)
    OP_LAND         reduce using rule 467 (expr_82 -> empty .)
    OP_LOR          reduce using rule 467 (expr_82 -> empty .)
    QUES            reduce using rule 467 (expr_82 -> empty .)
    RPAREN          reduce using rule 467 (expr_82 -> empty .)
    COMMA           reduce using rule 467 (expr_82 -> empty .)
    BRPAREN         reduce using rule 467 (expr_82 -> empty .)
    EQUALS          reduce using rule 467 (expr_82 -> empty .)
    ASS_ADD         reduce using rule 467 (expr_82 -> empty .)
    ASS_SUB         reduce using rule 467 (expr_82 -> empty .)
    ASS_MUL         reduce using rule 467 (expr_82 -> empty .)
    ASS_DIV         reduce using rule 467 (expr_82 -> empty .)
    ASS_AND         reduce using rule 467 (expr_82 -> empty .)
    ASS_OR          reduce using rule 467 (expr_82 -> empty .)
    ASS_XOR         reduce using rule 467 (expr_82 -> empty .)
    ASS_MOD         reduce using rule 467 (expr_82 -> empty .)
    COLON           reduce using rule 467 (expr_82 -> empty .)
    FRPAREN         reduce using rule 467 (expr_82 -> empty .)
    SEMI            reduce using rule 467 (expr_82 -> empty .)



state 212

    (215) relationalOp -> MORE . EQUALS
    (217) relationalOp -> MORE .

    EQUALS          shift and go to state 309
    PLUS            reduce using rule 217 (relationalOp -> MORE .)
    DASH            reduce using rule 217 (relationalOp -> MORE .)
    OP_INC          reduce using rule 217 (relationalOp -> MORE .)
    OP_DEC          reduce using rule 217 (relationalOp -> MORE .)
    TILDE           reduce using rule 217 (relationalOp -> MORE .)
    EXCLAMATION     reduce using rule 217 (relationalOp -> MORE .)
    LPAREN          reduce using rule 217 (relationalOp -> MORE .)
    THIS            reduce using rule 217 (relationalOp -> MORE .)
    SUPER           reduce using rule 217 (relationalOp -> MORE .)
    NEW             reduce using rule 217 (relationalOp -> MORE .)
    Identifier      reduce using rule 217 (relationalOp -> MORE .)
    VOID            reduce using rule 217 (relationalOp -> MORE .)
    CharacterLiteral reduce using rule 217 (relationalOp -> MORE .)
    StringLiteral   reduce using rule 217 (relationalOp -> MORE .)
    NULL            reduce using rule 217 (relationalOp -> MORE .)
    BOOLEAN         reduce using rule 217 (relationalOp -> MORE .)
    CHAR            reduce using rule 217 (relationalOp -> MORE .)
    BYTE            reduce using rule 217 (relationalOp -> MORE .)
    SHORT           reduce using rule 217 (relationalOp -> MORE .)
    INT             reduce using rule 217 (relationalOp -> MORE .)
    LONG            reduce using rule 217 (relationalOp -> MORE .)
    FLOAT           reduce using rule 217 (relationalOp -> MORE .)
    DOUBLE          reduce using rule 217 (relationalOp -> MORE .)
    NUMBER          reduce using rule 217 (relationalOp -> MORE .)
    HEX_NUMBER      reduce using rule 217 (relationalOp -> MORE .)
    LONG_NUMBER     reduce using rule 217 (relationalOp -> MORE .)
    LONG_HEX_NUMBER reduce using rule 217 (relationalOp -> MORE .)
    NON_INTEGER_1   reduce using rule 217 (relationalOp -> MORE .)
    NON_INTEGER_2   reduce using rule 217 (relationalOp -> MORE .)
    NON_INTEGER_3   reduce using rule 217 (relationalOp -> MORE .)
    TRUE            reduce using rule 217 (relationalOp -> MORE .)
    FALSE           reduce using rule 217 (relationalOp -> MORE .)



state 213

    (223) multiplicativeExpression -> unaryExpression expr_87 .
    (480) expr_87 -> expr_87 . expr_86 unaryExpression
    (476) expr_86 -> . MULT
    (477) expr_86 -> . SLASH
    (478) expr_86 -> . PERCENT

    PLUS            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    DASH            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    LESS            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    MORE            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    INSTANCEOF      reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    OP_EQ           reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    OP_NE           reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    AND             reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    CARET           reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    VERTICAL        reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    OP_LAND         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    OP_LOR          reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    QUES            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    EQUALS          reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_ADD         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_SUB         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_MUL         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_DIV         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_AND         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_OR          reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_XOR         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    ASS_MOD         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    COLON           reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    SEMI            reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    FRPAREN         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    RPAREN          reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    COMMA           reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    BRPAREN         reduce using rule 223 (multiplicativeExpression -> unaryExpression expr_87 .)
    MULT            shift and go to state 218
    SLASH           shift and go to state 217
    PERCENT         shift and go to state 215


    expr_86                        shift and go to state 310

state 214

    (479) expr_87 -> expr_86 . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 311
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 215

    (478) expr_86 -> PERCENT .

    PLUS            reduce using rule 478 (expr_86 -> PERCENT .)
    DASH            reduce using rule 478 (expr_86 -> PERCENT .)
    OP_INC          reduce using rule 478 (expr_86 -> PERCENT .)
    OP_DEC          reduce using rule 478 (expr_86 -> PERCENT .)
    TILDE           reduce using rule 478 (expr_86 -> PERCENT .)
    EXCLAMATION     reduce using rule 478 (expr_86 -> PERCENT .)
    LPAREN          reduce using rule 478 (expr_86 -> PERCENT .)
    THIS            reduce using rule 478 (expr_86 -> PERCENT .)
    SUPER           reduce using rule 478 (expr_86 -> PERCENT .)
    NEW             reduce using rule 478 (expr_86 -> PERCENT .)
    Identifier      reduce using rule 478 (expr_86 -> PERCENT .)
    VOID            reduce using rule 478 (expr_86 -> PERCENT .)
    CharacterLiteral reduce using rule 478 (expr_86 -> PERCENT .)
    StringLiteral   reduce using rule 478 (expr_86 -> PERCENT .)
    NULL            reduce using rule 478 (expr_86 -> PERCENT .)
    BOOLEAN         reduce using rule 478 (expr_86 -> PERCENT .)
    CHAR            reduce using rule 478 (expr_86 -> PERCENT .)
    BYTE            reduce using rule 478 (expr_86 -> PERCENT .)
    SHORT           reduce using rule 478 (expr_86 -> PERCENT .)
    INT             reduce using rule 478 (expr_86 -> PERCENT .)
    LONG            reduce using rule 478 (expr_86 -> PERCENT .)
    FLOAT           reduce using rule 478 (expr_86 -> PERCENT .)
    DOUBLE          reduce using rule 478 (expr_86 -> PERCENT .)
    NUMBER          reduce using rule 478 (expr_86 -> PERCENT .)
    HEX_NUMBER      reduce using rule 478 (expr_86 -> PERCENT .)
    LONG_NUMBER     reduce using rule 478 (expr_86 -> PERCENT .)
    LONG_HEX_NUMBER reduce using rule 478 (expr_86 -> PERCENT .)
    NON_INTEGER_1   reduce using rule 478 (expr_86 -> PERCENT .)
    NON_INTEGER_2   reduce using rule 478 (expr_86 -> PERCENT .)
    NON_INTEGER_3   reduce using rule 478 (expr_86 -> PERCENT .)
    TRUE            reduce using rule 478 (expr_86 -> PERCENT .)
    FALSE           reduce using rule 478 (expr_86 -> PERCENT .)



state 216

    (481) expr_87 -> empty .

    MULT            reduce using rule 481 (expr_87 -> empty .)
    SLASH           reduce using rule 481 (expr_87 -> empty .)
    PERCENT         reduce using rule 481 (expr_87 -> empty .)
    PLUS            reduce using rule 481 (expr_87 -> empty .)
    DASH            reduce using rule 481 (expr_87 -> empty .)
    LESS            reduce using rule 481 (expr_87 -> empty .)
    MORE            reduce using rule 481 (expr_87 -> empty .)
    INSTANCEOF      reduce using rule 481 (expr_87 -> empty .)
    OP_EQ           reduce using rule 481 (expr_87 -> empty .)
    OP_NE           reduce using rule 481 (expr_87 -> empty .)
    AND             reduce using rule 481 (expr_87 -> empty .)
    CARET           reduce using rule 481 (expr_87 -> empty .)
    VERTICAL        reduce using rule 481 (expr_87 -> empty .)
    OP_LAND         reduce using rule 481 (expr_87 -> empty .)
    OP_LOR          reduce using rule 481 (expr_87 -> empty .)
    QUES            reduce using rule 481 (expr_87 -> empty .)
    RPAREN          reduce using rule 481 (expr_87 -> empty .)
    COMMA           reduce using rule 481 (expr_87 -> empty .)
    BRPAREN         reduce using rule 481 (expr_87 -> empty .)
    EQUALS          reduce using rule 481 (expr_87 -> empty .)
    ASS_ADD         reduce using rule 481 (expr_87 -> empty .)
    ASS_SUB         reduce using rule 481 (expr_87 -> empty .)
    ASS_MUL         reduce using rule 481 (expr_87 -> empty .)
    ASS_DIV         reduce using rule 481 (expr_87 -> empty .)
    ASS_AND         reduce using rule 481 (expr_87 -> empty .)
    ASS_OR          reduce using rule 481 (expr_87 -> empty .)
    ASS_XOR         reduce using rule 481 (expr_87 -> empty .)
    ASS_MOD         reduce using rule 481 (expr_87 -> empty .)
    COLON           reduce using rule 481 (expr_87 -> empty .)
    FRPAREN         reduce using rule 481 (expr_87 -> empty .)
    SEMI            reduce using rule 481 (expr_87 -> empty .)



state 217

    (477) expr_86 -> SLASH .

    PLUS            reduce using rule 477 (expr_86 -> SLASH .)
    DASH            reduce using rule 477 (expr_86 -> SLASH .)
    OP_INC          reduce using rule 477 (expr_86 -> SLASH .)
    OP_DEC          reduce using rule 477 (expr_86 -> SLASH .)
    TILDE           reduce using rule 477 (expr_86 -> SLASH .)
    EXCLAMATION     reduce using rule 477 (expr_86 -> SLASH .)
    LPAREN          reduce using rule 477 (expr_86 -> SLASH .)
    THIS            reduce using rule 477 (expr_86 -> SLASH .)
    SUPER           reduce using rule 477 (expr_86 -> SLASH .)
    NEW             reduce using rule 477 (expr_86 -> SLASH .)
    Identifier      reduce using rule 477 (expr_86 -> SLASH .)
    VOID            reduce using rule 477 (expr_86 -> SLASH .)
    CharacterLiteral reduce using rule 477 (expr_86 -> SLASH .)
    StringLiteral   reduce using rule 477 (expr_86 -> SLASH .)
    NULL            reduce using rule 477 (expr_86 -> SLASH .)
    BOOLEAN         reduce using rule 477 (expr_86 -> SLASH .)
    CHAR            reduce using rule 477 (expr_86 -> SLASH .)
    BYTE            reduce using rule 477 (expr_86 -> SLASH .)
    SHORT           reduce using rule 477 (expr_86 -> SLASH .)
    INT             reduce using rule 477 (expr_86 -> SLASH .)
    LONG            reduce using rule 477 (expr_86 -> SLASH .)
    FLOAT           reduce using rule 477 (expr_86 -> SLASH .)
    DOUBLE          reduce using rule 477 (expr_86 -> SLASH .)
    NUMBER          reduce using rule 477 (expr_86 -> SLASH .)
    HEX_NUMBER      reduce using rule 477 (expr_86 -> SLASH .)
    LONG_NUMBER     reduce using rule 477 (expr_86 -> SLASH .)
    LONG_HEX_NUMBER reduce using rule 477 (expr_86 -> SLASH .)
    NON_INTEGER_1   reduce using rule 477 (expr_86 -> SLASH .)
    NON_INTEGER_2   reduce using rule 477 (expr_86 -> SLASH .)
    NON_INTEGER_3   reduce using rule 477 (expr_86 -> SLASH .)
    TRUE            reduce using rule 477 (expr_86 -> SLASH .)
    FALSE           reduce using rule 477 (expr_86 -> SLASH .)



state 218

    (476) expr_86 -> MULT .

    PLUS            reduce using rule 476 (expr_86 -> MULT .)
    DASH            reduce using rule 476 (expr_86 -> MULT .)
    OP_INC          reduce using rule 476 (expr_86 -> MULT .)
    OP_DEC          reduce using rule 476 (expr_86 -> MULT .)
    TILDE           reduce using rule 476 (expr_86 -> MULT .)
    EXCLAMATION     reduce using rule 476 (expr_86 -> MULT .)
    LPAREN          reduce using rule 476 (expr_86 -> MULT .)
    THIS            reduce using rule 476 (expr_86 -> MULT .)
    SUPER           reduce using rule 476 (expr_86 -> MULT .)
    NEW             reduce using rule 476 (expr_86 -> MULT .)
    Identifier      reduce using rule 476 (expr_86 -> MULT .)
    VOID            reduce using rule 476 (expr_86 -> MULT .)
    CharacterLiteral reduce using rule 476 (expr_86 -> MULT .)
    StringLiteral   reduce using rule 476 (expr_86 -> MULT .)
    NULL            reduce using rule 476 (expr_86 -> MULT .)
    BOOLEAN         reduce using rule 476 (expr_86 -> MULT .)
    CHAR            reduce using rule 476 (expr_86 -> MULT .)
    BYTE            reduce using rule 476 (expr_86 -> MULT .)
    SHORT           reduce using rule 476 (expr_86 -> MULT .)
    INT             reduce using rule 476 (expr_86 -> MULT .)
    LONG            reduce using rule 476 (expr_86 -> MULT .)
    FLOAT           reduce using rule 476 (expr_86 -> MULT .)
    DOUBLE          reduce using rule 476 (expr_86 -> MULT .)
    NUMBER          reduce using rule 476 (expr_86 -> MULT .)
    HEX_NUMBER      reduce using rule 476 (expr_86 -> MULT .)
    LONG_NUMBER     reduce using rule 476 (expr_86 -> MULT .)
    LONG_HEX_NUMBER reduce using rule 476 (expr_86 -> MULT .)
    NON_INTEGER_1   reduce using rule 476 (expr_86 -> MULT .)
    NON_INTEGER_2   reduce using rule 476 (expr_86 -> MULT .)
    NON_INTEGER_3   reduce using rule 476 (expr_86 -> MULT .)
    TRUE            reduce using rule 476 (expr_86 -> MULT .)
    FALSE           reduce using rule 476 (expr_86 -> MULT .)



state 219

    (90) type -> classOrInterfaceType . expr_28
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    RPAREN          reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 312
    empty                          shift and go to state 202

state 220

    (487) expr_90 -> type .

    RPAREN          reduce using rule 487 (expr_90 -> type .)



state 221

    (192) expression -> conditionalExpression . expr_72
    (439) expr_72 -> . assignmentOperator expression
    (440) expr_72 -> . empty
    (193) assignmentOperator -> . EQUALS
    (194) assignmentOperator -> . ASS_ADD
    (195) assignmentOperator -> . ASS_SUB
    (196) assignmentOperator -> . ASS_MUL
    (197) assignmentOperator -> . ASS_DIV
    (198) assignmentOperator -> . ASS_AND
    (199) assignmentOperator -> . ASS_OR
    (200) assignmentOperator -> . ASS_XOR
    (201) assignmentOperator -> . ASS_MOD
    (202) assignmentOperator -> . LESS LESS EQUALS
    (203) assignmentOperator -> . MORE MORE MORE EQUALS
    (204) assignmentOperator -> . MORE MORE EQUALS
    (502) empty -> .

  ! shift/reduce conflict for EQUALS resolved as shift.
  ! shift/reduce conflict for ASS_ADD resolved as shift.
  ! shift/reduce conflict for ASS_SUB resolved as shift.
  ! shift/reduce conflict for ASS_MUL resolved as shift.
  ! shift/reduce conflict for ASS_DIV resolved as shift.
  ! shift/reduce conflict for ASS_AND resolved as shift.
  ! shift/reduce conflict for ASS_OR resolved as shift.
  ! shift/reduce conflict for ASS_XOR resolved as shift.
  ! shift/reduce conflict for ASS_MOD resolved as shift.
  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    EQUALS          shift and go to state 320
    ASS_ADD         shift and go to state 315
    ASS_SUB         shift and go to state 323
    ASS_MUL         shift and go to state 321
    ASS_DIV         shift and go to state 313
    ASS_AND         shift and go to state 322
    ASS_OR          shift and go to state 314
    ASS_XOR         shift and go to state 316
    ASS_MOD         shift and go to state 326
    LESS            shift and go to state 317
    MORE            shift and go to state 324
    RPAREN          reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! EQUALS          [ reduce using rule 502 (empty -> .) ]
  ! ASS_ADD         [ reduce using rule 502 (empty -> .) ]
  ! ASS_SUB         [ reduce using rule 502 (empty -> .) ]
  ! ASS_MUL         [ reduce using rule 502 (empty -> .) ]
  ! ASS_DIV         [ reduce using rule 502 (empty -> .) ]
  ! ASS_AND         [ reduce using rule 502 (empty -> .) ]
  ! ASS_OR          [ reduce using rule 502 (empty -> .) ]
  ! ASS_XOR         [ reduce using rule 502 (empty -> .) ]
  ! ASS_MOD         [ reduce using rule 502 (empty -> .) ]
  ! LESS            [ reduce using rule 502 (empty -> .) ]
  ! MORE            [ reduce using rule 502 (empty -> .) ]

    expr_72                        shift and go to state 318
    assignmentOperator             shift and go to state 319
    empty                          shift and go to state 325

state 222

    (92) classOrInterfaceType -> Identifier . expr_typeArguments expr_38
    (240) primary -> Identifier . expr_49 expr_91
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 37
    LESS            shift and go to state 290
    FLPAREN         reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    typeArguments                  shift and go to state 291
    expr_49                        shift and go to state 197
    expr_typeArguments             shift and go to state 292
    empty                          shift and go to state 327

state 223

    (234) castExpression -> LPAREN expr_90 . RPAREN unaryExpressionNotPlusMinus

    RPAREN          shift and go to state 328



state 224

    (233) castExpression -> LPAREN primitiveType . RPAREN unaryExpression
    (91) type -> primitiveType . expr_28
    (241) primary -> primitiveType . expr_28 DOT CLASS
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
  ! shift/reduce conflict for RPAREN resolved as shift.
    RPAREN          shift and go to state 330
    FLPAREN         shift and go to state 200
    DOT             reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]
  ! RPAREN          [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 329
    empty                          shift and go to state 202

state 225

    (188) parExpression -> LPAREN expression . RPAREN
    (488) expr_90 -> expression .

  ! shift/reduce conflict for RPAREN resolved as shift.
    RPAREN          shift and go to state 331

  ! RPAREN          [ reduce using rule 488 (expr_90 -> expression .) ]


state 226

    (237) primary -> SUPER superSuffix .

    DOT             reduce using rule 237 (primary -> SUPER superSuffix .)
    FLPAREN         reduce using rule 237 (primary -> SUPER superSuffix .)
    OP_INC          reduce using rule 237 (primary -> SUPER superSuffix .)
    OP_DEC          reduce using rule 237 (primary -> SUPER superSuffix .)



state 227

    (265) superSuffix -> arguments .

    OP_INC          reduce using rule 265 (superSuffix -> arguments .)
    OP_DEC          reduce using rule 265 (superSuffix -> arguments .)
    DOT             reduce using rule 265 (superSuffix -> arguments .)
    FLPAREN         reduce using rule 265 (superSuffix -> arguments .)



state 228

    (267) arguments -> LPAREN . expr_95 RPAREN
    (497) expr_95 -> . expressionList
    (498) expr_95 -> . empty
    (189) expressionList -> . expression expr_71
    (502) empty -> .
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 502 (empty -> .)
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    expressionList                 shift and go to state 332
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    empty                          shift and go to state 333
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    expr_95                        shift and go to state 334
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 335

state 229

    (266) superSuffix -> DOT . Identifier expr_20

    Identifier      shift and go to state 336



state 230

    (294) expr_11 -> IMPLEMENTS . typeList
    (32) typeList -> . type expr_24
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    typeList                       shift and go to state 337
    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 288

state 231

    (24) enumDeclaration -> ENUM Identifier expr_11 . enumBody
    (25) enumBody -> . BLPAREN expr_15 expr_16 expr_17 BRPAREN

    BLPAREN         shift and go to state 339


    enumBody                       shift and go to state 338

state 232

    (295) expr_11 -> empty .

    BLPAREN         reduce using rule 295 (expr_11 -> empty .)



state 233

    (21) typeParameters -> LESS . typeParameter expr_12 MORE
    (22) typeParameter -> . Identifier expr_13

    Identifier      shift and go to state 341


    typeParameter                  shift and go to state 340

state 234

    (31) normalInterfaceDeclaration -> INTERFACE Identifier expr_9 . expr_23 interfaceBody
    (322) expr_23 -> . EXTENDS typeList
    (323) expr_23 -> . empty
    (502) empty -> .

    EXTENDS         shift and go to state 342
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_23                        shift and go to state 343
    empty                          shift and go to state 344

state 235

    (290) expr_9 -> typeParameters .

    EXTENDS         reduce using rule 290 (expr_9 -> typeParameters .)
    BLPAREN         reduce using rule 290 (expr_9 -> typeParameters .)
    IMPLEMENTS      reduce using rule 290 (expr_9 -> typeParameters .)



state 236

    (291) expr_9 -> empty .

    EXTENDS         reduce using rule 291 (expr_9 -> empty .)
    BLPAREN         reduce using rule 291 (expr_9 -> empty .)
    IMPLEMENTS      reduce using rule 291 (expr_9 -> empty .)



state 237

    (20) normalClassDeclaration -> CLASS Identifier expr_9 . expr_10 expr_11 classBody
    (292) expr_10 -> . EXTENDS type
    (293) expr_10 -> . empty
    (502) empty -> .

    EXTENDS         shift and go to state 345
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_10                        shift and go to state 346
    empty                          shift and go to state 347

state 238

    (137) annotationTypeDeclaration -> AT INTERFACE Identifier . annotationTypeBody
    (138) annotationTypeBody -> . BLPAREN expr_56 BRPAREN

    BLPAREN         shift and go to state 349


    annotationTypeBody             shift and go to state 348

state 239

    (4) importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .

    IMPORT          reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    SEMI            reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    PUBLIC          reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    PROTECTED       reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    PRIVATE         reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    ABSTRACT        reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    STATIC          reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    FINAL           reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    STRICTFP        reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    AT              reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    CLASS           reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    ENUM            reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    INTERFACE       reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)
    $end            reduce using rule 4 (importDeclaration -> IMPORT expr_4 qualifiedName expr_5 SEMI .)



state 240

    (280) expr_5 -> DOT MULT .

    SEMI            reduce using rule 280 (expr_5 -> DOT MULT .)



state 241

    (444) expr_74 -> expr_74 OP_LOR . conditionalAndExpression
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 350
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 242

    (443) expr_74 -> OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 443 (expr_74 -> OP_LOR conditionalAndExpression .)



state 243

    (242) primary -> VOID DOT CLASS .

    DOT             reduce using rule 242 (primary -> VOID DOT CLASS .)
    FLPAREN         reduce using rule 242 (primary -> VOID DOT CLASS .)
    OP_INC          reduce using rule 242 (primary -> VOID DOT CLASS .)
    OP_DEC          reduce using rule 242 (primary -> VOID DOT CLASS .)



state 244

    (91) type -> primitiveType . expr_28
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 351
    empty                          shift and go to state 202

state 245

    (463) expr_81 -> INSTANCEOF type .

    OP_EQ           reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    OP_NE           reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    AND             reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    CARET           reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    VERTICAL        reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    OP_LAND         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    OP_LOR          reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    QUES            reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    RPAREN          reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    COMMA           reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    BRPAREN         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    EQUALS          reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_ADD         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_SUB         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_MUL         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_DIV         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_AND         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_OR          reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_XOR         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    ASS_MOD         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    LESS            reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    MORE            reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    COLON           reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    FRPAREN         reduce using rule 463 (expr_81 -> INSTANCEOF type .)
    SEMI            reduce using rule 463 (expr_81 -> INSTANCEOF type .)



state 246

    (461) expr_80 -> expr_80 expr_79 . instanceOfExpression
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 352
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 247

    (460) expr_80 -> expr_79 instanceOfExpression .

    OP_EQ           reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    OP_NE           reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    AND             reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    CARET           reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    VERTICAL        reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    OP_LAND         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    OP_LOR          reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    QUES            reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    RPAREN          reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    COMMA           reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    BRPAREN         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    EQUALS          reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_ADD         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_SUB         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_MUL         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_DIV         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_AND         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_OR          reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_XOR         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    ASS_MOD         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    LESS            reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    MORE            reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    COLON           reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    FRPAREN         reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)
    SEMI            reduce using rule 460 (expr_80 -> expr_79 instanceOfExpression .)



state 248

    (489) expr_91 -> identifierSuffix .

    DOT             reduce using rule 489 (expr_91 -> identifierSuffix .)
    FLPAREN         reduce using rule 489 (expr_91 -> identifierSuffix .)
    OP_INC          reduce using rule 489 (expr_91 -> identifierSuffix .)
    OP_DEC          reduce using rule 489 (expr_91 -> identifierSuffix .)



state 249

    (236) primary -> THIS expr_49 expr_91 .

    DOT             reduce using rule 236 (primary -> THIS expr_49 expr_91 .)
    FLPAREN         reduce using rule 236 (primary -> THIS expr_49 expr_91 .)
    OP_INC          reduce using rule 236 (primary -> THIS expr_49 expr_91 .)
    OP_DEC          reduce using rule 236 (primary -> THIS expr_49 expr_91 .)



state 250

    (244) identifierSuffix -> expr_92 .
    (492) expr_92 -> expr_92 . FLPAREN expression FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             reduce using rule 244 (identifierSuffix -> expr_92 .)
    OP_INC          reduce using rule 244 (identifierSuffix -> expr_92 .)
    OP_DEC          reduce using rule 244 (identifierSuffix -> expr_92 .)
    FLPAREN         shift and go to state 353

  ! FLPAREN         [ reduce using rule 244 (identifierSuffix -> expr_92 .) ]


state 251

    (334) expr_28 -> FLPAREN . FRPAREN
    (491) expr_92 -> FLPAREN . expression FRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 301
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 354

state 252

    (243) identifierSuffix -> expr_28 . DOT CLASS
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    DOT             shift and go to state 355
    FLPAREN         shift and go to state 302



state 253

    (490) expr_91 -> empty .
    (336) expr_28 -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 336 (expr_28 -> empty .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 336 (expr_28 -> empty .).
    OP_INC          reduce using rule 490 (expr_91 -> empty .)
    OP_DEC          reduce using rule 490 (expr_91 -> empty .)
    DOT             reduce using rule 336 (expr_28 -> empty .)
    FLPAREN         reduce using rule 336 (expr_28 -> empty .)

  ! DOT             [ reduce using rule 490 (expr_91 -> empty .) ]
  ! FLPAREN         [ reduce using rule 490 (expr_91 -> empty .) ]


state 254

    (385) expr_49 -> expr_49 DOT . Identifier
    (246) identifierSuffix -> DOT . CLASS
    (247) identifierSuffix -> DOT . explicitGenericInvocation
    (248) identifierSuffix -> DOT . THIS
    (249) identifierSuffix -> DOT . SUPER arguments
    (250) identifierSuffix -> DOT . NEW innerCreator
    (258) explicitGenericInvocation -> . nonWildcardTypeArguments Identifier arguments
    (259) nonWildcardTypeArguments -> . LESS typeList MORE

    Identifier      shift and go to state 135
    CLASS           shift and go to state 361
    THIS            shift and go to state 356
    SUPER           shift and go to state 360
    NEW             shift and go to state 359
    LESS            shift and go to state 190


    explicitGenericInvocation      shift and go to state 357
    nonWildcardTypeArguments       shift and go to state 358

state 255

    (245) identifierSuffix -> arguments .

    DOT             reduce using rule 245 (identifierSuffix -> arguments .)
    FLPAREN         reduce using rule 245 (identifierSuffix -> arguments .)
    OP_INC          reduce using rule 245 (identifierSuffix -> arguments .)
    OP_DEC          reduce using rule 245 (identifierSuffix -> arguments .)



state 256

    (446) expr_75 -> OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 446 (expr_75 -> OP_LAND inclusiveOrExpression .)



state 257

    (447) expr_75 -> expr_75 OP_LAND . inclusiveOrExpression
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    inclusiveOrExpression          shift and go to state 362
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 258

    (394) expr_53 -> expr_53 COMMA . elementValuePair
    (132) elementValuePair -> . Identifier EQUALS elementValue

    Identifier      shift and go to state 259


    elementValuePair               shift and go to state 363

state 259

    (132) elementValuePair -> Identifier . EQUALS elementValue

    EQUALS          shift and go to state 198



state 260

    (393) expr_53 -> COMMA elementValuePair .

    COMMA           reduce using rule 393 (expr_53 -> COMMA elementValuePair .)
    RPAREN          reduce using rule 393 (expr_53 -> COMMA elementValuePair .)



state 261

    (469) expr_83 -> expr_83 shiftOp . additiveExpression
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 364
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 262

    (219) shiftOp -> LESS LESS .

    PLUS            reduce using rule 219 (shiftOp -> LESS LESS .)
    DASH            reduce using rule 219 (shiftOp -> LESS LESS .)
    OP_INC          reduce using rule 219 (shiftOp -> LESS LESS .)
    OP_DEC          reduce using rule 219 (shiftOp -> LESS LESS .)
    TILDE           reduce using rule 219 (shiftOp -> LESS LESS .)
    EXCLAMATION     reduce using rule 219 (shiftOp -> LESS LESS .)
    LPAREN          reduce using rule 219 (shiftOp -> LESS LESS .)
    THIS            reduce using rule 219 (shiftOp -> LESS LESS .)
    SUPER           reduce using rule 219 (shiftOp -> LESS LESS .)
    NEW             reduce using rule 219 (shiftOp -> LESS LESS .)
    Identifier      reduce using rule 219 (shiftOp -> LESS LESS .)
    VOID            reduce using rule 219 (shiftOp -> LESS LESS .)
    CharacterLiteral reduce using rule 219 (shiftOp -> LESS LESS .)
    StringLiteral   reduce using rule 219 (shiftOp -> LESS LESS .)
    NULL            reduce using rule 219 (shiftOp -> LESS LESS .)
    BOOLEAN         reduce using rule 219 (shiftOp -> LESS LESS .)
    CHAR            reduce using rule 219 (shiftOp -> LESS LESS .)
    BYTE            reduce using rule 219 (shiftOp -> LESS LESS .)
    SHORT           reduce using rule 219 (shiftOp -> LESS LESS .)
    INT             reduce using rule 219 (shiftOp -> LESS LESS .)
    LONG            reduce using rule 219 (shiftOp -> LESS LESS .)
    FLOAT           reduce using rule 219 (shiftOp -> LESS LESS .)
    DOUBLE          reduce using rule 219 (shiftOp -> LESS LESS .)
    NUMBER          reduce using rule 219 (shiftOp -> LESS LESS .)
    HEX_NUMBER      reduce using rule 219 (shiftOp -> LESS LESS .)
    LONG_NUMBER     reduce using rule 219 (shiftOp -> LESS LESS .)
    LONG_HEX_NUMBER reduce using rule 219 (shiftOp -> LESS LESS .)
    NON_INTEGER_1   reduce using rule 219 (shiftOp -> LESS LESS .)
    NON_INTEGER_2   reduce using rule 219 (shiftOp -> LESS LESS .)
    NON_INTEGER_3   reduce using rule 219 (shiftOp -> LESS LESS .)
    TRUE            reduce using rule 219 (shiftOp -> LESS LESS .)
    FALSE           reduce using rule 219 (shiftOp -> LESS LESS .)



state 263

    (468) expr_83 -> shiftOp additiveExpression .

    LESS            reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    MORE            reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    OP_EQ           reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    OP_NE           reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    AND             reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    CARET           reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    VERTICAL        reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    OP_LAND         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    OP_LOR          reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    QUES            reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    RPAREN          reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    COMMA           reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    BRPAREN         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    EQUALS          reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_AND         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_OR          reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    COLON           reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    FRPAREN         reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)
    SEMI            reduce using rule 468 (expr_83 -> shiftOp additiveExpression .)



state 264

    (220) shiftOp -> MORE MORE . MORE
    (221) shiftOp -> MORE MORE .

    MORE            shift and go to state 365
    PLUS            reduce using rule 221 (shiftOp -> MORE MORE .)
    DASH            reduce using rule 221 (shiftOp -> MORE MORE .)
    OP_INC          reduce using rule 221 (shiftOp -> MORE MORE .)
    OP_DEC          reduce using rule 221 (shiftOp -> MORE MORE .)
    TILDE           reduce using rule 221 (shiftOp -> MORE MORE .)
    EXCLAMATION     reduce using rule 221 (shiftOp -> MORE MORE .)
    LPAREN          reduce using rule 221 (shiftOp -> MORE MORE .)
    THIS            reduce using rule 221 (shiftOp -> MORE MORE .)
    SUPER           reduce using rule 221 (shiftOp -> MORE MORE .)
    NEW             reduce using rule 221 (shiftOp -> MORE MORE .)
    Identifier      reduce using rule 221 (shiftOp -> MORE MORE .)
    VOID            reduce using rule 221 (shiftOp -> MORE MORE .)
    CharacterLiteral reduce using rule 221 (shiftOp -> MORE MORE .)
    StringLiteral   reduce using rule 221 (shiftOp -> MORE MORE .)
    NULL            reduce using rule 221 (shiftOp -> MORE MORE .)
    BOOLEAN         reduce using rule 221 (shiftOp -> MORE MORE .)
    CHAR            reduce using rule 221 (shiftOp -> MORE MORE .)
    BYTE            reduce using rule 221 (shiftOp -> MORE MORE .)
    SHORT           reduce using rule 221 (shiftOp -> MORE MORE .)
    INT             reduce using rule 221 (shiftOp -> MORE MORE .)
    LONG            reduce using rule 221 (shiftOp -> MORE MORE .)
    FLOAT           reduce using rule 221 (shiftOp -> MORE MORE .)
    DOUBLE          reduce using rule 221 (shiftOp -> MORE MORE .)
    NUMBER          reduce using rule 221 (shiftOp -> MORE MORE .)
    HEX_NUMBER      reduce using rule 221 (shiftOp -> MORE MORE .)
    LONG_NUMBER     reduce using rule 221 (shiftOp -> MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 221 (shiftOp -> MORE MORE .)
    NON_INTEGER_1   reduce using rule 221 (shiftOp -> MORE MORE .)
    NON_INTEGER_2   reduce using rule 221 (shiftOp -> MORE MORE .)
    NON_INTEGER_3   reduce using rule 221 (shiftOp -> MORE MORE .)
    TRUE            reduce using rule 221 (shiftOp -> MORE MORE .)
    FALSE           reduce using rule 221 (shiftOp -> MORE MORE .)



state 265

    (452) expr_77 -> CARET andExpression .

    CARET           reduce using rule 452 (expr_77 -> CARET andExpression .)
    VERTICAL        reduce using rule 452 (expr_77 -> CARET andExpression .)
    OP_LAND         reduce using rule 452 (expr_77 -> CARET andExpression .)
    OP_LOR          reduce using rule 452 (expr_77 -> CARET andExpression .)
    QUES            reduce using rule 452 (expr_77 -> CARET andExpression .)
    RPAREN          reduce using rule 452 (expr_77 -> CARET andExpression .)
    COMMA           reduce using rule 452 (expr_77 -> CARET andExpression .)
    BRPAREN         reduce using rule 452 (expr_77 -> CARET andExpression .)
    EQUALS          reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_ADD         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_SUB         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_MUL         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_DIV         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_AND         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_OR          reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_XOR         reduce using rule 452 (expr_77 -> CARET andExpression .)
    ASS_MOD         reduce using rule 452 (expr_77 -> CARET andExpression .)
    LESS            reduce using rule 452 (expr_77 -> CARET andExpression .)
    MORE            reduce using rule 452 (expr_77 -> CARET andExpression .)
    COLON           reduce using rule 452 (expr_77 -> CARET andExpression .)
    FRPAREN         reduce using rule 452 (expr_77 -> CARET andExpression .)
    SEMI            reduce using rule 452 (expr_77 -> CARET andExpression .)



state 266

    (453) expr_77 -> expr_77 CARET . andExpression
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 366

state 267

    (136) elementValueArrayInitializer -> BLPAREN expr_55 expr_35 . BRPAREN

    BRPAREN         shift and go to state 367



state 268

    (352) expr_35 -> COMMA .

    BRPAREN         reduce using rule 352 (expr_35 -> COMMA .)



state 269

    (353) expr_35 -> empty .

    BRPAREN         reduce using rule 353 (expr_35 -> empty .)



state 270

    (396) expr_54 -> COMMA . elementValue
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 106
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 368

state 271

    (399) expr_55 -> elementValue expr_54 .
    (397) expr_54 -> expr_54 . COMMA elementValue

  ! shift/reduce conflict for COMMA resolved as shift.
    BRPAREN         reduce using rule 399 (expr_55 -> elementValue expr_54 .)
    COMMA           shift and go to state 369

  ! COMMA           [ reduce using rule 399 (expr_55 -> elementValue expr_54 .) ]


state 272

    (398) expr_54 -> empty .

    COMMA           reduce using rule 398 (expr_54 -> empty .)
    BRPAREN         reduce using rule 398 (expr_54 -> empty .)



state 273

    (455) expr_78 -> AND equalityExpression .

    AND             reduce using rule 455 (expr_78 -> AND equalityExpression .)
    CARET           reduce using rule 455 (expr_78 -> AND equalityExpression .)
    VERTICAL        reduce using rule 455 (expr_78 -> AND equalityExpression .)
    OP_LAND         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    OP_LOR          reduce using rule 455 (expr_78 -> AND equalityExpression .)
    QUES            reduce using rule 455 (expr_78 -> AND equalityExpression .)
    RPAREN          reduce using rule 455 (expr_78 -> AND equalityExpression .)
    COMMA           reduce using rule 455 (expr_78 -> AND equalityExpression .)
    BRPAREN         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    EQUALS          reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_ADD         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_SUB         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_MUL         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_DIV         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_AND         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_OR          reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_XOR         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    ASS_MOD         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    LESS            reduce using rule 455 (expr_78 -> AND equalityExpression .)
    MORE            reduce using rule 455 (expr_78 -> AND equalityExpression .)
    COLON           reduce using rule 455 (expr_78 -> AND equalityExpression .)
    FRPAREN         reduce using rule 455 (expr_78 -> AND equalityExpression .)
    SEMI            reduce using rule 455 (expr_78 -> AND equalityExpression .)



state 274

    (456) expr_78 -> expr_78 AND . equalityExpression
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 370
    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 275

    (441) expr_73 -> QUES expression . COLON expression

    COLON           shift and go to state 371



state 276

    (450) expr_76 -> expr_76 VERTICAL . exclusiveOrExpression
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 372
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92

state 277

    (449) expr_76 -> VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 449 (expr_76 -> VERTICAL exclusiveOrExpression .)



state 278

    (264) selector -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 373



state 279

    (261) selector -> DOT THIS .

    OP_INC          reduce using rule 261 (selector -> DOT THIS .)
    OP_DEC          reduce using rule 261 (selector -> DOT THIS .)
    DOT             reduce using rule 261 (selector -> DOT THIS .)
    FLPAREN         reduce using rule 261 (selector -> DOT THIS .)



state 280

    (263) selector -> DOT NEW . innerCreator
    (255) innerCreator -> . expr_47 Identifier classCreatorRest
    (380) expr_47 -> . nonWildcardTypeArguments
    (381) expr_47 -> . empty
    (259) nonWildcardTypeArguments -> . LESS typeList MORE
    (502) empty -> .

    LESS            shift and go to state 190
    Identifier      reduce using rule 502 (empty -> .)


    expr_47                        shift and go to state 374
    nonWildcardTypeArguments       shift and go to state 375
    innerCreator                   shift and go to state 377
    empty                          shift and go to state 376

state 281

    (260) selector -> DOT Identifier . expr_20
    (315) expr_20 -> . arguments
    (316) expr_20 -> . empty
    (267) arguments -> . LPAREN expr_95 RPAREN
    (502) empty -> .

    LPAREN          shift and go to state 228
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)


    expr_20                        shift and go to state 379
    arguments                      shift and go to state 378
    empty                          shift and go to state 380

state 282

    (262) selector -> DOT SUPER . superSuffix
    (265) superSuffix -> . arguments
    (266) superSuffix -> . DOT Identifier expr_20
    (267) arguments -> . LPAREN expr_95 RPAREN

    DOT             shift and go to state 229
    LPAREN          shift and go to state 228


    superSuffix                    shift and go to state 381
    arguments                      shift and go to state 227

state 283

    (232) unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .

    MULT            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    SLASH           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    PERCENT         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    PLUS            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    DASH            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    LESS            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    MORE            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    INSTANCEOF      reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    OP_EQ           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    OP_NE           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    AND             reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    CARET           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    VERTICAL        reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    OP_LAND         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    OP_LOR          reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    QUES            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    COMMA           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    BRPAREN         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    EQUALS          reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_ADD         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_SUB         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_MUL         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_DIV         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_AND         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_OR          reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_XOR         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    ASS_MOD         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    RPAREN          reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    SEMI            reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    COLON           reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)
    FRPAREN         reduce using rule 232 (unaryExpressionNotPlusMinus -> primary expr_88 expr_89 .)



state 284

    (483) expr_88 -> expr_88 selector .

    OP_INC          reduce using rule 483 (expr_88 -> expr_88 selector .)
    OP_DEC          reduce using rule 483 (expr_88 -> expr_88 selector .)
    DOT             reduce using rule 483 (expr_88 -> expr_88 selector .)
    FLPAREN         reduce using rule 483 (expr_88 -> expr_88 selector .)



state 285

    (485) expr_89 -> OP_INC .

    MULT            reduce using rule 485 (expr_89 -> OP_INC .)
    SLASH           reduce using rule 485 (expr_89 -> OP_INC .)
    PERCENT         reduce using rule 485 (expr_89 -> OP_INC .)
    PLUS            reduce using rule 485 (expr_89 -> OP_INC .)
    DASH            reduce using rule 485 (expr_89 -> OP_INC .)
    LESS            reduce using rule 485 (expr_89 -> OP_INC .)
    MORE            reduce using rule 485 (expr_89 -> OP_INC .)
    INSTANCEOF      reduce using rule 485 (expr_89 -> OP_INC .)
    OP_EQ           reduce using rule 485 (expr_89 -> OP_INC .)
    OP_NE           reduce using rule 485 (expr_89 -> OP_INC .)
    AND             reduce using rule 485 (expr_89 -> OP_INC .)
    CARET           reduce using rule 485 (expr_89 -> OP_INC .)
    VERTICAL        reduce using rule 485 (expr_89 -> OP_INC .)
    OP_LAND         reduce using rule 485 (expr_89 -> OP_INC .)
    OP_LOR          reduce using rule 485 (expr_89 -> OP_INC .)
    QUES            reduce using rule 485 (expr_89 -> OP_INC .)
    RPAREN          reduce using rule 485 (expr_89 -> OP_INC .)
    COMMA           reduce using rule 485 (expr_89 -> OP_INC .)
    BRPAREN         reduce using rule 485 (expr_89 -> OP_INC .)
    EQUALS          reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_ADD         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_SUB         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_MUL         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_DIV         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_AND         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_OR          reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_XOR         reduce using rule 485 (expr_89 -> OP_INC .)
    ASS_MOD         reduce using rule 485 (expr_89 -> OP_INC .)
    COLON           reduce using rule 485 (expr_89 -> OP_INC .)
    FRPAREN         reduce using rule 485 (expr_89 -> OP_INC .)
    SEMI            reduce using rule 485 (expr_89 -> OP_INC .)



state 286

    (486) expr_89 -> OP_DEC .

    MULT            reduce using rule 486 (expr_89 -> OP_DEC .)
    SLASH           reduce using rule 486 (expr_89 -> OP_DEC .)
    PERCENT         reduce using rule 486 (expr_89 -> OP_DEC .)
    PLUS            reduce using rule 486 (expr_89 -> OP_DEC .)
    DASH            reduce using rule 486 (expr_89 -> OP_DEC .)
    LESS            reduce using rule 486 (expr_89 -> OP_DEC .)
    MORE            reduce using rule 486 (expr_89 -> OP_DEC .)
    INSTANCEOF      reduce using rule 486 (expr_89 -> OP_DEC .)
    OP_EQ           reduce using rule 486 (expr_89 -> OP_DEC .)
    OP_NE           reduce using rule 486 (expr_89 -> OP_DEC .)
    AND             reduce using rule 486 (expr_89 -> OP_DEC .)
    CARET           reduce using rule 486 (expr_89 -> OP_DEC .)
    VERTICAL        reduce using rule 486 (expr_89 -> OP_DEC .)
    OP_LAND         reduce using rule 486 (expr_89 -> OP_DEC .)
    OP_LOR          reduce using rule 486 (expr_89 -> OP_DEC .)
    QUES            reduce using rule 486 (expr_89 -> OP_DEC .)
    RPAREN          reduce using rule 486 (expr_89 -> OP_DEC .)
    COMMA           reduce using rule 486 (expr_89 -> OP_DEC .)
    BRPAREN         reduce using rule 486 (expr_89 -> OP_DEC .)
    EQUALS          reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_ADD         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_SUB         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_MUL         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_DIV         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_AND         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_OR          reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_XOR         reduce using rule 486 (expr_89 -> OP_DEC .)
    ASS_MOD         reduce using rule 486 (expr_89 -> OP_DEC .)
    COLON           reduce using rule 486 (expr_89 -> OP_DEC .)
    FRPAREN         reduce using rule 486 (expr_89 -> OP_DEC .)
    SEMI            reduce using rule 486 (expr_89 -> OP_DEC .)



state 287

    (259) nonWildcardTypeArguments -> LESS typeList . MORE

    MORE            shift and go to state 382



state 288

    (32) typeList -> type . expr_24
    (324) expr_24 -> . COMMA type
    (325) expr_24 -> . expr_24 COMMA type
    (326) expr_24 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 383
    MORE            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_24                        shift and go to state 384
    empty                          shift and go to state 385

state 289

    (251) creator -> nonWildcardTypeArguments createdName . classCreatorRest
    (257) classCreatorRest -> . arguments expr_21
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    classCreatorRest               shift and go to state 386
    arguments                      shift and go to state 297

state 290

    (103) typeArguments -> LESS . typeArgument expr_39 MORE
    (104) typeArgument -> . type
    (105) typeArgument -> . QUES expr_41
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    QUES            shift and go to state 388
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    typeArgument                   shift and go to state 387
    type                           shift and go to state 389

state 291

    (356) expr_typeArguments -> typeArguments .

    DOT             reduce using rule 356 (expr_typeArguments -> typeArguments .)
    FLPAREN         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    LPAREN          reduce using rule 356 (expr_typeArguments -> typeArguments .)
    OP_EQ           reduce using rule 356 (expr_typeArguments -> typeArguments .)
    OP_NE           reduce using rule 356 (expr_typeArguments -> typeArguments .)
    AND             reduce using rule 356 (expr_typeArguments -> typeArguments .)
    CARET           reduce using rule 356 (expr_typeArguments -> typeArguments .)
    VERTICAL        reduce using rule 356 (expr_typeArguments -> typeArguments .)
    OP_LAND         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    OP_LOR          reduce using rule 356 (expr_typeArguments -> typeArguments .)
    QUES            reduce using rule 356 (expr_typeArguments -> typeArguments .)
    RPAREN          reduce using rule 356 (expr_typeArguments -> typeArguments .)
    COMMA           reduce using rule 356 (expr_typeArguments -> typeArguments .)
    BRPAREN         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    EQUALS          reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_ADD         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_SUB         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_MUL         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_DIV         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_AND         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_OR          reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_XOR         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    ASS_MOD         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    LESS            reduce using rule 356 (expr_typeArguments -> typeArguments .)
    MORE            reduce using rule 356 (expr_typeArguments -> typeArguments .)
    COLON           reduce using rule 356 (expr_typeArguments -> typeArguments .)
    FRPAREN         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    SEMI            reduce using rule 356 (expr_typeArguments -> typeArguments .)
    BLPAREN         reduce using rule 356 (expr_typeArguments -> typeArguments .)
    IMPLEMENTS      reduce using rule 356 (expr_typeArguments -> typeArguments .)
    Identifier      reduce using rule 356 (expr_typeArguments -> typeArguments .)
    OP_ARRAY        reduce using rule 356 (expr_typeArguments -> typeArguments .)



state 292

    (92) classOrInterfaceType -> Identifier expr_typeArguments . expr_38
    (358) expr_38 -> . DOT Identifier expr_typeArguments
    (359) expr_38 -> . expr_38 DOT Identifier expr_typeArguments
    (360) expr_38 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 391
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 390
    expr_38                        shift and go to state 392

state 293

    (357) expr_typeArguments -> empty .

    DOT             reduce using rule 357 (expr_typeArguments -> empty .)
    FLPAREN         reduce using rule 357 (expr_typeArguments -> empty .)
    LPAREN          reduce using rule 357 (expr_typeArguments -> empty .)
    OP_EQ           reduce using rule 357 (expr_typeArguments -> empty .)
    OP_NE           reduce using rule 357 (expr_typeArguments -> empty .)
    AND             reduce using rule 357 (expr_typeArguments -> empty .)
    CARET           reduce using rule 357 (expr_typeArguments -> empty .)
    VERTICAL        reduce using rule 357 (expr_typeArguments -> empty .)
    OP_LAND         reduce using rule 357 (expr_typeArguments -> empty .)
    OP_LOR          reduce using rule 357 (expr_typeArguments -> empty .)
    QUES            reduce using rule 357 (expr_typeArguments -> empty .)
    RPAREN          reduce using rule 357 (expr_typeArguments -> empty .)
    COMMA           reduce using rule 357 (expr_typeArguments -> empty .)
    BRPAREN         reduce using rule 357 (expr_typeArguments -> empty .)
    EQUALS          reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_ADD         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_SUB         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_MUL         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_DIV         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_AND         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_OR          reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_XOR         reduce using rule 357 (expr_typeArguments -> empty .)
    ASS_MOD         reduce using rule 357 (expr_typeArguments -> empty .)
    LESS            reduce using rule 357 (expr_typeArguments -> empty .)
    MORE            reduce using rule 357 (expr_typeArguments -> empty .)
    COLON           reduce using rule 357 (expr_typeArguments -> empty .)
    FRPAREN         reduce using rule 357 (expr_typeArguments -> empty .)
    SEMI            reduce using rule 357 (expr_typeArguments -> empty .)
    BLPAREN         reduce using rule 357 (expr_typeArguments -> empty .)
    IMPLEMENTS      reduce using rule 357 (expr_typeArguments -> empty .)
    Identifier      reduce using rule 357 (expr_typeArguments -> empty .)
    OP_ARRAY        reduce using rule 357 (expr_typeArguments -> empty .)



state 294

    (252) creator -> createdName expr_93 .

    DOT             reduce using rule 252 (creator -> createdName expr_93 .)
    FLPAREN         reduce using rule 252 (creator -> createdName expr_93 .)
    OP_INC          reduce using rule 252 (creator -> createdName expr_93 .)
    OP_DEC          reduce using rule 252 (creator -> createdName expr_93 .)



state 295

    (256) arrayCreatorRest -> FLPAREN . expr_94
    (495) expr_94 -> . FRPAREN expr_28 arrayInitializer
    (496) expr_94 -> . expression FRPAREN expr_92 expr_28
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 393
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    instanceOfExpression           shift and go to state 80
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    expr_94                        shift and go to state 394
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 395

state 296

    (494) expr_93 -> classCreatorRest .

    DOT             reduce using rule 494 (expr_93 -> classCreatorRest .)
    FLPAREN         reduce using rule 494 (expr_93 -> classCreatorRest .)
    OP_INC          reduce using rule 494 (expr_93 -> classCreatorRest .)
    OP_DEC          reduce using rule 494 (expr_93 -> classCreatorRest .)



state 297

    (257) classCreatorRest -> arguments . expr_21
    (317) expr_21 -> . classBody
    (318) expr_21 -> . empty
    (33) classBody -> . BLPAREN expr_22 BRPAREN
    (502) empty -> .

    BLPAREN         shift and go to state 397
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)


    expr_21                        shift and go to state 396
    empty                          shift and go to state 398
    classBody                      shift and go to state 399

state 298

    (493) expr_93 -> arrayCreatorRest .

    DOT             reduce using rule 493 (expr_93 -> arrayCreatorRest .)
    FLPAREN         reduce using rule 493 (expr_93 -> arrayCreatorRest .)
    OP_INC          reduce using rule 493 (expr_93 -> arrayCreatorRest .)
    OP_DEC          reduce using rule 493 (expr_93 -> arrayCreatorRest .)



state 299

    (240) primary -> Identifier expr_49 expr_91 .

    DOT             reduce using rule 240 (primary -> Identifier expr_49 expr_91 .)
    FLPAREN         reduce using rule 240 (primary -> Identifier expr_49 expr_91 .)
    OP_INC          reduce using rule 240 (primary -> Identifier expr_49 expr_91 .)
    OP_DEC          reduce using rule 240 (primary -> Identifier expr_49 expr_91 .)



state 300

    (132) elementValuePair -> Identifier EQUALS elementValue .

    COMMA           reduce using rule 132 (elementValuePair -> Identifier EQUALS elementValue .)
    RPAREN          reduce using rule 132 (elementValuePair -> Identifier EQUALS elementValue .)



state 301

    (334) expr_28 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    THROWS          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    DOT             reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_NE           reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    AND             reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    CARET           reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    QUES            reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    EQUALS          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    LESS            reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    MORE            reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    COLON           reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    Identifier      reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_INC          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 334 (expr_28 -> FLPAREN FRPAREN .)



state 302

    (335) expr_28 -> expr_28 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 400



state 303

    (241) primary -> primitiveType expr_28 DOT . CLASS

    CLASS           shift and go to state 401



state 304

    (474) expr_85 -> expr_85 expr_84 . multiplicativeExpression
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 402
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 305

    (473) expr_85 -> expr_84 multiplicativeExpression .

    PLUS            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    DASH            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    LESS            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    MORE            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    OP_EQ           reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    OP_NE           reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    AND             reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    CARET           reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    VERTICAL        reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    OP_LAND         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    OP_LOR          reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    QUES            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    RPAREN          reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    COMMA           reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    BRPAREN         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    EQUALS          reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_ADD         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_SUB         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_MUL         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_DIV         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_AND         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_OR          reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_XOR         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    ASS_MOD         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    COLON           reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    FRPAREN         reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)
    SEMI            reduce using rule 473 (expr_85 -> expr_84 multiplicativeExpression .)



state 306

    (466) expr_82 -> expr_82 relationalOp . shiftExpression
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    multiplicativeExpression       shift and go to state 117
    primary                        shift and go to state 97
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 403
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    unaryExpression                shift and go to state 121
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110

state 307

    (214) relationalOp -> LESS EQUALS .

    PLUS            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    DASH            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    OP_INC          reduce using rule 214 (relationalOp -> LESS EQUALS .)
    OP_DEC          reduce using rule 214 (relationalOp -> LESS EQUALS .)
    TILDE           reduce using rule 214 (relationalOp -> LESS EQUALS .)
    EXCLAMATION     reduce using rule 214 (relationalOp -> LESS EQUALS .)
    LPAREN          reduce using rule 214 (relationalOp -> LESS EQUALS .)
    THIS            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    SUPER           reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NEW             reduce using rule 214 (relationalOp -> LESS EQUALS .)
    Identifier      reduce using rule 214 (relationalOp -> LESS EQUALS .)
    VOID            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    CharacterLiteral reduce using rule 214 (relationalOp -> LESS EQUALS .)
    StringLiteral   reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NULL            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    BOOLEAN         reduce using rule 214 (relationalOp -> LESS EQUALS .)
    CHAR            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    BYTE            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    SHORT           reduce using rule 214 (relationalOp -> LESS EQUALS .)
    INT             reduce using rule 214 (relationalOp -> LESS EQUALS .)
    LONG            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    FLOAT           reduce using rule 214 (relationalOp -> LESS EQUALS .)
    DOUBLE          reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NUMBER          reduce using rule 214 (relationalOp -> LESS EQUALS .)
    HEX_NUMBER      reduce using rule 214 (relationalOp -> LESS EQUALS .)
    LONG_NUMBER     reduce using rule 214 (relationalOp -> LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 214 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 214 (relationalOp -> LESS EQUALS .)
    TRUE            reduce using rule 214 (relationalOp -> LESS EQUALS .)
    FALSE           reduce using rule 214 (relationalOp -> LESS EQUALS .)



state 308

    (465) expr_82 -> relationalOp shiftExpression .

    LESS            reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    MORE            reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    OP_EQ           reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    OP_NE           reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    AND             reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    CARET           reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    VERTICAL        reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    OP_LAND         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    OP_LOR          reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    QUES            reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    RPAREN          reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    COMMA           reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    BRPAREN         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    EQUALS          reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_AND         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_OR          reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    COLON           reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    FRPAREN         reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)
    SEMI            reduce using rule 465 (expr_82 -> relationalOp shiftExpression .)



state 309

    (215) relationalOp -> MORE EQUALS .

    PLUS            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    DASH            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    OP_INC          reduce using rule 215 (relationalOp -> MORE EQUALS .)
    OP_DEC          reduce using rule 215 (relationalOp -> MORE EQUALS .)
    TILDE           reduce using rule 215 (relationalOp -> MORE EQUALS .)
    EXCLAMATION     reduce using rule 215 (relationalOp -> MORE EQUALS .)
    LPAREN          reduce using rule 215 (relationalOp -> MORE EQUALS .)
    THIS            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    SUPER           reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NEW             reduce using rule 215 (relationalOp -> MORE EQUALS .)
    Identifier      reduce using rule 215 (relationalOp -> MORE EQUALS .)
    VOID            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    CharacterLiteral reduce using rule 215 (relationalOp -> MORE EQUALS .)
    StringLiteral   reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NULL            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    BOOLEAN         reduce using rule 215 (relationalOp -> MORE EQUALS .)
    CHAR            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    BYTE            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    SHORT           reduce using rule 215 (relationalOp -> MORE EQUALS .)
    INT             reduce using rule 215 (relationalOp -> MORE EQUALS .)
    LONG            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    FLOAT           reduce using rule 215 (relationalOp -> MORE EQUALS .)
    DOUBLE          reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NUMBER          reduce using rule 215 (relationalOp -> MORE EQUALS .)
    HEX_NUMBER      reduce using rule 215 (relationalOp -> MORE EQUALS .)
    LONG_NUMBER     reduce using rule 215 (relationalOp -> MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 215 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 215 (relationalOp -> MORE EQUALS .)
    TRUE            reduce using rule 215 (relationalOp -> MORE EQUALS .)
    FALSE           reduce using rule 215 (relationalOp -> MORE EQUALS .)



state 310

    (480) expr_87 -> expr_87 expr_86 . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 404
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 311

    (479) expr_87 -> expr_86 unaryExpression .

    MULT            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    SLASH           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    PERCENT         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    PLUS            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    DASH            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    LESS            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    MORE            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    INSTANCEOF      reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    OP_EQ           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    OP_NE           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    AND             reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    CARET           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    VERTICAL        reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    OP_LAND         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    OP_LOR          reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    QUES            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    RPAREN          reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    COMMA           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    BRPAREN         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    EQUALS          reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_ADD         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_SUB         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_MUL         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_DIV         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_AND         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_OR          reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_XOR         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    ASS_MOD         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    COLON           reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    FRPAREN         reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)
    SEMI            reduce using rule 479 (expr_87 -> expr_86 unaryExpression .)



state 312

    (90) type -> classOrInterfaceType expr_28 .
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    COMMA           reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    BLPAREN         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    Identifier      reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    MORE            reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    AND             reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    RPAREN          reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    IMPLEMENTS      reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    OP_EQ           reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    OP_NE           reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    CARET           reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    VERTICAL        reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    OP_LAND         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    OP_LOR          reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    QUES            reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    BRPAREN         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    EQUALS          reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_ADD         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_SUB         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_MUL         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_DIV         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_AND         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_OR          reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_XOR         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    ASS_MOD         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    LESS            reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    COLON           reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    FRPAREN         reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    SEMI            reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    OP_ARRAY        reduce using rule 90 (type -> classOrInterfaceType expr_28 .)
    FLPAREN         shift and go to state 302



state 313

    (197) assignmentOperator -> ASS_DIV .

    PLUS            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    DASH            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    OP_INC          reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    OP_DEC          reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    TILDE           reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    EXCLAMATION     reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    LPAREN          reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    THIS            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    SUPER           reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NEW             reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    Identifier      reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    VOID            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    CharacterLiteral reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    StringLiteral   reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NULL            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    BOOLEAN         reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    CHAR            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    BYTE            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    SHORT           reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    INT             reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    LONG            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    DOUBLE          reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NUMBER          reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    HEX_NUMBER      reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    LONG_NUMBER     reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    LONG_HEX_NUMBER reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_1   reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_2   reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_3   reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    TRUE            reduce using rule 197 (assignmentOperator -> ASS_DIV .)
    FALSE           reduce using rule 197 (assignmentOperator -> ASS_DIV .)



state 314

    (199) assignmentOperator -> ASS_OR .

    PLUS            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    DASH            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    OP_INC          reduce using rule 199 (assignmentOperator -> ASS_OR .)
    OP_DEC          reduce using rule 199 (assignmentOperator -> ASS_OR .)
    TILDE           reduce using rule 199 (assignmentOperator -> ASS_OR .)
    EXCLAMATION     reduce using rule 199 (assignmentOperator -> ASS_OR .)
    LPAREN          reduce using rule 199 (assignmentOperator -> ASS_OR .)
    THIS            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    SUPER           reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NEW             reduce using rule 199 (assignmentOperator -> ASS_OR .)
    Identifier      reduce using rule 199 (assignmentOperator -> ASS_OR .)
    VOID            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    CharacterLiteral reduce using rule 199 (assignmentOperator -> ASS_OR .)
    StringLiteral   reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NULL            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    BOOLEAN         reduce using rule 199 (assignmentOperator -> ASS_OR .)
    CHAR            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    BYTE            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    SHORT           reduce using rule 199 (assignmentOperator -> ASS_OR .)
    INT             reduce using rule 199 (assignmentOperator -> ASS_OR .)
    LONG            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    FLOAT           reduce using rule 199 (assignmentOperator -> ASS_OR .)
    DOUBLE          reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NUMBER          reduce using rule 199 (assignmentOperator -> ASS_OR .)
    HEX_NUMBER      reduce using rule 199 (assignmentOperator -> ASS_OR .)
    LONG_NUMBER     reduce using rule 199 (assignmentOperator -> ASS_OR .)
    LONG_HEX_NUMBER reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_1   reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_2   reduce using rule 199 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_3   reduce using rule 199 (assignmentOperator -> ASS_OR .)
    TRUE            reduce using rule 199 (assignmentOperator -> ASS_OR .)
    FALSE           reduce using rule 199 (assignmentOperator -> ASS_OR .)



state 315

    (194) assignmentOperator -> ASS_ADD .

    PLUS            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    DASH            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    OP_INC          reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    TILDE           reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    EXCLAMATION     reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    LPAREN          reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    Identifier      reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    CharacterLiteral reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    StringLiteral   reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    INT             reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NUMBER          reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    HEX_NUMBER      reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    LONG_NUMBER     reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    LONG_HEX_NUMBER reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_1   reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_2   reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_3   reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    TRUE            reduce using rule 194 (assignmentOperator -> ASS_ADD .)
    FALSE           reduce using rule 194 (assignmentOperator -> ASS_ADD .)



state 316

    (200) assignmentOperator -> ASS_XOR .

    PLUS            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    DASH            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    OP_INC          reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    OP_DEC          reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    TILDE           reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    EXCLAMATION     reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    LPAREN          reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    THIS            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    SUPER           reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NEW             reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    Identifier      reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    VOID            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    CharacterLiteral reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    StringLiteral   reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NULL            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    BOOLEAN         reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    CHAR            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    BYTE            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    SHORT           reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    INT             reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    LONG            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    FLOAT           reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    DOUBLE          reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NUMBER          reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    HEX_NUMBER      reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    LONG_NUMBER     reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    LONG_HEX_NUMBER reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_1   reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_2   reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_3   reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    TRUE            reduce using rule 200 (assignmentOperator -> ASS_XOR .)
    FALSE           reduce using rule 200 (assignmentOperator -> ASS_XOR .)



state 317

    (202) assignmentOperator -> LESS . LESS EQUALS

    LESS            shift and go to state 405



state 318

    (192) expression -> conditionalExpression expr_72 .

    SEMI            reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    COMMA           reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    FRPAREN         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    BRPAREN         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    RPAREN          reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    EQUALS          reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_ADD         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_SUB         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_MUL         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_DIV         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_AND         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_OR          reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_XOR         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    ASS_MOD         reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    LESS            reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    MORE            reduce using rule 192 (expression -> conditionalExpression expr_72 .)
    COLON           reduce using rule 192 (expression -> conditionalExpression expr_72 .)



state 319

    (439) expr_72 -> assignmentOperator . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 406

state 320

    (193) assignmentOperator -> EQUALS .

    PLUS            reduce using rule 193 (assignmentOperator -> EQUALS .)
    DASH            reduce using rule 193 (assignmentOperator -> EQUALS .)
    OP_INC          reduce using rule 193 (assignmentOperator -> EQUALS .)
    OP_DEC          reduce using rule 193 (assignmentOperator -> EQUALS .)
    TILDE           reduce using rule 193 (assignmentOperator -> EQUALS .)
    EXCLAMATION     reduce using rule 193 (assignmentOperator -> EQUALS .)
    LPAREN          reduce using rule 193 (assignmentOperator -> EQUALS .)
    THIS            reduce using rule 193 (assignmentOperator -> EQUALS .)
    SUPER           reduce using rule 193 (assignmentOperator -> EQUALS .)
    NEW             reduce using rule 193 (assignmentOperator -> EQUALS .)
    Identifier      reduce using rule 193 (assignmentOperator -> EQUALS .)
    VOID            reduce using rule 193 (assignmentOperator -> EQUALS .)
    CharacterLiteral reduce using rule 193 (assignmentOperator -> EQUALS .)
    StringLiteral   reduce using rule 193 (assignmentOperator -> EQUALS .)
    NULL            reduce using rule 193 (assignmentOperator -> EQUALS .)
    BOOLEAN         reduce using rule 193 (assignmentOperator -> EQUALS .)
    CHAR            reduce using rule 193 (assignmentOperator -> EQUALS .)
    BYTE            reduce using rule 193 (assignmentOperator -> EQUALS .)
    SHORT           reduce using rule 193 (assignmentOperator -> EQUALS .)
    INT             reduce using rule 193 (assignmentOperator -> EQUALS .)
    LONG            reduce using rule 193 (assignmentOperator -> EQUALS .)
    FLOAT           reduce using rule 193 (assignmentOperator -> EQUALS .)
    DOUBLE          reduce using rule 193 (assignmentOperator -> EQUALS .)
    NUMBER          reduce using rule 193 (assignmentOperator -> EQUALS .)
    HEX_NUMBER      reduce using rule 193 (assignmentOperator -> EQUALS .)
    LONG_NUMBER     reduce using rule 193 (assignmentOperator -> EQUALS .)
    LONG_HEX_NUMBER reduce using rule 193 (assignmentOperator -> EQUALS .)
    NON_INTEGER_1   reduce using rule 193 (assignmentOperator -> EQUALS .)
    NON_INTEGER_2   reduce using rule 193 (assignmentOperator -> EQUALS .)
    NON_INTEGER_3   reduce using rule 193 (assignmentOperator -> EQUALS .)
    TRUE            reduce using rule 193 (assignmentOperator -> EQUALS .)
    FALSE           reduce using rule 193 (assignmentOperator -> EQUALS .)



state 321

    (196) assignmentOperator -> ASS_MUL .

    PLUS            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    DASH            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    OP_INC          reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    TILDE           reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    EXCLAMATION     reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    LPAREN          reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    Identifier      reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    CharacterLiteral reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    StringLiteral   reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    INT             reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NUMBER          reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    HEX_NUMBER      reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    LONG_NUMBER     reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    LONG_HEX_NUMBER reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_1   reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_2   reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_3   reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    TRUE            reduce using rule 196 (assignmentOperator -> ASS_MUL .)
    FALSE           reduce using rule 196 (assignmentOperator -> ASS_MUL .)



state 322

    (198) assignmentOperator -> ASS_AND .

    PLUS            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    DASH            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    OP_INC          reduce using rule 198 (assignmentOperator -> ASS_AND .)
    OP_DEC          reduce using rule 198 (assignmentOperator -> ASS_AND .)
    TILDE           reduce using rule 198 (assignmentOperator -> ASS_AND .)
    EXCLAMATION     reduce using rule 198 (assignmentOperator -> ASS_AND .)
    LPAREN          reduce using rule 198 (assignmentOperator -> ASS_AND .)
    THIS            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    SUPER           reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NEW             reduce using rule 198 (assignmentOperator -> ASS_AND .)
    Identifier      reduce using rule 198 (assignmentOperator -> ASS_AND .)
    VOID            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    CharacterLiteral reduce using rule 198 (assignmentOperator -> ASS_AND .)
    StringLiteral   reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NULL            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    BOOLEAN         reduce using rule 198 (assignmentOperator -> ASS_AND .)
    CHAR            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    BYTE            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    SHORT           reduce using rule 198 (assignmentOperator -> ASS_AND .)
    INT             reduce using rule 198 (assignmentOperator -> ASS_AND .)
    LONG            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    FLOAT           reduce using rule 198 (assignmentOperator -> ASS_AND .)
    DOUBLE          reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NUMBER          reduce using rule 198 (assignmentOperator -> ASS_AND .)
    HEX_NUMBER      reduce using rule 198 (assignmentOperator -> ASS_AND .)
    LONG_NUMBER     reduce using rule 198 (assignmentOperator -> ASS_AND .)
    LONG_HEX_NUMBER reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_1   reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_2   reduce using rule 198 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_3   reduce using rule 198 (assignmentOperator -> ASS_AND .)
    TRUE            reduce using rule 198 (assignmentOperator -> ASS_AND .)
    FALSE           reduce using rule 198 (assignmentOperator -> ASS_AND .)



state 323

    (195) assignmentOperator -> ASS_SUB .

    PLUS            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    DASH            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    OP_INC          reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    TILDE           reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    EXCLAMATION     reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    LPAREN          reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    Identifier      reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    CharacterLiteral reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    StringLiteral   reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    INT             reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NUMBER          reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    HEX_NUMBER      reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    LONG_NUMBER     reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    LONG_HEX_NUMBER reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_1   reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_2   reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_3   reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    TRUE            reduce using rule 195 (assignmentOperator -> ASS_SUB .)
    FALSE           reduce using rule 195 (assignmentOperator -> ASS_SUB .)



state 324

    (203) assignmentOperator -> MORE . MORE MORE EQUALS
    (204) assignmentOperator -> MORE . MORE EQUALS

    MORE            shift and go to state 407



state 325

    (440) expr_72 -> empty .

    EQUALS          reduce using rule 440 (expr_72 -> empty .)
    ASS_ADD         reduce using rule 440 (expr_72 -> empty .)
    ASS_SUB         reduce using rule 440 (expr_72 -> empty .)
    ASS_MUL         reduce using rule 440 (expr_72 -> empty .)
    ASS_DIV         reduce using rule 440 (expr_72 -> empty .)
    ASS_AND         reduce using rule 440 (expr_72 -> empty .)
    ASS_OR          reduce using rule 440 (expr_72 -> empty .)
    ASS_XOR         reduce using rule 440 (expr_72 -> empty .)
    ASS_MOD         reduce using rule 440 (expr_72 -> empty .)
    LESS            reduce using rule 440 (expr_72 -> empty .)
    MORE            reduce using rule 440 (expr_72 -> empty .)
    RPAREN          reduce using rule 440 (expr_72 -> empty .)
    COLON           reduce using rule 440 (expr_72 -> empty .)
    FRPAREN         reduce using rule 440 (expr_72 -> empty .)
    COMMA           reduce using rule 440 (expr_72 -> empty .)
    BRPAREN         reduce using rule 440 (expr_72 -> empty .)
    SEMI            reduce using rule 440 (expr_72 -> empty .)



state 326

    (201) assignmentOperator -> ASS_MOD .

    PLUS            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    DASH            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    OP_INC          reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    OP_DEC          reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    TILDE           reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    EXCLAMATION     reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    LPAREN          reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    THIS            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    SUPER           reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NEW             reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    Identifier      reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    VOID            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    CharacterLiteral reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    StringLiteral   reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NULL            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    BOOLEAN         reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    CHAR            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    BYTE            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    SHORT           reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    INT             reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    LONG            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    FLOAT           reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    DOUBLE          reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NUMBER          reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    HEX_NUMBER      reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    LONG_NUMBER     reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    LONG_HEX_NUMBER reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_1   reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_2   reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_3   reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    TRUE            reduce using rule 201 (assignmentOperator -> ASS_MOD .)
    FALSE           reduce using rule 201 (assignmentOperator -> ASS_MOD .)



state 327

    (357) expr_typeArguments -> empty .
    (386) expr_49 -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 357 (expr_typeArguments -> empty .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 357 (expr_typeArguments -> empty .).
    DOT             reduce using rule 357 (expr_typeArguments -> empty .)
    FLPAREN         reduce using rule 357 (expr_typeArguments -> empty .)
    RPAREN          reduce using rule 357 (expr_typeArguments -> empty .)
    Identifier      reduce using rule 357 (expr_typeArguments -> empty .)
    LPAREN          reduce using rule 386 (expr_49 -> empty .)
    OP_INC          reduce using rule 386 (expr_49 -> empty .)
    OP_DEC          reduce using rule 386 (expr_49 -> empty .)

  ! DOT             [ reduce using rule 386 (expr_49 -> empty .) ]
  ! FLPAREN         [ reduce using rule 386 (expr_49 -> empty .) ]


state 328

    (234) castExpression -> LPAREN expr_90 RPAREN . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 408
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    primitiveType                  shift and go to state 110
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 329

    (91) type -> primitiveType expr_28 .
    (241) primary -> primitiveType expr_28 . DOT CLASS
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    Identifier      reduce using rule 91 (type -> primitiveType expr_28 .)
    RPAREN          reduce using rule 91 (type -> primitiveType expr_28 .)
    DOT             shift and go to state 303
    FLPAREN         shift and go to state 302



state 330

    (233) castExpression -> LPAREN primitiveType RPAREN . unaryExpression
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    unaryExpression                shift and go to state 409
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    parExpression                  shift and go to state 122
    primary                        shift and go to state 97
    primitiveType                  shift and go to state 110
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    FloatingPointLiteral           shift and go to state 107
    booleanLiteral                 shift and go to state 73

state 331

    (188) parExpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    FLPAREN         reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    OP_INC          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    OP_DEC          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    BLPAREN         reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    TRY             reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    SYNCHRONIZED    reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    THROW           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    Identifier      reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    DASH            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    SUPER           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NEW             reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    CharacterLiteral reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    StringLiteral   reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    BYTE            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    INT             reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    HEX_NUMBER      reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    LONG_NUMBER     reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    LONG_HEX_NUMBER reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_1   reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_2   reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_3   reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 188 (parExpression -> LPAREN expression RPAREN .)



state 332

    (497) expr_95 -> expressionList .

    RPAREN          reduce using rule 497 (expr_95 -> expressionList .)



state 333

    (498) expr_95 -> empty .

    RPAREN          reduce using rule 498 (expr_95 -> empty .)



state 334

    (267) arguments -> LPAREN expr_95 . RPAREN

    RPAREN          shift and go to state 410



state 335

    (189) expressionList -> expression . expr_71
    (436) expr_71 -> . COMMA expression
    (437) expr_71 -> . expr_71 COMMA expression
    (438) expr_71 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 411
    RPAREN          reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_71                        shift and go to state 412
    empty                          shift and go to state 413

state 336

    (266) superSuffix -> DOT Identifier . expr_20
    (315) expr_20 -> . arguments
    (316) expr_20 -> . empty
    (267) arguments -> . LPAREN expr_95 RPAREN
    (502) empty -> .

    LPAREN          shift and go to state 228
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)


    expr_20                        shift and go to state 414
    arguments                      shift and go to state 378
    empty                          shift and go to state 380

state 337

    (294) expr_11 -> IMPLEMENTS typeList .

    BLPAREN         reduce using rule 294 (expr_11 -> IMPLEMENTS typeList .)



state 338

    (24) enumDeclaration -> ENUM Identifier expr_11 enumBody .

    BRPAREN         reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    SEMI            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    PUBLIC          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    PROTECTED       reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    PRIVATE         reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    STATIC          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    ABSTRACT        reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    FINAL           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NATIVE          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    SYNCHRONIZED    reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    TRANSIENT       reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    VOLATILE        reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    STRICTFP        reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    AT              reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    VOID            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    LESS            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    INTERFACE       reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    CLASS           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    ENUM            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    Identifier      reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    BOOLEAN         reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    CHAR            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    BYTE            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    SHORT           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    INT             reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    LONG            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    FLOAT           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    DOUBLE          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    $end            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    ASSERT          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    IF              reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    FOR             reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    WHILE           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    DO              reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    TRY             reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    SWITCH          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    RETURN          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    THROW           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    BREAK           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    CONTINUE        reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    BLPAREN         reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    PLUS            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    DASH            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    OP_INC          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    OP_DEC          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    TILDE           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    EXCLAMATION     reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    LPAREN          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    THIS            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    SUPER           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NEW             reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    CharacterLiteral reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    StringLiteral   reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NULL            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NUMBER          reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    HEX_NUMBER      reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    LONG_NUMBER     reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    LONG_HEX_NUMBER reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NON_INTEGER_1   reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NON_INTEGER_2   reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    NON_INTEGER_3   reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    TRUE            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    FALSE           reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    CASE            reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)
    DEFAULT         reduce using rule 24 (enumDeclaration -> ENUM Identifier expr_11 enumBody .)



state 339

    (25) enumBody -> BLPAREN . expr_15 expr_16 expr_17 BRPAREN
    (304) expr_15 -> . enumConstants
    (305) expr_15 -> . empty
    (26) enumConstants -> . enumConstant expr_18
    (502) empty -> .
    (27) enumConstant -> . expr_19 Identifier expr_20 expr_21
    (313) expr_19 -> . annotations
    (314) expr_19 -> . empty
    (128) annotations -> . expr_50
    (387) expr_50 -> . annotation
    (388) expr_50 -> . expr_50 annotation
    (129) annotation -> . AT annotationName expr_52

    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    AT              shift and go to state 6


    expr_50                        shift and go to state 1
    enumConstant                   shift and go to state 415
    annotation                     shift and go to state 8
    enumConstants                  shift and go to state 417
    expr_19                        shift and go to state 418
    expr_15                        shift and go to state 419
    annotations                    shift and go to state 416
    empty                          shift and go to state 420

state 340

    (21) typeParameters -> LESS typeParameter . expr_12 MORE
    (296) expr_12 -> . COMMA typeParameter
    (297) expr_12 -> . expr_12 COMMA typeParameter
    (298) expr_12 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 421
    MORE            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 423
    expr_12                        shift and go to state 422

state 341

    (22) typeParameter -> Identifier . expr_13
    (299) expr_13 -> . EXTENDS typeBound
    (300) expr_13 -> . empty
    (502) empty -> .

    EXTENDS         shift and go to state 424
    COMMA           reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)


    empty                          shift and go to state 425
    expr_13                        shift and go to state 426

state 342

    (322) expr_23 -> EXTENDS . typeList
    (32) typeList -> . type expr_24
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    typeList                       shift and go to state 427
    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 288

state 343

    (31) normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 . interfaceBody
    (34) interfaceBody -> . BLPAREN expr_25 BRPAREN

    BLPAREN         shift and go to state 429


    interfaceBody                  shift and go to state 428

state 344

    (323) expr_23 -> empty .

    BLPAREN         reduce using rule 323 (expr_23 -> empty .)



state 345

    (292) expr_10 -> EXTENDS . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    primitiveType                  shift and go to state 244
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 430

state 346

    (20) normalClassDeclaration -> CLASS Identifier expr_9 expr_10 . expr_11 classBody
    (294) expr_11 -> . IMPLEMENTS typeList
    (295) expr_11 -> . empty
    (502) empty -> .

    IMPLEMENTS      shift and go to state 230
    BLPAREN         reduce using rule 502 (empty -> .)


    expr_11                        shift and go to state 431
    empty                          shift and go to state 232

state 347

    (293) expr_10 -> empty .

    IMPLEMENTS      reduce using rule 293 (expr_10 -> empty .)
    BLPAREN         reduce using rule 293 (expr_10 -> empty .)



state 348

    (137) annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .

    SEMI            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PUBLIC          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PROTECTED       reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PRIVATE         reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ABSTRACT        reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    STATIC          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FINAL           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    STRICTFP        reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    AT              reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CLASS           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ENUM            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    INTERFACE       reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    $end            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BRPAREN         reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    ASSERT          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    IF              reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FOR             reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    WHILE           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DO              reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRY             reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SWITCH          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SYNCHRONIZED    reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    RETURN          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    THROW           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BREAK           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CONTINUE        reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    Identifier      reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BLPAREN         reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BOOLEAN         reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CHAR            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    BYTE            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SHORT           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    INT             reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FLOAT           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DOUBLE          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    PLUS            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DASH            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    OP_INC          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    OP_DEC          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TILDE           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    EXCLAMATION     reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LPAREN          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    THIS            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    SUPER           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NEW             reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    VOID            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CharacterLiteral reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    StringLiteral   reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NULL            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NUMBER          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    HEX_NUMBER      reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG_NUMBER     reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LONG_HEX_NUMBER reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_1   reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_2   reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NON_INTEGER_3   reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRUE            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    FALSE           reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    CASE            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    DEFAULT         reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    NATIVE          reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    TRANSIENT       reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    VOLATILE        reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)
    LESS            reduce using rule 137 (annotationTypeDeclaration -> AT INTERFACE Identifier annotationTypeBody .)



state 349

    (138) annotationTypeBody -> BLPAREN . expr_56 BRPAREN
    (401) expr_56 -> . annotationTypeElementDeclaration
    (402) expr_56 -> . expr_56 annotationTypeElementDeclaration
    (403) expr_56 -> . empty
    (139) annotationTypeElementDeclaration -> . modifiers annotationTypeElementRest
    (502) empty -> .
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    STATIC          shift and go to state 435
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifiers                      shift and go to state 445
    expr_56                        shift and go to state 442
    annotationTypeElementDeclaration shift and go to state 444
    expr_8                         shift and go to state 440
    modifier                       shift and go to state 448
    annotation                     shift and go to state 443
    empty                          shift and go to state 441

state 350

    (444) expr_74 -> expr_74 OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 444 (expr_74 -> expr_74 OP_LOR conditionalAndExpression .)



state 351

    (91) type -> primitiveType expr_28 .
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    COMMA           reduce using rule 91 (type -> primitiveType expr_28 .)
    BLPAREN         reduce using rule 91 (type -> primitiveType expr_28 .)
    MORE            reduce using rule 91 (type -> primitiveType expr_28 .)
    Identifier      reduce using rule 91 (type -> primitiveType expr_28 .)
    AND             reduce using rule 91 (type -> primitiveType expr_28 .)
    IMPLEMENTS      reduce using rule 91 (type -> primitiveType expr_28 .)
    OP_EQ           reduce using rule 91 (type -> primitiveType expr_28 .)
    OP_NE           reduce using rule 91 (type -> primitiveType expr_28 .)
    CARET           reduce using rule 91 (type -> primitiveType expr_28 .)
    VERTICAL        reduce using rule 91 (type -> primitiveType expr_28 .)
    OP_LAND         reduce using rule 91 (type -> primitiveType expr_28 .)
    OP_LOR          reduce using rule 91 (type -> primitiveType expr_28 .)
    QUES            reduce using rule 91 (type -> primitiveType expr_28 .)
    RPAREN          reduce using rule 91 (type -> primitiveType expr_28 .)
    BRPAREN         reduce using rule 91 (type -> primitiveType expr_28 .)
    EQUALS          reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_ADD         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_SUB         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_MUL         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_DIV         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_AND         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_OR          reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_XOR         reduce using rule 91 (type -> primitiveType expr_28 .)
    ASS_MOD         reduce using rule 91 (type -> primitiveType expr_28 .)
    LESS            reduce using rule 91 (type -> primitiveType expr_28 .)
    COLON           reduce using rule 91 (type -> primitiveType expr_28 .)
    FRPAREN         reduce using rule 91 (type -> primitiveType expr_28 .)
    SEMI            reduce using rule 91 (type -> primitiveType expr_28 .)
    OP_ARRAY        reduce using rule 91 (type -> primitiveType expr_28 .)
    FLPAREN         shift and go to state 302



state 352

    (461) expr_80 -> expr_80 expr_79 instanceOfExpression .

    OP_EQ           reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    OP_NE           reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    AND             reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    CARET           reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    VERTICAL        reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    OP_LAND         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    OP_LOR          reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    QUES            reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    RPAREN          reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    COMMA           reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    BRPAREN         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    EQUALS          reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_ADD         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_SUB         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_MUL         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_DIV         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_AND         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_OR          reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_XOR         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    ASS_MOD         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    LESS            reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    MORE            reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    COLON           reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    FRPAREN         reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)
    SEMI            reduce using rule 461 (expr_80 -> expr_80 expr_79 instanceOfExpression .)



state 353

    (492) expr_92 -> expr_92 FLPAREN . expression FRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 450

state 354

    (491) expr_92 -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 451



state 355

    (243) identifierSuffix -> expr_28 DOT . CLASS

    CLASS           shift and go to state 452



state 356

    (248) identifierSuffix -> DOT THIS .

    DOT             reduce using rule 248 (identifierSuffix -> DOT THIS .)
    FLPAREN         reduce using rule 248 (identifierSuffix -> DOT THIS .)
    OP_INC          reduce using rule 248 (identifierSuffix -> DOT THIS .)
    OP_DEC          reduce using rule 248 (identifierSuffix -> DOT THIS .)



state 357

    (247) identifierSuffix -> DOT explicitGenericInvocation .

    DOT             reduce using rule 247 (identifierSuffix -> DOT explicitGenericInvocation .)
    FLPAREN         reduce using rule 247 (identifierSuffix -> DOT explicitGenericInvocation .)
    OP_INC          reduce using rule 247 (identifierSuffix -> DOT explicitGenericInvocation .)
    OP_DEC          reduce using rule 247 (identifierSuffix -> DOT explicitGenericInvocation .)



state 358

    (258) explicitGenericInvocation -> nonWildcardTypeArguments . Identifier arguments

    Identifier      shift and go to state 453



state 359

    (250) identifierSuffix -> DOT NEW . innerCreator
    (255) innerCreator -> . expr_47 Identifier classCreatorRest
    (380) expr_47 -> . nonWildcardTypeArguments
    (381) expr_47 -> . empty
    (259) nonWildcardTypeArguments -> . LESS typeList MORE
    (502) empty -> .

    LESS            shift and go to state 190
    Identifier      reduce using rule 502 (empty -> .)


    expr_47                        shift and go to state 374
    nonWildcardTypeArguments       shift and go to state 375
    innerCreator                   shift and go to state 454
    empty                          shift and go to state 376

state 360

    (249) identifierSuffix -> DOT SUPER . arguments
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    arguments                      shift and go to state 455

state 361

    (246) identifierSuffix -> DOT CLASS .

    DOT             reduce using rule 246 (identifierSuffix -> DOT CLASS .)
    FLPAREN         reduce using rule 246 (identifierSuffix -> DOT CLASS .)
    OP_INC          reduce using rule 246 (identifierSuffix -> DOT CLASS .)
    OP_DEC          reduce using rule 246 (identifierSuffix -> DOT CLASS .)



state 362

    (447) expr_75 -> expr_75 OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 447 (expr_75 -> expr_75 OP_LAND inclusiveOrExpression .)



state 363

    (394) expr_53 -> expr_53 COMMA elementValuePair .

    COMMA           reduce using rule 394 (expr_53 -> expr_53 COMMA elementValuePair .)
    RPAREN          reduce using rule 394 (expr_53 -> expr_53 COMMA elementValuePair .)



state 364

    (469) expr_83 -> expr_83 shiftOp additiveExpression .

    LESS            reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    MORE            reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    OP_EQ           reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    OP_NE           reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    AND             reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    CARET           reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    VERTICAL        reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    OP_LAND         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    OP_LOR          reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    QUES            reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    RPAREN          reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    COMMA           reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    BRPAREN         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    EQUALS          reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_AND         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_OR          reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    COLON           reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    FRPAREN         reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)
    SEMI            reduce using rule 469 (expr_83 -> expr_83 shiftOp additiveExpression .)



state 365

    (220) shiftOp -> MORE MORE MORE .

    PLUS            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    DASH            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    OP_INC          reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    OP_DEC          reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    TILDE           reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    EXCLAMATION     reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    LPAREN          reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    THIS            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    SUPER           reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NEW             reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    Identifier      reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    VOID            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    CharacterLiteral reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    StringLiteral   reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NULL            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    BOOLEAN         reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    CHAR            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    BYTE            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    SHORT           reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    INT             reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    LONG            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    FLOAT           reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    DOUBLE          reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NUMBER          reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    HEX_NUMBER      reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    LONG_NUMBER     reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_1   reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_2   reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_3   reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    TRUE            reduce using rule 220 (shiftOp -> MORE MORE MORE .)
    FALSE           reduce using rule 220 (shiftOp -> MORE MORE MORE .)



state 366

    (453) expr_77 -> expr_77 CARET andExpression .

    CARET           reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    VERTICAL        reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    OP_LAND         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    OP_LOR          reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    QUES            reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    RPAREN          reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    COMMA           reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    BRPAREN         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    EQUALS          reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_ADD         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_SUB         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_MUL         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_DIV         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_AND         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_OR          reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_XOR         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    ASS_MOD         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    LESS            reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    MORE            reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    COLON           reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    FRPAREN         reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)
    SEMI            reduce using rule 453 (expr_77 -> expr_77 CARET andExpression .)



state 367

    (136) elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN .

    COMMA           reduce using rule 136 (elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN .)
    BRPAREN         reduce using rule 136 (elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN .)
    RPAREN          reduce using rule 136 (elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN .)
    SEMI            reduce using rule 136 (elementValueArrayInitializer -> BLPAREN expr_55 expr_35 BRPAREN .)



state 368

    (396) expr_54 -> COMMA elementValue .

    COMMA           reduce using rule 396 (expr_54 -> COMMA elementValue .)
    BRPAREN         reduce using rule 396 (expr_54 -> COMMA elementValue .)



state 369

    (397) expr_54 -> expr_54 COMMA . elementValue
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    unaryExpression                shift and go to state 121
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 106
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 456

state 370

    (456) expr_78 -> expr_78 AND equalityExpression .

    AND             reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    CARET           reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    VERTICAL        reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    OP_LAND         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    OP_LOR          reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    QUES            reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    RPAREN          reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    COMMA           reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    BRPAREN         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    EQUALS          reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_ADD         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_SUB         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_MUL         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_DIV         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_AND         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_OR          reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_XOR         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    ASS_MOD         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    LESS            reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    MORE            reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    COLON           reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    FRPAREN         reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)
    SEMI            reduce using rule 456 (expr_78 -> expr_78 AND equalityExpression .)



state 371

    (441) expr_73 -> QUES expression COLON . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 457

state 372

    (450) expr_76 -> expr_76 VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 450 (expr_76 -> expr_76 VERTICAL exclusiveOrExpression .)



state 373

    (264) selector -> FLPAREN expression FRPAREN .

    OP_INC          reduce using rule 264 (selector -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 264 (selector -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 264 (selector -> FLPAREN expression FRPAREN .)
    FLPAREN         reduce using rule 264 (selector -> FLPAREN expression FRPAREN .)



state 374

    (255) innerCreator -> expr_47 . Identifier classCreatorRest

    Identifier      shift and go to state 458



state 375

    (380) expr_47 -> nonWildcardTypeArguments .

    SUPER           reduce using rule 380 (expr_47 -> nonWildcardTypeArguments .)
    THIS            reduce using rule 380 (expr_47 -> nonWildcardTypeArguments .)
    Identifier      reduce using rule 380 (expr_47 -> nonWildcardTypeArguments .)



state 376

    (381) expr_47 -> empty .

    SUPER           reduce using rule 381 (expr_47 -> empty .)
    Identifier      reduce using rule 381 (expr_47 -> empty .)



state 377

    (263) selector -> DOT NEW innerCreator .

    OP_INC          reduce using rule 263 (selector -> DOT NEW innerCreator .)
    OP_DEC          reduce using rule 263 (selector -> DOT NEW innerCreator .)
    DOT             reduce using rule 263 (selector -> DOT NEW innerCreator .)
    FLPAREN         reduce using rule 263 (selector -> DOT NEW innerCreator .)



state 378

    (315) expr_20 -> arguments .

    OP_INC          reduce using rule 315 (expr_20 -> arguments .)
    OP_DEC          reduce using rule 315 (expr_20 -> arguments .)
    DOT             reduce using rule 315 (expr_20 -> arguments .)
    FLPAREN         reduce using rule 315 (expr_20 -> arguments .)
    BLPAREN         reduce using rule 315 (expr_20 -> arguments .)
    COMMA           reduce using rule 315 (expr_20 -> arguments .)
    SEMI            reduce using rule 315 (expr_20 -> arguments .)
    BRPAREN         reduce using rule 315 (expr_20 -> arguments .)



state 379

    (260) selector -> DOT Identifier expr_20 .

    OP_INC          reduce using rule 260 (selector -> DOT Identifier expr_20 .)
    OP_DEC          reduce using rule 260 (selector -> DOT Identifier expr_20 .)
    DOT             reduce using rule 260 (selector -> DOT Identifier expr_20 .)
    FLPAREN         reduce using rule 260 (selector -> DOT Identifier expr_20 .)



state 380

    (316) expr_20 -> empty .

    OP_INC          reduce using rule 316 (expr_20 -> empty .)
    OP_DEC          reduce using rule 316 (expr_20 -> empty .)
    DOT             reduce using rule 316 (expr_20 -> empty .)
    FLPAREN         reduce using rule 316 (expr_20 -> empty .)
    BLPAREN         reduce using rule 316 (expr_20 -> empty .)
    COMMA           reduce using rule 316 (expr_20 -> empty .)
    SEMI            reduce using rule 316 (expr_20 -> empty .)
    BRPAREN         reduce using rule 316 (expr_20 -> empty .)



state 381

    (262) selector -> DOT SUPER superSuffix .

    OP_INC          reduce using rule 262 (selector -> DOT SUPER superSuffix .)
    OP_DEC          reduce using rule 262 (selector -> DOT SUPER superSuffix .)
    DOT             reduce using rule 262 (selector -> DOT SUPER superSuffix .)
    FLPAREN         reduce using rule 262 (selector -> DOT SUPER superSuffix .)



state 382

    (259) nonWildcardTypeArguments -> LESS typeList MORE .

    Identifier      reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    BOOLEAN         reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    CHAR            reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    BYTE            reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    SHORT           reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    INT             reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    LONG            reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    FLOAT           reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    DOUBLE          reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    THIS            reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)
    SUPER           reduce using rule 259 (nonWildcardTypeArguments -> LESS typeList MORE .)



state 383

    (324) expr_24 -> COMMA . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    primitiveType                  shift and go to state 244
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 459

state 384

    (32) typeList -> type expr_24 .
    (325) expr_24 -> expr_24 . COMMA type

    BLPAREN         reduce using rule 32 (typeList -> type expr_24 .)
    MORE            reduce using rule 32 (typeList -> type expr_24 .)
    COMMA           shift and go to state 460



state 385

    (326) expr_24 -> empty .

    COMMA           reduce using rule 326 (expr_24 -> empty .)
    MORE            reduce using rule 326 (expr_24 -> empty .)
    BLPAREN         reduce using rule 326 (expr_24 -> empty .)



state 386

    (251) creator -> nonWildcardTypeArguments createdName classCreatorRest .

    DOT             reduce using rule 251 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    FLPAREN         reduce using rule 251 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    OP_INC          reduce using rule 251 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)
    OP_DEC          reduce using rule 251 (creator -> nonWildcardTypeArguments createdName classCreatorRest .)



state 387

    (103) typeArguments -> LESS typeArgument . expr_39 MORE
    (361) expr_39 -> . COMMA typeArgument
    (362) expr_39 -> . expr_39 COMMA typeArgument
    (363) expr_39 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 462
    MORE            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 463
    expr_39                        shift and go to state 461

state 388

    (105) typeArgument -> QUES . expr_41
    (366) expr_41 -> . expr_40 type
    (367) expr_41 -> . empty
    (364) expr_40 -> . EXTENDS
    (365) expr_40 -> . SUPER
    (502) empty -> .

    EXTENDS         shift and go to state 467
    SUPER           shift and go to state 466
    COMMA           reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)


    expr_41                        shift and go to state 464
    expr_40                        shift and go to state 465
    empty                          shift and go to state 468

state 389

    (104) typeArgument -> type .

    MORE            reduce using rule 104 (typeArgument -> type .)
    COMMA           reduce using rule 104 (typeArgument -> type .)



state 390

    (360) expr_38 -> empty .

    DOT             reduce using rule 360 (expr_38 -> empty .)
    FLPAREN         reduce using rule 360 (expr_38 -> empty .)
    LPAREN          reduce using rule 360 (expr_38 -> empty .)
    RPAREN          reduce using rule 360 (expr_38 -> empty .)
    OP_EQ           reduce using rule 360 (expr_38 -> empty .)
    OP_NE           reduce using rule 360 (expr_38 -> empty .)
    AND             reduce using rule 360 (expr_38 -> empty .)
    CARET           reduce using rule 360 (expr_38 -> empty .)
    VERTICAL        reduce using rule 360 (expr_38 -> empty .)
    OP_LAND         reduce using rule 360 (expr_38 -> empty .)
    OP_LOR          reduce using rule 360 (expr_38 -> empty .)
    QUES            reduce using rule 360 (expr_38 -> empty .)
    COMMA           reduce using rule 360 (expr_38 -> empty .)
    BRPAREN         reduce using rule 360 (expr_38 -> empty .)
    EQUALS          reduce using rule 360 (expr_38 -> empty .)
    ASS_ADD         reduce using rule 360 (expr_38 -> empty .)
    ASS_SUB         reduce using rule 360 (expr_38 -> empty .)
    ASS_MUL         reduce using rule 360 (expr_38 -> empty .)
    ASS_DIV         reduce using rule 360 (expr_38 -> empty .)
    ASS_AND         reduce using rule 360 (expr_38 -> empty .)
    ASS_OR          reduce using rule 360 (expr_38 -> empty .)
    ASS_XOR         reduce using rule 360 (expr_38 -> empty .)
    ASS_MOD         reduce using rule 360 (expr_38 -> empty .)
    LESS            reduce using rule 360 (expr_38 -> empty .)
    MORE            reduce using rule 360 (expr_38 -> empty .)
    COLON           reduce using rule 360 (expr_38 -> empty .)
    FRPAREN         reduce using rule 360 (expr_38 -> empty .)
    SEMI            reduce using rule 360 (expr_38 -> empty .)
    BLPAREN         reduce using rule 360 (expr_38 -> empty .)
    IMPLEMENTS      reduce using rule 360 (expr_38 -> empty .)
    Identifier      reduce using rule 360 (expr_38 -> empty .)
    OP_ARRAY        reduce using rule 360 (expr_38 -> empty .)



state 391

    (358) expr_38 -> DOT . Identifier expr_typeArguments

    Identifier      shift and go to state 469



state 392

    (92) classOrInterfaceType -> Identifier expr_typeArguments expr_38 .
    (359) expr_38 -> expr_38 . DOT Identifier expr_typeArguments

    FLPAREN         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    AND             reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    COMMA           reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    MORE            reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    Identifier      reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    IMPLEMENTS      reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    BLPAREN         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    LPAREN          reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    RPAREN          reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    OP_ARRAY        reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    OP_EQ           reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    OP_NE           reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    CARET           reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    VERTICAL        reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    OP_LAND         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    OP_LOR          reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    QUES            reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    BRPAREN         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    EQUALS          reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_ADD         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_SUB         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_MUL         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_DIV         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_AND         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_OR          reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_XOR         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    ASS_MOD         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    LESS            reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    COLON           reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    FRPAREN         reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    SEMI            reduce using rule 92 (classOrInterfaceType -> Identifier expr_typeArguments expr_38 .)
    DOT             shift and go to state 470



state 393

    (495) expr_94 -> FRPAREN . expr_28 arrayInitializer
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    BLPAREN         reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 471
    empty                          shift and go to state 202

state 394

    (256) arrayCreatorRest -> FLPAREN expr_94 .

    DOT             reduce using rule 256 (arrayCreatorRest -> FLPAREN expr_94 .)
    FLPAREN         reduce using rule 256 (arrayCreatorRest -> FLPAREN expr_94 .)
    OP_INC          reduce using rule 256 (arrayCreatorRest -> FLPAREN expr_94 .)
    OP_DEC          reduce using rule 256 (arrayCreatorRest -> FLPAREN expr_94 .)



state 395

    (496) expr_94 -> expression . FRPAREN expr_92 expr_28

    FRPAREN         shift and go to state 472



state 396

    (257) classCreatorRest -> arguments expr_21 .

    DOT             reduce using rule 257 (classCreatorRest -> arguments expr_21 .)
    FLPAREN         reduce using rule 257 (classCreatorRest -> arguments expr_21 .)
    OP_INC          reduce using rule 257 (classCreatorRest -> arguments expr_21 .)
    OP_DEC          reduce using rule 257 (classCreatorRest -> arguments expr_21 .)



state 397

    (33) classBody -> BLPAREN . expr_22 BRPAREN
    (319) expr_22 -> . classBodyDeclaration
    (320) expr_22 -> . expr_22 classBodyDeclaration
    (321) expr_22 -> . empty
    (35) classBodyDeclaration -> . SEMI
    (36) classBodyDeclaration -> . expr_4 block
    (37) classBodyDeclaration -> . modifiers memberDecl
    (502) empty -> .
    (278) expr_4 -> . STATIC
    (279) expr_4 -> . empty
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 475
    BRPAREN         reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    STATIC          shift and go to state 473
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifier                       shift and go to state 448
    modifiers                      shift and go to state 479
    classBodyDeclaration           shift and go to state 478
    empty                          shift and go to state 477
    expr_8                         shift and go to state 440
    expr_4                         shift and go to state 476
    expr_22                        shift and go to state 474
    annotation                     shift and go to state 443

state 398

    (318) expr_21 -> empty .

    DOT             reduce using rule 318 (expr_21 -> empty .)
    FLPAREN         reduce using rule 318 (expr_21 -> empty .)
    OP_INC          reduce using rule 318 (expr_21 -> empty .)
    OP_DEC          reduce using rule 318 (expr_21 -> empty .)
    COMMA           reduce using rule 318 (expr_21 -> empty .)
    SEMI            reduce using rule 318 (expr_21 -> empty .)
    BRPAREN         reduce using rule 318 (expr_21 -> empty .)



state 399

    (317) expr_21 -> classBody .

    DOT             reduce using rule 317 (expr_21 -> classBody .)
    FLPAREN         reduce using rule 317 (expr_21 -> classBody .)
    OP_INC          reduce using rule 317 (expr_21 -> classBody .)
    OP_DEC          reduce using rule 317 (expr_21 -> classBody .)
    COMMA           reduce using rule 317 (expr_21 -> classBody .)
    SEMI            reduce using rule 317 (expr_21 -> classBody .)
    BRPAREN         reduce using rule 317 (expr_21 -> classBody .)



state 400

    (335) expr_28 -> expr_28 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    THROWS          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    SEMI            reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    DOT             reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_NE           reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    AND             reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    CARET           reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    QUES            reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    COMMA           reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    EQUALS          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    LESS            reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    MORE            reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    COLON           reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    Identifier      reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_INC          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 335 (expr_28 -> expr_28 FLPAREN FRPAREN .)



state 401

    (241) primary -> primitiveType expr_28 DOT CLASS .

    DOT             reduce using rule 241 (primary -> primitiveType expr_28 DOT CLASS .)
    FLPAREN         reduce using rule 241 (primary -> primitiveType expr_28 DOT CLASS .)
    OP_INC          reduce using rule 241 (primary -> primitiveType expr_28 DOT CLASS .)
    OP_DEC          reduce using rule 241 (primary -> primitiveType expr_28 DOT CLASS .)



state 402

    (474) expr_85 -> expr_85 expr_84 multiplicativeExpression .

    PLUS            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    DASH            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    LESS            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    MORE            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    OP_EQ           reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    OP_NE           reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    AND             reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    CARET           reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    VERTICAL        reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    OP_LAND         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    OP_LOR          reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    QUES            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    RPAREN          reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    COMMA           reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    BRPAREN         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    EQUALS          reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_ADD         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_SUB         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_MUL         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_DIV         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_AND         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_OR          reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_XOR         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    ASS_MOD         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    COLON           reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    FRPAREN         reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)
    SEMI            reduce using rule 474 (expr_85 -> expr_85 expr_84 multiplicativeExpression .)



state 403

    (466) expr_82 -> expr_82 relationalOp shiftExpression .

    LESS            reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    MORE            reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    OP_EQ           reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    OP_NE           reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    AND             reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    CARET           reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    VERTICAL        reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    OP_LAND         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    OP_LOR          reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    QUES            reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    RPAREN          reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    COMMA           reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    BRPAREN         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    EQUALS          reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_AND         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_OR          reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    COLON           reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    FRPAREN         reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)
    SEMI            reduce using rule 466 (expr_82 -> expr_82 relationalOp shiftExpression .)



state 404

    (480) expr_87 -> expr_87 expr_86 unaryExpression .

    MULT            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    SLASH           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    PERCENT         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    PLUS            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    DASH            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    LESS            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    MORE            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    INSTANCEOF      reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    OP_EQ           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    OP_NE           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    AND             reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    CARET           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    VERTICAL        reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    OP_LAND         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    OP_LOR          reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    QUES            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    RPAREN          reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    COMMA           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    BRPAREN         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    EQUALS          reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_ADD         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_SUB         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_MUL         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_DIV         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_AND         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_OR          reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_XOR         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    ASS_MOD         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    COLON           reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    FRPAREN         reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)
    SEMI            reduce using rule 480 (expr_87 -> expr_87 expr_86 unaryExpression .)



state 405

    (202) assignmentOperator -> LESS LESS . EQUALS

    EQUALS          shift and go to state 480



state 406

    (439) expr_72 -> assignmentOperator expression .

    EQUALS          reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_ADD         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_SUB         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_MUL         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_DIV         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_AND         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_OR          reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_XOR         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    ASS_MOD         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    LESS            reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    MORE            reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    RPAREN          reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    COLON           reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    FRPAREN         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    COMMA           reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    BRPAREN         reduce using rule 439 (expr_72 -> assignmentOperator expression .)
    SEMI            reduce using rule 439 (expr_72 -> assignmentOperator expression .)



state 407

    (203) assignmentOperator -> MORE MORE . MORE EQUALS
    (204) assignmentOperator -> MORE MORE . EQUALS

    MORE            shift and go to state 482
    EQUALS          shift and go to state 481



state 408

    (234) castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .

    MULT            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    AND             reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 234 (castExpression -> LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus .)



state 409

    (233) castExpression -> LPAREN primitiveType RPAREN unaryExpression .

    MULT            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SLASH           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PERCENT         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PLUS            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    DASH            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    LESS            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    MORE            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    INSTANCEOF      reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_EQ           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_NE           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    AND             reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    CARET           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    VERTICAL        reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LAND         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LOR          reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    QUES            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    RPAREN          reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COMMA           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    BRPAREN         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    EQUALS          reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_ADD         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_SUB         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MUL         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_DIV         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_AND         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_OR          reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_XOR         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MOD         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COLON           reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    FRPAREN         reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SEMI            reduce using rule 233 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)



state 410

    (267) arguments -> LPAREN expr_95 RPAREN .

    DOT             reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    FLPAREN         reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    OP_INC          reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    OP_DEC          reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    BLPAREN         reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    SEMI            reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    COMMA           reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)
    BRPAREN         reduce using rule 267 (arguments -> LPAREN expr_95 RPAREN .)



state 411

    (436) expr_71 -> COMMA . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 483

state 412

    (189) expressionList -> expression expr_71 .
    (437) expr_71 -> expr_71 . COMMA expression

    RPAREN          reduce using rule 189 (expressionList -> expression expr_71 .)
    SEMI            reduce using rule 189 (expressionList -> expression expr_71 .)
    COMMA           shift and go to state 484



state 413

    (438) expr_71 -> empty .

    COMMA           reduce using rule 438 (expr_71 -> empty .)
    RPAREN          reduce using rule 438 (expr_71 -> empty .)
    SEMI            reduce using rule 438 (expr_71 -> empty .)



state 414

    (266) superSuffix -> DOT Identifier expr_20 .

    OP_INC          reduce using rule 266 (superSuffix -> DOT Identifier expr_20 .)
    OP_DEC          reduce using rule 266 (superSuffix -> DOT Identifier expr_20 .)
    DOT             reduce using rule 266 (superSuffix -> DOT Identifier expr_20 .)
    FLPAREN         reduce using rule 266 (superSuffix -> DOT Identifier expr_20 .)



state 415

    (26) enumConstants -> enumConstant . expr_18
    (310) expr_18 -> . COMMA enumConstant
    (311) expr_18 -> . expr_18 COMMA enumConstant
    (312) expr_18 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 485
    SEMI            reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_18                        shift and go to state 486
    empty                          shift and go to state 487

state 416

    (313) expr_19 -> annotations .

    Identifier      reduce using rule 313 (expr_19 -> annotations .)



state 417

    (304) expr_15 -> enumConstants .

    COMMA           reduce using rule 304 (expr_15 -> enumConstants .)
    SEMI            reduce using rule 304 (expr_15 -> enumConstants .)
    BRPAREN         reduce using rule 304 (expr_15 -> enumConstants .)



state 418

    (27) enumConstant -> expr_19 . Identifier expr_20 expr_21

    Identifier      shift and go to state 488



state 419

    (25) enumBody -> BLPAREN expr_15 . expr_16 expr_17 BRPAREN
    (306) expr_16 -> . COMMA
    (307) expr_16 -> . empty
    (502) empty -> .

    COMMA           shift and go to state 489
    SEMI            reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)


    expr_16                        shift and go to state 490
    empty                          shift and go to state 491

state 420

    (305) expr_15 -> empty .
    (314) expr_19 -> empty .

    COMMA           reduce using rule 305 (expr_15 -> empty .)
    SEMI            reduce using rule 305 (expr_15 -> empty .)
    BRPAREN         reduce using rule 305 (expr_15 -> empty .)
    Identifier      reduce using rule 314 (expr_19 -> empty .)



state 421

    (296) expr_12 -> COMMA . typeParameter
    (22) typeParameter -> . Identifier expr_13

    Identifier      shift and go to state 341


    typeParameter                  shift and go to state 492

state 422

    (21) typeParameters -> LESS typeParameter expr_12 . MORE
    (297) expr_12 -> expr_12 . COMMA typeParameter

    MORE            shift and go to state 493
    COMMA           shift and go to state 494



state 423

    (298) expr_12 -> empty .

    MORE            reduce using rule 298 (expr_12 -> empty .)
    COMMA           reduce using rule 298 (expr_12 -> empty .)



state 424

    (299) expr_13 -> EXTENDS . typeBound
    (23) typeBound -> . type expr_14
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    typeBound                      shift and go to state 495
    type                           shift and go to state 496

state 425

    (300) expr_13 -> empty .

    COMMA           reduce using rule 300 (expr_13 -> empty .)
    MORE            reduce using rule 300 (expr_13 -> empty .)



state 426

    (22) typeParameter -> Identifier expr_13 .

    COMMA           reduce using rule 22 (typeParameter -> Identifier expr_13 .)
    MORE            reduce using rule 22 (typeParameter -> Identifier expr_13 .)



state 427

    (322) expr_23 -> EXTENDS typeList .

    BLPAREN         reduce using rule 322 (expr_23 -> EXTENDS typeList .)



state 428

    (31) normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .

    BRPAREN         reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    SEMI            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    PUBLIC          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    PROTECTED       reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    PRIVATE         reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    STATIC          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    ABSTRACT        reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    FINAL           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NATIVE          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    SYNCHRONIZED    reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    TRANSIENT       reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    VOLATILE        reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    STRICTFP        reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    AT              reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    VOID            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    LESS            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    INTERFACE       reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    CLASS           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    ENUM            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    Identifier      reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    BOOLEAN         reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    CHAR            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    BYTE            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    SHORT           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    INT             reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    LONG            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    FLOAT           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    DOUBLE          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    BLPAREN         reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    $end            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    ASSERT          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    IF              reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    FOR             reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    WHILE           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    DO              reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    TRY             reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    SWITCH          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    RETURN          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    THROW           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    BREAK           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    CONTINUE        reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    PLUS            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    DASH            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    OP_INC          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    OP_DEC          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    TILDE           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    EXCLAMATION     reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    LPAREN          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    THIS            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    SUPER           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NEW             reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    CharacterLiteral reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    StringLiteral   reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NULL            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NUMBER          reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    HEX_NUMBER      reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    LONG_NUMBER     reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NON_INTEGER_1   reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NON_INTEGER_2   reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    NON_INTEGER_3   reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    TRUE            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    FALSE           reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    CASE            reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)
    DEFAULT         reduce using rule 31 (normalInterfaceDeclaration -> INTERFACE Identifier expr_9 expr_23 interfaceBody .)



state 429

    (34) interfaceBody -> BLPAREN . expr_25 BRPAREN
    (327) expr_25 -> . interfaceBodyDeclaration
    (328) expr_25 -> . expr_25 interfaceBodyDeclaration
    (329) expr_25 -> . empty
    (50) interfaceBodyDeclaration -> . modifiers interfaceMemberDecl
    (51) interfaceBodyDeclaration -> . SEMI
    (502) empty -> .
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 498
    BRPAREN         reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    STATIC          shift and go to state 435
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifiers                      shift and go to state 501
    expr_8                         shift and go to state 440
    interfaceBodyDeclaration       shift and go to state 500
    modifier                       shift and go to state 448
    expr_25                        shift and go to state 497
    annotation                     shift and go to state 443
    empty                          shift and go to state 499

state 430

    (292) expr_10 -> EXTENDS type .

    IMPLEMENTS      reduce using rule 292 (expr_10 -> EXTENDS type .)
    BLPAREN         reduce using rule 292 (expr_10 -> EXTENDS type .)



state 431

    (20) normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 . classBody
    (33) classBody -> . BLPAREN expr_22 BRPAREN

    BLPAREN         shift and go to state 397


    classBody                      shift and go to state 502

state 432

    (83) modifier -> SYNCHRONIZED .

    PUBLIC          reduce using rule 83 (modifier -> SYNCHRONIZED .)
    PROTECTED       reduce using rule 83 (modifier -> SYNCHRONIZED .)
    PRIVATE         reduce using rule 83 (modifier -> SYNCHRONIZED .)
    STATIC          reduce using rule 83 (modifier -> SYNCHRONIZED .)
    ABSTRACT        reduce using rule 83 (modifier -> SYNCHRONIZED .)
    FINAL           reduce using rule 83 (modifier -> SYNCHRONIZED .)
    NATIVE          reduce using rule 83 (modifier -> SYNCHRONIZED .)
    SYNCHRONIZED    reduce using rule 83 (modifier -> SYNCHRONIZED .)
    TRANSIENT       reduce using rule 83 (modifier -> SYNCHRONIZED .)
    VOLATILE        reduce using rule 83 (modifier -> SYNCHRONIZED .)
    STRICTFP        reduce using rule 83 (modifier -> SYNCHRONIZED .)
    AT              reduce using rule 83 (modifier -> SYNCHRONIZED .)
    VOID            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    LESS            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 83 (modifier -> SYNCHRONIZED .)
    CLASS           reduce using rule 83 (modifier -> SYNCHRONIZED .)
    ENUM            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    Identifier      reduce using rule 83 (modifier -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 83 (modifier -> SYNCHRONIZED .)
    CHAR            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    BYTE            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    SHORT           reduce using rule 83 (modifier -> SYNCHRONIZED .)
    INT             reduce using rule 83 (modifier -> SYNCHRONIZED .)
    LONG            reduce using rule 83 (modifier -> SYNCHRONIZED .)
    FLOAT           reduce using rule 83 (modifier -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 83 (modifier -> SYNCHRONIZED .)



state 433

    (80) modifier -> ABSTRACT .

    PUBLIC          reduce using rule 80 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 80 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 80 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 80 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 80 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 80 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 80 (modifier -> ABSTRACT .)
    SYNCHRONIZED    reduce using rule 80 (modifier -> ABSTRACT .)
    TRANSIENT       reduce using rule 80 (modifier -> ABSTRACT .)
    VOLATILE        reduce using rule 80 (modifier -> ABSTRACT .)
    STRICTFP        reduce using rule 80 (modifier -> ABSTRACT .)
    AT              reduce using rule 80 (modifier -> ABSTRACT .)
    VOID            reduce using rule 80 (modifier -> ABSTRACT .)
    LESS            reduce using rule 80 (modifier -> ABSTRACT .)
    INTERFACE       reduce using rule 80 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 80 (modifier -> ABSTRACT .)
    ENUM            reduce using rule 80 (modifier -> ABSTRACT .)
    Identifier      reduce using rule 80 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 80 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 80 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 80 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 80 (modifier -> ABSTRACT .)
    INT             reduce using rule 80 (modifier -> ABSTRACT .)
    LONG            reduce using rule 80 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 80 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 80 (modifier -> ABSTRACT .)



state 434

    (77) modifier -> PROTECTED .

    PUBLIC          reduce using rule 77 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 77 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 77 (modifier -> PROTECTED .)
    STATIC          reduce using rule 77 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 77 (modifier -> PROTECTED .)
    FINAL           reduce using rule 77 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 77 (modifier -> PROTECTED .)
    SYNCHRONIZED    reduce using rule 77 (modifier -> PROTECTED .)
    TRANSIENT       reduce using rule 77 (modifier -> PROTECTED .)
    VOLATILE        reduce using rule 77 (modifier -> PROTECTED .)
    STRICTFP        reduce using rule 77 (modifier -> PROTECTED .)
    AT              reduce using rule 77 (modifier -> PROTECTED .)
    VOID            reduce using rule 77 (modifier -> PROTECTED .)
    LESS            reduce using rule 77 (modifier -> PROTECTED .)
    INTERFACE       reduce using rule 77 (modifier -> PROTECTED .)
    CLASS           reduce using rule 77 (modifier -> PROTECTED .)
    ENUM            reduce using rule 77 (modifier -> PROTECTED .)
    Identifier      reduce using rule 77 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 77 (modifier -> PROTECTED .)
    CHAR            reduce using rule 77 (modifier -> PROTECTED .)
    BYTE            reduce using rule 77 (modifier -> PROTECTED .)
    SHORT           reduce using rule 77 (modifier -> PROTECTED .)
    INT             reduce using rule 77 (modifier -> PROTECTED .)
    LONG            reduce using rule 77 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 77 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 77 (modifier -> PROTECTED .)



state 435

    (79) modifier -> STATIC .

    PUBLIC          reduce using rule 79 (modifier -> STATIC .)
    PROTECTED       reduce using rule 79 (modifier -> STATIC .)
    PRIVATE         reduce using rule 79 (modifier -> STATIC .)
    STATIC          reduce using rule 79 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 79 (modifier -> STATIC .)
    FINAL           reduce using rule 79 (modifier -> STATIC .)
    NATIVE          reduce using rule 79 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 79 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 79 (modifier -> STATIC .)
    VOLATILE        reduce using rule 79 (modifier -> STATIC .)
    STRICTFP        reduce using rule 79 (modifier -> STATIC .)
    AT              reduce using rule 79 (modifier -> STATIC .)
    VOID            reduce using rule 79 (modifier -> STATIC .)
    LESS            reduce using rule 79 (modifier -> STATIC .)
    INTERFACE       reduce using rule 79 (modifier -> STATIC .)
    CLASS           reduce using rule 79 (modifier -> STATIC .)
    ENUM            reduce using rule 79 (modifier -> STATIC .)
    Identifier      reduce using rule 79 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 79 (modifier -> STATIC .)
    CHAR            reduce using rule 79 (modifier -> STATIC .)
    BYTE            reduce using rule 79 (modifier -> STATIC .)
    SHORT           reduce using rule 79 (modifier -> STATIC .)
    INT             reduce using rule 79 (modifier -> STATIC .)
    LONG            reduce using rule 79 (modifier -> STATIC .)
    FLOAT           reduce using rule 79 (modifier -> STATIC .)
    DOUBLE          reduce using rule 79 (modifier -> STATIC .)



state 436

    (81) modifier -> FINAL .

    PUBLIC          reduce using rule 81 (modifier -> FINAL .)
    PROTECTED       reduce using rule 81 (modifier -> FINAL .)
    PRIVATE         reduce using rule 81 (modifier -> FINAL .)
    STATIC          reduce using rule 81 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 81 (modifier -> FINAL .)
    FINAL           reduce using rule 81 (modifier -> FINAL .)
    NATIVE          reduce using rule 81 (modifier -> FINAL .)
    SYNCHRONIZED    reduce using rule 81 (modifier -> FINAL .)
    TRANSIENT       reduce using rule 81 (modifier -> FINAL .)
    VOLATILE        reduce using rule 81 (modifier -> FINAL .)
    STRICTFP        reduce using rule 81 (modifier -> FINAL .)
    AT              reduce using rule 81 (modifier -> FINAL .)
    VOID            reduce using rule 81 (modifier -> FINAL .)
    LESS            reduce using rule 81 (modifier -> FINAL .)
    INTERFACE       reduce using rule 81 (modifier -> FINAL .)
    CLASS           reduce using rule 81 (modifier -> FINAL .)
    ENUM            reduce using rule 81 (modifier -> FINAL .)
    Identifier      reduce using rule 81 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 81 (modifier -> FINAL .)
    CHAR            reduce using rule 81 (modifier -> FINAL .)
    BYTE            reduce using rule 81 (modifier -> FINAL .)
    SHORT           reduce using rule 81 (modifier -> FINAL .)
    INT             reduce using rule 81 (modifier -> FINAL .)
    LONG            reduce using rule 81 (modifier -> FINAL .)
    FLOAT           reduce using rule 81 (modifier -> FINAL .)
    DOUBLE          reduce using rule 81 (modifier -> FINAL .)



state 437

    (82) modifier -> NATIVE .

    PUBLIC          reduce using rule 82 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 82 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 82 (modifier -> NATIVE .)
    STATIC          reduce using rule 82 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 82 (modifier -> NATIVE .)
    FINAL           reduce using rule 82 (modifier -> NATIVE .)
    NATIVE          reduce using rule 82 (modifier -> NATIVE .)
    SYNCHRONIZED    reduce using rule 82 (modifier -> NATIVE .)
    TRANSIENT       reduce using rule 82 (modifier -> NATIVE .)
    VOLATILE        reduce using rule 82 (modifier -> NATIVE .)
    STRICTFP        reduce using rule 82 (modifier -> NATIVE .)
    AT              reduce using rule 82 (modifier -> NATIVE .)
    VOID            reduce using rule 82 (modifier -> NATIVE .)
    LESS            reduce using rule 82 (modifier -> NATIVE .)
    INTERFACE       reduce using rule 82 (modifier -> NATIVE .)
    CLASS           reduce using rule 82 (modifier -> NATIVE .)
    ENUM            reduce using rule 82 (modifier -> NATIVE .)
    Identifier      reduce using rule 82 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 82 (modifier -> NATIVE .)
    CHAR            reduce using rule 82 (modifier -> NATIVE .)
    BYTE            reduce using rule 82 (modifier -> NATIVE .)
    SHORT           reduce using rule 82 (modifier -> NATIVE .)
    INT             reduce using rule 82 (modifier -> NATIVE .)
    LONG            reduce using rule 82 (modifier -> NATIVE .)
    FLOAT           reduce using rule 82 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 82 (modifier -> NATIVE .)



state 438

    (78) modifier -> PRIVATE .

    PUBLIC          reduce using rule 78 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 78 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 78 (modifier -> PRIVATE .)
    STATIC          reduce using rule 78 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 78 (modifier -> PRIVATE .)
    FINAL           reduce using rule 78 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 78 (modifier -> PRIVATE .)
    SYNCHRONIZED    reduce using rule 78 (modifier -> PRIVATE .)
    TRANSIENT       reduce using rule 78 (modifier -> PRIVATE .)
    VOLATILE        reduce using rule 78 (modifier -> PRIVATE .)
    STRICTFP        reduce using rule 78 (modifier -> PRIVATE .)
    AT              reduce using rule 78 (modifier -> PRIVATE .)
    VOID            reduce using rule 78 (modifier -> PRIVATE .)
    LESS            reduce using rule 78 (modifier -> PRIVATE .)
    INTERFACE       reduce using rule 78 (modifier -> PRIVATE .)
    CLASS           reduce using rule 78 (modifier -> PRIVATE .)
    ENUM            reduce using rule 78 (modifier -> PRIVATE .)
    Identifier      reduce using rule 78 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 78 (modifier -> PRIVATE .)
    CHAR            reduce using rule 78 (modifier -> PRIVATE .)
    BYTE            reduce using rule 78 (modifier -> PRIVATE .)
    SHORT           reduce using rule 78 (modifier -> PRIVATE .)
    INT             reduce using rule 78 (modifier -> PRIVATE .)
    LONG            reduce using rule 78 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 78 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 78 (modifier -> PRIVATE .)



state 439

    (86) modifier -> STRICTFP .

    PUBLIC          reduce using rule 86 (modifier -> STRICTFP .)
    PROTECTED       reduce using rule 86 (modifier -> STRICTFP .)
    PRIVATE         reduce using rule 86 (modifier -> STRICTFP .)
    STATIC          reduce using rule 86 (modifier -> STRICTFP .)
    ABSTRACT        reduce using rule 86 (modifier -> STRICTFP .)
    FINAL           reduce using rule 86 (modifier -> STRICTFP .)
    NATIVE          reduce using rule 86 (modifier -> STRICTFP .)
    SYNCHRONIZED    reduce using rule 86 (modifier -> STRICTFP .)
    TRANSIENT       reduce using rule 86 (modifier -> STRICTFP .)
    VOLATILE        reduce using rule 86 (modifier -> STRICTFP .)
    STRICTFP        reduce using rule 86 (modifier -> STRICTFP .)
    AT              reduce using rule 86 (modifier -> STRICTFP .)
    VOID            reduce using rule 86 (modifier -> STRICTFP .)
    LESS            reduce using rule 86 (modifier -> STRICTFP .)
    INTERFACE       reduce using rule 86 (modifier -> STRICTFP .)
    CLASS           reduce using rule 86 (modifier -> STRICTFP .)
    ENUM            reduce using rule 86 (modifier -> STRICTFP .)
    Identifier      reduce using rule 86 (modifier -> STRICTFP .)
    BOOLEAN         reduce using rule 86 (modifier -> STRICTFP .)
    CHAR            reduce using rule 86 (modifier -> STRICTFP .)
    BYTE            reduce using rule 86 (modifier -> STRICTFP .)
    SHORT           reduce using rule 86 (modifier -> STRICTFP .)
    INT             reduce using rule 86 (modifier -> STRICTFP .)
    LONG            reduce using rule 86 (modifier -> STRICTFP .)
    FLOAT           reduce using rule 86 (modifier -> STRICTFP .)
    DOUBLE          reduce using rule 86 (modifier -> STRICTFP .)



state 440

    (17) modifiers -> expr_8 .
    (288) expr_8 -> expr_8 . modifier
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for AT resolved as shift.
    VOID            reduce using rule 17 (modifiers -> expr_8 .)
    Identifier      reduce using rule 17 (modifiers -> expr_8 .)
    LESS            reduce using rule 17 (modifiers -> expr_8 .)
    INTERFACE       reduce using rule 17 (modifiers -> expr_8 .)
    CLASS           reduce using rule 17 (modifiers -> expr_8 .)
    ENUM            reduce using rule 17 (modifiers -> expr_8 .)
    BOOLEAN         reduce using rule 17 (modifiers -> expr_8 .)
    CHAR            reduce using rule 17 (modifiers -> expr_8 .)
    BYTE            reduce using rule 17 (modifiers -> expr_8 .)
    SHORT           reduce using rule 17 (modifiers -> expr_8 .)
    INT             reduce using rule 17 (modifiers -> expr_8 .)
    LONG            reduce using rule 17 (modifiers -> expr_8 .)
    FLOAT           reduce using rule 17 (modifiers -> expr_8 .)
    DOUBLE          reduce using rule 17 (modifiers -> expr_8 .)
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    STATIC          shift and go to state 435
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! AT              [ reduce using rule 17 (modifiers -> expr_8 .) ]

    modifier                       shift and go to state 503
    annotation                     shift and go to state 443

state 441

    (403) expr_56 -> empty .
    (289) expr_8 -> empty .

  ! reduce/reduce conflict for PUBLIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PROTECTED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PRIVATE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STATIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ABSTRACT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for NATIVE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SYNCHRONIZED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for TRANSIENT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for VOLATILE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STRICTFP resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CLASS resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INTERFACE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ENUM resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for Identifier resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BOOLEAN resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CHAR resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BYTE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SHORT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for LONG resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FLOAT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for DOUBLE resolved using rule 289 (expr_8 -> empty .).
    BRPAREN         reduce using rule 403 (expr_56 -> empty .)
    PUBLIC          reduce using rule 289 (expr_8 -> empty .)
    PROTECTED       reduce using rule 289 (expr_8 -> empty .)
    PRIVATE         reduce using rule 289 (expr_8 -> empty .)
    STATIC          reduce using rule 289 (expr_8 -> empty .)
    ABSTRACT        reduce using rule 289 (expr_8 -> empty .)
    FINAL           reduce using rule 289 (expr_8 -> empty .)
    NATIVE          reduce using rule 289 (expr_8 -> empty .)
    SYNCHRONIZED    reduce using rule 289 (expr_8 -> empty .)
    TRANSIENT       reduce using rule 289 (expr_8 -> empty .)
    VOLATILE        reduce using rule 289 (expr_8 -> empty .)
    STRICTFP        reduce using rule 289 (expr_8 -> empty .)
    AT              reduce using rule 289 (expr_8 -> empty .)
    CLASS           reduce using rule 289 (expr_8 -> empty .)
    INTERFACE       reduce using rule 289 (expr_8 -> empty .)
    ENUM            reduce using rule 289 (expr_8 -> empty .)
    Identifier      reduce using rule 289 (expr_8 -> empty .)
    BOOLEAN         reduce using rule 289 (expr_8 -> empty .)
    CHAR            reduce using rule 289 (expr_8 -> empty .)
    BYTE            reduce using rule 289 (expr_8 -> empty .)
    SHORT           reduce using rule 289 (expr_8 -> empty .)
    INT             reduce using rule 289 (expr_8 -> empty .)
    LONG            reduce using rule 289 (expr_8 -> empty .)
    FLOAT           reduce using rule 289 (expr_8 -> empty .)
    DOUBLE          reduce using rule 289 (expr_8 -> empty .)

  ! PUBLIC          [ reduce using rule 403 (expr_56 -> empty .) ]
  ! PROTECTED       [ reduce using rule 403 (expr_56 -> empty .) ]
  ! PRIVATE         [ reduce using rule 403 (expr_56 -> empty .) ]
  ! STATIC          [ reduce using rule 403 (expr_56 -> empty .) ]
  ! ABSTRACT        [ reduce using rule 403 (expr_56 -> empty .) ]
  ! FINAL           [ reduce using rule 403 (expr_56 -> empty .) ]
  ! NATIVE          [ reduce using rule 403 (expr_56 -> empty .) ]
  ! SYNCHRONIZED    [ reduce using rule 403 (expr_56 -> empty .) ]
  ! TRANSIENT       [ reduce using rule 403 (expr_56 -> empty .) ]
  ! VOLATILE        [ reduce using rule 403 (expr_56 -> empty .) ]
  ! STRICTFP        [ reduce using rule 403 (expr_56 -> empty .) ]
  ! AT              [ reduce using rule 403 (expr_56 -> empty .) ]
  ! CLASS           [ reduce using rule 403 (expr_56 -> empty .) ]
  ! INTERFACE       [ reduce using rule 403 (expr_56 -> empty .) ]
  ! ENUM            [ reduce using rule 403 (expr_56 -> empty .) ]
  ! Identifier      [ reduce using rule 403 (expr_56 -> empty .) ]
  ! BOOLEAN         [ reduce using rule 403 (expr_56 -> empty .) ]
  ! CHAR            [ reduce using rule 403 (expr_56 -> empty .) ]
  ! BYTE            [ reduce using rule 403 (expr_56 -> empty .) ]
  ! SHORT           [ reduce using rule 403 (expr_56 -> empty .) ]
  ! INT             [ reduce using rule 403 (expr_56 -> empty .) ]
  ! LONG            [ reduce using rule 403 (expr_56 -> empty .) ]
  ! FLOAT           [ reduce using rule 403 (expr_56 -> empty .) ]
  ! DOUBLE          [ reduce using rule 403 (expr_56 -> empty .) ]


state 442

    (138) annotationTypeBody -> BLPAREN expr_56 . BRPAREN
    (402) expr_56 -> expr_56 . annotationTypeElementDeclaration
    (139) annotationTypeElementDeclaration -> . modifiers annotationTypeElementRest
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         shift and go to state 505
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    STATIC          shift and go to state 435
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifiers                      shift and go to state 445
    annotationTypeElementDeclaration shift and go to state 506
    expr_8                         shift and go to state 440
    modifier                       shift and go to state 448
    annotation                     shift and go to state 443
    empty                          shift and go to state 504

state 443

    (75) modifier -> annotation .

    PUBLIC          reduce using rule 75 (modifier -> annotation .)
    PROTECTED       reduce using rule 75 (modifier -> annotation .)
    PRIVATE         reduce using rule 75 (modifier -> annotation .)
    STATIC          reduce using rule 75 (modifier -> annotation .)
    ABSTRACT        reduce using rule 75 (modifier -> annotation .)
    FINAL           reduce using rule 75 (modifier -> annotation .)
    NATIVE          reduce using rule 75 (modifier -> annotation .)
    SYNCHRONIZED    reduce using rule 75 (modifier -> annotation .)
    TRANSIENT       reduce using rule 75 (modifier -> annotation .)
    VOLATILE        reduce using rule 75 (modifier -> annotation .)
    STRICTFP        reduce using rule 75 (modifier -> annotation .)
    AT              reduce using rule 75 (modifier -> annotation .)
    VOID            reduce using rule 75 (modifier -> annotation .)
    LESS            reduce using rule 75 (modifier -> annotation .)
    INTERFACE       reduce using rule 75 (modifier -> annotation .)
    CLASS           reduce using rule 75 (modifier -> annotation .)
    ENUM            reduce using rule 75 (modifier -> annotation .)
    Identifier      reduce using rule 75 (modifier -> annotation .)
    BOOLEAN         reduce using rule 75 (modifier -> annotation .)
    CHAR            reduce using rule 75 (modifier -> annotation .)
    BYTE            reduce using rule 75 (modifier -> annotation .)
    SHORT           reduce using rule 75 (modifier -> annotation .)
    INT             reduce using rule 75 (modifier -> annotation .)
    LONG            reduce using rule 75 (modifier -> annotation .)
    FLOAT           reduce using rule 75 (modifier -> annotation .)
    DOUBLE          reduce using rule 75 (modifier -> annotation .)



state 444

    (401) expr_56 -> annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    STATIC          reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    FINAL           reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    AT              reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    CLASS           reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    INTERFACE       reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    ENUM            reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    Identifier      reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    BOOLEAN         reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    CHAR            reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    BYTE            reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    SHORT           reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    INT             reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    LONG            reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    FLOAT           reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)
    DOUBLE          reduce using rule 401 (expr_56 -> annotationTypeElementDeclaration .)



state 445

    (139) annotationTypeElementDeclaration -> modifiers . annotationTypeElementRest
    (140) annotationTypeElementRest -> . type annotationMethodOrConstantRest SEMI
    (141) annotationTypeElementRest -> . normalClassDeclaration expr_57
    (142) annotationTypeElementRest -> . normalInterfaceDeclaration expr_57
    (143) annotationTypeElementRest -> . enumDeclaration expr_57
    (144) annotationTypeElementRest -> . annotationTypeDeclaration expr_57
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (20) normalClassDeclaration -> . CLASS Identifier expr_9 expr_10 expr_11 classBody
    (31) normalInterfaceDeclaration -> . INTERFACE Identifier expr_9 expr_23 interfaceBody
    (24) enumDeclaration -> . ENUM Identifier expr_11 enumBody
    (137) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    CLASS           shift and go to state 63
    INTERFACE       shift and go to state 59
    ENUM            shift and go to state 56
    AT              shift and go to state 64
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    normalInterfaceDeclaration     shift and go to state 507
    normalClassDeclaration         shift and go to state 508
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 509
    enumDeclaration                shift and go to state 510
    annotationTypeElementRest      shift and go to state 511
    primitiveType                  shift and go to state 244
    annotationTypeDeclaration      shift and go to state 512

state 446

    (84) modifier -> TRANSIENT .

    PUBLIC          reduce using rule 84 (modifier -> TRANSIENT .)
    PROTECTED       reduce using rule 84 (modifier -> TRANSIENT .)
    PRIVATE         reduce using rule 84 (modifier -> TRANSIENT .)
    STATIC          reduce using rule 84 (modifier -> TRANSIENT .)
    ABSTRACT        reduce using rule 84 (modifier -> TRANSIENT .)
    FINAL           reduce using rule 84 (modifier -> TRANSIENT .)
    NATIVE          reduce using rule 84 (modifier -> TRANSIENT .)
    SYNCHRONIZED    reduce using rule 84 (modifier -> TRANSIENT .)
    TRANSIENT       reduce using rule 84 (modifier -> TRANSIENT .)
    VOLATILE        reduce using rule 84 (modifier -> TRANSIENT .)
    STRICTFP        reduce using rule 84 (modifier -> TRANSIENT .)
    AT              reduce using rule 84 (modifier -> TRANSIENT .)
    VOID            reduce using rule 84 (modifier -> TRANSIENT .)
    LESS            reduce using rule 84 (modifier -> TRANSIENT .)
    INTERFACE       reduce using rule 84 (modifier -> TRANSIENT .)
    CLASS           reduce using rule 84 (modifier -> TRANSIENT .)
    ENUM            reduce using rule 84 (modifier -> TRANSIENT .)
    Identifier      reduce using rule 84 (modifier -> TRANSIENT .)
    BOOLEAN         reduce using rule 84 (modifier -> TRANSIENT .)
    CHAR            reduce using rule 84 (modifier -> TRANSIENT .)
    BYTE            reduce using rule 84 (modifier -> TRANSIENT .)
    SHORT           reduce using rule 84 (modifier -> TRANSIENT .)
    INT             reduce using rule 84 (modifier -> TRANSIENT .)
    LONG            reduce using rule 84 (modifier -> TRANSIENT .)
    FLOAT           reduce using rule 84 (modifier -> TRANSIENT .)
    DOUBLE          reduce using rule 84 (modifier -> TRANSIENT .)



state 447

    (85) modifier -> VOLATILE .

    PUBLIC          reduce using rule 85 (modifier -> VOLATILE .)
    PROTECTED       reduce using rule 85 (modifier -> VOLATILE .)
    PRIVATE         reduce using rule 85 (modifier -> VOLATILE .)
    STATIC          reduce using rule 85 (modifier -> VOLATILE .)
    ABSTRACT        reduce using rule 85 (modifier -> VOLATILE .)
    FINAL           reduce using rule 85 (modifier -> VOLATILE .)
    NATIVE          reduce using rule 85 (modifier -> VOLATILE .)
    SYNCHRONIZED    reduce using rule 85 (modifier -> VOLATILE .)
    TRANSIENT       reduce using rule 85 (modifier -> VOLATILE .)
    VOLATILE        reduce using rule 85 (modifier -> VOLATILE .)
    STRICTFP        reduce using rule 85 (modifier -> VOLATILE .)
    AT              reduce using rule 85 (modifier -> VOLATILE .)
    VOID            reduce using rule 85 (modifier -> VOLATILE .)
    LESS            reduce using rule 85 (modifier -> VOLATILE .)
    INTERFACE       reduce using rule 85 (modifier -> VOLATILE .)
    CLASS           reduce using rule 85 (modifier -> VOLATILE .)
    ENUM            reduce using rule 85 (modifier -> VOLATILE .)
    Identifier      reduce using rule 85 (modifier -> VOLATILE .)
    BOOLEAN         reduce using rule 85 (modifier -> VOLATILE .)
    CHAR            reduce using rule 85 (modifier -> VOLATILE .)
    BYTE            reduce using rule 85 (modifier -> VOLATILE .)
    SHORT           reduce using rule 85 (modifier -> VOLATILE .)
    INT             reduce using rule 85 (modifier -> VOLATILE .)
    LONG            reduce using rule 85 (modifier -> VOLATILE .)
    FLOAT           reduce using rule 85 (modifier -> VOLATILE .)
    DOUBLE          reduce using rule 85 (modifier -> VOLATILE .)



state 448

    (287) expr_8 -> modifier .

    PUBLIC          reduce using rule 287 (expr_8 -> modifier .)
    PROTECTED       reduce using rule 287 (expr_8 -> modifier .)
    PRIVATE         reduce using rule 287 (expr_8 -> modifier .)
    STATIC          reduce using rule 287 (expr_8 -> modifier .)
    ABSTRACT        reduce using rule 287 (expr_8 -> modifier .)
    FINAL           reduce using rule 287 (expr_8 -> modifier .)
    NATIVE          reduce using rule 287 (expr_8 -> modifier .)
    SYNCHRONIZED    reduce using rule 287 (expr_8 -> modifier .)
    TRANSIENT       reduce using rule 287 (expr_8 -> modifier .)
    VOLATILE        reduce using rule 287 (expr_8 -> modifier .)
    STRICTFP        reduce using rule 287 (expr_8 -> modifier .)
    AT              reduce using rule 287 (expr_8 -> modifier .)
    CLASS           reduce using rule 287 (expr_8 -> modifier .)
    INTERFACE       reduce using rule 287 (expr_8 -> modifier .)
    ENUM            reduce using rule 287 (expr_8 -> modifier .)
    Identifier      reduce using rule 287 (expr_8 -> modifier .)
    BOOLEAN         reduce using rule 287 (expr_8 -> modifier .)
    CHAR            reduce using rule 287 (expr_8 -> modifier .)
    BYTE            reduce using rule 287 (expr_8 -> modifier .)
    SHORT           reduce using rule 287 (expr_8 -> modifier .)
    INT             reduce using rule 287 (expr_8 -> modifier .)
    LONG            reduce using rule 287 (expr_8 -> modifier .)
    FLOAT           reduce using rule 287 (expr_8 -> modifier .)
    DOUBLE          reduce using rule 287 (expr_8 -> modifier .)
    VOID            reduce using rule 287 (expr_8 -> modifier .)
    LESS            reduce using rule 287 (expr_8 -> modifier .)



state 449

    (76) modifier -> PUBLIC .

    PUBLIC          reduce using rule 76 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 76 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 76 (modifier -> PUBLIC .)
    STATIC          reduce using rule 76 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 76 (modifier -> PUBLIC .)
    FINAL           reduce using rule 76 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 76 (modifier -> PUBLIC .)
    SYNCHRONIZED    reduce using rule 76 (modifier -> PUBLIC .)
    TRANSIENT       reduce using rule 76 (modifier -> PUBLIC .)
    VOLATILE        reduce using rule 76 (modifier -> PUBLIC .)
    STRICTFP        reduce using rule 76 (modifier -> PUBLIC .)
    AT              reduce using rule 76 (modifier -> PUBLIC .)
    VOID            reduce using rule 76 (modifier -> PUBLIC .)
    LESS            reduce using rule 76 (modifier -> PUBLIC .)
    INTERFACE       reduce using rule 76 (modifier -> PUBLIC .)
    CLASS           reduce using rule 76 (modifier -> PUBLIC .)
    ENUM            reduce using rule 76 (modifier -> PUBLIC .)
    Identifier      reduce using rule 76 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 76 (modifier -> PUBLIC .)
    CHAR            reduce using rule 76 (modifier -> PUBLIC .)
    BYTE            reduce using rule 76 (modifier -> PUBLIC .)
    SHORT           reduce using rule 76 (modifier -> PUBLIC .)
    INT             reduce using rule 76 (modifier -> PUBLIC .)
    LONG            reduce using rule 76 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 76 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 76 (modifier -> PUBLIC .)



state 450

    (492) expr_92 -> expr_92 FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 513



state 451

    (491) expr_92 -> FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 491 (expr_92 -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 491 (expr_92 -> FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 491 (expr_92 -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 491 (expr_92 -> FLPAREN expression FRPAREN .)



state 452

    (243) identifierSuffix -> expr_28 DOT CLASS .

    DOT             reduce using rule 243 (identifierSuffix -> expr_28 DOT CLASS .)
    FLPAREN         reduce using rule 243 (identifierSuffix -> expr_28 DOT CLASS .)
    OP_INC          reduce using rule 243 (identifierSuffix -> expr_28 DOT CLASS .)
    OP_DEC          reduce using rule 243 (identifierSuffix -> expr_28 DOT CLASS .)



state 453

    (258) explicitGenericInvocation -> nonWildcardTypeArguments Identifier . arguments
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    arguments                      shift and go to state 514

state 454

    (250) identifierSuffix -> DOT NEW innerCreator .

    DOT             reduce using rule 250 (identifierSuffix -> DOT NEW innerCreator .)
    FLPAREN         reduce using rule 250 (identifierSuffix -> DOT NEW innerCreator .)
    OP_INC          reduce using rule 250 (identifierSuffix -> DOT NEW innerCreator .)
    OP_DEC          reduce using rule 250 (identifierSuffix -> DOT NEW innerCreator .)



state 455

    (249) identifierSuffix -> DOT SUPER arguments .

    DOT             reduce using rule 249 (identifierSuffix -> DOT SUPER arguments .)
    FLPAREN         reduce using rule 249 (identifierSuffix -> DOT SUPER arguments .)
    OP_INC          reduce using rule 249 (identifierSuffix -> DOT SUPER arguments .)
    OP_DEC          reduce using rule 249 (identifierSuffix -> DOT SUPER arguments .)



state 456

    (397) expr_54 -> expr_54 COMMA elementValue .

    COMMA           reduce using rule 397 (expr_54 -> expr_54 COMMA elementValue .)
    BRPAREN         reduce using rule 397 (expr_54 -> expr_54 COMMA elementValue .)



state 457

    (441) expr_73 -> QUES expression COLON expression .

    EQUALS          reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_ADD         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_SUB         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_MUL         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_DIV         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_AND         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_OR          reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_XOR         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    ASS_MOD         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    LESS            reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    MORE            reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    RPAREN          reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    COLON           reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    FRPAREN         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    COMMA           reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    BRPAREN         reduce using rule 441 (expr_73 -> QUES expression COLON expression .)
    SEMI            reduce using rule 441 (expr_73 -> QUES expression COLON expression .)



state 458

    (255) innerCreator -> expr_47 Identifier . classCreatorRest
    (257) classCreatorRest -> . arguments expr_21
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    classCreatorRest               shift and go to state 515
    arguments                      shift and go to state 297

state 459

    (324) expr_24 -> COMMA type .

    COMMA           reduce using rule 324 (expr_24 -> COMMA type .)
    MORE            reduce using rule 324 (expr_24 -> COMMA type .)
    BLPAREN         reduce using rule 324 (expr_24 -> COMMA type .)



state 460

    (325) expr_24 -> expr_24 COMMA . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 516

state 461

    (103) typeArguments -> LESS typeArgument expr_39 . MORE
    (362) expr_39 -> expr_39 . COMMA typeArgument

    MORE            shift and go to state 518
    COMMA           shift and go to state 517



state 462

    (361) expr_39 -> COMMA . typeArgument
    (104) typeArgument -> . type
    (105) typeArgument -> . QUES expr_41
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    QUES            shift and go to state 388
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    typeArgument                   shift and go to state 519
    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 389

state 463

    (363) expr_39 -> empty .

    MORE            reduce using rule 363 (expr_39 -> empty .)
    COMMA           reduce using rule 363 (expr_39 -> empty .)



state 464

    (105) typeArgument -> QUES expr_41 .

    MORE            reduce using rule 105 (typeArgument -> QUES expr_41 .)
    COMMA           reduce using rule 105 (typeArgument -> QUES expr_41 .)



state 465

    (366) expr_41 -> expr_40 . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 520

state 466

    (365) expr_40 -> SUPER .

    Identifier      reduce using rule 365 (expr_40 -> SUPER .)
    BOOLEAN         reduce using rule 365 (expr_40 -> SUPER .)
    CHAR            reduce using rule 365 (expr_40 -> SUPER .)
    BYTE            reduce using rule 365 (expr_40 -> SUPER .)
    SHORT           reduce using rule 365 (expr_40 -> SUPER .)
    INT             reduce using rule 365 (expr_40 -> SUPER .)
    LONG            reduce using rule 365 (expr_40 -> SUPER .)
    FLOAT           reduce using rule 365 (expr_40 -> SUPER .)
    DOUBLE          reduce using rule 365 (expr_40 -> SUPER .)



state 467

    (364) expr_40 -> EXTENDS .

    Identifier      reduce using rule 364 (expr_40 -> EXTENDS .)
    BOOLEAN         reduce using rule 364 (expr_40 -> EXTENDS .)
    CHAR            reduce using rule 364 (expr_40 -> EXTENDS .)
    BYTE            reduce using rule 364 (expr_40 -> EXTENDS .)
    SHORT           reduce using rule 364 (expr_40 -> EXTENDS .)
    INT             reduce using rule 364 (expr_40 -> EXTENDS .)
    LONG            reduce using rule 364 (expr_40 -> EXTENDS .)
    FLOAT           reduce using rule 364 (expr_40 -> EXTENDS .)
    DOUBLE          reduce using rule 364 (expr_40 -> EXTENDS .)



state 468

    (367) expr_41 -> empty .

    COMMA           reduce using rule 367 (expr_41 -> empty .)
    MORE            reduce using rule 367 (expr_41 -> empty .)



state 469

    (358) expr_38 -> DOT Identifier . expr_typeArguments
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 290
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! LESS            [ reduce using rule 502 (empty -> .) ]

    typeArguments                  shift and go to state 291
    empty                          shift and go to state 293
    expr_typeArguments             shift and go to state 521

state 470

    (359) expr_38 -> expr_38 DOT . Identifier expr_typeArguments

    Identifier      shift and go to state 522



state 471

    (495) expr_94 -> FRPAREN expr_28 . arrayInitializer
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN

    FLPAREN         shift and go to state 302
    BLPAREN         shift and go to state 524


    arrayInitializer               shift and go to state 523

state 472

    (496) expr_94 -> expression FRPAREN . expr_92 expr_28
    (491) expr_92 -> . FLPAREN expression FRPAREN
    (492) expr_92 -> . expr_92 FLPAREN expression FRPAREN

    FLPAREN         shift and go to state 526


    expr_92                        shift and go to state 525

state 473

    (278) expr_4 -> STATIC .
    (79) modifier -> STATIC .

    BLPAREN         reduce using rule 278 (expr_4 -> STATIC .)
    PUBLIC          reduce using rule 79 (modifier -> STATIC .)
    PROTECTED       reduce using rule 79 (modifier -> STATIC .)
    PRIVATE         reduce using rule 79 (modifier -> STATIC .)
    STATIC          reduce using rule 79 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 79 (modifier -> STATIC .)
    FINAL           reduce using rule 79 (modifier -> STATIC .)
    NATIVE          reduce using rule 79 (modifier -> STATIC .)
    SYNCHRONIZED    reduce using rule 79 (modifier -> STATIC .)
    TRANSIENT       reduce using rule 79 (modifier -> STATIC .)
    VOLATILE        reduce using rule 79 (modifier -> STATIC .)
    STRICTFP        reduce using rule 79 (modifier -> STATIC .)
    AT              reduce using rule 79 (modifier -> STATIC .)
    VOID            reduce using rule 79 (modifier -> STATIC .)
    Identifier      reduce using rule 79 (modifier -> STATIC .)
    LESS            reduce using rule 79 (modifier -> STATIC .)
    INTERFACE       reduce using rule 79 (modifier -> STATIC .)
    CLASS           reduce using rule 79 (modifier -> STATIC .)
    ENUM            reduce using rule 79 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 79 (modifier -> STATIC .)
    CHAR            reduce using rule 79 (modifier -> STATIC .)
    BYTE            reduce using rule 79 (modifier -> STATIC .)
    SHORT           reduce using rule 79 (modifier -> STATIC .)
    INT             reduce using rule 79 (modifier -> STATIC .)
    LONG            reduce using rule 79 (modifier -> STATIC .)
    FLOAT           reduce using rule 79 (modifier -> STATIC .)
    DOUBLE          reduce using rule 79 (modifier -> STATIC .)



state 474

    (33) classBody -> BLPAREN expr_22 . BRPAREN
    (320) expr_22 -> expr_22 . classBodyDeclaration
    (35) classBodyDeclaration -> . SEMI
    (36) classBodyDeclaration -> . expr_4 block
    (37) classBodyDeclaration -> . modifiers memberDecl
    (278) expr_4 -> . STATIC
    (279) expr_4 -> . empty
    (17) modifiers -> . expr_8
    (502) empty -> .
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         shift and go to state 528
    SEMI            shift and go to state 475
    STATIC          shift and go to state 473
    BLPAREN         reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifier                       shift and go to state 448
    modifiers                      shift and go to state 479
    empty                          shift and go to state 527
    expr_8                         shift and go to state 440
    classBodyDeclaration           shift and go to state 529
    expr_4                         shift and go to state 476
    annotation                     shift and go to state 443

state 475

    (35) classBodyDeclaration -> SEMI .

    BRPAREN         reduce using rule 35 (classBodyDeclaration -> SEMI .)
    SEMI            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 35 (classBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 35 (classBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 35 (classBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 35 (classBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 35 (classBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 35 (classBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 35 (classBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 35 (classBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 35 (classBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 35 (classBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 35 (classBodyDeclaration -> SEMI .)
    AT              reduce using rule 35 (classBodyDeclaration -> SEMI .)
    BLPAREN         reduce using rule 35 (classBodyDeclaration -> SEMI .)
    VOID            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    Identifier      reduce using rule 35 (classBodyDeclaration -> SEMI .)
    LESS            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    INTERFACE       reduce using rule 35 (classBodyDeclaration -> SEMI .)
    CLASS           reduce using rule 35 (classBodyDeclaration -> SEMI .)
    ENUM            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    BOOLEAN         reduce using rule 35 (classBodyDeclaration -> SEMI .)
    CHAR            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    BYTE            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    SHORT           reduce using rule 35 (classBodyDeclaration -> SEMI .)
    INT             reduce using rule 35 (classBodyDeclaration -> SEMI .)
    LONG            reduce using rule 35 (classBodyDeclaration -> SEMI .)
    FLOAT           reduce using rule 35 (classBodyDeclaration -> SEMI .)
    DOUBLE          reduce using rule 35 (classBodyDeclaration -> SEMI .)



state 476

    (36) classBodyDeclaration -> expr_4 . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 531

state 477

    (321) expr_22 -> empty .
    (279) expr_4 -> empty .
    (289) expr_8 -> empty .

  ! reduce/reduce conflict for BLPAREN resolved using rule 279 (expr_4 -> empty .).
  ! reduce/reduce conflict for PUBLIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PROTECTED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PRIVATE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STATIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ABSTRACT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for NATIVE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SYNCHRONIZED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for TRANSIENT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for VOLATILE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STRICTFP resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for VOID resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for Identifier resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for LESS resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INTERFACE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CLASS resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ENUM resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BOOLEAN resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CHAR resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BYTE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SHORT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for LONG resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FLOAT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for DOUBLE resolved using rule 289 (expr_8 -> empty .).
    SEMI            reduce using rule 321 (expr_22 -> empty .)
    BRPAREN         reduce using rule 321 (expr_22 -> empty .)
    BLPAREN         reduce using rule 279 (expr_4 -> empty .)
    PUBLIC          reduce using rule 289 (expr_8 -> empty .)
    PROTECTED       reduce using rule 289 (expr_8 -> empty .)
    PRIVATE         reduce using rule 289 (expr_8 -> empty .)
    STATIC          reduce using rule 289 (expr_8 -> empty .)
    ABSTRACT        reduce using rule 289 (expr_8 -> empty .)
    FINAL           reduce using rule 289 (expr_8 -> empty .)
    NATIVE          reduce using rule 289 (expr_8 -> empty .)
    SYNCHRONIZED    reduce using rule 289 (expr_8 -> empty .)
    TRANSIENT       reduce using rule 289 (expr_8 -> empty .)
    VOLATILE        reduce using rule 289 (expr_8 -> empty .)
    STRICTFP        reduce using rule 289 (expr_8 -> empty .)
    AT              reduce using rule 289 (expr_8 -> empty .)
    VOID            reduce using rule 289 (expr_8 -> empty .)
    Identifier      reduce using rule 289 (expr_8 -> empty .)
    LESS            reduce using rule 289 (expr_8 -> empty .)
    INTERFACE       reduce using rule 289 (expr_8 -> empty .)
    CLASS           reduce using rule 289 (expr_8 -> empty .)
    ENUM            reduce using rule 289 (expr_8 -> empty .)
    BOOLEAN         reduce using rule 289 (expr_8 -> empty .)
    CHAR            reduce using rule 289 (expr_8 -> empty .)
    BYTE            reduce using rule 289 (expr_8 -> empty .)
    SHORT           reduce using rule 289 (expr_8 -> empty .)
    INT             reduce using rule 289 (expr_8 -> empty .)
    LONG            reduce using rule 289 (expr_8 -> empty .)
    FLOAT           reduce using rule 289 (expr_8 -> empty .)
    DOUBLE          reduce using rule 289 (expr_8 -> empty .)

  ! STATIC          [ reduce using rule 321 (expr_22 -> empty .) ]
  ! PUBLIC          [ reduce using rule 321 (expr_22 -> empty .) ]
  ! PROTECTED       [ reduce using rule 321 (expr_22 -> empty .) ]
  ! PRIVATE         [ reduce using rule 321 (expr_22 -> empty .) ]
  ! ABSTRACT        [ reduce using rule 321 (expr_22 -> empty .) ]
  ! FINAL           [ reduce using rule 321 (expr_22 -> empty .) ]
  ! NATIVE          [ reduce using rule 321 (expr_22 -> empty .) ]
  ! SYNCHRONIZED    [ reduce using rule 321 (expr_22 -> empty .) ]
  ! TRANSIENT       [ reduce using rule 321 (expr_22 -> empty .) ]
  ! VOLATILE        [ reduce using rule 321 (expr_22 -> empty .) ]
  ! STRICTFP        [ reduce using rule 321 (expr_22 -> empty .) ]
  ! AT              [ reduce using rule 321 (expr_22 -> empty .) ]
  ! BLPAREN         [ reduce using rule 321 (expr_22 -> empty .) ]
  ! VOID            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! Identifier      [ reduce using rule 321 (expr_22 -> empty .) ]
  ! LESS            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! INTERFACE       [ reduce using rule 321 (expr_22 -> empty .) ]
  ! CLASS           [ reduce using rule 321 (expr_22 -> empty .) ]
  ! ENUM            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! BOOLEAN         [ reduce using rule 321 (expr_22 -> empty .) ]
  ! CHAR            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! BYTE            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! SHORT           [ reduce using rule 321 (expr_22 -> empty .) ]
  ! INT             [ reduce using rule 321 (expr_22 -> empty .) ]
  ! LONG            [ reduce using rule 321 (expr_22 -> empty .) ]
  ! FLOAT           [ reduce using rule 321 (expr_22 -> empty .) ]
  ! DOUBLE          [ reduce using rule 321 (expr_22 -> empty .) ]


state 478

    (319) expr_22 -> classBodyDeclaration .

    SEMI            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    STATIC          reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    PUBLIC          reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    PROTECTED       reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    PRIVATE         reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    ABSTRACT        reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    FINAL           reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    NATIVE          reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    TRANSIENT       reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    VOLATILE        reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    STRICTFP        reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    AT              reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    BLPAREN         reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    VOID            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    Identifier      reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    LESS            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    INTERFACE       reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    CLASS           reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    ENUM            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    BOOLEAN         reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    CHAR            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    BYTE            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    SHORT           reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    INT             reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    LONG            reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    FLOAT           reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    DOUBLE          reduce using rule 319 (expr_22 -> classBodyDeclaration .)
    BRPAREN         reduce using rule 319 (expr_22 -> classBodyDeclaration .)



state 479

    (37) classBodyDeclaration -> modifiers . memberDecl
    (38) memberDecl -> . genericMethodOrConstructorDecl
    (39) memberDecl -> . memberDeclaration
    (40) memberDecl -> . VOID Identifier voidMethodDeclaratorRest
    (41) memberDecl -> . Identifier constructorDeclaratorRest
    (42) memberDecl -> . interfaceDeclaration
    (43) memberDecl -> . classDeclaration
    (45) genericMethodOrConstructorDecl -> . typeParameters genericMethodOrConstructorRest
    (44) memberDeclaration -> . type expr_26
    (29) interfaceDeclaration -> . normalInterfaceDeclaration
    (30) interfaceDeclaration -> . annotationTypeDeclaration
    (18) classDeclaration -> . normalClassDeclaration
    (19) classDeclaration -> . enumDeclaration
    (21) typeParameters -> . LESS typeParameter expr_12 MORE
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (31) normalInterfaceDeclaration -> . INTERFACE Identifier expr_9 expr_23 interfaceBody
    (137) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (20) normalClassDeclaration -> . CLASS Identifier expr_9 expr_10 expr_11 classBody
    (24) enumDeclaration -> . ENUM Identifier expr_11 enumBody
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    VOID            shift and go to state 532
    Identifier      shift and go to state 539
    LESS            shift and go to state 233
    INTERFACE       shift and go to state 59
    AT              shift and go to state 64
    CLASS           shift and go to state 63
    ENUM            shift and go to state 56
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    memberDecl                     shift and go to state 533
    typeParameters                 shift and go to state 534
    normalInterfaceDeclaration     shift and go to state 62
    memberDeclaration              shift and go to state 535
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 536
    enumDeclaration                shift and go to state 54
    genericMethodOrConstructorDecl shift and go to state 537
    classDeclaration               shift and go to state 538
    normalClassDeclaration         shift and go to state 55
    primitiveType                  shift and go to state 244
    annotationTypeDeclaration      shift and go to state 58
    interfaceDeclaration           shift and go to state 540

state 480

    (202) assignmentOperator -> LESS LESS EQUALS .

    PLUS            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    DASH            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    OP_INC          reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    OP_DEC          reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    TILDE           reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    EXCLAMATION     reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    LPAREN          reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    THIS            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    SUPER           reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NEW             reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    Identifier      reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    VOID            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    CharacterLiteral reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    StringLiteral   reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NULL            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    BOOLEAN         reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    CHAR            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    BYTE            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    SHORT           reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    INT             reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    LONG            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    FLOAT           reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    DOUBLE          reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NUMBER          reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    HEX_NUMBER      reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_NUMBER     reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    TRUE            reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)
    FALSE           reduce using rule 202 (assignmentOperator -> LESS LESS EQUALS .)



state 481

    (204) assignmentOperator -> MORE MORE EQUALS .

    PLUS            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    DASH            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    OP_INC          reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    OP_DEC          reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    TILDE           reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    LPAREN          reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    THIS            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    SUPER           reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NEW             reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    Identifier      reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    VOID            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    CharacterLiteral reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    StringLiteral   reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NULL            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    CHAR            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    BYTE            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    SHORT           reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    INT             reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    LONG            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    FLOAT           reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    DOUBLE          reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NUMBER          reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    TRUE            reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)
    FALSE           reduce using rule 204 (assignmentOperator -> MORE MORE EQUALS .)



state 482

    (203) assignmentOperator -> MORE MORE MORE . EQUALS

    EQUALS          shift and go to state 541



state 483

    (436) expr_71 -> COMMA expression .

    COMMA           reduce using rule 436 (expr_71 -> COMMA expression .)
    RPAREN          reduce using rule 436 (expr_71 -> COMMA expression .)
    SEMI            reduce using rule 436 (expr_71 -> COMMA expression .)



state 484

    (437) expr_71 -> expr_71 COMMA . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 542

state 485

    (310) expr_18 -> COMMA . enumConstant
    (27) enumConstant -> . expr_19 Identifier expr_20 expr_21
    (313) expr_19 -> . annotations
    (314) expr_19 -> . empty
    (128) annotations -> . expr_50
    (502) empty -> .
    (387) expr_50 -> . annotation
    (388) expr_50 -> . expr_50 annotation
    (129) annotation -> . AT annotationName expr_52

    Identifier      reduce using rule 502 (empty -> .)
    AT              shift and go to state 6


    expr_50                        shift and go to state 1
    enumConstant                   shift and go to state 543
    annotation                     shift and go to state 8
    expr_19                        shift and go to state 418
    annotations                    shift and go to state 416
    empty                          shift and go to state 544

state 486

    (26) enumConstants -> enumConstant expr_18 .
    (311) expr_18 -> expr_18 . COMMA enumConstant

  ! shift/reduce conflict for COMMA resolved as shift.
    SEMI            reduce using rule 26 (enumConstants -> enumConstant expr_18 .)
    BRPAREN         reduce using rule 26 (enumConstants -> enumConstant expr_18 .)
    COMMA           shift and go to state 545

  ! COMMA           [ reduce using rule 26 (enumConstants -> enumConstant expr_18 .) ]


state 487

    (312) expr_18 -> empty .

    COMMA           reduce using rule 312 (expr_18 -> empty .)
    SEMI            reduce using rule 312 (expr_18 -> empty .)
    BRPAREN         reduce using rule 312 (expr_18 -> empty .)



state 488

    (27) enumConstant -> expr_19 Identifier . expr_20 expr_21
    (315) expr_20 -> . arguments
    (316) expr_20 -> . empty
    (267) arguments -> . LPAREN expr_95 RPAREN
    (502) empty -> .

    LPAREN          shift and go to state 228
    BLPAREN         reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)


    expr_20                        shift and go to state 546
    empty                          shift and go to state 380
    arguments                      shift and go to state 378

state 489

    (306) expr_16 -> COMMA .

    SEMI            reduce using rule 306 (expr_16 -> COMMA .)
    BRPAREN         reduce using rule 306 (expr_16 -> COMMA .)



state 490

    (25) enumBody -> BLPAREN expr_15 expr_16 . expr_17 BRPAREN
    (308) expr_17 -> . enumBodyDeclarations
    (309) expr_17 -> . empty
    (28) enumBodyDeclarations -> . SEMI expr_22
    (502) empty -> .

    SEMI            shift and go to state 547
    BRPAREN         reduce using rule 502 (empty -> .)


    enumBodyDeclarations           shift and go to state 548
    expr_17                        shift and go to state 549
    empty                          shift and go to state 550

state 491

    (307) expr_16 -> empty .

    SEMI            reduce using rule 307 (expr_16 -> empty .)
    BRPAREN         reduce using rule 307 (expr_16 -> empty .)



state 492

    (296) expr_12 -> COMMA typeParameter .

    MORE            reduce using rule 296 (expr_12 -> COMMA typeParameter .)
    COMMA           reduce using rule 296 (expr_12 -> COMMA typeParameter .)



state 493

    (21) typeParameters -> LESS typeParameter expr_12 MORE .

    Identifier      reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    VOID            reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    BOOLEAN         reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    CHAR            reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    BYTE            reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    SHORT           reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    INT             reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    LONG            reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    FLOAT           reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    DOUBLE          reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    EXTENDS         reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    IMPLEMENTS      reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)
    BLPAREN         reduce using rule 21 (typeParameters -> LESS typeParameter expr_12 MORE .)



state 494

    (297) expr_12 -> expr_12 COMMA . typeParameter
    (22) typeParameter -> . Identifier expr_13

    Identifier      shift and go to state 341


    typeParameter                  shift and go to state 551

state 495

    (299) expr_13 -> EXTENDS typeBound .

    COMMA           reduce using rule 299 (expr_13 -> EXTENDS typeBound .)
    MORE            reduce using rule 299 (expr_13 -> EXTENDS typeBound .)



state 496

    (23) typeBound -> type . expr_14
    (301) expr_14 -> . AND type
    (302) expr_14 -> . expr_14 AND type
    (303) expr_14 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for AND resolved as shift.
    AND             shift and go to state 553
    COMMA           reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)

  ! AND             [ reduce using rule 502 (empty -> .) ]

    expr_14                        shift and go to state 552
    empty                          shift and go to state 554

state 497

    (34) interfaceBody -> BLPAREN expr_25 . BRPAREN
    (328) expr_25 -> expr_25 . interfaceBodyDeclaration
    (50) interfaceBodyDeclaration -> . modifiers interfaceMemberDecl
    (51) interfaceBodyDeclaration -> . SEMI
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         shift and go to state 555
    SEMI            shift and go to state 498
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    STATIC          shift and go to state 435
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    VOID            reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifiers                      shift and go to state 501
    expr_8                         shift and go to state 440
    interfaceBodyDeclaration       shift and go to state 556
    modifier                       shift and go to state 448
    annotation                     shift and go to state 443
    empty                          shift and go to state 504

state 498

    (51) interfaceBodyDeclaration -> SEMI .

    BRPAREN         reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    SEMI            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    AT              reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    VOID            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    LESS            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    INTERFACE       reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    CLASS           reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    ENUM            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    Identifier      reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    BOOLEAN         reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    CHAR            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    BYTE            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    SHORT           reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    INT             reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    LONG            reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    FLOAT           reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)
    DOUBLE          reduce using rule 51 (interfaceBodyDeclaration -> SEMI .)



state 499

    (329) expr_25 -> empty .
    (289) expr_8 -> empty .

  ! reduce/reduce conflict for PUBLIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PROTECTED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for PRIVATE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STATIC resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ABSTRACT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for NATIVE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SYNCHRONIZED resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for TRANSIENT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for VOLATILE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for STRICTFP resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for VOID resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for LESS resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INTERFACE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CLASS resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for ENUM resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for Identifier resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BOOLEAN resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for CHAR resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for BYTE resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for SHORT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for INT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for LONG resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for FLOAT resolved using rule 289 (expr_8 -> empty .).
  ! reduce/reduce conflict for DOUBLE resolved using rule 289 (expr_8 -> empty .).
    BRPAREN         reduce using rule 329 (expr_25 -> empty .)
    SEMI            reduce using rule 329 (expr_25 -> empty .)
    PUBLIC          reduce using rule 289 (expr_8 -> empty .)
    PROTECTED       reduce using rule 289 (expr_8 -> empty .)
    PRIVATE         reduce using rule 289 (expr_8 -> empty .)
    STATIC          reduce using rule 289 (expr_8 -> empty .)
    ABSTRACT        reduce using rule 289 (expr_8 -> empty .)
    FINAL           reduce using rule 289 (expr_8 -> empty .)
    NATIVE          reduce using rule 289 (expr_8 -> empty .)
    SYNCHRONIZED    reduce using rule 289 (expr_8 -> empty .)
    TRANSIENT       reduce using rule 289 (expr_8 -> empty .)
    VOLATILE        reduce using rule 289 (expr_8 -> empty .)
    STRICTFP        reduce using rule 289 (expr_8 -> empty .)
    AT              reduce using rule 289 (expr_8 -> empty .)
    VOID            reduce using rule 289 (expr_8 -> empty .)
    LESS            reduce using rule 289 (expr_8 -> empty .)
    INTERFACE       reduce using rule 289 (expr_8 -> empty .)
    CLASS           reduce using rule 289 (expr_8 -> empty .)
    ENUM            reduce using rule 289 (expr_8 -> empty .)
    Identifier      reduce using rule 289 (expr_8 -> empty .)
    BOOLEAN         reduce using rule 289 (expr_8 -> empty .)
    CHAR            reduce using rule 289 (expr_8 -> empty .)
    BYTE            reduce using rule 289 (expr_8 -> empty .)
    SHORT           reduce using rule 289 (expr_8 -> empty .)
    INT             reduce using rule 289 (expr_8 -> empty .)
    LONG            reduce using rule 289 (expr_8 -> empty .)
    FLOAT           reduce using rule 289 (expr_8 -> empty .)
    DOUBLE          reduce using rule 289 (expr_8 -> empty .)

  ! PUBLIC          [ reduce using rule 329 (expr_25 -> empty .) ]
  ! PROTECTED       [ reduce using rule 329 (expr_25 -> empty .) ]
  ! PRIVATE         [ reduce using rule 329 (expr_25 -> empty .) ]
  ! STATIC          [ reduce using rule 329 (expr_25 -> empty .) ]
  ! ABSTRACT        [ reduce using rule 329 (expr_25 -> empty .) ]
  ! FINAL           [ reduce using rule 329 (expr_25 -> empty .) ]
  ! NATIVE          [ reduce using rule 329 (expr_25 -> empty .) ]
  ! SYNCHRONIZED    [ reduce using rule 329 (expr_25 -> empty .) ]
  ! TRANSIENT       [ reduce using rule 329 (expr_25 -> empty .) ]
  ! VOLATILE        [ reduce using rule 329 (expr_25 -> empty .) ]
  ! STRICTFP        [ reduce using rule 329 (expr_25 -> empty .) ]
  ! AT              [ reduce using rule 329 (expr_25 -> empty .) ]
  ! VOID            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! LESS            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! INTERFACE       [ reduce using rule 329 (expr_25 -> empty .) ]
  ! CLASS           [ reduce using rule 329 (expr_25 -> empty .) ]
  ! ENUM            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! Identifier      [ reduce using rule 329 (expr_25 -> empty .) ]
  ! BOOLEAN         [ reduce using rule 329 (expr_25 -> empty .) ]
  ! CHAR            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! BYTE            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! SHORT           [ reduce using rule 329 (expr_25 -> empty .) ]
  ! INT             [ reduce using rule 329 (expr_25 -> empty .) ]
  ! LONG            [ reduce using rule 329 (expr_25 -> empty .) ]
  ! FLOAT           [ reduce using rule 329 (expr_25 -> empty .) ]
  ! DOUBLE          [ reduce using rule 329 (expr_25 -> empty .) ]


state 500

    (327) expr_25 -> interfaceBodyDeclaration .

    BRPAREN         reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    SEMI            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    STATIC          reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    FINAL           reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    NATIVE          reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    AT              reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    VOID            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    LESS            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    INTERFACE       reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    CLASS           reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    ENUM            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    Identifier      reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    BOOLEAN         reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    CHAR            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    BYTE            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    SHORT           reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    INT             reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    LONG            reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    FLOAT           reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)
    DOUBLE          reduce using rule 327 (expr_25 -> interfaceBodyDeclaration .)



state 501

    (50) interfaceBodyDeclaration -> modifiers . interfaceMemberDecl
    (52) interfaceMemberDecl -> . interfaceMethodOrFieldDecl
    (53) interfaceMemberDecl -> . interfaceGenericMethodDecl
    (54) interfaceMemberDecl -> . VOID Identifier voidInterfaceMethodDeclaratorRest
    (55) interfaceMemberDecl -> . interfaceDeclaration
    (56) interfaceMemberDecl -> . classDeclaration
    (57) interfaceMethodOrFieldDecl -> . type Identifier interfaceMethodOrFieldRest
    (63) interfaceGenericMethodDecl -> . typeParameters expr_27 Identifier interfaceMethodDeclaratorRest
    (29) interfaceDeclaration -> . normalInterfaceDeclaration
    (30) interfaceDeclaration -> . annotationTypeDeclaration
    (18) classDeclaration -> . normalClassDeclaration
    (19) classDeclaration -> . enumDeclaration
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (21) typeParameters -> . LESS typeParameter expr_12 MORE
    (31) normalInterfaceDeclaration -> . INTERFACE Identifier expr_9 expr_23 interfaceBody
    (137) annotationTypeDeclaration -> . AT INTERFACE Identifier annotationTypeBody
    (20) normalClassDeclaration -> . CLASS Identifier expr_9 expr_10 expr_11 classBody
    (24) enumDeclaration -> . ENUM Identifier expr_11 enumBody
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    VOID            shift and go to state 557
    LESS            shift and go to state 233
    INTERFACE       shift and go to state 59
    AT              shift and go to state 64
    CLASS           shift and go to state 63
    ENUM            shift and go to state 56
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    typeParameters                 shift and go to state 558
    normalInterfaceDeclaration     shift and go to state 62
    normalClassDeclaration         shift and go to state 55
    interfaceMemberDecl            shift and go to state 559
    classOrInterfaceType           shift and go to state 219
    interfaceGenericMethodDecl     shift and go to state 560
    type                           shift and go to state 561
    enumDeclaration                shift and go to state 54
    classDeclaration               shift and go to state 562
    interfaceMethodOrFieldDecl     shift and go to state 563
    primitiveType                  shift and go to state 244
    annotationTypeDeclaration      shift and go to state 58
    interfaceDeclaration           shift and go to state 564

state 502

    (20) normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .

    BRPAREN         reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    SEMI            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    STATIC          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    PUBLIC          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    PROTECTED       reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    PRIVATE         reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    ABSTRACT        reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    FINAL           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NATIVE          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    SYNCHRONIZED    reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    TRANSIENT       reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    VOLATILE        reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    STRICTFP        reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    AT              reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    BLPAREN         reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    VOID            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    Identifier      reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    LESS            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    INTERFACE       reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    CLASS           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    ENUM            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    BOOLEAN         reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    CHAR            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    BYTE            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    SHORT           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    INT             reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    LONG            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    FLOAT           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    DOUBLE          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    $end            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    ASSERT          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    IF              reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    FOR             reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    WHILE           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    DO              reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    TRY             reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    SWITCH          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    RETURN          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    THROW           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    BREAK           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    CONTINUE        reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    PLUS            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    DASH            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    OP_INC          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    OP_DEC          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    TILDE           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    EXCLAMATION     reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    LPAREN          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    THIS            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    SUPER           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NEW             reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    CharacterLiteral reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    StringLiteral   reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NULL            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NUMBER          reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    HEX_NUMBER      reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    LONG_NUMBER     reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    LONG_HEX_NUMBER reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NON_INTEGER_1   reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NON_INTEGER_2   reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    NON_INTEGER_3   reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    TRUE            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    FALSE           reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    CASE            reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)
    DEFAULT         reduce using rule 20 (normalClassDeclaration -> CLASS Identifier expr_9 expr_10 expr_11 classBody .)



state 503

    (288) expr_8 -> expr_8 modifier .

    PUBLIC          reduce using rule 288 (expr_8 -> expr_8 modifier .)
    PROTECTED       reduce using rule 288 (expr_8 -> expr_8 modifier .)
    PRIVATE         reduce using rule 288 (expr_8 -> expr_8 modifier .)
    STATIC          reduce using rule 288 (expr_8 -> expr_8 modifier .)
    ABSTRACT        reduce using rule 288 (expr_8 -> expr_8 modifier .)
    FINAL           reduce using rule 288 (expr_8 -> expr_8 modifier .)
    NATIVE          reduce using rule 288 (expr_8 -> expr_8 modifier .)
    SYNCHRONIZED    reduce using rule 288 (expr_8 -> expr_8 modifier .)
    TRANSIENT       reduce using rule 288 (expr_8 -> expr_8 modifier .)
    VOLATILE        reduce using rule 288 (expr_8 -> expr_8 modifier .)
    STRICTFP        reduce using rule 288 (expr_8 -> expr_8 modifier .)
    AT              reduce using rule 288 (expr_8 -> expr_8 modifier .)
    CLASS           reduce using rule 288 (expr_8 -> expr_8 modifier .)
    INTERFACE       reduce using rule 288 (expr_8 -> expr_8 modifier .)
    ENUM            reduce using rule 288 (expr_8 -> expr_8 modifier .)
    Identifier      reduce using rule 288 (expr_8 -> expr_8 modifier .)
    BOOLEAN         reduce using rule 288 (expr_8 -> expr_8 modifier .)
    CHAR            reduce using rule 288 (expr_8 -> expr_8 modifier .)
    BYTE            reduce using rule 288 (expr_8 -> expr_8 modifier .)
    SHORT           reduce using rule 288 (expr_8 -> expr_8 modifier .)
    INT             reduce using rule 288 (expr_8 -> expr_8 modifier .)
    LONG            reduce using rule 288 (expr_8 -> expr_8 modifier .)
    FLOAT           reduce using rule 288 (expr_8 -> expr_8 modifier .)
    DOUBLE          reduce using rule 288 (expr_8 -> expr_8 modifier .)
    VOID            reduce using rule 288 (expr_8 -> expr_8 modifier .)
    LESS            reduce using rule 288 (expr_8 -> expr_8 modifier .)



state 504

    (289) expr_8 -> empty .

    PUBLIC          reduce using rule 289 (expr_8 -> empty .)
    PROTECTED       reduce using rule 289 (expr_8 -> empty .)
    PRIVATE         reduce using rule 289 (expr_8 -> empty .)
    STATIC          reduce using rule 289 (expr_8 -> empty .)
    ABSTRACT        reduce using rule 289 (expr_8 -> empty .)
    FINAL           reduce using rule 289 (expr_8 -> empty .)
    NATIVE          reduce using rule 289 (expr_8 -> empty .)
    SYNCHRONIZED    reduce using rule 289 (expr_8 -> empty .)
    TRANSIENT       reduce using rule 289 (expr_8 -> empty .)
    VOLATILE        reduce using rule 289 (expr_8 -> empty .)
    STRICTFP        reduce using rule 289 (expr_8 -> empty .)
    AT              reduce using rule 289 (expr_8 -> empty .)
    CLASS           reduce using rule 289 (expr_8 -> empty .)
    INTERFACE       reduce using rule 289 (expr_8 -> empty .)
    ENUM            reduce using rule 289 (expr_8 -> empty .)
    Identifier      reduce using rule 289 (expr_8 -> empty .)
    BOOLEAN         reduce using rule 289 (expr_8 -> empty .)
    CHAR            reduce using rule 289 (expr_8 -> empty .)
    BYTE            reduce using rule 289 (expr_8 -> empty .)
    SHORT           reduce using rule 289 (expr_8 -> empty .)
    INT             reduce using rule 289 (expr_8 -> empty .)
    LONG            reduce using rule 289 (expr_8 -> empty .)
    FLOAT           reduce using rule 289 (expr_8 -> empty .)
    DOUBLE          reduce using rule 289 (expr_8 -> empty .)
    VOID            reduce using rule 289 (expr_8 -> empty .)
    LESS            reduce using rule 289 (expr_8 -> empty .)



state 505

    (138) annotationTypeBody -> BLPAREN expr_56 BRPAREN .

    SEMI            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    PUBLIC          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    PROTECTED       reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    PRIVATE         reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    ABSTRACT        reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    STATIC          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    FINAL           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    STRICTFP        reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    AT              reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    CLASS           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    ENUM            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    INTERFACE       reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    $end            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    BRPAREN         reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    ASSERT          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    IF              reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    FOR             reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    WHILE           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    DO              reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    TRY             reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    SWITCH          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    SYNCHRONIZED    reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    RETURN          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    THROW           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    BREAK           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    CONTINUE        reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    Identifier      reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    BLPAREN         reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    BOOLEAN         reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    CHAR            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    BYTE            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    SHORT           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    INT             reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    LONG            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    FLOAT           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    DOUBLE          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    PLUS            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    DASH            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    OP_INC          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    OP_DEC          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    TILDE           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    EXCLAMATION     reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    LPAREN          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    THIS            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    SUPER           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NEW             reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    VOID            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    CharacterLiteral reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    StringLiteral   reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NULL            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NUMBER          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    HEX_NUMBER      reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    LONG_NUMBER     reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NON_INTEGER_1   reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NON_INTEGER_2   reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NON_INTEGER_3   reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    TRUE            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    FALSE           reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    CASE            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    DEFAULT         reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    NATIVE          reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    TRANSIENT       reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    VOLATILE        reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)
    LESS            reduce using rule 138 (annotationTypeBody -> BLPAREN expr_56 BRPAREN .)



state 506

    (402) expr_56 -> expr_56 annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    STATIC          reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    FINAL           reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    AT              reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    CLASS           reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    INTERFACE       reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    ENUM            reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    Identifier      reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    BOOLEAN         reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    CHAR            reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    BYTE            reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    SHORT           reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    INT             reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    LONG            reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    FLOAT           reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)
    DOUBLE          reduce using rule 402 (expr_56 -> expr_56 annotationTypeElementDeclaration .)



state 507

    (142) annotationTypeElementRest -> normalInterfaceDeclaration . expr_57
    (404) expr_57 -> . SEMI
    (405) expr_57 -> . empty
    (502) empty -> .

    SEMI            shift and go to state 566
    BRPAREN         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)


    empty                          shift and go to state 565
    expr_57                        shift and go to state 567

state 508

    (141) annotationTypeElementRest -> normalClassDeclaration . expr_57
    (404) expr_57 -> . SEMI
    (405) expr_57 -> . empty
    (502) empty -> .

    SEMI            shift and go to state 566
    BRPAREN         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)


    expr_57                        shift and go to state 568
    empty                          shift and go to state 565

state 509

    (140) annotationTypeElementRest -> type . annotationMethodOrConstantRest SEMI
    (145) annotationMethodOrConstantRest -> . annotationMethodRest
    (146) annotationMethodOrConstantRest -> . annotationConstantRest
    (147) annotationMethodRest -> . Identifier LPAREN RPAREN expr_58
    (148) annotationConstantRest -> . variableDeclarators
    (67) variableDeclarators -> . variableDeclarator expr_31
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 573


    annotationMethodOrConstantRest shift and go to state 569
    variableDeclarators            shift and go to state 570
    annotationConstantRest         shift and go to state 571
    variableDeclaratorId           shift and go to state 572
    annotationMethodRest           shift and go to state 574
    variableDeclarator             shift and go to state 575

state 510

    (143) annotationTypeElementRest -> enumDeclaration . expr_57
    (404) expr_57 -> . SEMI
    (405) expr_57 -> . empty
    (502) empty -> .

    SEMI            shift and go to state 566
    BRPAREN         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)


    empty                          shift and go to state 565
    expr_57                        shift and go to state 576

state 511

    (139) annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .

    BRPAREN         reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PUBLIC          reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PROTECTED       reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    PRIVATE         reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    STATIC          reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    ABSTRACT        reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    FINAL           reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    NATIVE          reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    SYNCHRONIZED    reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    TRANSIENT       reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    VOLATILE        reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    STRICTFP        reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    AT              reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    CLASS           reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    INTERFACE       reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    ENUM            reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    Identifier      reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    BOOLEAN         reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    CHAR            reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    BYTE            reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    SHORT           reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    INT             reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    LONG            reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    FLOAT           reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)
    DOUBLE          reduce using rule 139 (annotationTypeElementDeclaration -> modifiers annotationTypeElementRest .)



state 512

    (144) annotationTypeElementRest -> annotationTypeDeclaration . expr_57
    (404) expr_57 -> . SEMI
    (405) expr_57 -> . empty
    (502) empty -> .

    SEMI            shift and go to state 566
    BRPAREN         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    NATIVE          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    TRANSIENT       reduce using rule 502 (empty -> .)
    VOLATILE        reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)


    empty                          shift and go to state 565
    expr_57                        shift and go to state 577

state 513

    (492) expr_92 -> expr_92 FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 492 (expr_92 -> expr_92 FLPAREN expression FRPAREN .)
    DOT             reduce using rule 492 (expr_92 -> expr_92 FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 492 (expr_92 -> expr_92 FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 492 (expr_92 -> expr_92 FLPAREN expression FRPAREN .)



state 514

    (258) explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .

    DOT             reduce using rule 258 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    FLPAREN         reduce using rule 258 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    OP_INC          reduce using rule 258 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)
    OP_DEC          reduce using rule 258 (explicitGenericInvocation -> nonWildcardTypeArguments Identifier arguments .)



state 515

    (255) innerCreator -> expr_47 Identifier classCreatorRest .

    OP_INC          reduce using rule 255 (innerCreator -> expr_47 Identifier classCreatorRest .)
    OP_DEC          reduce using rule 255 (innerCreator -> expr_47 Identifier classCreatorRest .)
    DOT             reduce using rule 255 (innerCreator -> expr_47 Identifier classCreatorRest .)
    FLPAREN         reduce using rule 255 (innerCreator -> expr_47 Identifier classCreatorRest .)



state 516

    (325) expr_24 -> expr_24 COMMA type .

    COMMA           reduce using rule 325 (expr_24 -> expr_24 COMMA type .)
    MORE            reduce using rule 325 (expr_24 -> expr_24 COMMA type .)
    BLPAREN         reduce using rule 325 (expr_24 -> expr_24 COMMA type .)



state 517

    (362) expr_39 -> expr_39 COMMA . typeArgument
    (104) typeArgument -> . type
    (105) typeArgument -> . QUES expr_41
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    QUES            shift and go to state 388
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    typeArgument                   shift and go to state 578
    type                           shift and go to state 389

state 518

    (103) typeArguments -> LESS typeArgument expr_39 MORE .

    DOT             reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    FLPAREN         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    Identifier      reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    LPAREN          reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    RPAREN          reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    OP_EQ           reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    OP_NE           reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    AND             reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    CARET           reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    VERTICAL        reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    OP_LAND         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    OP_LOR          reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    QUES            reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    COMMA           reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    BRPAREN         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    EQUALS          reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_ADD         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_SUB         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_MUL         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_DIV         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_AND         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_OR          reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_XOR         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    ASS_MOD         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    LESS            reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    MORE            reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    COLON           reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    FRPAREN         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    SEMI            reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    BLPAREN         reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    IMPLEMENTS      reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)
    OP_ARRAY        reduce using rule 103 (typeArguments -> LESS typeArgument expr_39 MORE .)



state 519

    (361) expr_39 -> COMMA typeArgument .

    MORE            reduce using rule 361 (expr_39 -> COMMA typeArgument .)
    COMMA           reduce using rule 361 (expr_39 -> COMMA typeArgument .)



state 520

    (366) expr_41 -> expr_40 type .

    COMMA           reduce using rule 366 (expr_41 -> expr_40 type .)
    MORE            reduce using rule 366 (expr_41 -> expr_40 type .)



state 521

    (358) expr_38 -> DOT Identifier expr_typeArguments .

    DOT             reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    FLPAREN         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    LPAREN          reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    RPAREN          reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    OP_EQ           reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    OP_NE           reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    AND             reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    CARET           reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    VERTICAL        reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    OP_LAND         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    OP_LOR          reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    QUES            reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    COMMA           reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    BRPAREN         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    EQUALS          reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_ADD         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_SUB         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_MUL         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_DIV         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_AND         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_OR          reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_XOR         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    ASS_MOD         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    LESS            reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    MORE            reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    COLON           reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    FRPAREN         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    SEMI            reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    BLPAREN         reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    IMPLEMENTS      reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    Identifier      reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)
    OP_ARRAY        reduce using rule 358 (expr_38 -> DOT Identifier expr_typeArguments .)



state 522

    (359) expr_38 -> expr_38 DOT Identifier . expr_typeArguments
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 290
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)
    OP_EQ           reduce using rule 502 (empty -> .)
    OP_NE           reduce using rule 502 (empty -> .)
    AND             reduce using rule 502 (empty -> .)
    CARET           reduce using rule 502 (empty -> .)
    VERTICAL        reduce using rule 502 (empty -> .)
    OP_LAND         reduce using rule 502 (empty -> .)
    OP_LOR          reduce using rule 502 (empty -> .)
    QUES            reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    EQUALS          reduce using rule 502 (empty -> .)
    ASS_ADD         reduce using rule 502 (empty -> .)
    ASS_SUB         reduce using rule 502 (empty -> .)
    ASS_MUL         reduce using rule 502 (empty -> .)
    ASS_DIV         reduce using rule 502 (empty -> .)
    ASS_AND         reduce using rule 502 (empty -> .)
    ASS_OR          reduce using rule 502 (empty -> .)
    ASS_XOR         reduce using rule 502 (empty -> .)
    ASS_MOD         reduce using rule 502 (empty -> .)
    MORE            reduce using rule 502 (empty -> .)
    COLON           reduce using rule 502 (empty -> .)
    FRPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    IMPLEMENTS      reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    OP_ARRAY        reduce using rule 502 (empty -> .)

  ! LESS            [ reduce using rule 502 (empty -> .) ]

    typeArguments                  shift and go to state 291
    expr_typeArguments             shift and go to state 579
    empty                          shift and go to state 293

state 523

    (495) expr_94 -> FRPAREN expr_28 arrayInitializer .

    DOT             reduce using rule 495 (expr_94 -> FRPAREN expr_28 arrayInitializer .)
    FLPAREN         reduce using rule 495 (expr_94 -> FRPAREN expr_28 arrayInitializer .)
    OP_INC          reduce using rule 495 (expr_94 -> FRPAREN expr_28 arrayInitializer .)
    OP_DEC          reduce using rule 495 (expr_94 -> FRPAREN expr_28 arrayInitializer .)



state 524

    (74) arrayInitializer -> BLPAREN . expr_36 BRPAREN
    (354) expr_36 -> . variableInitializer expr_34 expr_35
    (355) expr_36 -> . empty
    (72) variableInitializer -> . arrayInitializer
    (73) variableInitializer -> . expression
    (502) empty -> .
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BRPAREN         reduce using rule 502 (empty -> .)
    BLPAREN         shift and go to state 524
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    additiveExpression             shift and go to state 88
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalExpression          shift and go to state 221
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    arrayInitializer               shift and go to state 582
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    empty                          shift and go to state 583
    expr_36                        shift and go to state 584
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    variableInitializer            shift and go to state 580
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 581

state 525

    (496) expr_94 -> expression FRPAREN expr_92 . expr_28
    (492) expr_92 -> expr_92 . FLPAREN expression FRPAREN
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 585
    DOT             reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 586
    empty                          shift and go to state 202

state 526

    (491) expr_92 -> FLPAREN . expression FRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 354

state 527

    (279) expr_4 -> empty .
    (289) expr_8 -> empty .

    BLPAREN         reduce using rule 279 (expr_4 -> empty .)
    PUBLIC          reduce using rule 289 (expr_8 -> empty .)
    PROTECTED       reduce using rule 289 (expr_8 -> empty .)
    PRIVATE         reduce using rule 289 (expr_8 -> empty .)
    STATIC          reduce using rule 289 (expr_8 -> empty .)
    ABSTRACT        reduce using rule 289 (expr_8 -> empty .)
    FINAL           reduce using rule 289 (expr_8 -> empty .)
    NATIVE          reduce using rule 289 (expr_8 -> empty .)
    SYNCHRONIZED    reduce using rule 289 (expr_8 -> empty .)
    TRANSIENT       reduce using rule 289 (expr_8 -> empty .)
    VOLATILE        reduce using rule 289 (expr_8 -> empty .)
    STRICTFP        reduce using rule 289 (expr_8 -> empty .)
    AT              reduce using rule 289 (expr_8 -> empty .)
    VOID            reduce using rule 289 (expr_8 -> empty .)
    Identifier      reduce using rule 289 (expr_8 -> empty .)
    LESS            reduce using rule 289 (expr_8 -> empty .)
    INTERFACE       reduce using rule 289 (expr_8 -> empty .)
    CLASS           reduce using rule 289 (expr_8 -> empty .)
    ENUM            reduce using rule 289 (expr_8 -> empty .)
    BOOLEAN         reduce using rule 289 (expr_8 -> empty .)
    CHAR            reduce using rule 289 (expr_8 -> empty .)
    BYTE            reduce using rule 289 (expr_8 -> empty .)
    SHORT           reduce using rule 289 (expr_8 -> empty .)
    INT             reduce using rule 289 (expr_8 -> empty .)
    LONG            reduce using rule 289 (expr_8 -> empty .)
    FLOAT           reduce using rule 289 (expr_8 -> empty .)
    DOUBLE          reduce using rule 289 (expr_8 -> empty .)



state 528

    (33) classBody -> BLPAREN expr_22 BRPAREN .

    DOT             reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    FLPAREN         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    OP_INC          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    OP_DEC          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    COMMA           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    SEMI            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    BRPAREN         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    PUBLIC          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    PROTECTED       reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    PRIVATE         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    ABSTRACT        reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    STATIC          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    FINAL           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    STRICTFP        reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    AT              reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    CLASS           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    ENUM            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    INTERFACE       reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    $end            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    ASSERT          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    IF              reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    FOR             reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    WHILE           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    DO              reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    TRY             reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    SWITCH          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    SYNCHRONIZED    reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    RETURN          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    THROW           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    BREAK           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    CONTINUE        reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    Identifier      reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    BLPAREN         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    BOOLEAN         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    CHAR            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    BYTE            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    SHORT           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    INT             reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    LONG            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    FLOAT           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    DOUBLE          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    PLUS            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    DASH            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    TILDE           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    EXCLAMATION     reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    LPAREN          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    THIS            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    SUPER           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NEW             reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    VOID            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    CharacterLiteral reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    StringLiteral   reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NULL            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NUMBER          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    HEX_NUMBER      reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    LONG_NUMBER     reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NON_INTEGER_1   reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NON_INTEGER_2   reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NON_INTEGER_3   reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    TRUE            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    FALSE           reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    CASE            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    DEFAULT         reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    NATIVE          reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    TRANSIENT       reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    VOLATILE        reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)
    LESS            reduce using rule 33 (classBody -> BLPAREN expr_22 BRPAREN .)



state 529

    (320) expr_22 -> expr_22 classBodyDeclaration .

    SEMI            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    STATIC          reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    PUBLIC          reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    PROTECTED       reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    PRIVATE         reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    ABSTRACT        reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    FINAL           reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    NATIVE          reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    TRANSIENT       reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    VOLATILE        reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    STRICTFP        reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    AT              reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    BLPAREN         reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    VOID            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    Identifier      reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    LESS            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    INTERFACE       reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    CLASS           reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    ENUM            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    BOOLEAN         reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    CHAR            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    BYTE            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    SHORT           reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    INT             reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    LONG            reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    FLOAT           reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    DOUBLE          reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)
    BRPAREN         reduce using rule 320 (expr_22 -> expr_22 classBodyDeclaration .)



state 530

    (150) block -> BLPAREN . expr_blockStatment BRPAREN
    (377) expr_blockStatment -> . blockStatement
    (378) expr_blockStatment -> . expr_blockStatment blockStatement
    (379) expr_blockStatment -> . empty
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (502) empty -> .
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CharacterLiteral resolved as shift.
  ! shift/reduce conflict for StringLiteral resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
    BRPAREN         reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! ASSERT          [ reduce using rule 502 (empty -> .) ]
  ! IF              [ reduce using rule 502 (empty -> .) ]
  ! FOR             [ reduce using rule 502 (empty -> .) ]
  ! WHILE           [ reduce using rule 502 (empty -> .) ]
  ! DO              [ reduce using rule 502 (empty -> .) ]
  ! TRY             [ reduce using rule 502 (empty -> .) ]
  ! SWITCH          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! RETURN          [ reduce using rule 502 (empty -> .) ]
  ! THROW           [ reduce using rule 502 (empty -> .) ]
  ! BREAK           [ reduce using rule 502 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 502 (empty -> .) ]
  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! PLUS            [ reduce using rule 502 (empty -> .) ]
  ! DASH            [ reduce using rule 502 (empty -> .) ]
  ! OP_INC          [ reduce using rule 502 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 502 (empty -> .) ]
  ! TILDE           [ reduce using rule 502 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 502 (empty -> .) ]
  ! LPAREN          [ reduce using rule 502 (empty -> .) ]
  ! THIS            [ reduce using rule 502 (empty -> .) ]
  ! SUPER           [ reduce using rule 502 (empty -> .) ]
  ! NEW             [ reduce using rule 502 (empty -> .) ]
  ! VOID            [ reduce using rule 502 (empty -> .) ]
  ! CharacterLiteral [ reduce using rule 502 (empty -> .) ]
  ! StringLiteral   [ reduce using rule 502 (empty -> .) ]
  ! NULL            [ reduce using rule 502 (empty -> .) ]
  ! NUMBER          [ reduce using rule 502 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 502 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 502 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 502 (empty -> .) ]
  ! TRUE            [ reduce using rule 502 (empty -> .) ]
  ! FALSE           [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    localVariableDeclarationStatement shift and go to state 591
    blockStatement                 shift and go to state 588
    booleanLiteral                 shift and go to state 73
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    type                           shift and go to state 605
    empty                          shift and go to state 606
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    classOrInterfaceDeclaration    shift and go to state 589
    parExpression                  shift and go to state 122
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    expr_blockStatment             shift and go to state 587
    annotation                     shift and go to state 614
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 531

    (36) classBodyDeclaration -> expr_4 block .

    BRPAREN         reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    SEMI            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    STATIC          reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    PUBLIC          reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    PROTECTED       reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    PRIVATE         reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    ABSTRACT        reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    FINAL           reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    NATIVE          reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    SYNCHRONIZED    reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    TRANSIENT       reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    VOLATILE        reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    STRICTFP        reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    AT              reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    BLPAREN         reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    VOID            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    Identifier      reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    LESS            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    INTERFACE       reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    CLASS           reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    ENUM            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    BOOLEAN         reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    CHAR            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    BYTE            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    SHORT           reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    INT             reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    LONG            reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    FLOAT           reduce using rule 36 (classBodyDeclaration -> expr_4 block .)
    DOUBLE          reduce using rule 36 (classBodyDeclaration -> expr_4 block .)



state 532

    (40) memberDecl -> VOID . Identifier voidMethodDeclaratorRest

    Identifier      shift and go to state 618



state 533

    (37) classBodyDeclaration -> modifiers memberDecl .

    BRPAREN         reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    SEMI            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    STATIC          reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    PUBLIC          reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    PROTECTED       reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    PRIVATE         reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    ABSTRACT        reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    FINAL           reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    NATIVE          reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    SYNCHRONIZED    reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    TRANSIENT       reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    VOLATILE        reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    STRICTFP        reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    AT              reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    BLPAREN         reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    VOID            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    Identifier      reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    LESS            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    INTERFACE       reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    CLASS           reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    ENUM            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    BOOLEAN         reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    CHAR            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    BYTE            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    SHORT           reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    INT             reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    LONG            reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    FLOAT           reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)
    DOUBLE          reduce using rule 37 (classBodyDeclaration -> modifiers memberDecl .)



state 534

    (45) genericMethodOrConstructorDecl -> typeParameters . genericMethodOrConstructorRest
    (46) genericMethodOrConstructorRest -> . expr_27 Identifier methodDeclaratorRest
    (47) genericMethodOrConstructorRest -> . Identifier constructorDeclaratorRest
    (332) expr_27 -> . type
    (333) expr_27 -> . VOID
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 621
    VOID            shift and go to state 619
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    primitiveType                  shift and go to state 244
    classOrInterfaceType           shift and go to state 219
    genericMethodOrConstructorRest shift and go to state 620
    type                           shift and go to state 622
    expr_27                        shift and go to state 623

state 535

    (39) memberDecl -> memberDeclaration .

    BRPAREN         reduce using rule 39 (memberDecl -> memberDeclaration .)
    SEMI            reduce using rule 39 (memberDecl -> memberDeclaration .)
    STATIC          reduce using rule 39 (memberDecl -> memberDeclaration .)
    PUBLIC          reduce using rule 39 (memberDecl -> memberDeclaration .)
    PROTECTED       reduce using rule 39 (memberDecl -> memberDeclaration .)
    PRIVATE         reduce using rule 39 (memberDecl -> memberDeclaration .)
    ABSTRACT        reduce using rule 39 (memberDecl -> memberDeclaration .)
    FINAL           reduce using rule 39 (memberDecl -> memberDeclaration .)
    NATIVE          reduce using rule 39 (memberDecl -> memberDeclaration .)
    SYNCHRONIZED    reduce using rule 39 (memberDecl -> memberDeclaration .)
    TRANSIENT       reduce using rule 39 (memberDecl -> memberDeclaration .)
    VOLATILE        reduce using rule 39 (memberDecl -> memberDeclaration .)
    STRICTFP        reduce using rule 39 (memberDecl -> memberDeclaration .)
    AT              reduce using rule 39 (memberDecl -> memberDeclaration .)
    BLPAREN         reduce using rule 39 (memberDecl -> memberDeclaration .)
    VOID            reduce using rule 39 (memberDecl -> memberDeclaration .)
    Identifier      reduce using rule 39 (memberDecl -> memberDeclaration .)
    LESS            reduce using rule 39 (memberDecl -> memberDeclaration .)
    INTERFACE       reduce using rule 39 (memberDecl -> memberDeclaration .)
    CLASS           reduce using rule 39 (memberDecl -> memberDeclaration .)
    ENUM            reduce using rule 39 (memberDecl -> memberDeclaration .)
    BOOLEAN         reduce using rule 39 (memberDecl -> memberDeclaration .)
    CHAR            reduce using rule 39 (memberDecl -> memberDeclaration .)
    BYTE            reduce using rule 39 (memberDecl -> memberDeclaration .)
    SHORT           reduce using rule 39 (memberDecl -> memberDeclaration .)
    INT             reduce using rule 39 (memberDecl -> memberDeclaration .)
    LONG            reduce using rule 39 (memberDecl -> memberDeclaration .)
    FLOAT           reduce using rule 39 (memberDecl -> memberDeclaration .)
    DOUBLE          reduce using rule 39 (memberDecl -> memberDeclaration .)



state 536

    (44) memberDeclaration -> type . expr_26
    (330) expr_26 -> . methodDeclaration
    (331) expr_26 -> . fieldDeclaration
    (48) methodDeclaration -> . Identifier methodDeclaratorRest
    (49) fieldDeclaration -> . variableDeclarators SEMI
    (67) variableDeclarators -> . variableDeclarator expr_31
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 626


    variableDeclarators            shift and go to state 624
    fieldDeclaration               shift and go to state 625
    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 575
    methodDeclaration              shift and go to state 627
    expr_26                        shift and go to state 628

state 537

    (38) memberDecl -> genericMethodOrConstructorDecl .

    BRPAREN         reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    SEMI            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    STATIC          reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    PUBLIC          reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    PROTECTED       reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    PRIVATE         reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    ABSTRACT        reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    FINAL           reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    NATIVE          reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    SYNCHRONIZED    reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    TRANSIENT       reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    VOLATILE        reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    STRICTFP        reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    AT              reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    BLPAREN         reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    VOID            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    Identifier      reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    LESS            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    INTERFACE       reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    CLASS           reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    ENUM            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    BOOLEAN         reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    CHAR            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    BYTE            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    SHORT           reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    INT             reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    LONG            reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    FLOAT           reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)
    DOUBLE          reduce using rule 38 (memberDecl -> genericMethodOrConstructorDecl .)



state 538

    (43) memberDecl -> classDeclaration .

    BRPAREN         reduce using rule 43 (memberDecl -> classDeclaration .)
    SEMI            reduce using rule 43 (memberDecl -> classDeclaration .)
    STATIC          reduce using rule 43 (memberDecl -> classDeclaration .)
    PUBLIC          reduce using rule 43 (memberDecl -> classDeclaration .)
    PROTECTED       reduce using rule 43 (memberDecl -> classDeclaration .)
    PRIVATE         reduce using rule 43 (memberDecl -> classDeclaration .)
    ABSTRACT        reduce using rule 43 (memberDecl -> classDeclaration .)
    FINAL           reduce using rule 43 (memberDecl -> classDeclaration .)
    NATIVE          reduce using rule 43 (memberDecl -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 43 (memberDecl -> classDeclaration .)
    TRANSIENT       reduce using rule 43 (memberDecl -> classDeclaration .)
    VOLATILE        reduce using rule 43 (memberDecl -> classDeclaration .)
    STRICTFP        reduce using rule 43 (memberDecl -> classDeclaration .)
    AT              reduce using rule 43 (memberDecl -> classDeclaration .)
    BLPAREN         reduce using rule 43 (memberDecl -> classDeclaration .)
    VOID            reduce using rule 43 (memberDecl -> classDeclaration .)
    Identifier      reduce using rule 43 (memberDecl -> classDeclaration .)
    LESS            reduce using rule 43 (memberDecl -> classDeclaration .)
    INTERFACE       reduce using rule 43 (memberDecl -> classDeclaration .)
    CLASS           reduce using rule 43 (memberDecl -> classDeclaration .)
    ENUM            reduce using rule 43 (memberDecl -> classDeclaration .)
    BOOLEAN         reduce using rule 43 (memberDecl -> classDeclaration .)
    CHAR            reduce using rule 43 (memberDecl -> classDeclaration .)
    BYTE            reduce using rule 43 (memberDecl -> classDeclaration .)
    SHORT           reduce using rule 43 (memberDecl -> classDeclaration .)
    INT             reduce using rule 43 (memberDecl -> classDeclaration .)
    LONG            reduce using rule 43 (memberDecl -> classDeclaration .)
    FLOAT           reduce using rule 43 (memberDecl -> classDeclaration .)
    DOUBLE          reduce using rule 43 (memberDecl -> classDeclaration .)



state 539

    (41) memberDecl -> Identifier . constructorDeclaratorRest
    (92) classOrInterfaceType -> Identifier . expr_typeArguments expr_38
    (65) constructorDeclaratorRest -> . formalParameters throwsList constructorBody
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (107) formalParameters -> . LPAREN expr_43 RPAREN
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

    LPAREN          shift and go to state 631
    LESS            shift and go to state 290
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)


    constructorDeclaratorRest      shift and go to state 629
    typeArguments                  shift and go to state 291
    formalParameters               shift and go to state 630
    expr_typeArguments             shift and go to state 292
    empty                          shift and go to state 293

state 540

    (42) memberDecl -> interfaceDeclaration .

    BRPAREN         reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    SEMI            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    STATIC          reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    PUBLIC          reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    PROTECTED       reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    PRIVATE         reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    FINAL           reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    NATIVE          reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    VOLATILE        reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    STRICTFP        reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    AT              reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    BLPAREN         reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    VOID            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    Identifier      reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    LESS            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    INTERFACE       reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    CLASS           reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    ENUM            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    CHAR            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    BYTE            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    SHORT           reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    INT             reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    LONG            reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    FLOAT           reduce using rule 42 (memberDecl -> interfaceDeclaration .)
    DOUBLE          reduce using rule 42 (memberDecl -> interfaceDeclaration .)



state 541

    (203) assignmentOperator -> MORE MORE MORE EQUALS .

    PLUS            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DASH            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_INC          reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_DEC          reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TILDE           reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LPAREN          reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    THIS            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SUPER           reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NEW             reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    Identifier      reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    VOID            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CharacterLiteral reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    StringLiteral   reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NULL            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CHAR            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BYTE            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SHORT           reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    INT             reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FLOAT           reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DOUBLE          reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NUMBER          reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TRUE            reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FALSE           reduce using rule 203 (assignmentOperator -> MORE MORE MORE EQUALS .)



state 542

    (437) expr_71 -> expr_71 COMMA expression .

    COMMA           reduce using rule 437 (expr_71 -> expr_71 COMMA expression .)
    RPAREN          reduce using rule 437 (expr_71 -> expr_71 COMMA expression .)
    SEMI            reduce using rule 437 (expr_71 -> expr_71 COMMA expression .)



state 543

    (310) expr_18 -> COMMA enumConstant .

    COMMA           reduce using rule 310 (expr_18 -> COMMA enumConstant .)
    SEMI            reduce using rule 310 (expr_18 -> COMMA enumConstant .)
    BRPAREN         reduce using rule 310 (expr_18 -> COMMA enumConstant .)



state 544

    (314) expr_19 -> empty .

    Identifier      reduce using rule 314 (expr_19 -> empty .)



state 545

    (311) expr_18 -> expr_18 COMMA . enumConstant
    (27) enumConstant -> . expr_19 Identifier expr_20 expr_21
    (313) expr_19 -> . annotations
    (314) expr_19 -> . empty
    (128) annotations -> . expr_50
    (502) empty -> .
    (387) expr_50 -> . annotation
    (388) expr_50 -> . expr_50 annotation
    (129) annotation -> . AT annotationName expr_52

    Identifier      reduce using rule 502 (empty -> .)
    AT              shift and go to state 6


    expr_50                        shift and go to state 1
    enumConstant                   shift and go to state 632
    annotation                     shift and go to state 8
    expr_19                        shift and go to state 418
    annotations                    shift and go to state 416
    empty                          shift and go to state 544

state 546

    (27) enumConstant -> expr_19 Identifier expr_20 . expr_21
    (317) expr_21 -> . classBody
    (318) expr_21 -> . empty
    (33) classBody -> . BLPAREN expr_22 BRPAREN
    (502) empty -> .

    BLPAREN         shift and go to state 397
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)


    expr_21                        shift and go to state 633
    empty                          shift and go to state 398
    classBody                      shift and go to state 399

state 547

    (28) enumBodyDeclarations -> SEMI . expr_22
    (319) expr_22 -> . classBodyDeclaration
    (320) expr_22 -> . expr_22 classBodyDeclaration
    (321) expr_22 -> . empty
    (35) classBodyDeclaration -> . SEMI
    (36) classBodyDeclaration -> . expr_4 block
    (37) classBodyDeclaration -> . modifiers memberDecl
    (502) empty -> .
    (278) expr_4 -> . STATIC
    (279) expr_4 -> . empty
    (17) modifiers -> . expr_8
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 475
    BLPAREN         reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    STATIC          shift and go to state 473
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifier                       shift and go to state 448
    modifiers                      shift and go to state 479
    classBodyDeclaration           shift and go to state 478
    empty                          shift and go to state 477
    expr_8                         shift and go to state 440
    expr_4                         shift and go to state 476
    expr_22                        shift and go to state 634
    annotation                     shift and go to state 443

state 548

    (308) expr_17 -> enumBodyDeclarations .

    BRPAREN         reduce using rule 308 (expr_17 -> enumBodyDeclarations .)



state 549

    (25) enumBody -> BLPAREN expr_15 expr_16 expr_17 . BRPAREN

    BRPAREN         shift and go to state 635



state 550

    (309) expr_17 -> empty .

    BRPAREN         reduce using rule 309 (expr_17 -> empty .)



state 551

    (297) expr_12 -> expr_12 COMMA typeParameter .

    MORE            reduce using rule 297 (expr_12 -> expr_12 COMMA typeParameter .)
    COMMA           reduce using rule 297 (expr_12 -> expr_12 COMMA typeParameter .)



state 552

    (23) typeBound -> type expr_14 .
    (302) expr_14 -> expr_14 . AND type

    COMMA           reduce using rule 23 (typeBound -> type expr_14 .)
    MORE            reduce using rule 23 (typeBound -> type expr_14 .)
    AND             shift and go to state 636



state 553

    (301) expr_14 -> AND . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    primitiveType                  shift and go to state 244
    classOrInterfaceType           shift and go to state 219
    type                           shift and go to state 637

state 554

    (303) expr_14 -> empty .

    AND             reduce using rule 303 (expr_14 -> empty .)
    COMMA           reduce using rule 303 (expr_14 -> empty .)
    MORE            reduce using rule 303 (expr_14 -> empty .)



state 555

    (34) interfaceBody -> BLPAREN expr_25 BRPAREN .

    SEMI            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    PUBLIC          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    PROTECTED       reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    PRIVATE         reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    ABSTRACT        reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    STATIC          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    FINAL           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    STRICTFP        reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    AT              reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    CLASS           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    ENUM            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    INTERFACE       reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    $end            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    BRPAREN         reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    ASSERT          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    IF              reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    FOR             reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    WHILE           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    DO              reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    TRY             reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    SWITCH          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    SYNCHRONIZED    reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    RETURN          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    THROW           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    BREAK           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    CONTINUE        reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    Identifier      reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    BLPAREN         reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    BOOLEAN         reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    CHAR            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    BYTE            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    SHORT           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    INT             reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    LONG            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    FLOAT           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    DOUBLE          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    PLUS            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    DASH            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    OP_INC          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    OP_DEC          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    TILDE           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    EXCLAMATION     reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    LPAREN          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    THIS            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    SUPER           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NEW             reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    VOID            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    CharacterLiteral reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    StringLiteral   reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NULL            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NUMBER          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    HEX_NUMBER      reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    LONG_NUMBER     reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NON_INTEGER_1   reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NON_INTEGER_2   reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NON_INTEGER_3   reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    TRUE            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    FALSE           reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    CASE            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    DEFAULT         reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    NATIVE          reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    TRANSIENT       reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    VOLATILE        reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)
    LESS            reduce using rule 34 (interfaceBody -> BLPAREN expr_25 BRPAREN .)



state 556

    (328) expr_25 -> expr_25 interfaceBodyDeclaration .

    BRPAREN         reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    SEMI            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    STATIC          reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    FINAL           reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    NATIVE          reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    AT              reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    VOID            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    LESS            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    INTERFACE       reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    CLASS           reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    ENUM            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    Identifier      reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    BOOLEAN         reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    CHAR            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    BYTE            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    SHORT           reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    INT             reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    LONG            reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    FLOAT           reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)
    DOUBLE          reduce using rule 328 (expr_25 -> expr_25 interfaceBodyDeclaration .)



state 557

    (54) interfaceMemberDecl -> VOID . Identifier voidInterfaceMethodDeclaratorRest

    Identifier      shift and go to state 638



state 558

    (63) interfaceGenericMethodDecl -> typeParameters . expr_27 Identifier interfaceMethodDeclaratorRest
    (332) expr_27 -> . type
    (333) expr_27 -> . VOID
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    VOID            shift and go to state 619
    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 622
    expr_27                        shift and go to state 639

state 559

    (50) interfaceBodyDeclaration -> modifiers interfaceMemberDecl .

    BRPAREN         reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SEMI            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PUBLIC          reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PROTECTED       reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    PRIVATE         reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    STATIC          reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    ABSTRACT        reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    FINAL           reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    NATIVE          reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SYNCHRONIZED    reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    TRANSIENT       reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    VOLATILE        reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    STRICTFP        reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    AT              reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    VOID            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    LESS            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    INTERFACE       reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    CLASS           reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    ENUM            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    Identifier      reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    BOOLEAN         reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    CHAR            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    BYTE            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    SHORT           reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    INT             reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    LONG            reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    FLOAT           reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)
    DOUBLE          reduce using rule 50 (interfaceBodyDeclaration -> modifiers interfaceMemberDecl .)



state 560

    (53) interfaceMemberDecl -> interfaceGenericMethodDecl .

    BRPAREN         reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SEMI            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PUBLIC          reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PROTECTED       reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    PRIVATE         reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    STATIC          reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    ABSTRACT        reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    FINAL           reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    NATIVE          reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SYNCHRONIZED    reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    TRANSIENT       reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    VOLATILE        reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    STRICTFP        reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    AT              reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    VOID            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    LESS            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    INTERFACE       reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    CLASS           reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    ENUM            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    Identifier      reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    BOOLEAN         reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    CHAR            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    BYTE            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    SHORT           reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    INT             reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    LONG            reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    FLOAT           reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)
    DOUBLE          reduce using rule 53 (interfaceMemberDecl -> interfaceGenericMethodDecl .)



state 561

    (57) interfaceMethodOrFieldDecl -> type . Identifier interfaceMethodOrFieldRest

    Identifier      shift and go to state 640



state 562

    (56) interfaceMemberDecl -> classDeclaration .

    BRPAREN         reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    SEMI            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    PUBLIC          reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    PROTECTED       reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    PRIVATE         reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    STATIC          reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    ABSTRACT        reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    FINAL           reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    NATIVE          reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    TRANSIENT       reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    VOLATILE        reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    STRICTFP        reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    AT              reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    VOID            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    LESS            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    INTERFACE       reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    CLASS           reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    ENUM            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    Identifier      reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    BOOLEAN         reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    CHAR            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    BYTE            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    SHORT           reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    INT             reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    LONG            reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    FLOAT           reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)
    DOUBLE          reduce using rule 56 (interfaceMemberDecl -> classDeclaration .)



state 563

    (52) interfaceMemberDecl -> interfaceMethodOrFieldDecl .

    BRPAREN         reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SEMI            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PUBLIC          reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PROTECTED       reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    PRIVATE         reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    STATIC          reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    ABSTRACT        reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    FINAL           reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    NATIVE          reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SYNCHRONIZED    reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    TRANSIENT       reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    VOLATILE        reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    STRICTFP        reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    AT              reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    VOID            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    LESS            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    INTERFACE       reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    CLASS           reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    ENUM            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    Identifier      reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    BOOLEAN         reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    CHAR            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    BYTE            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    SHORT           reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    INT             reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    LONG            reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    FLOAT           reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)
    DOUBLE          reduce using rule 52 (interfaceMemberDecl -> interfaceMethodOrFieldDecl .)



state 564

    (55) interfaceMemberDecl -> interfaceDeclaration .

    BRPAREN         reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    SEMI            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    PUBLIC          reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    PROTECTED       reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    PRIVATE         reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    STATIC          reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    FINAL           reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    NATIVE          reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    VOLATILE        reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    STRICTFP        reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    AT              reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    VOID            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    LESS            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    INTERFACE       reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    CLASS           reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    ENUM            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    Identifier      reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    CHAR            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    BYTE            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    SHORT           reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    INT             reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    LONG            reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    FLOAT           reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)
    DOUBLE          reduce using rule 55 (interfaceMemberDecl -> interfaceDeclaration .)



state 565

    (405) expr_57 -> empty .

    BRPAREN         reduce using rule 405 (expr_57 -> empty .)
    PUBLIC          reduce using rule 405 (expr_57 -> empty .)
    PROTECTED       reduce using rule 405 (expr_57 -> empty .)
    PRIVATE         reduce using rule 405 (expr_57 -> empty .)
    STATIC          reduce using rule 405 (expr_57 -> empty .)
    ABSTRACT        reduce using rule 405 (expr_57 -> empty .)
    FINAL           reduce using rule 405 (expr_57 -> empty .)
    NATIVE          reduce using rule 405 (expr_57 -> empty .)
    SYNCHRONIZED    reduce using rule 405 (expr_57 -> empty .)
    TRANSIENT       reduce using rule 405 (expr_57 -> empty .)
    VOLATILE        reduce using rule 405 (expr_57 -> empty .)
    STRICTFP        reduce using rule 405 (expr_57 -> empty .)
    AT              reduce using rule 405 (expr_57 -> empty .)
    CLASS           reduce using rule 405 (expr_57 -> empty .)
    INTERFACE       reduce using rule 405 (expr_57 -> empty .)
    ENUM            reduce using rule 405 (expr_57 -> empty .)
    Identifier      reduce using rule 405 (expr_57 -> empty .)
    BOOLEAN         reduce using rule 405 (expr_57 -> empty .)
    CHAR            reduce using rule 405 (expr_57 -> empty .)
    BYTE            reduce using rule 405 (expr_57 -> empty .)
    SHORT           reduce using rule 405 (expr_57 -> empty .)
    INT             reduce using rule 405 (expr_57 -> empty .)
    LONG            reduce using rule 405 (expr_57 -> empty .)
    FLOAT           reduce using rule 405 (expr_57 -> empty .)
    DOUBLE          reduce using rule 405 (expr_57 -> empty .)



state 566

    (404) expr_57 -> SEMI .

    BRPAREN         reduce using rule 404 (expr_57 -> SEMI .)
    PUBLIC          reduce using rule 404 (expr_57 -> SEMI .)
    PROTECTED       reduce using rule 404 (expr_57 -> SEMI .)
    PRIVATE         reduce using rule 404 (expr_57 -> SEMI .)
    STATIC          reduce using rule 404 (expr_57 -> SEMI .)
    ABSTRACT        reduce using rule 404 (expr_57 -> SEMI .)
    FINAL           reduce using rule 404 (expr_57 -> SEMI .)
    NATIVE          reduce using rule 404 (expr_57 -> SEMI .)
    SYNCHRONIZED    reduce using rule 404 (expr_57 -> SEMI .)
    TRANSIENT       reduce using rule 404 (expr_57 -> SEMI .)
    VOLATILE        reduce using rule 404 (expr_57 -> SEMI .)
    STRICTFP        reduce using rule 404 (expr_57 -> SEMI .)
    AT              reduce using rule 404 (expr_57 -> SEMI .)
    CLASS           reduce using rule 404 (expr_57 -> SEMI .)
    INTERFACE       reduce using rule 404 (expr_57 -> SEMI .)
    ENUM            reduce using rule 404 (expr_57 -> SEMI .)
    Identifier      reduce using rule 404 (expr_57 -> SEMI .)
    BOOLEAN         reduce using rule 404 (expr_57 -> SEMI .)
    CHAR            reduce using rule 404 (expr_57 -> SEMI .)
    BYTE            reduce using rule 404 (expr_57 -> SEMI .)
    SHORT           reduce using rule 404 (expr_57 -> SEMI .)
    INT             reduce using rule 404 (expr_57 -> SEMI .)
    LONG            reduce using rule 404 (expr_57 -> SEMI .)
    FLOAT           reduce using rule 404 (expr_57 -> SEMI .)
    DOUBLE          reduce using rule 404 (expr_57 -> SEMI .)



state 567

    (142) annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .

    BRPAREN         reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    PUBLIC          reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    PROTECTED       reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    PRIVATE         reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    STATIC          reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    ABSTRACT        reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    FINAL           reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    NATIVE          reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    SYNCHRONIZED    reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    TRANSIENT       reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    VOLATILE        reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    STRICTFP        reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    AT              reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    CLASS           reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    INTERFACE       reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    ENUM            reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    Identifier      reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    BOOLEAN         reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    CHAR            reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    BYTE            reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    SHORT           reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    INT             reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    LONG            reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    FLOAT           reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)
    DOUBLE          reduce using rule 142 (annotationTypeElementRest -> normalInterfaceDeclaration expr_57 .)



state 568

    (141) annotationTypeElementRest -> normalClassDeclaration expr_57 .

    BRPAREN         reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    PUBLIC          reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    PROTECTED       reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    PRIVATE         reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    STATIC          reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    ABSTRACT        reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    FINAL           reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    NATIVE          reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    SYNCHRONIZED    reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    TRANSIENT       reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    VOLATILE        reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    STRICTFP        reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    AT              reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    CLASS           reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    INTERFACE       reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    ENUM            reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    Identifier      reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    BOOLEAN         reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    CHAR            reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    BYTE            reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    SHORT           reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    INT             reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    LONG            reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    FLOAT           reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)
    DOUBLE          reduce using rule 141 (annotationTypeElementRest -> normalClassDeclaration expr_57 .)



state 569

    (140) annotationTypeElementRest -> type annotationMethodOrConstantRest . SEMI

    SEMI            shift and go to state 641



state 570

    (148) annotationConstantRest -> variableDeclarators .

    SEMI            reduce using rule 148 (annotationConstantRest -> variableDeclarators .)



state 571

    (146) annotationMethodOrConstantRest -> annotationConstantRest .

    SEMI            reduce using rule 146 (annotationMethodOrConstantRest -> annotationConstantRest .)



state 572

    (68) variableDeclarator -> variableDeclaratorId . expr_32
    (344) expr_32 -> . EQUALS variableInitializer
    (345) expr_32 -> . empty
    (502) empty -> .

    EQUALS          shift and go to state 643
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)


    expr_32                        shift and go to state 642
    empty                          shift and go to state 644

state 573

    (147) annotationMethodRest -> Identifier . LPAREN RPAREN expr_58
    (71) variableDeclaratorId -> Identifier . expr_28
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    LPAREN          shift and go to state 646
    FLPAREN         shift and go to state 200
    EQUALS          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 645
    empty                          shift and go to state 202

state 574

    (145) annotationMethodOrConstantRest -> annotationMethodRest .

    SEMI            reduce using rule 145 (annotationMethodOrConstantRest -> annotationMethodRest .)



state 575

    (67) variableDeclarators -> variableDeclarator . expr_31
    (341) expr_31 -> . COMMA variableDeclarator
    (342) expr_31 -> . expr_31 COMMA variableDeclarator
    (343) expr_31 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 648
    SEMI            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_31                        shift and go to state 647
    empty                          shift and go to state 649

state 576

    (143) annotationTypeElementRest -> enumDeclaration expr_57 .

    BRPAREN         reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    PUBLIC          reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    PROTECTED       reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    PRIVATE         reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    STATIC          reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    ABSTRACT        reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    FINAL           reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    NATIVE          reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    SYNCHRONIZED    reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    TRANSIENT       reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    VOLATILE        reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    STRICTFP        reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    AT              reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    CLASS           reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    INTERFACE       reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    ENUM            reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    Identifier      reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    BOOLEAN         reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    CHAR            reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    BYTE            reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    SHORT           reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    INT             reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    LONG            reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    FLOAT           reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)
    DOUBLE          reduce using rule 143 (annotationTypeElementRest -> enumDeclaration expr_57 .)



state 577

    (144) annotationTypeElementRest -> annotationTypeDeclaration expr_57 .

    BRPAREN         reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    PUBLIC          reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    PROTECTED       reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    PRIVATE         reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    STATIC          reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    ABSTRACT        reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    FINAL           reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    NATIVE          reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    SYNCHRONIZED    reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    TRANSIENT       reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    VOLATILE        reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    STRICTFP        reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    AT              reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    CLASS           reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    INTERFACE       reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    ENUM            reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    Identifier      reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    BOOLEAN         reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    CHAR            reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    BYTE            reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    SHORT           reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    INT             reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    LONG            reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    FLOAT           reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)
    DOUBLE          reduce using rule 144 (annotationTypeElementRest -> annotationTypeDeclaration expr_57 .)



state 578

    (362) expr_39 -> expr_39 COMMA typeArgument .

    MORE            reduce using rule 362 (expr_39 -> expr_39 COMMA typeArgument .)
    COMMA           reduce using rule 362 (expr_39 -> expr_39 COMMA typeArgument .)



state 579

    (359) expr_38 -> expr_38 DOT Identifier expr_typeArguments .

    DOT             reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    FLPAREN         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    LPAREN          reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    RPAREN          reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    OP_EQ           reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    OP_NE           reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    AND             reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    CARET           reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    VERTICAL        reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    OP_LAND         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    OP_LOR          reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    QUES            reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    COMMA           reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    BRPAREN         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    EQUALS          reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_ADD         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_SUB         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_MUL         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_DIV         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_AND         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_OR          reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_XOR         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    ASS_MOD         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    LESS            reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    MORE            reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    COLON           reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    FRPAREN         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    SEMI            reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    BLPAREN         reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    IMPLEMENTS      reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    Identifier      reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)
    OP_ARRAY        reduce using rule 359 (expr_38 -> expr_38 DOT Identifier expr_typeArguments .)



state 580

    (354) expr_36 -> variableInitializer . expr_34 expr_35
    (349) expr_34 -> . COMMA variableInitializer
    (350) expr_34 -> . expr_34 COMMA variableInitializer
    (351) expr_34 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 651
    BRPAREN         reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_34                        shift and go to state 650
    empty                          shift and go to state 652

state 581

    (73) variableInitializer -> expression .

    COMMA           reduce using rule 73 (variableInitializer -> expression .)
    BRPAREN         reduce using rule 73 (variableInitializer -> expression .)
    SEMI            reduce using rule 73 (variableInitializer -> expression .)



state 582

    (72) variableInitializer -> arrayInitializer .

    COMMA           reduce using rule 72 (variableInitializer -> arrayInitializer .)
    BRPAREN         reduce using rule 72 (variableInitializer -> arrayInitializer .)
    SEMI            reduce using rule 72 (variableInitializer -> arrayInitializer .)



state 583

    (355) expr_36 -> empty .

    BRPAREN         reduce using rule 355 (expr_36 -> empty .)



state 584

    (74) arrayInitializer -> BLPAREN expr_36 . BRPAREN

    BRPAREN         shift and go to state 653



state 585

    (492) expr_92 -> expr_92 FLPAREN . expression FRPAREN
    (334) expr_28 -> FLPAREN . FRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    FRPAREN         shift and go to state 301
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 450

state 586

    (496) expr_94 -> expression FRPAREN expr_92 expr_28 .
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             reduce using rule 496 (expr_94 -> expression FRPAREN expr_92 expr_28 .)
    OP_INC          reduce using rule 496 (expr_94 -> expression FRPAREN expr_92 expr_28 .)
    OP_DEC          reduce using rule 496 (expr_94 -> expression FRPAREN expr_92 expr_28 .)
    FLPAREN         shift and go to state 302

  ! FLPAREN         [ reduce using rule 496 (expr_94 -> expression FRPAREN expr_92 expr_28 .) ]


state 587

    (150) block -> BLPAREN expr_blockStatment . BRPAREN
    (378) expr_blockStatment -> expr_blockStatment . blockStatement
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         shift and go to state 656
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    localVariableDeclarationStatement shift and go to state 591
    blockStatement                 shift and go to state 654
    booleanLiteral                 shift and go to state 73
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    classOrInterfaceDeclaration    shift and go to state 589
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    type                           shift and go to state 605
    empty                          shift and go to state 655
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 614
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 588

    (377) expr_blockStatment -> blockStatement .

    BRPAREN         reduce using rule 377 (expr_blockStatment -> blockStatement .)
    ASSERT          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    IF              reduce using rule 377 (expr_blockStatment -> blockStatement .)
    FOR             reduce using rule 377 (expr_blockStatment -> blockStatement .)
    WHILE           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    DO              reduce using rule 377 (expr_blockStatment -> blockStatement .)
    TRY             reduce using rule 377 (expr_blockStatment -> blockStatement .)
    SWITCH          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    SYNCHRONIZED    reduce using rule 377 (expr_blockStatment -> blockStatement .)
    RETURN          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    THROW           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    BREAK           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    CONTINUE        reduce using rule 377 (expr_blockStatment -> blockStatement .)
    SEMI            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    Identifier      reduce using rule 377 (expr_blockStatment -> blockStatement .)
    BLPAREN         reduce using rule 377 (expr_blockStatment -> blockStatement .)
    BOOLEAN         reduce using rule 377 (expr_blockStatment -> blockStatement .)
    CHAR            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    BYTE            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    SHORT           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    INT             reduce using rule 377 (expr_blockStatment -> blockStatement .)
    LONG            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    FLOAT           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    DOUBLE          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    PUBLIC          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    PROTECTED       reduce using rule 377 (expr_blockStatment -> blockStatement .)
    PRIVATE         reduce using rule 377 (expr_blockStatment -> blockStatement .)
    ABSTRACT        reduce using rule 377 (expr_blockStatment -> blockStatement .)
    STATIC          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    FINAL           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    STRICTFP        reduce using rule 377 (expr_blockStatment -> blockStatement .)
    AT              reduce using rule 377 (expr_blockStatment -> blockStatement .)
    PLUS            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    DASH            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    OP_INC          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    OP_DEC          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    TILDE           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    EXCLAMATION     reduce using rule 377 (expr_blockStatment -> blockStatement .)
    LPAREN          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    THIS            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    SUPER           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NEW             reduce using rule 377 (expr_blockStatment -> blockStatement .)
    VOID            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    CharacterLiteral reduce using rule 377 (expr_blockStatment -> blockStatement .)
    StringLiteral   reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NULL            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NUMBER          reduce using rule 377 (expr_blockStatment -> blockStatement .)
    HEX_NUMBER      reduce using rule 377 (expr_blockStatment -> blockStatement .)
    LONG_NUMBER     reduce using rule 377 (expr_blockStatment -> blockStatement .)
    LONG_HEX_NUMBER reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NON_INTEGER_1   reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NON_INTEGER_2   reduce using rule 377 (expr_blockStatment -> blockStatement .)
    NON_INTEGER_3   reduce using rule 377 (expr_blockStatment -> blockStatement .)
    TRUE            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    FALSE           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    CLASS           reduce using rule 377 (expr_blockStatment -> blockStatement .)
    ENUM            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    INTERFACE       reduce using rule 377 (expr_blockStatment -> blockStatement .)
    CASE            reduce using rule 377 (expr_blockStatment -> blockStatement .)
    DEFAULT         reduce using rule 377 (expr_blockStatment -> blockStatement .)



state 589

    (152) blockStatement -> classOrInterfaceDeclaration .

    ASSERT          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    IF              reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    FOR             reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    WHILE           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    DO              reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    TRY             reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    SWITCH          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    RETURN          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    THROW           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    BREAK           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    CONTINUE        reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    SEMI            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    Identifier      reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    BLPAREN         reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    BOOLEAN         reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    CHAR            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    BYTE            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    SHORT           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    INT             reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    LONG            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    FLOAT           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    DOUBLE          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    AT              reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    PLUS            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    DASH            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    OP_INC          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    OP_DEC          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    TILDE           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    LPAREN          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    THIS            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    SUPER           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NEW             reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    VOID            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    CharacterLiteral reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    StringLiteral   reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NULL            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NUMBER          reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    TRUE            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    FALSE           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    CLASS           reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    ENUM            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    INTERFACE       reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    CASE            reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    DEFAULT         reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)
    BRPAREN         reduce using rule 152 (blockStatement -> classOrInterfaceDeclaration .)



state 590

    (408) expr_variableModifier -> variableModifier .

    FINAL           reduce using rule 408 (expr_variableModifier -> variableModifier .)
    AT              reduce using rule 408 (expr_variableModifier -> variableModifier .)
    Identifier      reduce using rule 408 (expr_variableModifier -> variableModifier .)
    BOOLEAN         reduce using rule 408 (expr_variableModifier -> variableModifier .)
    CHAR            reduce using rule 408 (expr_variableModifier -> variableModifier .)
    BYTE            reduce using rule 408 (expr_variableModifier -> variableModifier .)
    SHORT           reduce using rule 408 (expr_variableModifier -> variableModifier .)
    INT             reduce using rule 408 (expr_variableModifier -> variableModifier .)
    LONG            reduce using rule 408 (expr_variableModifier -> variableModifier .)
    FLOAT           reduce using rule 408 (expr_variableModifier -> variableModifier .)
    DOUBLE          reduce using rule 408 (expr_variableModifier -> variableModifier .)



state 591

    (151) blockStatement -> localVariableDeclarationStatement .

    ASSERT          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    IF              reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    FOR             reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    WHILE           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    DO              reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    TRY             reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    SWITCH          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    RETURN          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    THROW           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    BREAK           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    CONTINUE        reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    SEMI            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    Identifier      reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    BLPAREN         reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    CHAR            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    BYTE            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    SHORT           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    INT             reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    LONG            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    FLOAT           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    DOUBLE          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    PUBLIC          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    PROTECTED       reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    PRIVATE         reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    ABSTRACT        reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    STATIC          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    FINAL           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    STRICTFP        reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    AT              reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    PLUS            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    DASH            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    OP_INC          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    OP_DEC          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    TILDE           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    EXCLAMATION     reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    LPAREN          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    THIS            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    SUPER           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NEW             reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    VOID            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    CharacterLiteral reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    StringLiteral   reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NULL            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NUMBER          reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    HEX_NUMBER      reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    LONG_NUMBER     reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    LONG_HEX_NUMBER reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_1   reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_2   reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_3   reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    TRUE            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    FALSE           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    CLASS           reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    ENUM            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    INTERFACE       reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    CASE            reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    DEFAULT         reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)
    BRPAREN         reduce using rule 151 (blockStatement -> localVariableDeclarationStatement .)



state 592

    (167) statement -> RETURN . expr_63 SEMI
    (418) expr_63 -> . expression
    (419) expr_63 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    SEMI            reduce using rule 502 (empty -> .)
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    expr_63                        shift and go to state 657
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    empty                          shift and go to state 658
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 659

state 593

    (166) statement -> SYNCHRONIZED . parExpression block
    (188) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 661


    parExpression                  shift and go to state 660

state 594

    (15) classOrInterfaceModifier -> FINAL .
    (101) variableModifier -> FINAL .

  ! reduce/reduce conflict for FINAL resolved using rule 15 (classOrInterfaceModifier -> FINAL .).
  ! reduce/reduce conflict for AT resolved using rule 15 (classOrInterfaceModifier -> FINAL .).
    PUBLIC          reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    PROTECTED       reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    PRIVATE         reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    ABSTRACT        reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    STATIC          reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    FINAL           reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    STRICTFP        reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    AT              reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    CLASS           reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    ENUM            reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    INTERFACE       reduce using rule 15 (classOrInterfaceModifier -> FINAL .)
    Identifier      reduce using rule 101 (variableModifier -> FINAL .)
    BOOLEAN         reduce using rule 101 (variableModifier -> FINAL .)
    CHAR            reduce using rule 101 (variableModifier -> FINAL .)
    BYTE            reduce using rule 101 (variableModifier -> FINAL .)
    SHORT           reduce using rule 101 (variableModifier -> FINAL .)
    INT             reduce using rule 101 (variableModifier -> FINAL .)
    LONG            reduce using rule 101 (variableModifier -> FINAL .)
    FLOAT           reduce using rule 101 (variableModifier -> FINAL .)
    DOUBLE          reduce using rule 101 (variableModifier -> FINAL .)

  ! FINAL           [ reduce using rule 101 (variableModifier -> FINAL .) ]
  ! AT              [ reduce using rule 101 (variableModifier -> FINAL .) ]


state 595

    (161) statement -> FOR . LPAREN forControl RPAREN statement

    LPAREN          shift and go to state 662



state 596

    (164) statement -> TRY . block expr_62
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 663

state 597

    (173) statement -> Identifier . COLON statement
    (92) classOrInterfaceType -> Identifier . expr_typeArguments expr_38
    (240) primary -> Identifier . expr_49 expr_91
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    COLON           shift and go to state 664
    DOT             shift and go to state 37
    LESS            shift and go to state 290
    FLPAREN         reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    typeArguments                  shift and go to state 291
    expr_49                        shift and go to state 197
    expr_typeArguments             shift and go to state 292
    empty                          shift and go to state 327

state 598

    (170) statement -> CONTINUE . expr_64 SEMI
    (420) expr_64 -> . Identifier
    (421) expr_64 -> . empty
    (502) empty -> .

    Identifier      shift and go to state 666
    SEMI            reduce using rule 502 (empty -> .)


    expr_64                        shift and go to state 665
    empty                          shift and go to state 667

state 599

    (190) statementExpression -> expression .

    SEMI            reduce using rule 190 (statementExpression -> expression .)



state 600

    (158) statement -> block .

    BRPAREN         reduce using rule 158 (statement -> block .)
    ASSERT          reduce using rule 158 (statement -> block .)
    IF              reduce using rule 158 (statement -> block .)
    FOR             reduce using rule 158 (statement -> block .)
    WHILE           reduce using rule 158 (statement -> block .)
    DO              reduce using rule 158 (statement -> block .)
    TRY             reduce using rule 158 (statement -> block .)
    SWITCH          reduce using rule 158 (statement -> block .)
    SYNCHRONIZED    reduce using rule 158 (statement -> block .)
    RETURN          reduce using rule 158 (statement -> block .)
    THROW           reduce using rule 158 (statement -> block .)
    BREAK           reduce using rule 158 (statement -> block .)
    CONTINUE        reduce using rule 158 (statement -> block .)
    SEMI            reduce using rule 158 (statement -> block .)
    Identifier      reduce using rule 158 (statement -> block .)
    BLPAREN         reduce using rule 158 (statement -> block .)
    BOOLEAN         reduce using rule 158 (statement -> block .)
    CHAR            reduce using rule 158 (statement -> block .)
    BYTE            reduce using rule 158 (statement -> block .)
    SHORT           reduce using rule 158 (statement -> block .)
    INT             reduce using rule 158 (statement -> block .)
    LONG            reduce using rule 158 (statement -> block .)
    FLOAT           reduce using rule 158 (statement -> block .)
    DOUBLE          reduce using rule 158 (statement -> block .)
    PUBLIC          reduce using rule 158 (statement -> block .)
    PROTECTED       reduce using rule 158 (statement -> block .)
    PRIVATE         reduce using rule 158 (statement -> block .)
    ABSTRACT        reduce using rule 158 (statement -> block .)
    STATIC          reduce using rule 158 (statement -> block .)
    FINAL           reduce using rule 158 (statement -> block .)
    STRICTFP        reduce using rule 158 (statement -> block .)
    AT              reduce using rule 158 (statement -> block .)
    PLUS            reduce using rule 158 (statement -> block .)
    DASH            reduce using rule 158 (statement -> block .)
    OP_INC          reduce using rule 158 (statement -> block .)
    OP_DEC          reduce using rule 158 (statement -> block .)
    TILDE           reduce using rule 158 (statement -> block .)
    EXCLAMATION     reduce using rule 158 (statement -> block .)
    LPAREN          reduce using rule 158 (statement -> block .)
    THIS            reduce using rule 158 (statement -> block .)
    SUPER           reduce using rule 158 (statement -> block .)
    NEW             reduce using rule 158 (statement -> block .)
    VOID            reduce using rule 158 (statement -> block .)
    CharacterLiteral reduce using rule 158 (statement -> block .)
    StringLiteral   reduce using rule 158 (statement -> block .)
    NULL            reduce using rule 158 (statement -> block .)
    NUMBER          reduce using rule 158 (statement -> block .)
    HEX_NUMBER      reduce using rule 158 (statement -> block .)
    LONG_NUMBER     reduce using rule 158 (statement -> block .)
    LONG_HEX_NUMBER reduce using rule 158 (statement -> block .)
    NON_INTEGER_1   reduce using rule 158 (statement -> block .)
    NON_INTEGER_2   reduce using rule 158 (statement -> block .)
    NON_INTEGER_3   reduce using rule 158 (statement -> block .)
    TRUE            reduce using rule 158 (statement -> block .)
    FALSE           reduce using rule 158 (statement -> block .)
    CLASS           reduce using rule 158 (statement -> block .)
    ENUM            reduce using rule 158 (statement -> block .)
    INTERFACE       reduce using rule 158 (statement -> block .)
    ELSE            reduce using rule 158 (statement -> block .)
    CASE            reduce using rule 158 (statement -> block .)
    DEFAULT         reduce using rule 158 (statement -> block .)



state 601

    (154) localVariableDeclarationStatement -> localVariableDeclaration . SEMI

    SEMI            shift and go to state 668



state 602

    (162) statement -> WHILE . parExpression statement
    (188) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 661


    parExpression                  shift and go to state 669

state 603

    (165) statement -> SWITCH . parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (188) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 661


    parExpression                  shift and go to state 670

state 604

    (153) blockStatement -> statement .

    ASSERT          reduce using rule 153 (blockStatement -> statement .)
    IF              reduce using rule 153 (blockStatement -> statement .)
    FOR             reduce using rule 153 (blockStatement -> statement .)
    WHILE           reduce using rule 153 (blockStatement -> statement .)
    DO              reduce using rule 153 (blockStatement -> statement .)
    TRY             reduce using rule 153 (blockStatement -> statement .)
    SWITCH          reduce using rule 153 (blockStatement -> statement .)
    SYNCHRONIZED    reduce using rule 153 (blockStatement -> statement .)
    RETURN          reduce using rule 153 (blockStatement -> statement .)
    THROW           reduce using rule 153 (blockStatement -> statement .)
    BREAK           reduce using rule 153 (blockStatement -> statement .)
    CONTINUE        reduce using rule 153 (blockStatement -> statement .)
    SEMI            reduce using rule 153 (blockStatement -> statement .)
    Identifier      reduce using rule 153 (blockStatement -> statement .)
    BLPAREN         reduce using rule 153 (blockStatement -> statement .)
    BOOLEAN         reduce using rule 153 (blockStatement -> statement .)
    CHAR            reduce using rule 153 (blockStatement -> statement .)
    BYTE            reduce using rule 153 (blockStatement -> statement .)
    SHORT           reduce using rule 153 (blockStatement -> statement .)
    INT             reduce using rule 153 (blockStatement -> statement .)
    LONG            reduce using rule 153 (blockStatement -> statement .)
    FLOAT           reduce using rule 153 (blockStatement -> statement .)
    DOUBLE          reduce using rule 153 (blockStatement -> statement .)
    PUBLIC          reduce using rule 153 (blockStatement -> statement .)
    PROTECTED       reduce using rule 153 (blockStatement -> statement .)
    PRIVATE         reduce using rule 153 (blockStatement -> statement .)
    ABSTRACT        reduce using rule 153 (blockStatement -> statement .)
    STATIC          reduce using rule 153 (blockStatement -> statement .)
    FINAL           reduce using rule 153 (blockStatement -> statement .)
    STRICTFP        reduce using rule 153 (blockStatement -> statement .)
    AT              reduce using rule 153 (blockStatement -> statement .)
    PLUS            reduce using rule 153 (blockStatement -> statement .)
    DASH            reduce using rule 153 (blockStatement -> statement .)
    OP_INC          reduce using rule 153 (blockStatement -> statement .)
    OP_DEC          reduce using rule 153 (blockStatement -> statement .)
    TILDE           reduce using rule 153 (blockStatement -> statement .)
    EXCLAMATION     reduce using rule 153 (blockStatement -> statement .)
    LPAREN          reduce using rule 153 (blockStatement -> statement .)
    THIS            reduce using rule 153 (blockStatement -> statement .)
    SUPER           reduce using rule 153 (blockStatement -> statement .)
    NEW             reduce using rule 153 (blockStatement -> statement .)
    VOID            reduce using rule 153 (blockStatement -> statement .)
    CharacterLiteral reduce using rule 153 (blockStatement -> statement .)
    StringLiteral   reduce using rule 153 (blockStatement -> statement .)
    NULL            reduce using rule 153 (blockStatement -> statement .)
    NUMBER          reduce using rule 153 (blockStatement -> statement .)
    HEX_NUMBER      reduce using rule 153 (blockStatement -> statement .)
    LONG_NUMBER     reduce using rule 153 (blockStatement -> statement .)
    LONG_HEX_NUMBER reduce using rule 153 (blockStatement -> statement .)
    NON_INTEGER_1   reduce using rule 153 (blockStatement -> statement .)
    NON_INTEGER_2   reduce using rule 153 (blockStatement -> statement .)
    NON_INTEGER_3   reduce using rule 153 (blockStatement -> statement .)
    TRUE            reduce using rule 153 (blockStatement -> statement .)
    FALSE           reduce using rule 153 (blockStatement -> statement .)
    CLASS           reduce using rule 153 (blockStatement -> statement .)
    ENUM            reduce using rule 153 (blockStatement -> statement .)
    INTERFACE       reduce using rule 153 (blockStatement -> statement .)
    CASE            reduce using rule 153 (blockStatement -> statement .)
    DEFAULT         reduce using rule 153 (blockStatement -> statement .)
    BRPAREN         reduce using rule 153 (blockStatement -> statement .)



state 605

    (156) localVariableDeclaration -> type . variableDeclarators
    (67) variableDeclarators -> . variableDeclarator expr_31
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclarators            shift and go to state 671
    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 575

state 606

    (379) expr_blockStatment -> empty .
    (286) expr_7 -> empty .
    (410) expr_variableModifier -> empty .

  ! reduce/reduce conflict for PUBLIC resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for PROTECTED resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for PRIVATE resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for ABSTRACT resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for STATIC resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for STRICTFP resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for CLASS resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for ENUM resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for INTERFACE resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for FINAL resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for Identifier resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for BOOLEAN resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for CHAR resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for BYTE resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for SHORT resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for INT resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for LONG resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for FLOAT resolved using rule 379 (expr_blockStatment -> empty .).
  ! reduce/reduce conflict for DOUBLE resolved using rule 379 (expr_blockStatment -> empty .).
    BRPAREN         reduce using rule 379 (expr_blockStatment -> empty .)
    ASSERT          reduce using rule 379 (expr_blockStatment -> empty .)
    IF              reduce using rule 379 (expr_blockStatment -> empty .)
    FOR             reduce using rule 379 (expr_blockStatment -> empty .)
    WHILE           reduce using rule 379 (expr_blockStatment -> empty .)
    DO              reduce using rule 379 (expr_blockStatment -> empty .)
    TRY             reduce using rule 379 (expr_blockStatment -> empty .)
    SWITCH          reduce using rule 379 (expr_blockStatment -> empty .)
    SYNCHRONIZED    reduce using rule 379 (expr_blockStatment -> empty .)
    RETURN          reduce using rule 379 (expr_blockStatment -> empty .)
    THROW           reduce using rule 379 (expr_blockStatment -> empty .)
    BREAK           reduce using rule 379 (expr_blockStatment -> empty .)
    CONTINUE        reduce using rule 379 (expr_blockStatment -> empty .)
    SEMI            reduce using rule 379 (expr_blockStatment -> empty .)
    Identifier      reduce using rule 379 (expr_blockStatment -> empty .)
    BLPAREN         reduce using rule 379 (expr_blockStatment -> empty .)
    BOOLEAN         reduce using rule 379 (expr_blockStatment -> empty .)
    CHAR            reduce using rule 379 (expr_blockStatment -> empty .)
    BYTE            reduce using rule 379 (expr_blockStatment -> empty .)
    SHORT           reduce using rule 379 (expr_blockStatment -> empty .)
    INT             reduce using rule 379 (expr_blockStatment -> empty .)
    LONG            reduce using rule 379 (expr_blockStatment -> empty .)
    FLOAT           reduce using rule 379 (expr_blockStatment -> empty .)
    DOUBLE          reduce using rule 379 (expr_blockStatment -> empty .)
    PLUS            reduce using rule 379 (expr_blockStatment -> empty .)
    DASH            reduce using rule 379 (expr_blockStatment -> empty .)
    OP_INC          reduce using rule 379 (expr_blockStatment -> empty .)
    OP_DEC          reduce using rule 379 (expr_blockStatment -> empty .)
    TILDE           reduce using rule 379 (expr_blockStatment -> empty .)
    EXCLAMATION     reduce using rule 379 (expr_blockStatment -> empty .)
    LPAREN          reduce using rule 379 (expr_blockStatment -> empty .)
    THIS            reduce using rule 379 (expr_blockStatment -> empty .)
    SUPER           reduce using rule 379 (expr_blockStatment -> empty .)
    NEW             reduce using rule 379 (expr_blockStatment -> empty .)
    VOID            reduce using rule 379 (expr_blockStatment -> empty .)
    CharacterLiteral reduce using rule 379 (expr_blockStatment -> empty .)
    StringLiteral   reduce using rule 379 (expr_blockStatment -> empty .)
    NULL            reduce using rule 379 (expr_blockStatment -> empty .)
    NUMBER          reduce using rule 379 (expr_blockStatment -> empty .)
    HEX_NUMBER      reduce using rule 379 (expr_blockStatment -> empty .)
    LONG_NUMBER     reduce using rule 379 (expr_blockStatment -> empty .)
    LONG_HEX_NUMBER reduce using rule 379 (expr_blockStatment -> empty .)
    NON_INTEGER_1   reduce using rule 379 (expr_blockStatment -> empty .)
    NON_INTEGER_2   reduce using rule 379 (expr_blockStatment -> empty .)
    NON_INTEGER_3   reduce using rule 379 (expr_blockStatment -> empty .)
    TRUE            reduce using rule 379 (expr_blockStatment -> empty .)
    FALSE           reduce using rule 379 (expr_blockStatment -> empty .)
    CASE            reduce using rule 379 (expr_blockStatment -> empty .)
    DEFAULT         reduce using rule 379 (expr_blockStatment -> empty .)
    PUBLIC          reduce using rule 286 (expr_7 -> empty .)
    PROTECTED       reduce using rule 286 (expr_7 -> empty .)
    PRIVATE         reduce using rule 286 (expr_7 -> empty .)
    ABSTRACT        reduce using rule 286 (expr_7 -> empty .)
    STATIC          reduce using rule 286 (expr_7 -> empty .)
    FINAL           reduce using rule 286 (expr_7 -> empty .)
    STRICTFP        reduce using rule 286 (expr_7 -> empty .)
    AT              reduce using rule 286 (expr_7 -> empty .)
    CLASS           reduce using rule 286 (expr_7 -> empty .)
    ENUM            reduce using rule 286 (expr_7 -> empty .)
    INTERFACE       reduce using rule 286 (expr_7 -> empty .)

  ! PUBLIC          [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! PROTECTED       [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! PRIVATE         [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! ABSTRACT        [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! STATIC          [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! FINAL           [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! STRICTFP        [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! AT              [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! CLASS           [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! ENUM            [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! INTERFACE       [ reduce using rule 379 (expr_blockStatment -> empty .) ]
  ! FINAL           [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! AT              [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! Identifier      [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! BOOLEAN         [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! CHAR            [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! BYTE            [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! SHORT           [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! INT             [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! LONG            [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! FLOAT           [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! DOUBLE          [ reduce using rule 410 (expr_variableModifier -> empty .) ]


state 607

    (155) localVariableDeclaration -> variableModifiers . type variableDeclarators
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 673

state 608

    (91) type -> primitiveType . expr_28
    (241) primary -> primitiveType . expr_28 DOT CLASS
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    DOT             reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 329
    empty                          shift and go to state 202

state 609

    (169) statement -> BREAK . expr_64 SEMI
    (420) expr_64 -> . Identifier
    (421) expr_64 -> . empty
    (502) empty -> .

    Identifier      shift and go to state 666
    SEMI            reduce using rule 502 (empty -> .)


    expr_64                        shift and go to state 674
    empty                          shift and go to state 667

state 610

    (163) statement -> DO . statement WHILE parExpression SEMI
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 676
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 611

    (157) variableModifiers -> expr_variableModifier .
    (409) expr_variableModifier -> expr_variableModifier . variableModifier
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52

    Identifier      reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    BOOLEAN         reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    CHAR            reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    BYTE            reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    SHORT           reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    INT             reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    LONG            reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    FLOAT           reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    DOUBLE          reduce using rule 157 (variableModifiers -> expr_variableModifier .)
    FINAL           shift and go to state 679
    AT              shift and go to state 6


    variableModifier               shift and go to state 678
    annotation                     shift and go to state 677

state 612

    (159) statement -> ASSERT . expression expr_60 SEMI
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 680

state 613

    (171) statement -> SEMI .

    BRPAREN         reduce using rule 171 (statement -> SEMI .)
    ASSERT          reduce using rule 171 (statement -> SEMI .)
    IF              reduce using rule 171 (statement -> SEMI .)
    FOR             reduce using rule 171 (statement -> SEMI .)
    WHILE           reduce using rule 171 (statement -> SEMI .)
    DO              reduce using rule 171 (statement -> SEMI .)
    TRY             reduce using rule 171 (statement -> SEMI .)
    SWITCH          reduce using rule 171 (statement -> SEMI .)
    SYNCHRONIZED    reduce using rule 171 (statement -> SEMI .)
    RETURN          reduce using rule 171 (statement -> SEMI .)
    THROW           reduce using rule 171 (statement -> SEMI .)
    BREAK           reduce using rule 171 (statement -> SEMI .)
    CONTINUE        reduce using rule 171 (statement -> SEMI .)
    SEMI            reduce using rule 171 (statement -> SEMI .)
    Identifier      reduce using rule 171 (statement -> SEMI .)
    BLPAREN         reduce using rule 171 (statement -> SEMI .)
    BOOLEAN         reduce using rule 171 (statement -> SEMI .)
    CHAR            reduce using rule 171 (statement -> SEMI .)
    BYTE            reduce using rule 171 (statement -> SEMI .)
    SHORT           reduce using rule 171 (statement -> SEMI .)
    INT             reduce using rule 171 (statement -> SEMI .)
    LONG            reduce using rule 171 (statement -> SEMI .)
    FLOAT           reduce using rule 171 (statement -> SEMI .)
    DOUBLE          reduce using rule 171 (statement -> SEMI .)
    PUBLIC          reduce using rule 171 (statement -> SEMI .)
    PROTECTED       reduce using rule 171 (statement -> SEMI .)
    PRIVATE         reduce using rule 171 (statement -> SEMI .)
    ABSTRACT        reduce using rule 171 (statement -> SEMI .)
    STATIC          reduce using rule 171 (statement -> SEMI .)
    FINAL           reduce using rule 171 (statement -> SEMI .)
    STRICTFP        reduce using rule 171 (statement -> SEMI .)
    AT              reduce using rule 171 (statement -> SEMI .)
    PLUS            reduce using rule 171 (statement -> SEMI .)
    DASH            reduce using rule 171 (statement -> SEMI .)
    OP_INC          reduce using rule 171 (statement -> SEMI .)
    OP_DEC          reduce using rule 171 (statement -> SEMI .)
    TILDE           reduce using rule 171 (statement -> SEMI .)
    EXCLAMATION     reduce using rule 171 (statement -> SEMI .)
    LPAREN          reduce using rule 171 (statement -> SEMI .)
    THIS            reduce using rule 171 (statement -> SEMI .)
    SUPER           reduce using rule 171 (statement -> SEMI .)
    NEW             reduce using rule 171 (statement -> SEMI .)
    VOID            reduce using rule 171 (statement -> SEMI .)
    CharacterLiteral reduce using rule 171 (statement -> SEMI .)
    StringLiteral   reduce using rule 171 (statement -> SEMI .)
    NULL            reduce using rule 171 (statement -> SEMI .)
    NUMBER          reduce using rule 171 (statement -> SEMI .)
    HEX_NUMBER      reduce using rule 171 (statement -> SEMI .)
    LONG_NUMBER     reduce using rule 171 (statement -> SEMI .)
    LONG_HEX_NUMBER reduce using rule 171 (statement -> SEMI .)
    NON_INTEGER_1   reduce using rule 171 (statement -> SEMI .)
    NON_INTEGER_2   reduce using rule 171 (statement -> SEMI .)
    NON_INTEGER_3   reduce using rule 171 (statement -> SEMI .)
    TRUE            reduce using rule 171 (statement -> SEMI .)
    FALSE           reduce using rule 171 (statement -> SEMI .)
    CLASS           reduce using rule 171 (statement -> SEMI .)
    ENUM            reduce using rule 171 (statement -> SEMI .)
    INTERFACE       reduce using rule 171 (statement -> SEMI .)
    ELSE            reduce using rule 171 (statement -> SEMI .)
    CASE            reduce using rule 171 (statement -> SEMI .)
    DEFAULT         reduce using rule 171 (statement -> SEMI .)



state 614

    (9) classOrInterfaceModifier -> annotation .
    (102) variableModifier -> annotation .

  ! reduce/reduce conflict for FINAL resolved using rule 9 (classOrInterfaceModifier -> annotation .).
  ! reduce/reduce conflict for AT resolved using rule 9 (classOrInterfaceModifier -> annotation .).
    PUBLIC          reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    PROTECTED       reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    PRIVATE         reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    ABSTRACT        reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    STATIC          reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    FINAL           reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    STRICTFP        reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    AT              reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    CLASS           reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    ENUM            reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    INTERFACE       reduce using rule 9 (classOrInterfaceModifier -> annotation .)
    Identifier      reduce using rule 102 (variableModifier -> annotation .)
    BOOLEAN         reduce using rule 102 (variableModifier -> annotation .)
    CHAR            reduce using rule 102 (variableModifier -> annotation .)
    BYTE            reduce using rule 102 (variableModifier -> annotation .)
    SHORT           reduce using rule 102 (variableModifier -> annotation .)
    INT             reduce using rule 102 (variableModifier -> annotation .)
    LONG            reduce using rule 102 (variableModifier -> annotation .)
    FLOAT           reduce using rule 102 (variableModifier -> annotation .)
    DOUBLE          reduce using rule 102 (variableModifier -> annotation .)

  ! FINAL           [ reduce using rule 102 (variableModifier -> annotation .) ]
  ! AT              [ reduce using rule 102 (variableModifier -> annotation .) ]


state 615

    (160) statement -> IF . parExpression statement expr_61
    (188) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 661


    parExpression                  shift and go to state 681

state 616

    (172) statement -> statementExpression . SEMI

    SEMI            shift and go to state 682



state 617

    (168) statement -> THROW . expression SEMI
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 683

state 618

    (40) memberDecl -> VOID Identifier . voidMethodDeclaratorRest
    (61) voidMethodDeclaratorRest -> . formalParameters throwsList expr_methdoBody
    (107) formalParameters -> . LPAREN expr_43 RPAREN

    LPAREN          shift and go to state 631


    formalParameters               shift and go to state 684
    voidMethodDeclaratorRest       shift and go to state 685

state 619

    (333) expr_27 -> VOID .

    Identifier      reduce using rule 333 (expr_27 -> VOID .)



state 620

    (45) genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .

    BRPAREN         reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SEMI            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    STATIC          reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PUBLIC          reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PROTECTED       reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    PRIVATE         reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    ABSTRACT        reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    FINAL           reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    NATIVE          reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SYNCHRONIZED    reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    TRANSIENT       reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    VOLATILE        reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    STRICTFP        reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    AT              reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BLPAREN         reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    VOID            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    Identifier      reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    LESS            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    INTERFACE       reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    CLASS           reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    ENUM            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BOOLEAN         reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    CHAR            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    BYTE            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    SHORT           reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    INT             reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    LONG            reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    FLOAT           reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)
    DOUBLE          reduce using rule 45 (genericMethodOrConstructorDecl -> typeParameters genericMethodOrConstructorRest .)



state 621

    (47) genericMethodOrConstructorRest -> Identifier . constructorDeclaratorRest
    (92) classOrInterfaceType -> Identifier . expr_typeArguments expr_38
    (65) constructorDeclaratorRest -> . formalParameters throwsList constructorBody
    (356) expr_typeArguments -> . typeArguments
    (357) expr_typeArguments -> . empty
    (107) formalParameters -> . LPAREN expr_43 RPAREN
    (103) typeArguments -> . LESS typeArgument expr_39 MORE
    (502) empty -> .

    LPAREN          shift and go to state 631
    LESS            shift and go to state 290
    DOT             reduce using rule 502 (empty -> .)
    FLPAREN         reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)


    constructorDeclaratorRest      shift and go to state 686
    typeArguments                  shift and go to state 291
    formalParameters               shift and go to state 630
    expr_typeArguments             shift and go to state 292
    empty                          shift and go to state 293

state 622

    (332) expr_27 -> type .

    Identifier      reduce using rule 332 (expr_27 -> type .)



state 623

    (46) genericMethodOrConstructorRest -> expr_27 . Identifier methodDeclaratorRest

    Identifier      shift and go to state 687



state 624

    (49) fieldDeclaration -> variableDeclarators . SEMI

    SEMI            shift and go to state 688



state 625

    (331) expr_26 -> fieldDeclaration .

    BRPAREN         reduce using rule 331 (expr_26 -> fieldDeclaration .)
    SEMI            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    STATIC          reduce using rule 331 (expr_26 -> fieldDeclaration .)
    PUBLIC          reduce using rule 331 (expr_26 -> fieldDeclaration .)
    PROTECTED       reduce using rule 331 (expr_26 -> fieldDeclaration .)
    PRIVATE         reduce using rule 331 (expr_26 -> fieldDeclaration .)
    ABSTRACT        reduce using rule 331 (expr_26 -> fieldDeclaration .)
    FINAL           reduce using rule 331 (expr_26 -> fieldDeclaration .)
    NATIVE          reduce using rule 331 (expr_26 -> fieldDeclaration .)
    SYNCHRONIZED    reduce using rule 331 (expr_26 -> fieldDeclaration .)
    TRANSIENT       reduce using rule 331 (expr_26 -> fieldDeclaration .)
    VOLATILE        reduce using rule 331 (expr_26 -> fieldDeclaration .)
    STRICTFP        reduce using rule 331 (expr_26 -> fieldDeclaration .)
    AT              reduce using rule 331 (expr_26 -> fieldDeclaration .)
    BLPAREN         reduce using rule 331 (expr_26 -> fieldDeclaration .)
    VOID            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    Identifier      reduce using rule 331 (expr_26 -> fieldDeclaration .)
    LESS            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    INTERFACE       reduce using rule 331 (expr_26 -> fieldDeclaration .)
    CLASS           reduce using rule 331 (expr_26 -> fieldDeclaration .)
    ENUM            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    BOOLEAN         reduce using rule 331 (expr_26 -> fieldDeclaration .)
    CHAR            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    BYTE            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    SHORT           reduce using rule 331 (expr_26 -> fieldDeclaration .)
    INT             reduce using rule 331 (expr_26 -> fieldDeclaration .)
    LONG            reduce using rule 331 (expr_26 -> fieldDeclaration .)
    FLOAT           reduce using rule 331 (expr_26 -> fieldDeclaration .)
    DOUBLE          reduce using rule 331 (expr_26 -> fieldDeclaration .)



state 626

    (48) methodDeclaration -> Identifier . methodDeclaratorRest
    (71) variableDeclaratorId -> Identifier . expr_28
    (60) methodDeclaratorRest -> . formalParameters expr_28 throwsList expr_methdoBody
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (107) formalParameters -> . LPAREN expr_43 RPAREN
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    LPAREN          shift and go to state 631
    EQUALS          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    formalParameters               shift and go to state 689
    expr_28                        shift and go to state 645
    methodDeclaratorRest           shift and go to state 690
    empty                          shift and go to state 202

state 627

    (330) expr_26 -> methodDeclaration .

    BRPAREN         reduce using rule 330 (expr_26 -> methodDeclaration .)
    SEMI            reduce using rule 330 (expr_26 -> methodDeclaration .)
    STATIC          reduce using rule 330 (expr_26 -> methodDeclaration .)
    PUBLIC          reduce using rule 330 (expr_26 -> methodDeclaration .)
    PROTECTED       reduce using rule 330 (expr_26 -> methodDeclaration .)
    PRIVATE         reduce using rule 330 (expr_26 -> methodDeclaration .)
    ABSTRACT        reduce using rule 330 (expr_26 -> methodDeclaration .)
    FINAL           reduce using rule 330 (expr_26 -> methodDeclaration .)
    NATIVE          reduce using rule 330 (expr_26 -> methodDeclaration .)
    SYNCHRONIZED    reduce using rule 330 (expr_26 -> methodDeclaration .)
    TRANSIENT       reduce using rule 330 (expr_26 -> methodDeclaration .)
    VOLATILE        reduce using rule 330 (expr_26 -> methodDeclaration .)
    STRICTFP        reduce using rule 330 (expr_26 -> methodDeclaration .)
    AT              reduce using rule 330 (expr_26 -> methodDeclaration .)
    BLPAREN         reduce using rule 330 (expr_26 -> methodDeclaration .)
    VOID            reduce using rule 330 (expr_26 -> methodDeclaration .)
    Identifier      reduce using rule 330 (expr_26 -> methodDeclaration .)
    LESS            reduce using rule 330 (expr_26 -> methodDeclaration .)
    INTERFACE       reduce using rule 330 (expr_26 -> methodDeclaration .)
    CLASS           reduce using rule 330 (expr_26 -> methodDeclaration .)
    ENUM            reduce using rule 330 (expr_26 -> methodDeclaration .)
    BOOLEAN         reduce using rule 330 (expr_26 -> methodDeclaration .)
    CHAR            reduce using rule 330 (expr_26 -> methodDeclaration .)
    BYTE            reduce using rule 330 (expr_26 -> methodDeclaration .)
    SHORT           reduce using rule 330 (expr_26 -> methodDeclaration .)
    INT             reduce using rule 330 (expr_26 -> methodDeclaration .)
    LONG            reduce using rule 330 (expr_26 -> methodDeclaration .)
    FLOAT           reduce using rule 330 (expr_26 -> methodDeclaration .)
    DOUBLE          reduce using rule 330 (expr_26 -> methodDeclaration .)



state 628

    (44) memberDeclaration -> type expr_26 .

    BRPAREN         reduce using rule 44 (memberDeclaration -> type expr_26 .)
    SEMI            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    STATIC          reduce using rule 44 (memberDeclaration -> type expr_26 .)
    PUBLIC          reduce using rule 44 (memberDeclaration -> type expr_26 .)
    PROTECTED       reduce using rule 44 (memberDeclaration -> type expr_26 .)
    PRIVATE         reduce using rule 44 (memberDeclaration -> type expr_26 .)
    ABSTRACT        reduce using rule 44 (memberDeclaration -> type expr_26 .)
    FINAL           reduce using rule 44 (memberDeclaration -> type expr_26 .)
    NATIVE          reduce using rule 44 (memberDeclaration -> type expr_26 .)
    SYNCHRONIZED    reduce using rule 44 (memberDeclaration -> type expr_26 .)
    TRANSIENT       reduce using rule 44 (memberDeclaration -> type expr_26 .)
    VOLATILE        reduce using rule 44 (memberDeclaration -> type expr_26 .)
    STRICTFP        reduce using rule 44 (memberDeclaration -> type expr_26 .)
    AT              reduce using rule 44 (memberDeclaration -> type expr_26 .)
    BLPAREN         reduce using rule 44 (memberDeclaration -> type expr_26 .)
    VOID            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    Identifier      reduce using rule 44 (memberDeclaration -> type expr_26 .)
    LESS            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    INTERFACE       reduce using rule 44 (memberDeclaration -> type expr_26 .)
    CLASS           reduce using rule 44 (memberDeclaration -> type expr_26 .)
    ENUM            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    BOOLEAN         reduce using rule 44 (memberDeclaration -> type expr_26 .)
    CHAR            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    BYTE            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    SHORT           reduce using rule 44 (memberDeclaration -> type expr_26 .)
    INT             reduce using rule 44 (memberDeclaration -> type expr_26 .)
    LONG            reduce using rule 44 (memberDeclaration -> type expr_26 .)
    FLOAT           reduce using rule 44 (memberDeclaration -> type expr_26 .)
    DOUBLE          reduce using rule 44 (memberDeclaration -> type expr_26 .)



state 629

    (41) memberDecl -> Identifier constructorDeclaratorRest .

    BRPAREN         reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    SEMI            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    STATIC          reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    PUBLIC          reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    PROTECTED       reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    PRIVATE         reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    ABSTRACT        reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    FINAL           reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    NATIVE          reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    TRANSIENT       reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    VOLATILE        reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    STRICTFP        reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    AT              reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    BLPAREN         reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    VOID            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    Identifier      reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    LESS            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    INTERFACE       reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    CLASS           reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    ENUM            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    BOOLEAN         reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    CHAR            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    BYTE            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    SHORT           reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    INT             reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    LONG            reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    FLOAT           reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)
    DOUBLE          reduce using rule 41 (memberDecl -> Identifier constructorDeclaratorRest .)



state 630

    (65) constructorDeclaratorRest -> formalParameters . throwsList constructorBody
    (337) throwsList -> . THROWS qualifiedNameList
    (338) throwsList -> . empty
    (502) empty -> .

    THROWS          shift and go to state 692
    BLPAREN         reduce using rule 502 (empty -> .)


    throwsList                     shift and go to state 691
    empty                          shift and go to state 693

state 631

    (107) formalParameters -> LPAREN . expr_43 RPAREN
    (371) expr_43 -> . formalParameterDecls
    (372) expr_43 -> . empty
    (108) formalParameterDecls -> . variableModifiers type formalParameterDeclsRest
    (502) empty -> .
    (157) variableModifiers -> . expr_variableModifier
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    RPAREN          reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    FINAL           shift and go to state 679
    AT              shift and go to state 6

  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    expr_43                        shift and go to state 694
    variableModifiers              shift and go to state 695
    formalParameterDecls           shift and go to state 696
    expr_variableModifier          shift and go to state 611
    variableModifier               shift and go to state 590
    annotation                     shift and go to state 677
    empty                          shift and go to state 697

state 632

    (311) expr_18 -> expr_18 COMMA enumConstant .

    COMMA           reduce using rule 311 (expr_18 -> expr_18 COMMA enumConstant .)
    SEMI            reduce using rule 311 (expr_18 -> expr_18 COMMA enumConstant .)
    BRPAREN         reduce using rule 311 (expr_18 -> expr_18 COMMA enumConstant .)



state 633

    (27) enumConstant -> expr_19 Identifier expr_20 expr_21 .

    COMMA           reduce using rule 27 (enumConstant -> expr_19 Identifier expr_20 expr_21 .)
    SEMI            reduce using rule 27 (enumConstant -> expr_19 Identifier expr_20 expr_21 .)
    BRPAREN         reduce using rule 27 (enumConstant -> expr_19 Identifier expr_20 expr_21 .)



state 634

    (28) enumBodyDeclarations -> SEMI expr_22 .
    (320) expr_22 -> expr_22 . classBodyDeclaration
    (35) classBodyDeclaration -> . SEMI
    (36) classBodyDeclaration -> . expr_4 block
    (37) classBodyDeclaration -> . modifiers memberDecl
    (278) expr_4 -> . STATIC
    (279) expr_4 -> . empty
    (17) modifiers -> . expr_8
    (502) empty -> .
    (287) expr_8 -> . modifier
    (288) expr_8 -> . expr_8 modifier
    (289) expr_8 -> . empty
    (75) modifier -> . annotation
    (76) modifier -> . PUBLIC
    (77) modifier -> . PROTECTED
    (78) modifier -> . PRIVATE
    (79) modifier -> . STATIC
    (80) modifier -> . ABSTRACT
    (81) modifier -> . FINAL
    (82) modifier -> . NATIVE
    (83) modifier -> . SYNCHRONIZED
    (84) modifier -> . TRANSIENT
    (85) modifier -> . VOLATILE
    (86) modifier -> . STRICTFP
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         reduce using rule 28 (enumBodyDeclarations -> SEMI expr_22 .)
    SEMI            shift and go to state 475
    STATIC          shift and go to state 473
    BLPAREN         reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    LESS            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          shift and go to state 449
    PROTECTED       shift and go to state 434
    PRIVATE         shift and go to state 438
    ABSTRACT        shift and go to state 433
    FINAL           shift and go to state 436
    NATIVE          shift and go to state 437
    SYNCHRONIZED    shift and go to state 432
    TRANSIENT       shift and go to state 446
    VOLATILE        shift and go to state 447
    STRICTFP        shift and go to state 439
    AT              shift and go to state 6

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! NATIVE          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 502 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    modifier                       shift and go to state 448
    modifiers                      shift and go to state 479
    empty                          shift and go to state 527
    expr_8                         shift and go to state 440
    classBodyDeclaration           shift and go to state 529
    expr_4                         shift and go to state 476
    annotation                     shift and go to state 443

state 635

    (25) enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .

    SEMI            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    PUBLIC          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    PROTECTED       reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    PRIVATE         reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    ABSTRACT        reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    STATIC          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    FINAL           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    STRICTFP        reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    AT              reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    CLASS           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    ENUM            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    INTERFACE       reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    $end            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    BRPAREN         reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    ASSERT          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    IF              reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    FOR             reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    WHILE           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    DO              reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    TRY             reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    SWITCH          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    SYNCHRONIZED    reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    RETURN          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    THROW           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    BREAK           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    CONTINUE        reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    Identifier      reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    BLPAREN         reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    BOOLEAN         reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    CHAR            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    BYTE            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    SHORT           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    INT             reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    LONG            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    FLOAT           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    DOUBLE          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    PLUS            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    DASH            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    OP_INC          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    OP_DEC          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    TILDE           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    EXCLAMATION     reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    LPAREN          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    THIS            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    SUPER           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NEW             reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    VOID            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    CharacterLiteral reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    StringLiteral   reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NULL            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NUMBER          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    HEX_NUMBER      reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    LONG_NUMBER     reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NON_INTEGER_1   reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NON_INTEGER_2   reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NON_INTEGER_3   reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    TRUE            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    FALSE           reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    CASE            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    DEFAULT         reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    NATIVE          reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    TRANSIENT       reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    VOLATILE        reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)
    LESS            reduce using rule 25 (enumBody -> BLPAREN expr_15 expr_16 expr_17 BRPAREN .)



state 636

    (302) expr_14 -> expr_14 AND . type
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 698

state 637

    (301) expr_14 -> AND type .

    AND             reduce using rule 301 (expr_14 -> AND type .)
    COMMA           reduce using rule 301 (expr_14 -> AND type .)
    MORE            reduce using rule 301 (expr_14 -> AND type .)



state 638

    (54) interfaceMemberDecl -> VOID Identifier . voidInterfaceMethodDeclaratorRest
    (64) voidInterfaceMethodDeclaratorRest -> . formalParameters throwsList SEMI
    (107) formalParameters -> . LPAREN expr_43 RPAREN

    LPAREN          shift and go to state 631


    formalParameters               shift and go to state 699
    voidInterfaceMethodDeclaratorRest shift and go to state 700

state 639

    (63) interfaceGenericMethodDecl -> typeParameters expr_27 . Identifier interfaceMethodDeclaratorRest

    Identifier      shift and go to state 701



state 640

    (57) interfaceMethodOrFieldDecl -> type Identifier . interfaceMethodOrFieldRest
    (58) interfaceMethodOrFieldRest -> . constantDeclaratorsRest SEMI
    (59) interfaceMethodOrFieldRest -> . interfaceMethodDeclaratorRest
    (69) constantDeclaratorsRest -> . constantDeclaratorRest expr_33
    (62) interfaceMethodDeclaratorRest -> . formalParameters expr_28 throwsList SEMI
    (70) constantDeclaratorRest -> . expr_28 EQUALS variableInitializer
    (107) formalParameters -> . LPAREN expr_43 RPAREN
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    LPAREN          shift and go to state 631
    FLPAREN         shift and go to state 200
    EQUALS          reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 702
    interfaceMethodDeclaratorRest  shift and go to state 703
    formalParameters               shift and go to state 704
    interfaceMethodOrFieldRest     shift and go to state 705
    constantDeclaratorsRest        shift and go to state 706
    constantDeclaratorRest         shift and go to state 707
    empty                          shift and go to state 202

state 641

    (140) annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .

    BRPAREN         reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PUBLIC          reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PROTECTED       reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    PRIVATE         reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    STATIC          reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    ABSTRACT        reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    FINAL           reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    NATIVE          reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    SYNCHRONIZED    reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    TRANSIENT       reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    VOLATILE        reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    STRICTFP        reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    AT              reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    CLASS           reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    INTERFACE       reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    ENUM            reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    Identifier      reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    BOOLEAN         reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    CHAR            reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    BYTE            reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    SHORT           reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    INT             reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    LONG            reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    FLOAT           reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)
    DOUBLE          reduce using rule 140 (annotationTypeElementRest -> type annotationMethodOrConstantRest SEMI .)



state 642

    (68) variableDeclarator -> variableDeclaratorId expr_32 .

    COMMA           reduce using rule 68 (variableDeclarator -> variableDeclaratorId expr_32 .)
    SEMI            reduce using rule 68 (variableDeclarator -> variableDeclaratorId expr_32 .)



state 643

    (344) expr_32 -> EQUALS . variableInitializer
    (72) variableInitializer -> . arrayInitializer
    (73) variableInitializer -> . expression
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 524
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    additiveExpression             shift and go to state 88
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    arrayInitializer               shift and go to state 582
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    variableInitializer            shift and go to state 708
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 581

state 644

    (345) expr_32 -> empty .

    COMMA           reduce using rule 345 (expr_32 -> empty .)
    SEMI            reduce using rule 345 (expr_32 -> empty .)



state 645

    (71) variableDeclaratorId -> Identifier expr_28 .
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    RPAREN          reduce using rule 71 (variableDeclaratorId -> Identifier expr_28 .)
    EQUALS          reduce using rule 71 (variableDeclaratorId -> Identifier expr_28 .)
    COMMA           reduce using rule 71 (variableDeclaratorId -> Identifier expr_28 .)
    SEMI            reduce using rule 71 (variableDeclaratorId -> Identifier expr_28 .)
    FLPAREN         shift and go to state 302



state 646

    (147) annotationMethodRest -> Identifier LPAREN . RPAREN expr_58

    RPAREN          shift and go to state 709



state 647

    (67) variableDeclarators -> variableDeclarator expr_31 .
    (342) expr_31 -> expr_31 . COMMA variableDeclarator

    SEMI            reduce using rule 67 (variableDeclarators -> variableDeclarator expr_31 .)
    COMMA           shift and go to state 710



state 648

    (341) expr_31 -> COMMA . variableDeclarator
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 711

state 649

    (343) expr_31 -> empty .

    COMMA           reduce using rule 343 (expr_31 -> empty .)
    SEMI            reduce using rule 343 (expr_31 -> empty .)



state 650

    (354) expr_36 -> variableInitializer expr_34 . expr_35
    (350) expr_34 -> expr_34 . COMMA variableInitializer
    (352) expr_35 -> . COMMA
    (353) expr_35 -> . empty
    (502) empty -> .

    COMMA           shift and go to state 713
    BRPAREN         reduce using rule 502 (empty -> .)


    expr_35                        shift and go to state 712
    empty                          shift and go to state 269

state 651

    (349) expr_34 -> COMMA . variableInitializer
    (72) variableInitializer -> . arrayInitializer
    (73) variableInitializer -> . expression
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 524
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    additiveExpression             shift and go to state 88
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    arrayInitializer               shift and go to state 582
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    variableInitializer            shift and go to state 714
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 581

state 652

    (351) expr_34 -> empty .

    COMMA           reduce using rule 351 (expr_34 -> empty .)
    BRPAREN         reduce using rule 351 (expr_34 -> empty .)



state 653

    (74) arrayInitializer -> BLPAREN expr_36 BRPAREN .

    COMMA           reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    BRPAREN         reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    DOT             reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    FLPAREN         reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    OP_INC          reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    OP_DEC          reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)
    SEMI            reduce using rule 74 (arrayInitializer -> BLPAREN expr_36 BRPAREN .)



state 654

    (378) expr_blockStatment -> expr_blockStatment blockStatement .

    BRPAREN         reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    ASSERT          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    IF              reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    FOR             reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    WHILE           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    DO              reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    TRY             reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    SWITCH          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    SYNCHRONIZED    reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    RETURN          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    THROW           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    BREAK           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    CONTINUE        reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    SEMI            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    Identifier      reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    BLPAREN         reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    BOOLEAN         reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    CHAR            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    BYTE            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    SHORT           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    INT             reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    LONG            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    FLOAT           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    DOUBLE          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    PUBLIC          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    PROTECTED       reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    PRIVATE         reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    ABSTRACT        reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    STATIC          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    FINAL           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    STRICTFP        reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    AT              reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    PLUS            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    DASH            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    OP_INC          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    OP_DEC          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    TILDE           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    EXCLAMATION     reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    LPAREN          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    THIS            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    SUPER           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NEW             reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    VOID            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    CharacterLiteral reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    StringLiteral   reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NULL            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NUMBER          reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    HEX_NUMBER      reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    LONG_NUMBER     reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    LONG_HEX_NUMBER reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NON_INTEGER_1   reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NON_INTEGER_2   reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    NON_INTEGER_3   reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    TRUE            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    FALSE           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    CLASS           reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    ENUM            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    INTERFACE       reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    CASE            reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)
    DEFAULT         reduce using rule 378 (expr_blockStatment -> expr_blockStatment blockStatement .)



state 655

    (286) expr_7 -> empty .
    (410) expr_variableModifier -> empty .

  ! reduce/reduce conflict for FINAL resolved using rule 286 (expr_7 -> empty .).
  ! reduce/reduce conflict for AT resolved using rule 286 (expr_7 -> empty .).
    PUBLIC          reduce using rule 286 (expr_7 -> empty .)
    PROTECTED       reduce using rule 286 (expr_7 -> empty .)
    PRIVATE         reduce using rule 286 (expr_7 -> empty .)
    ABSTRACT        reduce using rule 286 (expr_7 -> empty .)
    STATIC          reduce using rule 286 (expr_7 -> empty .)
    FINAL           reduce using rule 286 (expr_7 -> empty .)
    STRICTFP        reduce using rule 286 (expr_7 -> empty .)
    AT              reduce using rule 286 (expr_7 -> empty .)
    CLASS           reduce using rule 286 (expr_7 -> empty .)
    ENUM            reduce using rule 286 (expr_7 -> empty .)
    INTERFACE       reduce using rule 286 (expr_7 -> empty .)
    Identifier      reduce using rule 410 (expr_variableModifier -> empty .)
    BOOLEAN         reduce using rule 410 (expr_variableModifier -> empty .)
    CHAR            reduce using rule 410 (expr_variableModifier -> empty .)
    BYTE            reduce using rule 410 (expr_variableModifier -> empty .)
    SHORT           reduce using rule 410 (expr_variableModifier -> empty .)
    INT             reduce using rule 410 (expr_variableModifier -> empty .)
    LONG            reduce using rule 410 (expr_variableModifier -> empty .)
    FLOAT           reduce using rule 410 (expr_variableModifier -> empty .)
    DOUBLE          reduce using rule 410 (expr_variableModifier -> empty .)

  ! FINAL           [ reduce using rule 410 (expr_variableModifier -> empty .) ]
  ! AT              [ reduce using rule 410 (expr_variableModifier -> empty .) ]


state 656

    (150) block -> BLPAREN expr_blockStatment BRPAREN .

    BRPAREN         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    ASSERT          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    IF              reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    FOR             reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    WHILE           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    DO              reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    TRY             reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    SWITCH          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    SYNCHRONIZED    reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    RETURN          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    THROW           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    BREAK           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CONTINUE        reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    SEMI            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    Identifier      reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    BLPAREN         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    BOOLEAN         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CHAR            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    BYTE            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    SHORT           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    INT             reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    LONG            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    FLOAT           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    DOUBLE          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    PUBLIC          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    PROTECTED       reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    PRIVATE         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    ABSTRACT        reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    STATIC          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    FINAL           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    STRICTFP        reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    AT              reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    PLUS            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    DASH            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    OP_INC          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    OP_DEC          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    TILDE           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    EXCLAMATION     reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    LPAREN          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    THIS            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    SUPER           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NEW             reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    VOID            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CharacterLiteral reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    StringLiteral   reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NULL            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NUMBER          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    HEX_NUMBER      reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    LONG_NUMBER     reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NON_INTEGER_1   reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NON_INTEGER_2   reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NON_INTEGER_3   reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    TRUE            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    FALSE           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CLASS           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    ENUM            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    INTERFACE       reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    ELSE            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CASE            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    DEFAULT         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    NATIVE          reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    TRANSIENT       reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    VOLATILE        reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    LESS            reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    FINALLY         reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)
    CATCH           reduce using rule 150 (block -> BLPAREN expr_blockStatment BRPAREN .)



state 657

    (167) statement -> RETURN expr_63 . SEMI

    SEMI            shift and go to state 715



state 658

    (419) expr_63 -> empty .

    SEMI            reduce using rule 419 (expr_63 -> empty .)



state 659

    (418) expr_63 -> expression .

    SEMI            reduce using rule 418 (expr_63 -> expression .)



state 660

    (166) statement -> SYNCHRONIZED parExpression . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 716

state 661

    (188) parExpression -> LPAREN . expression RPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 717

state 662

    (161) statement -> FOR LPAREN . forControl RPAREN statement
    (182) forControl -> . enhancedForControl
    (183) forControl -> . expr_68 SEMI expr_69 SEMI expr_70
    (186) enhancedForControl -> . variableModifiers type Identifier COLON expression
    (430) expr_68 -> . forInit
    (431) expr_68 -> . empty
    (157) variableModifiers -> . expr_variableModifier
    (184) forInit -> . localVariableDeclaration
    (185) forInit -> . expressionList
    (502) empty -> .
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (189) expressionList -> . expression expr_71
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (192) expression -> . conditionalExpression expr_72
    (129) annotation -> . AT annotationName expr_52
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
    SEMI            reduce using rule 502 (empty -> .)
    FINAL           shift and go to state 679
    AT              shift and go to state 6
    Identifier      shift and go to state 222
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 722
    expr_68                        shift and go to state 721
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    expr_variableModifier          shift and go to state 611
    unaryExpression                shift and go to state 121
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    classOrInterfaceType           shift and go to state 219
    parExpression                  shift and go to state 122
    literal                        shift and go to state 104
    expressionList                 shift and go to state 723
    FloatingPointLiteral           shift and go to state 107
    type                           shift and go to state 605
    forControl                     shift and go to state 719
    empty                          shift and go to state 724
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    forInit                        shift and go to state 718
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 677
    primary                        shift and go to state 97
    instanceOfExpression           shift and go to state 80
    enhancedForControl             shift and go to state 720
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 725
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    andExpression                  shift and go to state 92
    expression                     shift and go to state 335

state 663

    (164) statement -> TRY block . expr_62
    (415) expr_62 -> . catches FINALLY block
    (416) expr_62 -> . catches
    (417) expr_62 -> . FINALLY block
    (174) catches -> . catchClause expr_65
    (175) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         shift and go to state 729
    CATCH           shift and go to state 730


    catches                        shift and go to state 726
    catchClause                    shift and go to state 727
    expr_62                        shift and go to state 728

state 664

    (173) statement -> Identifier COLON . statement
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 731
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 665

    (170) statement -> CONTINUE expr_64 . SEMI

    SEMI            shift and go to state 732



state 666

    (420) expr_64 -> Identifier .

    SEMI            reduce using rule 420 (expr_64 -> Identifier .)



state 667

    (421) expr_64 -> empty .

    SEMI            reduce using rule 421 (expr_64 -> empty .)



state 668

    (154) localVariableDeclarationStatement -> localVariableDeclaration SEMI .

    BRPAREN         reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ASSERT          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    IF              reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FOR             reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    WHILE           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DO              reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRY             reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SWITCH          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    RETURN          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THROW           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BREAK           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CONTINUE        reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SEMI            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    Identifier      reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BLPAREN         reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BOOLEAN         reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CHAR            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BYTE            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SHORT           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    INT             reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FLOAT           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DOUBLE          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PUBLIC          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PROTECTED       reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PRIVATE         reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ABSTRACT        reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STATIC          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FINAL           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STRICTFP        reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    AT              reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PLUS            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DASH            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_INC          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_DEC          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TILDE           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    EXCLAMATION     reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LPAREN          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THIS            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SUPER           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NEW             reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    VOID            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CharacterLiteral reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    StringLiteral   reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NULL            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NUMBER          reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    HEX_NUMBER      reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_NUMBER     reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_HEX_NUMBER reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_1   reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_2   reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_3   reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRUE            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FALSE           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CLASS           reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ENUM            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    INTERFACE       reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CASE            reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DEFAULT         reduce using rule 154 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)



state 669

    (162) statement -> WHILE parExpression . statement
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 733
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 670

    (165) statement -> SWITCH parExpression . BLPAREN switchBlockStatementGroups BRPAREN

    BLPAREN         shift and go to state 734



state 671

    (156) localVariableDeclaration -> type variableDeclarators .

    SEMI            reduce using rule 156 (localVariableDeclaration -> type variableDeclarators .)



state 672

    (71) variableDeclaratorId -> Identifier . expr_28
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    EQUALS          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    RPAREN          reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    expr_28                        shift and go to state 645
    empty                          shift and go to state 202

state 673

    (155) localVariableDeclaration -> variableModifiers type . variableDeclarators
    (67) variableDeclarators -> . variableDeclarator expr_31
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclarators            shift and go to state 735
    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 575

state 674

    (169) statement -> BREAK expr_64 . SEMI

    SEMI            shift and go to state 736



state 675

    (173) statement -> Identifier . COLON statement
    (240) primary -> Identifier . expr_49 expr_91
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    COLON           shift and go to state 664
    DOT             shift and go to state 37
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 197
    empty                          shift and go to state 36

state 676

    (163) statement -> DO statement . WHILE parExpression SEMI

    WHILE           shift and go to state 737



state 677

    (102) variableModifier -> annotation .

    FINAL           reduce using rule 102 (variableModifier -> annotation .)
    AT              reduce using rule 102 (variableModifier -> annotation .)
    Identifier      reduce using rule 102 (variableModifier -> annotation .)
    BOOLEAN         reduce using rule 102 (variableModifier -> annotation .)
    CHAR            reduce using rule 102 (variableModifier -> annotation .)
    BYTE            reduce using rule 102 (variableModifier -> annotation .)
    SHORT           reduce using rule 102 (variableModifier -> annotation .)
    INT             reduce using rule 102 (variableModifier -> annotation .)
    LONG            reduce using rule 102 (variableModifier -> annotation .)
    FLOAT           reduce using rule 102 (variableModifier -> annotation .)
    DOUBLE          reduce using rule 102 (variableModifier -> annotation .)



state 678

    (409) expr_variableModifier -> expr_variableModifier variableModifier .

    FINAL           reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    AT              reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    Identifier      reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    BOOLEAN         reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    CHAR            reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    BYTE            reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    SHORT           reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    INT             reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    LONG            reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    FLOAT           reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)
    DOUBLE          reduce using rule 409 (expr_variableModifier -> expr_variableModifier variableModifier .)



state 679

    (101) variableModifier -> FINAL .

    FINAL           reduce using rule 101 (variableModifier -> FINAL .)
    AT              reduce using rule 101 (variableModifier -> FINAL .)
    Identifier      reduce using rule 101 (variableModifier -> FINAL .)
    BOOLEAN         reduce using rule 101 (variableModifier -> FINAL .)
    CHAR            reduce using rule 101 (variableModifier -> FINAL .)
    BYTE            reduce using rule 101 (variableModifier -> FINAL .)
    SHORT           reduce using rule 101 (variableModifier -> FINAL .)
    INT             reduce using rule 101 (variableModifier -> FINAL .)
    LONG            reduce using rule 101 (variableModifier -> FINAL .)
    FLOAT           reduce using rule 101 (variableModifier -> FINAL .)
    DOUBLE          reduce using rule 101 (variableModifier -> FINAL .)



state 680

    (159) statement -> ASSERT expression . expr_60 SEMI
    (411) expr_60 -> . COLON expression
    (412) expr_60 -> . empty
    (502) empty -> .

    COLON           shift and go to state 739
    SEMI            reduce using rule 502 (empty -> .)


    expr_60                        shift and go to state 738
    empty                          shift and go to state 740

state 681

    (160) statement -> IF parExpression . statement expr_61
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 741
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 682

    (172) statement -> statementExpression SEMI .

    BRPAREN         reduce using rule 172 (statement -> statementExpression SEMI .)
    ASSERT          reduce using rule 172 (statement -> statementExpression SEMI .)
    IF              reduce using rule 172 (statement -> statementExpression SEMI .)
    FOR             reduce using rule 172 (statement -> statementExpression SEMI .)
    WHILE           reduce using rule 172 (statement -> statementExpression SEMI .)
    DO              reduce using rule 172 (statement -> statementExpression SEMI .)
    TRY             reduce using rule 172 (statement -> statementExpression SEMI .)
    SWITCH          reduce using rule 172 (statement -> statementExpression SEMI .)
    SYNCHRONIZED    reduce using rule 172 (statement -> statementExpression SEMI .)
    RETURN          reduce using rule 172 (statement -> statementExpression SEMI .)
    THROW           reduce using rule 172 (statement -> statementExpression SEMI .)
    BREAK           reduce using rule 172 (statement -> statementExpression SEMI .)
    CONTINUE        reduce using rule 172 (statement -> statementExpression SEMI .)
    SEMI            reduce using rule 172 (statement -> statementExpression SEMI .)
    Identifier      reduce using rule 172 (statement -> statementExpression SEMI .)
    BLPAREN         reduce using rule 172 (statement -> statementExpression SEMI .)
    BOOLEAN         reduce using rule 172 (statement -> statementExpression SEMI .)
    CHAR            reduce using rule 172 (statement -> statementExpression SEMI .)
    BYTE            reduce using rule 172 (statement -> statementExpression SEMI .)
    SHORT           reduce using rule 172 (statement -> statementExpression SEMI .)
    INT             reduce using rule 172 (statement -> statementExpression SEMI .)
    LONG            reduce using rule 172 (statement -> statementExpression SEMI .)
    FLOAT           reduce using rule 172 (statement -> statementExpression SEMI .)
    DOUBLE          reduce using rule 172 (statement -> statementExpression SEMI .)
    PUBLIC          reduce using rule 172 (statement -> statementExpression SEMI .)
    PROTECTED       reduce using rule 172 (statement -> statementExpression SEMI .)
    PRIVATE         reduce using rule 172 (statement -> statementExpression SEMI .)
    ABSTRACT        reduce using rule 172 (statement -> statementExpression SEMI .)
    STATIC          reduce using rule 172 (statement -> statementExpression SEMI .)
    FINAL           reduce using rule 172 (statement -> statementExpression SEMI .)
    STRICTFP        reduce using rule 172 (statement -> statementExpression SEMI .)
    AT              reduce using rule 172 (statement -> statementExpression SEMI .)
    PLUS            reduce using rule 172 (statement -> statementExpression SEMI .)
    DASH            reduce using rule 172 (statement -> statementExpression SEMI .)
    OP_INC          reduce using rule 172 (statement -> statementExpression SEMI .)
    OP_DEC          reduce using rule 172 (statement -> statementExpression SEMI .)
    TILDE           reduce using rule 172 (statement -> statementExpression SEMI .)
    EXCLAMATION     reduce using rule 172 (statement -> statementExpression SEMI .)
    LPAREN          reduce using rule 172 (statement -> statementExpression SEMI .)
    THIS            reduce using rule 172 (statement -> statementExpression SEMI .)
    SUPER           reduce using rule 172 (statement -> statementExpression SEMI .)
    NEW             reduce using rule 172 (statement -> statementExpression SEMI .)
    VOID            reduce using rule 172 (statement -> statementExpression SEMI .)
    CharacterLiteral reduce using rule 172 (statement -> statementExpression SEMI .)
    StringLiteral   reduce using rule 172 (statement -> statementExpression SEMI .)
    NULL            reduce using rule 172 (statement -> statementExpression SEMI .)
    NUMBER          reduce using rule 172 (statement -> statementExpression SEMI .)
    HEX_NUMBER      reduce using rule 172 (statement -> statementExpression SEMI .)
    LONG_NUMBER     reduce using rule 172 (statement -> statementExpression SEMI .)
    LONG_HEX_NUMBER reduce using rule 172 (statement -> statementExpression SEMI .)
    NON_INTEGER_1   reduce using rule 172 (statement -> statementExpression SEMI .)
    NON_INTEGER_2   reduce using rule 172 (statement -> statementExpression SEMI .)
    NON_INTEGER_3   reduce using rule 172 (statement -> statementExpression SEMI .)
    TRUE            reduce using rule 172 (statement -> statementExpression SEMI .)
    FALSE           reduce using rule 172 (statement -> statementExpression SEMI .)
    CLASS           reduce using rule 172 (statement -> statementExpression SEMI .)
    ENUM            reduce using rule 172 (statement -> statementExpression SEMI .)
    INTERFACE       reduce using rule 172 (statement -> statementExpression SEMI .)
    ELSE            reduce using rule 172 (statement -> statementExpression SEMI .)
    CASE            reduce using rule 172 (statement -> statementExpression SEMI .)
    DEFAULT         reduce using rule 172 (statement -> statementExpression SEMI .)



state 683

    (168) statement -> THROW expression . SEMI

    SEMI            shift and go to state 742



state 684

    (61) voidMethodDeclaratorRest -> formalParameters . throwsList expr_methdoBody
    (337) throwsList -> . THROWS qualifiedNameList
    (338) throwsList -> . empty
    (502) empty -> .

    THROWS          shift and go to state 692
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)


    throwsList                     shift and go to state 743
    empty                          shift and go to state 693

state 685

    (40) memberDecl -> VOID Identifier voidMethodDeclaratorRest .

    BRPAREN         reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SEMI            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    STATIC          reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PUBLIC          reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PROTECTED       reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    PRIVATE         reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    FINAL           reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    NATIVE          reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    VOLATILE        reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    STRICTFP        reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    AT              reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BLPAREN         reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    VOID            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    Identifier      reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    LESS            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    INTERFACE       reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    CLASS           reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    ENUM            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    CHAR            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    BYTE            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    SHORT           reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    INT             reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    LONG            reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    FLOAT           reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)
    DOUBLE          reduce using rule 40 (memberDecl -> VOID Identifier voidMethodDeclaratorRest .)



state 686

    (47) genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .

    BRPAREN         reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SEMI            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    STATIC          reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PUBLIC          reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PROTECTED       reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    PRIVATE         reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    ABSTRACT        reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    FINAL           reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    NATIVE          reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    TRANSIENT       reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    VOLATILE        reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    STRICTFP        reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    AT              reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BLPAREN         reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    VOID            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    Identifier      reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    LESS            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    INTERFACE       reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    CLASS           reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    ENUM            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BOOLEAN         reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    CHAR            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    BYTE            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    SHORT           reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    INT             reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    LONG            reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    FLOAT           reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)
    DOUBLE          reduce using rule 47 (genericMethodOrConstructorRest -> Identifier constructorDeclaratorRest .)



state 687

    (46) genericMethodOrConstructorRest -> expr_27 Identifier . methodDeclaratorRest
    (60) methodDeclaratorRest -> . formalParameters expr_28 throwsList expr_methdoBody
    (107) formalParameters -> . LPAREN expr_43 RPAREN

    LPAREN          shift and go to state 631


    formalParameters               shift and go to state 689
    methodDeclaratorRest           shift and go to state 744

state 688

    (49) fieldDeclaration -> variableDeclarators SEMI .

    BRPAREN         reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    SEMI            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    STATIC          reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    PUBLIC          reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    PROTECTED       reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    PRIVATE         reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    ABSTRACT        reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    FINAL           reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    NATIVE          reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    SYNCHRONIZED    reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    TRANSIENT       reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    VOLATILE        reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    STRICTFP        reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    AT              reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    BLPAREN         reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    VOID            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    Identifier      reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    LESS            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    INTERFACE       reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    CLASS           reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    ENUM            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    BOOLEAN         reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    CHAR            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    BYTE            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    SHORT           reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    INT             reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    LONG            reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    FLOAT           reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)
    DOUBLE          reduce using rule 49 (fieldDeclaration -> variableDeclarators SEMI .)



state 689

    (60) methodDeclaratorRest -> formalParameters . expr_28 throwsList expr_methdoBody
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    THROWS          reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 202
    expr_28                        shift and go to state 745

state 690

    (48) methodDeclaration -> Identifier methodDeclaratorRest .

    BRPAREN         reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SEMI            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    STATIC          reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PUBLIC          reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PROTECTED       reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    PRIVATE         reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    ABSTRACT        reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    FINAL           reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    NATIVE          reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    TRANSIENT       reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    VOLATILE        reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    STRICTFP        reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    AT              reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BLPAREN         reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    VOID            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    Identifier      reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    LESS            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    INTERFACE       reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    CLASS           reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    ENUM            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BOOLEAN         reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    CHAR            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    BYTE            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    SHORT           reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    INT             reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    LONG            reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    FLOAT           reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)
    DOUBLE          reduce using rule 48 (methodDeclaration -> Identifier methodDeclaratorRest .)



state 691

    (65) constructorDeclaratorRest -> formalParameters throwsList . constructorBody
    (112) constructorBody -> . BLPAREN expr_45 expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 746


    constructorBody                shift and go to state 747

state 692

    (337) throwsList -> THROWS . qualifiedNameList
    (106) qualifiedNameList -> . qualifiedName expr_42
    (115) qualifiedName -> . Identifier expr_49

    Identifier      shift and go to state 12


    qualifiedNameList              shift and go to state 748
    qualifiedName                  shift and go to state 749

state 693

    (338) throwsList -> empty .

    SEMI            reduce using rule 338 (throwsList -> empty .)
    BLPAREN         reduce using rule 338 (throwsList -> empty .)



state 694

    (107) formalParameters -> LPAREN expr_43 . RPAREN

    RPAREN          shift and go to state 750



state 695

    (108) formalParameterDecls -> variableModifiers . type formalParameterDeclsRest
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 751

state 696

    (371) expr_43 -> formalParameterDecls .

    RPAREN          reduce using rule 371 (expr_43 -> formalParameterDecls .)



state 697

    (372) expr_43 -> empty .
    (410) expr_variableModifier -> empty .

    RPAREN          reduce using rule 372 (expr_43 -> empty .)
    FINAL           reduce using rule 410 (expr_variableModifier -> empty .)
    AT              reduce using rule 410 (expr_variableModifier -> empty .)
    Identifier      reduce using rule 410 (expr_variableModifier -> empty .)
    BOOLEAN         reduce using rule 410 (expr_variableModifier -> empty .)
    CHAR            reduce using rule 410 (expr_variableModifier -> empty .)
    BYTE            reduce using rule 410 (expr_variableModifier -> empty .)
    SHORT           reduce using rule 410 (expr_variableModifier -> empty .)
    INT             reduce using rule 410 (expr_variableModifier -> empty .)
    LONG            reduce using rule 410 (expr_variableModifier -> empty .)
    FLOAT           reduce using rule 410 (expr_variableModifier -> empty .)
    DOUBLE          reduce using rule 410 (expr_variableModifier -> empty .)



state 698

    (302) expr_14 -> expr_14 AND type .

    AND             reduce using rule 302 (expr_14 -> expr_14 AND type .)
    COMMA           reduce using rule 302 (expr_14 -> expr_14 AND type .)
    MORE            reduce using rule 302 (expr_14 -> expr_14 AND type .)



state 699

    (64) voidInterfaceMethodDeclaratorRest -> formalParameters . throwsList SEMI
    (337) throwsList -> . THROWS qualifiedNameList
    (338) throwsList -> . empty
    (502) empty -> .

    THROWS          shift and go to state 692
    SEMI            reduce using rule 502 (empty -> .)


    throwsList                     shift and go to state 752
    empty                          shift and go to state 693

state 700

    (54) interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    AT              reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    VOID            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    LESS            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    INT             reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    LONG            reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 54 (interfaceMemberDecl -> VOID Identifier voidInterfaceMethodDeclaratorRest .)



state 701

    (63) interfaceGenericMethodDecl -> typeParameters expr_27 Identifier . interfaceMethodDeclaratorRest
    (62) interfaceMethodDeclaratorRest -> . formalParameters expr_28 throwsList SEMI
    (107) formalParameters -> . LPAREN expr_43 RPAREN

    LPAREN          shift and go to state 631


    interfaceMethodDeclaratorRest  shift and go to state 753
    formalParameters               shift and go to state 704

state 702

    (70) constantDeclaratorRest -> expr_28 . EQUALS variableInitializer
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN

    EQUALS          shift and go to state 754
    FLPAREN         shift and go to state 302



state 703

    (59) interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    AT              reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    VOID            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    LESS            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    INT             reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    LONG            reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 59 (interfaceMethodOrFieldRest -> interfaceMethodDeclaratorRest .)



state 704

    (62) interfaceMethodDeclaratorRest -> formalParameters . expr_28 throwsList SEMI
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    THROWS          reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 202
    expr_28                        shift and go to state 755

state 705

    (57) interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .

    BRPAREN         reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SEMI            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PUBLIC          reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PROTECTED       reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    PRIVATE         reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    STATIC          reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    ABSTRACT        reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    FINAL           reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    NATIVE          reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SYNCHRONIZED    reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    TRANSIENT       reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    VOLATILE        reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    STRICTFP        reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    AT              reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    VOID            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    LESS            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    INTERFACE       reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    CLASS           reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    ENUM            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    Identifier      reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    BOOLEAN         reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    CHAR            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    BYTE            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    SHORT           reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    INT             reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    LONG            reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    FLOAT           reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)
    DOUBLE          reduce using rule 57 (interfaceMethodOrFieldDecl -> type Identifier interfaceMethodOrFieldRest .)



state 706

    (58) interfaceMethodOrFieldRest -> constantDeclaratorsRest . SEMI

    SEMI            shift and go to state 756



state 707

    (69) constantDeclaratorsRest -> constantDeclaratorRest . expr_33
    (346) expr_33 -> . COMMA constantDeclarator
    (347) expr_33 -> . expr_33 COMMA constantDeclarator
    (348) expr_33 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 757
    SEMI            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_33                        shift and go to state 758
    empty                          shift and go to state 759

state 708

    (344) expr_32 -> EQUALS variableInitializer .

    COMMA           reduce using rule 344 (expr_32 -> EQUALS variableInitializer .)
    SEMI            reduce using rule 344 (expr_32 -> EQUALS variableInitializer .)



state 709

    (147) annotationMethodRest -> Identifier LPAREN RPAREN . expr_58
    (406) expr_58 -> . defaultValue
    (407) expr_58 -> . empty
    (149) defaultValue -> . DEFAULT elementValue
    (502) empty -> .

    DEFAULT         shift and go to state 762
    SEMI            reduce using rule 502 (empty -> .)


    expr_58                        shift and go to state 760
    defaultValue                   shift and go to state 761
    empty                          shift and go to state 763

state 710

    (342) expr_31 -> expr_31 COMMA . variableDeclarator
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 764

state 711

    (341) expr_31 -> COMMA variableDeclarator .

    COMMA           reduce using rule 341 (expr_31 -> COMMA variableDeclarator .)
    SEMI            reduce using rule 341 (expr_31 -> COMMA variableDeclarator .)



state 712

    (354) expr_36 -> variableInitializer expr_34 expr_35 .

    BRPAREN         reduce using rule 354 (expr_36 -> variableInitializer expr_34 expr_35 .)



state 713

    (350) expr_34 -> expr_34 COMMA . variableInitializer
    (352) expr_35 -> COMMA .
    (72) variableInitializer -> . arrayInitializer
    (73) variableInitializer -> . expression
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BRPAREN         reduce using rule 352 (expr_35 -> COMMA .)
    BLPAREN         shift and go to state 524
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    additiveExpression             shift and go to state 88
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    arrayInitializer               shift and go to state 582
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    variableInitializer            shift and go to state 765
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 581

state 714

    (349) expr_34 -> COMMA variableInitializer .

    COMMA           reduce using rule 349 (expr_34 -> COMMA variableInitializer .)
    BRPAREN         reduce using rule 349 (expr_34 -> COMMA variableInitializer .)



state 715

    (167) statement -> RETURN expr_63 SEMI .

    BRPAREN         reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    ASSERT          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    IF              reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    FOR             reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    WHILE           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    DO              reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    TRY             reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    SWITCH          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    SYNCHRONIZED    reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    RETURN          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    THROW           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    BREAK           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    CONTINUE        reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    SEMI            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    Identifier      reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    BLPAREN         reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    BOOLEAN         reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    CHAR            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    BYTE            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    SHORT           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    INT             reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    LONG            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    FLOAT           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    DOUBLE          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    PUBLIC          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    PROTECTED       reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    PRIVATE         reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    ABSTRACT        reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    STATIC          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    FINAL           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    STRICTFP        reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    AT              reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    PLUS            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    DASH            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    OP_INC          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    OP_DEC          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    TILDE           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    EXCLAMATION     reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    LPAREN          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    THIS            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    SUPER           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NEW             reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    VOID            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    CharacterLiteral reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    StringLiteral   reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NULL            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NUMBER          reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    HEX_NUMBER      reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    LONG_NUMBER     reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    LONG_HEX_NUMBER reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NON_INTEGER_1   reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NON_INTEGER_2   reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    NON_INTEGER_3   reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    TRUE            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    FALSE           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    CLASS           reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    ENUM            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    INTERFACE       reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    ELSE            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    CASE            reduce using rule 167 (statement -> RETURN expr_63 SEMI .)
    DEFAULT         reduce using rule 167 (statement -> RETURN expr_63 SEMI .)



state 716

    (166) statement -> SYNCHRONIZED parExpression block .

    BRPAREN         reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    ASSERT          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    IF              reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    FOR             reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    WHILE           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    DO              reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    TRY             reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    SWITCH          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    SYNCHRONIZED    reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    RETURN          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    THROW           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    BREAK           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    CONTINUE        reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    SEMI            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    Identifier      reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    BLPAREN         reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    BOOLEAN         reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    CHAR            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    BYTE            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    SHORT           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    INT             reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    LONG            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    FLOAT           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    DOUBLE          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    PUBLIC          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    PROTECTED       reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    PRIVATE         reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    ABSTRACT        reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    STATIC          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    FINAL           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    STRICTFP        reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    AT              reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    PLUS            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    DASH            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    OP_INC          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    OP_DEC          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    TILDE           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    EXCLAMATION     reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    LPAREN          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    THIS            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    SUPER           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NEW             reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    VOID            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    CharacterLiteral reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    StringLiteral   reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NULL            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NUMBER          reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    HEX_NUMBER      reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    LONG_NUMBER     reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    LONG_HEX_NUMBER reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_1   reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_2   reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_3   reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    TRUE            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    FALSE           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    CLASS           reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    ENUM            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    INTERFACE       reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    ELSE            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    CASE            reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)
    DEFAULT         reduce using rule 166 (statement -> SYNCHRONIZED parExpression block .)



state 717

    (188) parExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 331



state 718

    (430) expr_68 -> forInit .

    SEMI            reduce using rule 430 (expr_68 -> forInit .)



state 719

    (161) statement -> FOR LPAREN forControl . RPAREN statement

    RPAREN          shift and go to state 766



state 720

    (182) forControl -> enhancedForControl .

    RPAREN          reduce using rule 182 (forControl -> enhancedForControl .)



state 721

    (183) forControl -> expr_68 . SEMI expr_69 SEMI expr_70

    SEMI            shift and go to state 767



state 722

    (184) forInit -> localVariableDeclaration .

    SEMI            reduce using rule 184 (forInit -> localVariableDeclaration .)



state 723

    (185) forInit -> expressionList .

    SEMI            reduce using rule 185 (forInit -> expressionList .)



state 724

    (431) expr_68 -> empty .
    (410) expr_variableModifier -> empty .

    SEMI            reduce using rule 431 (expr_68 -> empty .)
    FINAL           reduce using rule 410 (expr_variableModifier -> empty .)
    AT              reduce using rule 410 (expr_variableModifier -> empty .)
    Identifier      reduce using rule 410 (expr_variableModifier -> empty .)
    BOOLEAN         reduce using rule 410 (expr_variableModifier -> empty .)
    CHAR            reduce using rule 410 (expr_variableModifier -> empty .)
    BYTE            reduce using rule 410 (expr_variableModifier -> empty .)
    SHORT           reduce using rule 410 (expr_variableModifier -> empty .)
    INT             reduce using rule 410 (expr_variableModifier -> empty .)
    LONG            reduce using rule 410 (expr_variableModifier -> empty .)
    FLOAT           reduce using rule 410 (expr_variableModifier -> empty .)
    DOUBLE          reduce using rule 410 (expr_variableModifier -> empty .)



state 725

    (186) enhancedForControl -> variableModifiers . type Identifier COLON expression
    (155) localVariableDeclaration -> variableModifiers . type variableDeclarators
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    type                           shift and go to state 768
    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244

state 726

    (415) expr_62 -> catches . FINALLY block
    (416) expr_62 -> catches .

    FINALLY         shift and go to state 769
    BRPAREN         reduce using rule 416 (expr_62 -> catches .)
    ASSERT          reduce using rule 416 (expr_62 -> catches .)
    IF              reduce using rule 416 (expr_62 -> catches .)
    FOR             reduce using rule 416 (expr_62 -> catches .)
    WHILE           reduce using rule 416 (expr_62 -> catches .)
    DO              reduce using rule 416 (expr_62 -> catches .)
    TRY             reduce using rule 416 (expr_62 -> catches .)
    SWITCH          reduce using rule 416 (expr_62 -> catches .)
    SYNCHRONIZED    reduce using rule 416 (expr_62 -> catches .)
    RETURN          reduce using rule 416 (expr_62 -> catches .)
    THROW           reduce using rule 416 (expr_62 -> catches .)
    BREAK           reduce using rule 416 (expr_62 -> catches .)
    CONTINUE        reduce using rule 416 (expr_62 -> catches .)
    SEMI            reduce using rule 416 (expr_62 -> catches .)
    Identifier      reduce using rule 416 (expr_62 -> catches .)
    BLPAREN         reduce using rule 416 (expr_62 -> catches .)
    BOOLEAN         reduce using rule 416 (expr_62 -> catches .)
    CHAR            reduce using rule 416 (expr_62 -> catches .)
    BYTE            reduce using rule 416 (expr_62 -> catches .)
    SHORT           reduce using rule 416 (expr_62 -> catches .)
    INT             reduce using rule 416 (expr_62 -> catches .)
    LONG            reduce using rule 416 (expr_62 -> catches .)
    FLOAT           reduce using rule 416 (expr_62 -> catches .)
    DOUBLE          reduce using rule 416 (expr_62 -> catches .)
    PUBLIC          reduce using rule 416 (expr_62 -> catches .)
    PROTECTED       reduce using rule 416 (expr_62 -> catches .)
    PRIVATE         reduce using rule 416 (expr_62 -> catches .)
    ABSTRACT        reduce using rule 416 (expr_62 -> catches .)
    STATIC          reduce using rule 416 (expr_62 -> catches .)
    FINAL           reduce using rule 416 (expr_62 -> catches .)
    STRICTFP        reduce using rule 416 (expr_62 -> catches .)
    AT              reduce using rule 416 (expr_62 -> catches .)
    PLUS            reduce using rule 416 (expr_62 -> catches .)
    DASH            reduce using rule 416 (expr_62 -> catches .)
    OP_INC          reduce using rule 416 (expr_62 -> catches .)
    OP_DEC          reduce using rule 416 (expr_62 -> catches .)
    TILDE           reduce using rule 416 (expr_62 -> catches .)
    EXCLAMATION     reduce using rule 416 (expr_62 -> catches .)
    LPAREN          reduce using rule 416 (expr_62 -> catches .)
    THIS            reduce using rule 416 (expr_62 -> catches .)
    SUPER           reduce using rule 416 (expr_62 -> catches .)
    NEW             reduce using rule 416 (expr_62 -> catches .)
    VOID            reduce using rule 416 (expr_62 -> catches .)
    CharacterLiteral reduce using rule 416 (expr_62 -> catches .)
    StringLiteral   reduce using rule 416 (expr_62 -> catches .)
    NULL            reduce using rule 416 (expr_62 -> catches .)
    NUMBER          reduce using rule 416 (expr_62 -> catches .)
    HEX_NUMBER      reduce using rule 416 (expr_62 -> catches .)
    LONG_NUMBER     reduce using rule 416 (expr_62 -> catches .)
    LONG_HEX_NUMBER reduce using rule 416 (expr_62 -> catches .)
    NON_INTEGER_1   reduce using rule 416 (expr_62 -> catches .)
    NON_INTEGER_2   reduce using rule 416 (expr_62 -> catches .)
    NON_INTEGER_3   reduce using rule 416 (expr_62 -> catches .)
    TRUE            reduce using rule 416 (expr_62 -> catches .)
    FALSE           reduce using rule 416 (expr_62 -> catches .)
    CLASS           reduce using rule 416 (expr_62 -> catches .)
    ENUM            reduce using rule 416 (expr_62 -> catches .)
    INTERFACE       reduce using rule 416 (expr_62 -> catches .)
    ELSE            reduce using rule 416 (expr_62 -> catches .)
    CASE            reduce using rule 416 (expr_62 -> catches .)
    DEFAULT         reduce using rule 416 (expr_62 -> catches .)



state 727

    (174) catches -> catchClause . expr_65
    (422) expr_65 -> . catchClause
    (423) expr_65 -> . expr_65 catchClause
    (424) expr_65 -> . empty
    (175) catchClause -> . CATCH LPAREN formalParameter RPAREN block
    (502) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift.
    CATCH           shift and go to state 730
    FINALLY         reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    ASSERT          reduce using rule 502 (empty -> .)
    IF              reduce using rule 502 (empty -> .)
    FOR             reduce using rule 502 (empty -> .)
    WHILE           reduce using rule 502 (empty -> .)
    DO              reduce using rule 502 (empty -> .)
    TRY             reduce using rule 502 (empty -> .)
    SWITCH          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    RETURN          reduce using rule 502 (empty -> .)
    THROW           reduce using rule 502 (empty -> .)
    BREAK           reduce using rule 502 (empty -> .)
    CONTINUE        reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    PLUS            reduce using rule 502 (empty -> .)
    DASH            reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    TILDE           reduce using rule 502 (empty -> .)
    EXCLAMATION     reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    THIS            reduce using rule 502 (empty -> .)
    SUPER           reduce using rule 502 (empty -> .)
    NEW             reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    CharacterLiteral reduce using rule 502 (empty -> .)
    StringLiteral   reduce using rule 502 (empty -> .)
    NULL            reduce using rule 502 (empty -> .)
    NUMBER          reduce using rule 502 (empty -> .)
    HEX_NUMBER      reduce using rule 502 (empty -> .)
    LONG_NUMBER     reduce using rule 502 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 502 (empty -> .)
    NON_INTEGER_1   reduce using rule 502 (empty -> .)
    NON_INTEGER_2   reduce using rule 502 (empty -> .)
    NON_INTEGER_3   reduce using rule 502 (empty -> .)
    TRUE            reduce using rule 502 (empty -> .)
    FALSE           reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ELSE            reduce using rule 502 (empty -> .)
    CASE            reduce using rule 502 (empty -> .)
    DEFAULT         reduce using rule 502 (empty -> .)

  ! CATCH           [ reduce using rule 502 (empty -> .) ]

    expr_65                        shift and go to state 770
    catchClause                    shift and go to state 771
    empty                          shift and go to state 772

state 728

    (164) statement -> TRY block expr_62 .

    BRPAREN         reduce using rule 164 (statement -> TRY block expr_62 .)
    ASSERT          reduce using rule 164 (statement -> TRY block expr_62 .)
    IF              reduce using rule 164 (statement -> TRY block expr_62 .)
    FOR             reduce using rule 164 (statement -> TRY block expr_62 .)
    WHILE           reduce using rule 164 (statement -> TRY block expr_62 .)
    DO              reduce using rule 164 (statement -> TRY block expr_62 .)
    TRY             reduce using rule 164 (statement -> TRY block expr_62 .)
    SWITCH          reduce using rule 164 (statement -> TRY block expr_62 .)
    SYNCHRONIZED    reduce using rule 164 (statement -> TRY block expr_62 .)
    RETURN          reduce using rule 164 (statement -> TRY block expr_62 .)
    THROW           reduce using rule 164 (statement -> TRY block expr_62 .)
    BREAK           reduce using rule 164 (statement -> TRY block expr_62 .)
    CONTINUE        reduce using rule 164 (statement -> TRY block expr_62 .)
    SEMI            reduce using rule 164 (statement -> TRY block expr_62 .)
    Identifier      reduce using rule 164 (statement -> TRY block expr_62 .)
    BLPAREN         reduce using rule 164 (statement -> TRY block expr_62 .)
    BOOLEAN         reduce using rule 164 (statement -> TRY block expr_62 .)
    CHAR            reduce using rule 164 (statement -> TRY block expr_62 .)
    BYTE            reduce using rule 164 (statement -> TRY block expr_62 .)
    SHORT           reduce using rule 164 (statement -> TRY block expr_62 .)
    INT             reduce using rule 164 (statement -> TRY block expr_62 .)
    LONG            reduce using rule 164 (statement -> TRY block expr_62 .)
    FLOAT           reduce using rule 164 (statement -> TRY block expr_62 .)
    DOUBLE          reduce using rule 164 (statement -> TRY block expr_62 .)
    PUBLIC          reduce using rule 164 (statement -> TRY block expr_62 .)
    PROTECTED       reduce using rule 164 (statement -> TRY block expr_62 .)
    PRIVATE         reduce using rule 164 (statement -> TRY block expr_62 .)
    ABSTRACT        reduce using rule 164 (statement -> TRY block expr_62 .)
    STATIC          reduce using rule 164 (statement -> TRY block expr_62 .)
    FINAL           reduce using rule 164 (statement -> TRY block expr_62 .)
    STRICTFP        reduce using rule 164 (statement -> TRY block expr_62 .)
    AT              reduce using rule 164 (statement -> TRY block expr_62 .)
    PLUS            reduce using rule 164 (statement -> TRY block expr_62 .)
    DASH            reduce using rule 164 (statement -> TRY block expr_62 .)
    OP_INC          reduce using rule 164 (statement -> TRY block expr_62 .)
    OP_DEC          reduce using rule 164 (statement -> TRY block expr_62 .)
    TILDE           reduce using rule 164 (statement -> TRY block expr_62 .)
    EXCLAMATION     reduce using rule 164 (statement -> TRY block expr_62 .)
    LPAREN          reduce using rule 164 (statement -> TRY block expr_62 .)
    THIS            reduce using rule 164 (statement -> TRY block expr_62 .)
    SUPER           reduce using rule 164 (statement -> TRY block expr_62 .)
    NEW             reduce using rule 164 (statement -> TRY block expr_62 .)
    VOID            reduce using rule 164 (statement -> TRY block expr_62 .)
    CharacterLiteral reduce using rule 164 (statement -> TRY block expr_62 .)
    StringLiteral   reduce using rule 164 (statement -> TRY block expr_62 .)
    NULL            reduce using rule 164 (statement -> TRY block expr_62 .)
    NUMBER          reduce using rule 164 (statement -> TRY block expr_62 .)
    HEX_NUMBER      reduce using rule 164 (statement -> TRY block expr_62 .)
    LONG_NUMBER     reduce using rule 164 (statement -> TRY block expr_62 .)
    LONG_HEX_NUMBER reduce using rule 164 (statement -> TRY block expr_62 .)
    NON_INTEGER_1   reduce using rule 164 (statement -> TRY block expr_62 .)
    NON_INTEGER_2   reduce using rule 164 (statement -> TRY block expr_62 .)
    NON_INTEGER_3   reduce using rule 164 (statement -> TRY block expr_62 .)
    TRUE            reduce using rule 164 (statement -> TRY block expr_62 .)
    FALSE           reduce using rule 164 (statement -> TRY block expr_62 .)
    CLASS           reduce using rule 164 (statement -> TRY block expr_62 .)
    ENUM            reduce using rule 164 (statement -> TRY block expr_62 .)
    INTERFACE       reduce using rule 164 (statement -> TRY block expr_62 .)
    ELSE            reduce using rule 164 (statement -> TRY block expr_62 .)
    CASE            reduce using rule 164 (statement -> TRY block expr_62 .)
    DEFAULT         reduce using rule 164 (statement -> TRY block expr_62 .)



state 729

    (417) expr_62 -> FINALLY . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 773

state 730

    (175) catchClause -> CATCH . LPAREN formalParameter RPAREN block

    LPAREN          shift and go to state 774



state 731

    (173) statement -> Identifier COLON statement .

    BRPAREN         reduce using rule 173 (statement -> Identifier COLON statement .)
    ASSERT          reduce using rule 173 (statement -> Identifier COLON statement .)
    IF              reduce using rule 173 (statement -> Identifier COLON statement .)
    FOR             reduce using rule 173 (statement -> Identifier COLON statement .)
    WHILE           reduce using rule 173 (statement -> Identifier COLON statement .)
    DO              reduce using rule 173 (statement -> Identifier COLON statement .)
    TRY             reduce using rule 173 (statement -> Identifier COLON statement .)
    SWITCH          reduce using rule 173 (statement -> Identifier COLON statement .)
    SYNCHRONIZED    reduce using rule 173 (statement -> Identifier COLON statement .)
    RETURN          reduce using rule 173 (statement -> Identifier COLON statement .)
    THROW           reduce using rule 173 (statement -> Identifier COLON statement .)
    BREAK           reduce using rule 173 (statement -> Identifier COLON statement .)
    CONTINUE        reduce using rule 173 (statement -> Identifier COLON statement .)
    SEMI            reduce using rule 173 (statement -> Identifier COLON statement .)
    Identifier      reduce using rule 173 (statement -> Identifier COLON statement .)
    BLPAREN         reduce using rule 173 (statement -> Identifier COLON statement .)
    BOOLEAN         reduce using rule 173 (statement -> Identifier COLON statement .)
    CHAR            reduce using rule 173 (statement -> Identifier COLON statement .)
    BYTE            reduce using rule 173 (statement -> Identifier COLON statement .)
    SHORT           reduce using rule 173 (statement -> Identifier COLON statement .)
    INT             reduce using rule 173 (statement -> Identifier COLON statement .)
    LONG            reduce using rule 173 (statement -> Identifier COLON statement .)
    FLOAT           reduce using rule 173 (statement -> Identifier COLON statement .)
    DOUBLE          reduce using rule 173 (statement -> Identifier COLON statement .)
    PUBLIC          reduce using rule 173 (statement -> Identifier COLON statement .)
    PROTECTED       reduce using rule 173 (statement -> Identifier COLON statement .)
    PRIVATE         reduce using rule 173 (statement -> Identifier COLON statement .)
    ABSTRACT        reduce using rule 173 (statement -> Identifier COLON statement .)
    STATIC          reduce using rule 173 (statement -> Identifier COLON statement .)
    FINAL           reduce using rule 173 (statement -> Identifier COLON statement .)
    STRICTFP        reduce using rule 173 (statement -> Identifier COLON statement .)
    AT              reduce using rule 173 (statement -> Identifier COLON statement .)
    PLUS            reduce using rule 173 (statement -> Identifier COLON statement .)
    DASH            reduce using rule 173 (statement -> Identifier COLON statement .)
    OP_INC          reduce using rule 173 (statement -> Identifier COLON statement .)
    OP_DEC          reduce using rule 173 (statement -> Identifier COLON statement .)
    TILDE           reduce using rule 173 (statement -> Identifier COLON statement .)
    EXCLAMATION     reduce using rule 173 (statement -> Identifier COLON statement .)
    LPAREN          reduce using rule 173 (statement -> Identifier COLON statement .)
    THIS            reduce using rule 173 (statement -> Identifier COLON statement .)
    SUPER           reduce using rule 173 (statement -> Identifier COLON statement .)
    NEW             reduce using rule 173 (statement -> Identifier COLON statement .)
    VOID            reduce using rule 173 (statement -> Identifier COLON statement .)
    CharacterLiteral reduce using rule 173 (statement -> Identifier COLON statement .)
    StringLiteral   reduce using rule 173 (statement -> Identifier COLON statement .)
    NULL            reduce using rule 173 (statement -> Identifier COLON statement .)
    NUMBER          reduce using rule 173 (statement -> Identifier COLON statement .)
    HEX_NUMBER      reduce using rule 173 (statement -> Identifier COLON statement .)
    LONG_NUMBER     reduce using rule 173 (statement -> Identifier COLON statement .)
    LONG_HEX_NUMBER reduce using rule 173 (statement -> Identifier COLON statement .)
    NON_INTEGER_1   reduce using rule 173 (statement -> Identifier COLON statement .)
    NON_INTEGER_2   reduce using rule 173 (statement -> Identifier COLON statement .)
    NON_INTEGER_3   reduce using rule 173 (statement -> Identifier COLON statement .)
    TRUE            reduce using rule 173 (statement -> Identifier COLON statement .)
    FALSE           reduce using rule 173 (statement -> Identifier COLON statement .)
    CLASS           reduce using rule 173 (statement -> Identifier COLON statement .)
    ENUM            reduce using rule 173 (statement -> Identifier COLON statement .)
    INTERFACE       reduce using rule 173 (statement -> Identifier COLON statement .)
    ELSE            reduce using rule 173 (statement -> Identifier COLON statement .)
    CASE            reduce using rule 173 (statement -> Identifier COLON statement .)
    DEFAULT         reduce using rule 173 (statement -> Identifier COLON statement .)



state 732

    (170) statement -> CONTINUE expr_64 SEMI .

    BRPAREN         reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    ASSERT          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    IF              reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    FOR             reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    WHILE           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    DO              reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    TRY             reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    SWITCH          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    SYNCHRONIZED    reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    RETURN          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    THROW           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    BREAK           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    CONTINUE        reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    SEMI            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    Identifier      reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    BLPAREN         reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    BOOLEAN         reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    CHAR            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    BYTE            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    SHORT           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    INT             reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    LONG            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    FLOAT           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    DOUBLE          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    PUBLIC          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    PROTECTED       reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    PRIVATE         reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    ABSTRACT        reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    STATIC          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    FINAL           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    STRICTFP        reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    AT              reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    PLUS            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    DASH            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    OP_INC          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    OP_DEC          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    TILDE           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    EXCLAMATION     reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    LPAREN          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    THIS            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    SUPER           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NEW             reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    VOID            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    CharacterLiteral reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    StringLiteral   reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NULL            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NUMBER          reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    HEX_NUMBER      reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    LONG_NUMBER     reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    LONG_HEX_NUMBER reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NON_INTEGER_1   reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NON_INTEGER_2   reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    NON_INTEGER_3   reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    TRUE            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    FALSE           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    CLASS           reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    ENUM            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    INTERFACE       reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    ELSE            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    CASE            reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)
    DEFAULT         reduce using rule 170 (statement -> CONTINUE expr_64 SEMI .)



state 733

    (162) statement -> WHILE parExpression statement .

    BRPAREN         reduce using rule 162 (statement -> WHILE parExpression statement .)
    ASSERT          reduce using rule 162 (statement -> WHILE parExpression statement .)
    IF              reduce using rule 162 (statement -> WHILE parExpression statement .)
    FOR             reduce using rule 162 (statement -> WHILE parExpression statement .)
    WHILE           reduce using rule 162 (statement -> WHILE parExpression statement .)
    DO              reduce using rule 162 (statement -> WHILE parExpression statement .)
    TRY             reduce using rule 162 (statement -> WHILE parExpression statement .)
    SWITCH          reduce using rule 162 (statement -> WHILE parExpression statement .)
    SYNCHRONIZED    reduce using rule 162 (statement -> WHILE parExpression statement .)
    RETURN          reduce using rule 162 (statement -> WHILE parExpression statement .)
    THROW           reduce using rule 162 (statement -> WHILE parExpression statement .)
    BREAK           reduce using rule 162 (statement -> WHILE parExpression statement .)
    CONTINUE        reduce using rule 162 (statement -> WHILE parExpression statement .)
    SEMI            reduce using rule 162 (statement -> WHILE parExpression statement .)
    Identifier      reduce using rule 162 (statement -> WHILE parExpression statement .)
    BLPAREN         reduce using rule 162 (statement -> WHILE parExpression statement .)
    BOOLEAN         reduce using rule 162 (statement -> WHILE parExpression statement .)
    CHAR            reduce using rule 162 (statement -> WHILE parExpression statement .)
    BYTE            reduce using rule 162 (statement -> WHILE parExpression statement .)
    SHORT           reduce using rule 162 (statement -> WHILE parExpression statement .)
    INT             reduce using rule 162 (statement -> WHILE parExpression statement .)
    LONG            reduce using rule 162 (statement -> WHILE parExpression statement .)
    FLOAT           reduce using rule 162 (statement -> WHILE parExpression statement .)
    DOUBLE          reduce using rule 162 (statement -> WHILE parExpression statement .)
    PUBLIC          reduce using rule 162 (statement -> WHILE parExpression statement .)
    PROTECTED       reduce using rule 162 (statement -> WHILE parExpression statement .)
    PRIVATE         reduce using rule 162 (statement -> WHILE parExpression statement .)
    ABSTRACT        reduce using rule 162 (statement -> WHILE parExpression statement .)
    STATIC          reduce using rule 162 (statement -> WHILE parExpression statement .)
    FINAL           reduce using rule 162 (statement -> WHILE parExpression statement .)
    STRICTFP        reduce using rule 162 (statement -> WHILE parExpression statement .)
    AT              reduce using rule 162 (statement -> WHILE parExpression statement .)
    PLUS            reduce using rule 162 (statement -> WHILE parExpression statement .)
    DASH            reduce using rule 162 (statement -> WHILE parExpression statement .)
    OP_INC          reduce using rule 162 (statement -> WHILE parExpression statement .)
    OP_DEC          reduce using rule 162 (statement -> WHILE parExpression statement .)
    TILDE           reduce using rule 162 (statement -> WHILE parExpression statement .)
    EXCLAMATION     reduce using rule 162 (statement -> WHILE parExpression statement .)
    LPAREN          reduce using rule 162 (statement -> WHILE parExpression statement .)
    THIS            reduce using rule 162 (statement -> WHILE parExpression statement .)
    SUPER           reduce using rule 162 (statement -> WHILE parExpression statement .)
    NEW             reduce using rule 162 (statement -> WHILE parExpression statement .)
    VOID            reduce using rule 162 (statement -> WHILE parExpression statement .)
    CharacterLiteral reduce using rule 162 (statement -> WHILE parExpression statement .)
    StringLiteral   reduce using rule 162 (statement -> WHILE parExpression statement .)
    NULL            reduce using rule 162 (statement -> WHILE parExpression statement .)
    NUMBER          reduce using rule 162 (statement -> WHILE parExpression statement .)
    HEX_NUMBER      reduce using rule 162 (statement -> WHILE parExpression statement .)
    LONG_NUMBER     reduce using rule 162 (statement -> WHILE parExpression statement .)
    LONG_HEX_NUMBER reduce using rule 162 (statement -> WHILE parExpression statement .)
    NON_INTEGER_1   reduce using rule 162 (statement -> WHILE parExpression statement .)
    NON_INTEGER_2   reduce using rule 162 (statement -> WHILE parExpression statement .)
    NON_INTEGER_3   reduce using rule 162 (statement -> WHILE parExpression statement .)
    TRUE            reduce using rule 162 (statement -> WHILE parExpression statement .)
    FALSE           reduce using rule 162 (statement -> WHILE parExpression statement .)
    CLASS           reduce using rule 162 (statement -> WHILE parExpression statement .)
    ENUM            reduce using rule 162 (statement -> WHILE parExpression statement .)
    INTERFACE       reduce using rule 162 (statement -> WHILE parExpression statement .)
    ELSE            reduce using rule 162 (statement -> WHILE parExpression statement .)
    CASE            reduce using rule 162 (statement -> WHILE parExpression statement .)
    DEFAULT         reduce using rule 162 (statement -> WHILE parExpression statement .)



state 734

    (165) statement -> SWITCH parExpression BLPAREN . switchBlockStatementGroups BRPAREN
    (177) switchBlockStatementGroups -> . expr_66
    (425) expr_66 -> . switchBlockStatementGroup
    (426) expr_66 -> . expr_66 switchBlockStatementGroup
    (427) expr_66 -> . empty
    (178) switchBlockStatementGroup -> . expr_67 expr_blockStatment
    (502) empty -> .
    (428) expr_67 -> . switchLabel
    (429) expr_67 -> . expr_67 switchLabel
    (179) switchLabel -> . CASE constantExpression COLON
    (180) switchLabel -> . CASE enumConstantName COLON
    (181) switchLabel -> . DEFAULT COLON

  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for DEFAULT resolved as shift.
    BRPAREN         reduce using rule 502 (empty -> .)
    CASE            shift and go to state 776
    DEFAULT         shift and go to state 778

  ! CASE            [ reduce using rule 502 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 502 (empty -> .) ]

    switchBlockStatementGroups     shift and go to state 775
    switchLabel                    shift and go to state 777
    expr_66                        shift and go to state 779
    switchBlockStatementGroup      shift and go to state 781
    expr_67                        shift and go to state 780
    empty                          shift and go to state 782

state 735

    (155) localVariableDeclaration -> variableModifiers type variableDeclarators .

    SEMI            reduce using rule 155 (localVariableDeclaration -> variableModifiers type variableDeclarators .)



state 736

    (169) statement -> BREAK expr_64 SEMI .

    BRPAREN         reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    ASSERT          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    IF              reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    FOR             reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    WHILE           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    DO              reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    TRY             reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    SWITCH          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    SYNCHRONIZED    reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    RETURN          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    THROW           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    BREAK           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    CONTINUE        reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    SEMI            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    Identifier      reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    BLPAREN         reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    BOOLEAN         reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    CHAR            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    BYTE            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    SHORT           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    INT             reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    LONG            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    FLOAT           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    DOUBLE          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    PUBLIC          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    PROTECTED       reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    PRIVATE         reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    ABSTRACT        reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    STATIC          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    FINAL           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    STRICTFP        reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    AT              reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    PLUS            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    DASH            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    OP_INC          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    OP_DEC          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    TILDE           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    EXCLAMATION     reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    LPAREN          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    THIS            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    SUPER           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NEW             reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    VOID            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    CharacterLiteral reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    StringLiteral   reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NULL            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NUMBER          reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    HEX_NUMBER      reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    LONG_NUMBER     reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    LONG_HEX_NUMBER reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NON_INTEGER_1   reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NON_INTEGER_2   reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    NON_INTEGER_3   reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    TRUE            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    FALSE           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    CLASS           reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    ENUM            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    INTERFACE       reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    ELSE            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    CASE            reduce using rule 169 (statement -> BREAK expr_64 SEMI .)
    DEFAULT         reduce using rule 169 (statement -> BREAK expr_64 SEMI .)



state 737

    (163) statement -> DO statement WHILE . parExpression SEMI
    (188) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 661


    parExpression                  shift and go to state 783

state 738

    (159) statement -> ASSERT expression expr_60 . SEMI

    SEMI            shift and go to state 784



state 739

    (411) expr_60 -> COLON . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 785

state 740

    (412) expr_60 -> empty .

    SEMI            reduce using rule 412 (expr_60 -> empty .)



state 741

    (160) statement -> IF parExpression statement . expr_61
    (413) expr_61 -> . ELSE statement
    (414) expr_61 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift.
    ELSE            shift and go to state 787
    BRPAREN         reduce using rule 502 (empty -> .)
    ASSERT          reduce using rule 502 (empty -> .)
    IF              reduce using rule 502 (empty -> .)
    FOR             reduce using rule 502 (empty -> .)
    WHILE           reduce using rule 502 (empty -> .)
    DO              reduce using rule 502 (empty -> .)
    TRY             reduce using rule 502 (empty -> .)
    SWITCH          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    RETURN          reduce using rule 502 (empty -> .)
    THROW           reduce using rule 502 (empty -> .)
    BREAK           reduce using rule 502 (empty -> .)
    CONTINUE        reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    Identifier      reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    PLUS            reduce using rule 502 (empty -> .)
    DASH            reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    TILDE           reduce using rule 502 (empty -> .)
    EXCLAMATION     reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    THIS            reduce using rule 502 (empty -> .)
    SUPER           reduce using rule 502 (empty -> .)
    NEW             reduce using rule 502 (empty -> .)
    VOID            reduce using rule 502 (empty -> .)
    CharacterLiteral reduce using rule 502 (empty -> .)
    StringLiteral   reduce using rule 502 (empty -> .)
    NULL            reduce using rule 502 (empty -> .)
    NUMBER          reduce using rule 502 (empty -> .)
    HEX_NUMBER      reduce using rule 502 (empty -> .)
    LONG_NUMBER     reduce using rule 502 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 502 (empty -> .)
    NON_INTEGER_1   reduce using rule 502 (empty -> .)
    NON_INTEGER_2   reduce using rule 502 (empty -> .)
    NON_INTEGER_3   reduce using rule 502 (empty -> .)
    TRUE            reduce using rule 502 (empty -> .)
    FALSE           reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    CASE            reduce using rule 502 (empty -> .)
    DEFAULT         reduce using rule 502 (empty -> .)

  ! ELSE            [ reduce using rule 502 (empty -> .) ]

    expr_61                        shift and go to state 786
    empty                          shift and go to state 788

state 742

    (168) statement -> THROW expression SEMI .

    BRPAREN         reduce using rule 168 (statement -> THROW expression SEMI .)
    ASSERT          reduce using rule 168 (statement -> THROW expression SEMI .)
    IF              reduce using rule 168 (statement -> THROW expression SEMI .)
    FOR             reduce using rule 168 (statement -> THROW expression SEMI .)
    WHILE           reduce using rule 168 (statement -> THROW expression SEMI .)
    DO              reduce using rule 168 (statement -> THROW expression SEMI .)
    TRY             reduce using rule 168 (statement -> THROW expression SEMI .)
    SWITCH          reduce using rule 168 (statement -> THROW expression SEMI .)
    SYNCHRONIZED    reduce using rule 168 (statement -> THROW expression SEMI .)
    RETURN          reduce using rule 168 (statement -> THROW expression SEMI .)
    THROW           reduce using rule 168 (statement -> THROW expression SEMI .)
    BREAK           reduce using rule 168 (statement -> THROW expression SEMI .)
    CONTINUE        reduce using rule 168 (statement -> THROW expression SEMI .)
    SEMI            reduce using rule 168 (statement -> THROW expression SEMI .)
    Identifier      reduce using rule 168 (statement -> THROW expression SEMI .)
    BLPAREN         reduce using rule 168 (statement -> THROW expression SEMI .)
    BOOLEAN         reduce using rule 168 (statement -> THROW expression SEMI .)
    CHAR            reduce using rule 168 (statement -> THROW expression SEMI .)
    BYTE            reduce using rule 168 (statement -> THROW expression SEMI .)
    SHORT           reduce using rule 168 (statement -> THROW expression SEMI .)
    INT             reduce using rule 168 (statement -> THROW expression SEMI .)
    LONG            reduce using rule 168 (statement -> THROW expression SEMI .)
    FLOAT           reduce using rule 168 (statement -> THROW expression SEMI .)
    DOUBLE          reduce using rule 168 (statement -> THROW expression SEMI .)
    PUBLIC          reduce using rule 168 (statement -> THROW expression SEMI .)
    PROTECTED       reduce using rule 168 (statement -> THROW expression SEMI .)
    PRIVATE         reduce using rule 168 (statement -> THROW expression SEMI .)
    ABSTRACT        reduce using rule 168 (statement -> THROW expression SEMI .)
    STATIC          reduce using rule 168 (statement -> THROW expression SEMI .)
    FINAL           reduce using rule 168 (statement -> THROW expression SEMI .)
    STRICTFP        reduce using rule 168 (statement -> THROW expression SEMI .)
    AT              reduce using rule 168 (statement -> THROW expression SEMI .)
    PLUS            reduce using rule 168 (statement -> THROW expression SEMI .)
    DASH            reduce using rule 168 (statement -> THROW expression SEMI .)
    OP_INC          reduce using rule 168 (statement -> THROW expression SEMI .)
    OP_DEC          reduce using rule 168 (statement -> THROW expression SEMI .)
    TILDE           reduce using rule 168 (statement -> THROW expression SEMI .)
    EXCLAMATION     reduce using rule 168 (statement -> THROW expression SEMI .)
    LPAREN          reduce using rule 168 (statement -> THROW expression SEMI .)
    THIS            reduce using rule 168 (statement -> THROW expression SEMI .)
    SUPER           reduce using rule 168 (statement -> THROW expression SEMI .)
    NEW             reduce using rule 168 (statement -> THROW expression SEMI .)
    VOID            reduce using rule 168 (statement -> THROW expression SEMI .)
    CharacterLiteral reduce using rule 168 (statement -> THROW expression SEMI .)
    StringLiteral   reduce using rule 168 (statement -> THROW expression SEMI .)
    NULL            reduce using rule 168 (statement -> THROW expression SEMI .)
    NUMBER          reduce using rule 168 (statement -> THROW expression SEMI .)
    HEX_NUMBER      reduce using rule 168 (statement -> THROW expression SEMI .)
    LONG_NUMBER     reduce using rule 168 (statement -> THROW expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 168 (statement -> THROW expression SEMI .)
    NON_INTEGER_1   reduce using rule 168 (statement -> THROW expression SEMI .)
    NON_INTEGER_2   reduce using rule 168 (statement -> THROW expression SEMI .)
    NON_INTEGER_3   reduce using rule 168 (statement -> THROW expression SEMI .)
    TRUE            reduce using rule 168 (statement -> THROW expression SEMI .)
    FALSE           reduce using rule 168 (statement -> THROW expression SEMI .)
    CLASS           reduce using rule 168 (statement -> THROW expression SEMI .)
    ENUM            reduce using rule 168 (statement -> THROW expression SEMI .)
    INTERFACE       reduce using rule 168 (statement -> THROW expression SEMI .)
    ELSE            reduce using rule 168 (statement -> THROW expression SEMI .)
    CASE            reduce using rule 168 (statement -> THROW expression SEMI .)
    DEFAULT         reduce using rule 168 (statement -> THROW expression SEMI .)



state 743

    (61) voidMethodDeclaratorRest -> formalParameters throwsList . expr_methdoBody
    (339) expr_methdoBody -> . methodBody
    (340) expr_methdoBody -> . SEMI
    (111) methodBody -> . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    SEMI            shift and go to state 790
    BLPAREN         shift and go to state 530


    methodBody                     shift and go to state 789
    expr_methdoBody                shift and go to state 791
    block                          shift and go to state 792

state 744

    (46) genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .

    BRPAREN         reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    SEMI            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    STATIC          reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    PUBLIC          reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    PROTECTED       reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    PRIVATE         reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    ABSTRACT        reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    FINAL           reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    NATIVE          reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    TRANSIENT       reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    VOLATILE        reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    STRICTFP        reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    AT              reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    BLPAREN         reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    VOID            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    Identifier      reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    LESS            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    INTERFACE       reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    CLASS           reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    ENUM            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    BOOLEAN         reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    CHAR            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    BYTE            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    SHORT           reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    INT             reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    LONG            reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    FLOAT           reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)
    DOUBLE          reduce using rule 46 (genericMethodOrConstructorRest -> expr_27 Identifier methodDeclaratorRest .)



state 745

    (60) methodDeclaratorRest -> formalParameters expr_28 . throwsList expr_methdoBody
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN
    (337) throwsList -> . THROWS qualifiedNameList
    (338) throwsList -> . empty
    (502) empty -> .

    FLPAREN         shift and go to state 302
    THROWS          shift and go to state 692
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)


    throwsList                     shift and go to state 793
    empty                          shift and go to state 693

state 746

    (112) constructorBody -> BLPAREN . expr_45 expr_blockStatment BRPAREN
    (375) expr_45 -> . explicitConstructorInvocation
    (376) expr_45 -> . empty
    (113) explicitConstructorInvocation -> . expr_47 expr_48 arguments SEMI
    (114) explicitConstructorInvocation -> . primary DOT expr_47 SUPER arguments SEMI
    (502) empty -> .
    (380) expr_47 -> . nonWildcardTypeArguments
    (381) expr_47 -> . empty
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (259) nonWildcardTypeArguments -> . LESS typeList MORE
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for CharacterLiteral resolved as shift.
  ! shift/reduce conflict for StringLiteral resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
    ASSERT          reduce using rule 502 (empty -> .)
    IF              reduce using rule 502 (empty -> .)
    FOR             reduce using rule 502 (empty -> .)
    WHILE           reduce using rule 502 (empty -> .)
    DO              reduce using rule 502 (empty -> .)
    TRY             reduce using rule 502 (empty -> .)
    SWITCH          reduce using rule 502 (empty -> .)
    SYNCHRONIZED    reduce using rule 502 (empty -> .)
    RETURN          reduce using rule 502 (empty -> .)
    THROW           reduce using rule 502 (empty -> .)
    BREAK           reduce using rule 502 (empty -> .)
    CONTINUE        reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)
    BLPAREN         reduce using rule 502 (empty -> .)
    PUBLIC          reduce using rule 502 (empty -> .)
    PROTECTED       reduce using rule 502 (empty -> .)
    PRIVATE         reduce using rule 502 (empty -> .)
    ABSTRACT        reduce using rule 502 (empty -> .)
    STATIC          reduce using rule 502 (empty -> .)
    FINAL           reduce using rule 502 (empty -> .)
    STRICTFP        reduce using rule 502 (empty -> .)
    AT              reduce using rule 502 (empty -> .)
    PLUS            reduce using rule 502 (empty -> .)
    DASH            reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)
    TILDE           reduce using rule 502 (empty -> .)
    EXCLAMATION     reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    LESS            shift and go to state 190
    LPAREN          shift and go to state 661
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]
  ! LPAREN          [ reduce using rule 502 (empty -> .) ]
  ! THIS            [ reduce using rule 502 (empty -> .) ]
  ! SUPER           [ reduce using rule 502 (empty -> .) ]
  ! NEW             [ reduce using rule 502 (empty -> .) ]
  ! VOID            [ reduce using rule 502 (empty -> .) ]
  ! CharacterLiteral [ reduce using rule 502 (empty -> .) ]
  ! StringLiteral   [ reduce using rule 502 (empty -> .) ]
  ! NULL            [ reduce using rule 502 (empty -> .) ]
  ! NUMBER          [ reduce using rule 502 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 502 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 502 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 502 (empty -> .) ]
  ! TRUE            [ reduce using rule 502 (empty -> .) ]
  ! FALSE           [ reduce using rule 502 (empty -> .) ]

    expr_47                        shift and go to state 794
    expr_45                        shift and go to state 795
    primary                        shift and go to state 796
    nonWildcardTypeArguments       shift and go to state 375
    booleanLiteral                 shift and go to state 73
    literal                        shift and go to state 104
    integerLiteral                 shift and go to state 83
    empty                          shift and go to state 797
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    primitiveType                  shift and go to state 110
    explicitConstructorInvocation  shift and go to state 798

state 747

    (65) constructorDeclaratorRest -> formalParameters throwsList constructorBody .

    BRPAREN         reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    SEMI            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    STATIC          reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    PUBLIC          reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    PROTECTED       reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    PRIVATE         reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    ABSTRACT        reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    FINAL           reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    NATIVE          reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    SYNCHRONIZED    reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    TRANSIENT       reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    VOLATILE        reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    STRICTFP        reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    AT              reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    BLPAREN         reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    VOID            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    Identifier      reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    LESS            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    INTERFACE       reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    CLASS           reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    ENUM            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    BOOLEAN         reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    CHAR            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    BYTE            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    SHORT           reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    INT             reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    LONG            reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    FLOAT           reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)
    DOUBLE          reduce using rule 65 (constructorDeclaratorRest -> formalParameters throwsList constructorBody .)



state 748

    (337) throwsList -> THROWS qualifiedNameList .

    SEMI            reduce using rule 337 (throwsList -> THROWS qualifiedNameList .)
    BLPAREN         reduce using rule 337 (throwsList -> THROWS qualifiedNameList .)



state 749

    (106) qualifiedNameList -> qualifiedName . expr_42
    (368) expr_42 -> . COMMA qualifiedName
    (369) expr_42 -> . expr_42 COMMA qualifiedName
    (370) expr_42 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 800
    BLPAREN         reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! COMMA           [ reduce using rule 502 (empty -> .) ]

    expr_42                        shift and go to state 799
    empty                          shift and go to state 801

state 750

    (107) formalParameters -> LPAREN expr_43 RPAREN .

    FLPAREN         reduce using rule 107 (formalParameters -> LPAREN expr_43 RPAREN .)
    THROWS          reduce using rule 107 (formalParameters -> LPAREN expr_43 RPAREN .)
    SEMI            reduce using rule 107 (formalParameters -> LPAREN expr_43 RPAREN .)
    BLPAREN         reduce using rule 107 (formalParameters -> LPAREN expr_43 RPAREN .)



state 751

    (108) formalParameterDecls -> variableModifiers type . formalParameterDeclsRest
    (109) formalParameterDeclsRest -> . variableDeclaratorId expr_44
    (110) formalParameterDeclsRest -> . OP_ARRAY variableDeclaratorId
    (71) variableDeclaratorId -> . Identifier expr_28

    OP_ARRAY        shift and go to state 802
    Identifier      shift and go to state 672


    formalParameterDeclsRest       shift and go to state 803
    variableDeclaratorId           shift and go to state 804

state 752

    (64) voidInterfaceMethodDeclaratorRest -> formalParameters throwsList . SEMI

    SEMI            shift and go to state 805



state 753

    (63) interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .

    BRPAREN         reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    SEMI            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    PUBLIC          reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    PROTECTED       reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    PRIVATE         reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    STATIC          reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    ABSTRACT        reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    FINAL           reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    NATIVE          reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    SYNCHRONIZED    reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    TRANSIENT       reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    VOLATILE        reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    STRICTFP        reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    AT              reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    VOID            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    LESS            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    INTERFACE       reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    CLASS           reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    ENUM            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    Identifier      reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    BOOLEAN         reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    CHAR            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    BYTE            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    SHORT           reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    INT             reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    LONG            reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    FLOAT           reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)
    DOUBLE          reduce using rule 63 (interfaceGenericMethodDecl -> typeParameters expr_27 Identifier interfaceMethodDeclaratorRest .)



state 754

    (70) constantDeclaratorRest -> expr_28 EQUALS . variableInitializer
    (72) variableInitializer -> . arrayInitializer
    (73) variableInitializer -> . expression
    (74) arrayInitializer -> . BLPAREN expr_36 BRPAREN
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    BLPAREN         shift and go to state 524
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    additiveExpression             shift and go to state 88
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    arrayInitializer               shift and go to state 582
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    variableInitializer            shift and go to state 806
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 581

state 755

    (62) interfaceMethodDeclaratorRest -> formalParameters expr_28 . throwsList SEMI
    (335) expr_28 -> expr_28 . FLPAREN FRPAREN
    (337) throwsList -> . THROWS qualifiedNameList
    (338) throwsList -> . empty
    (502) empty -> .

    FLPAREN         shift and go to state 302
    THROWS          shift and go to state 692
    SEMI            reduce using rule 502 (empty -> .)


    throwsList                     shift and go to state 807
    empty                          shift and go to state 693

state 756

    (58) interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .

    BRPAREN         reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SEMI            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PUBLIC          reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PROTECTED       reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    PRIVATE         reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    STATIC          reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    ABSTRACT        reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    FINAL           reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    NATIVE          reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SYNCHRONIZED    reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    TRANSIENT       reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    VOLATILE        reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    STRICTFP        reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    AT              reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    VOID            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    LESS            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    INTERFACE       reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    CLASS           reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    ENUM            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    Identifier      reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    BOOLEAN         reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    CHAR            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    BYTE            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    SHORT           reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    INT             reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    LONG            reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    FLOAT           reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)
    DOUBLE          reduce using rule 58 (interfaceMethodOrFieldRest -> constantDeclaratorsRest SEMI .)



state 757

    (346) expr_33 -> COMMA . constantDeclarator
    (66) constantDeclarator -> . Identifier constantDeclaratorRest

    Identifier      shift and go to state 809


    constantDeclarator             shift and go to state 808

state 758

    (69) constantDeclaratorsRest -> constantDeclaratorRest expr_33 .
    (347) expr_33 -> expr_33 . COMMA constantDeclarator

    SEMI            reduce using rule 69 (constantDeclaratorsRest -> constantDeclaratorRest expr_33 .)
    COMMA           shift and go to state 810



state 759

    (348) expr_33 -> empty .

    COMMA           reduce using rule 348 (expr_33 -> empty .)
    SEMI            reduce using rule 348 (expr_33 -> empty .)



state 760

    (147) annotationMethodRest -> Identifier LPAREN RPAREN expr_58 .

    SEMI            reduce using rule 147 (annotationMethodRest -> Identifier LPAREN RPAREN expr_58 .)



state 761

    (406) expr_58 -> defaultValue .

    SEMI            reduce using rule 406 (expr_58 -> defaultValue .)



state 762

    (149) defaultValue -> DEFAULT . elementValue
    (133) elementValue -> . conditionalExpression
    (134) elementValue -> . annotation
    (135) elementValue -> . elementValueArrayInitializer
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (129) annotation -> . AT annotationName expr_52
    (136) elementValueArrayInitializer -> . BLPAREN expr_55 expr_35 BRPAREN
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    AT              shift and go to state 6
    BLPAREN         shift and go to state 93
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 106
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 125
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    elementValueArrayInitializer   shift and go to state 112
    andExpression                  shift and go to state 92
    elementValue                   shift and go to state 811

state 763

    (407) expr_58 -> empty .

    SEMI            reduce using rule 407 (expr_58 -> empty .)



state 764

    (342) expr_31 -> expr_31 COMMA variableDeclarator .

    COMMA           reduce using rule 342 (expr_31 -> expr_31 COMMA variableDeclarator .)
    SEMI            reduce using rule 342 (expr_31 -> expr_31 COMMA variableDeclarator .)



state 765

    (350) expr_34 -> expr_34 COMMA variableInitializer .

    COMMA           reduce using rule 350 (expr_34 -> expr_34 COMMA variableInitializer .)
    BRPAREN         reduce using rule 350 (expr_34 -> expr_34 COMMA variableInitializer .)



state 766

    (161) statement -> FOR LPAREN forControl RPAREN . statement
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 812
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 767

    (183) forControl -> expr_68 SEMI . expr_69 SEMI expr_70
    (432) expr_69 -> . expression
    (433) expr_69 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    SEMI            reduce using rule 502 (empty -> .)
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    expr_69                        shift and go to state 813
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    empty                          shift and go to state 814
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    primary                        shift and go to state 97
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    andExpression                  shift and go to state 92
    expression                     shift and go to state 815

state 768

    (186) enhancedForControl -> variableModifiers type . Identifier COLON expression
    (155) localVariableDeclaration -> variableModifiers type . variableDeclarators
    (67) variableDeclarators -> . variableDeclarator expr_31
    (68) variableDeclarator -> . variableDeclaratorId expr_32
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 816


    variableDeclarators            shift and go to state 735
    variableDeclaratorId           shift and go to state 572
    variableDeclarator             shift and go to state 575

state 769

    (415) expr_62 -> catches FINALLY . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 817

state 770

    (174) catches -> catchClause expr_65 .
    (423) expr_65 -> expr_65 . catchClause
    (175) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         reduce using rule 174 (catches -> catchClause expr_65 .)
    BRPAREN         reduce using rule 174 (catches -> catchClause expr_65 .)
    ASSERT          reduce using rule 174 (catches -> catchClause expr_65 .)
    IF              reduce using rule 174 (catches -> catchClause expr_65 .)
    FOR             reduce using rule 174 (catches -> catchClause expr_65 .)
    WHILE           reduce using rule 174 (catches -> catchClause expr_65 .)
    DO              reduce using rule 174 (catches -> catchClause expr_65 .)
    TRY             reduce using rule 174 (catches -> catchClause expr_65 .)
    SWITCH          reduce using rule 174 (catches -> catchClause expr_65 .)
    SYNCHRONIZED    reduce using rule 174 (catches -> catchClause expr_65 .)
    RETURN          reduce using rule 174 (catches -> catchClause expr_65 .)
    THROW           reduce using rule 174 (catches -> catchClause expr_65 .)
    BREAK           reduce using rule 174 (catches -> catchClause expr_65 .)
    CONTINUE        reduce using rule 174 (catches -> catchClause expr_65 .)
    SEMI            reduce using rule 174 (catches -> catchClause expr_65 .)
    Identifier      reduce using rule 174 (catches -> catchClause expr_65 .)
    BLPAREN         reduce using rule 174 (catches -> catchClause expr_65 .)
    BOOLEAN         reduce using rule 174 (catches -> catchClause expr_65 .)
    CHAR            reduce using rule 174 (catches -> catchClause expr_65 .)
    BYTE            reduce using rule 174 (catches -> catchClause expr_65 .)
    SHORT           reduce using rule 174 (catches -> catchClause expr_65 .)
    INT             reduce using rule 174 (catches -> catchClause expr_65 .)
    LONG            reduce using rule 174 (catches -> catchClause expr_65 .)
    FLOAT           reduce using rule 174 (catches -> catchClause expr_65 .)
    DOUBLE          reduce using rule 174 (catches -> catchClause expr_65 .)
    PUBLIC          reduce using rule 174 (catches -> catchClause expr_65 .)
    PROTECTED       reduce using rule 174 (catches -> catchClause expr_65 .)
    PRIVATE         reduce using rule 174 (catches -> catchClause expr_65 .)
    ABSTRACT        reduce using rule 174 (catches -> catchClause expr_65 .)
    STATIC          reduce using rule 174 (catches -> catchClause expr_65 .)
    FINAL           reduce using rule 174 (catches -> catchClause expr_65 .)
    STRICTFP        reduce using rule 174 (catches -> catchClause expr_65 .)
    AT              reduce using rule 174 (catches -> catchClause expr_65 .)
    PLUS            reduce using rule 174 (catches -> catchClause expr_65 .)
    DASH            reduce using rule 174 (catches -> catchClause expr_65 .)
    OP_INC          reduce using rule 174 (catches -> catchClause expr_65 .)
    OP_DEC          reduce using rule 174 (catches -> catchClause expr_65 .)
    TILDE           reduce using rule 174 (catches -> catchClause expr_65 .)
    EXCLAMATION     reduce using rule 174 (catches -> catchClause expr_65 .)
    LPAREN          reduce using rule 174 (catches -> catchClause expr_65 .)
    THIS            reduce using rule 174 (catches -> catchClause expr_65 .)
    SUPER           reduce using rule 174 (catches -> catchClause expr_65 .)
    NEW             reduce using rule 174 (catches -> catchClause expr_65 .)
    VOID            reduce using rule 174 (catches -> catchClause expr_65 .)
    CharacterLiteral reduce using rule 174 (catches -> catchClause expr_65 .)
    StringLiteral   reduce using rule 174 (catches -> catchClause expr_65 .)
    NULL            reduce using rule 174 (catches -> catchClause expr_65 .)
    NUMBER          reduce using rule 174 (catches -> catchClause expr_65 .)
    HEX_NUMBER      reduce using rule 174 (catches -> catchClause expr_65 .)
    LONG_NUMBER     reduce using rule 174 (catches -> catchClause expr_65 .)
    LONG_HEX_NUMBER reduce using rule 174 (catches -> catchClause expr_65 .)
    NON_INTEGER_1   reduce using rule 174 (catches -> catchClause expr_65 .)
    NON_INTEGER_2   reduce using rule 174 (catches -> catchClause expr_65 .)
    NON_INTEGER_3   reduce using rule 174 (catches -> catchClause expr_65 .)
    TRUE            reduce using rule 174 (catches -> catchClause expr_65 .)
    FALSE           reduce using rule 174 (catches -> catchClause expr_65 .)
    CLASS           reduce using rule 174 (catches -> catchClause expr_65 .)
    ENUM            reduce using rule 174 (catches -> catchClause expr_65 .)
    INTERFACE       reduce using rule 174 (catches -> catchClause expr_65 .)
    ELSE            reduce using rule 174 (catches -> catchClause expr_65 .)
    CASE            reduce using rule 174 (catches -> catchClause expr_65 .)
    DEFAULT         reduce using rule 174 (catches -> catchClause expr_65 .)
    CATCH           shift and go to state 730


    catchClause                    shift and go to state 818

state 771

    (422) expr_65 -> catchClause .

    CATCH           reduce using rule 422 (expr_65 -> catchClause .)
    FINALLY         reduce using rule 422 (expr_65 -> catchClause .)
    BRPAREN         reduce using rule 422 (expr_65 -> catchClause .)
    ASSERT          reduce using rule 422 (expr_65 -> catchClause .)
    IF              reduce using rule 422 (expr_65 -> catchClause .)
    FOR             reduce using rule 422 (expr_65 -> catchClause .)
    WHILE           reduce using rule 422 (expr_65 -> catchClause .)
    DO              reduce using rule 422 (expr_65 -> catchClause .)
    TRY             reduce using rule 422 (expr_65 -> catchClause .)
    SWITCH          reduce using rule 422 (expr_65 -> catchClause .)
    SYNCHRONIZED    reduce using rule 422 (expr_65 -> catchClause .)
    RETURN          reduce using rule 422 (expr_65 -> catchClause .)
    THROW           reduce using rule 422 (expr_65 -> catchClause .)
    BREAK           reduce using rule 422 (expr_65 -> catchClause .)
    CONTINUE        reduce using rule 422 (expr_65 -> catchClause .)
    SEMI            reduce using rule 422 (expr_65 -> catchClause .)
    Identifier      reduce using rule 422 (expr_65 -> catchClause .)
    BLPAREN         reduce using rule 422 (expr_65 -> catchClause .)
    BOOLEAN         reduce using rule 422 (expr_65 -> catchClause .)
    CHAR            reduce using rule 422 (expr_65 -> catchClause .)
    BYTE            reduce using rule 422 (expr_65 -> catchClause .)
    SHORT           reduce using rule 422 (expr_65 -> catchClause .)
    INT             reduce using rule 422 (expr_65 -> catchClause .)
    LONG            reduce using rule 422 (expr_65 -> catchClause .)
    FLOAT           reduce using rule 422 (expr_65 -> catchClause .)
    DOUBLE          reduce using rule 422 (expr_65 -> catchClause .)
    PUBLIC          reduce using rule 422 (expr_65 -> catchClause .)
    PROTECTED       reduce using rule 422 (expr_65 -> catchClause .)
    PRIVATE         reduce using rule 422 (expr_65 -> catchClause .)
    ABSTRACT        reduce using rule 422 (expr_65 -> catchClause .)
    STATIC          reduce using rule 422 (expr_65 -> catchClause .)
    FINAL           reduce using rule 422 (expr_65 -> catchClause .)
    STRICTFP        reduce using rule 422 (expr_65 -> catchClause .)
    AT              reduce using rule 422 (expr_65 -> catchClause .)
    PLUS            reduce using rule 422 (expr_65 -> catchClause .)
    DASH            reduce using rule 422 (expr_65 -> catchClause .)
    OP_INC          reduce using rule 422 (expr_65 -> catchClause .)
    OP_DEC          reduce using rule 422 (expr_65 -> catchClause .)
    TILDE           reduce using rule 422 (expr_65 -> catchClause .)
    EXCLAMATION     reduce using rule 422 (expr_65 -> catchClause .)
    LPAREN          reduce using rule 422 (expr_65 -> catchClause .)
    THIS            reduce using rule 422 (expr_65 -> catchClause .)
    SUPER           reduce using rule 422 (expr_65 -> catchClause .)
    NEW             reduce using rule 422 (expr_65 -> catchClause .)
    VOID            reduce using rule 422 (expr_65 -> catchClause .)
    CharacterLiteral reduce using rule 422 (expr_65 -> catchClause .)
    StringLiteral   reduce using rule 422 (expr_65 -> catchClause .)
    NULL            reduce using rule 422 (expr_65 -> catchClause .)
    NUMBER          reduce using rule 422 (expr_65 -> catchClause .)
    HEX_NUMBER      reduce using rule 422 (expr_65 -> catchClause .)
    LONG_NUMBER     reduce using rule 422 (expr_65 -> catchClause .)
    LONG_HEX_NUMBER reduce using rule 422 (expr_65 -> catchClause .)
    NON_INTEGER_1   reduce using rule 422 (expr_65 -> catchClause .)
    NON_INTEGER_2   reduce using rule 422 (expr_65 -> catchClause .)
    NON_INTEGER_3   reduce using rule 422 (expr_65 -> catchClause .)
    TRUE            reduce using rule 422 (expr_65 -> catchClause .)
    FALSE           reduce using rule 422 (expr_65 -> catchClause .)
    CLASS           reduce using rule 422 (expr_65 -> catchClause .)
    ENUM            reduce using rule 422 (expr_65 -> catchClause .)
    INTERFACE       reduce using rule 422 (expr_65 -> catchClause .)
    ELSE            reduce using rule 422 (expr_65 -> catchClause .)
    CASE            reduce using rule 422 (expr_65 -> catchClause .)
    DEFAULT         reduce using rule 422 (expr_65 -> catchClause .)



state 772

    (424) expr_65 -> empty .

    CATCH           reduce using rule 424 (expr_65 -> empty .)
    FINALLY         reduce using rule 424 (expr_65 -> empty .)
    BRPAREN         reduce using rule 424 (expr_65 -> empty .)
    ASSERT          reduce using rule 424 (expr_65 -> empty .)
    IF              reduce using rule 424 (expr_65 -> empty .)
    FOR             reduce using rule 424 (expr_65 -> empty .)
    WHILE           reduce using rule 424 (expr_65 -> empty .)
    DO              reduce using rule 424 (expr_65 -> empty .)
    TRY             reduce using rule 424 (expr_65 -> empty .)
    SWITCH          reduce using rule 424 (expr_65 -> empty .)
    SYNCHRONIZED    reduce using rule 424 (expr_65 -> empty .)
    RETURN          reduce using rule 424 (expr_65 -> empty .)
    THROW           reduce using rule 424 (expr_65 -> empty .)
    BREAK           reduce using rule 424 (expr_65 -> empty .)
    CONTINUE        reduce using rule 424 (expr_65 -> empty .)
    SEMI            reduce using rule 424 (expr_65 -> empty .)
    Identifier      reduce using rule 424 (expr_65 -> empty .)
    BLPAREN         reduce using rule 424 (expr_65 -> empty .)
    BOOLEAN         reduce using rule 424 (expr_65 -> empty .)
    CHAR            reduce using rule 424 (expr_65 -> empty .)
    BYTE            reduce using rule 424 (expr_65 -> empty .)
    SHORT           reduce using rule 424 (expr_65 -> empty .)
    INT             reduce using rule 424 (expr_65 -> empty .)
    LONG            reduce using rule 424 (expr_65 -> empty .)
    FLOAT           reduce using rule 424 (expr_65 -> empty .)
    DOUBLE          reduce using rule 424 (expr_65 -> empty .)
    PUBLIC          reduce using rule 424 (expr_65 -> empty .)
    PROTECTED       reduce using rule 424 (expr_65 -> empty .)
    PRIVATE         reduce using rule 424 (expr_65 -> empty .)
    ABSTRACT        reduce using rule 424 (expr_65 -> empty .)
    STATIC          reduce using rule 424 (expr_65 -> empty .)
    FINAL           reduce using rule 424 (expr_65 -> empty .)
    STRICTFP        reduce using rule 424 (expr_65 -> empty .)
    AT              reduce using rule 424 (expr_65 -> empty .)
    PLUS            reduce using rule 424 (expr_65 -> empty .)
    DASH            reduce using rule 424 (expr_65 -> empty .)
    OP_INC          reduce using rule 424 (expr_65 -> empty .)
    OP_DEC          reduce using rule 424 (expr_65 -> empty .)
    TILDE           reduce using rule 424 (expr_65 -> empty .)
    EXCLAMATION     reduce using rule 424 (expr_65 -> empty .)
    LPAREN          reduce using rule 424 (expr_65 -> empty .)
    THIS            reduce using rule 424 (expr_65 -> empty .)
    SUPER           reduce using rule 424 (expr_65 -> empty .)
    NEW             reduce using rule 424 (expr_65 -> empty .)
    VOID            reduce using rule 424 (expr_65 -> empty .)
    CharacterLiteral reduce using rule 424 (expr_65 -> empty .)
    StringLiteral   reduce using rule 424 (expr_65 -> empty .)
    NULL            reduce using rule 424 (expr_65 -> empty .)
    NUMBER          reduce using rule 424 (expr_65 -> empty .)
    HEX_NUMBER      reduce using rule 424 (expr_65 -> empty .)
    LONG_NUMBER     reduce using rule 424 (expr_65 -> empty .)
    LONG_HEX_NUMBER reduce using rule 424 (expr_65 -> empty .)
    NON_INTEGER_1   reduce using rule 424 (expr_65 -> empty .)
    NON_INTEGER_2   reduce using rule 424 (expr_65 -> empty .)
    NON_INTEGER_3   reduce using rule 424 (expr_65 -> empty .)
    TRUE            reduce using rule 424 (expr_65 -> empty .)
    FALSE           reduce using rule 424 (expr_65 -> empty .)
    CLASS           reduce using rule 424 (expr_65 -> empty .)
    ENUM            reduce using rule 424 (expr_65 -> empty .)
    INTERFACE       reduce using rule 424 (expr_65 -> empty .)
    ELSE            reduce using rule 424 (expr_65 -> empty .)
    CASE            reduce using rule 424 (expr_65 -> empty .)
    DEFAULT         reduce using rule 424 (expr_65 -> empty .)



state 773

    (417) expr_62 -> FINALLY block .

    BRPAREN         reduce using rule 417 (expr_62 -> FINALLY block .)
    ASSERT          reduce using rule 417 (expr_62 -> FINALLY block .)
    IF              reduce using rule 417 (expr_62 -> FINALLY block .)
    FOR             reduce using rule 417 (expr_62 -> FINALLY block .)
    WHILE           reduce using rule 417 (expr_62 -> FINALLY block .)
    DO              reduce using rule 417 (expr_62 -> FINALLY block .)
    TRY             reduce using rule 417 (expr_62 -> FINALLY block .)
    SWITCH          reduce using rule 417 (expr_62 -> FINALLY block .)
    SYNCHRONIZED    reduce using rule 417 (expr_62 -> FINALLY block .)
    RETURN          reduce using rule 417 (expr_62 -> FINALLY block .)
    THROW           reduce using rule 417 (expr_62 -> FINALLY block .)
    BREAK           reduce using rule 417 (expr_62 -> FINALLY block .)
    CONTINUE        reduce using rule 417 (expr_62 -> FINALLY block .)
    SEMI            reduce using rule 417 (expr_62 -> FINALLY block .)
    Identifier      reduce using rule 417 (expr_62 -> FINALLY block .)
    BLPAREN         reduce using rule 417 (expr_62 -> FINALLY block .)
    BOOLEAN         reduce using rule 417 (expr_62 -> FINALLY block .)
    CHAR            reduce using rule 417 (expr_62 -> FINALLY block .)
    BYTE            reduce using rule 417 (expr_62 -> FINALLY block .)
    SHORT           reduce using rule 417 (expr_62 -> FINALLY block .)
    INT             reduce using rule 417 (expr_62 -> FINALLY block .)
    LONG            reduce using rule 417 (expr_62 -> FINALLY block .)
    FLOAT           reduce using rule 417 (expr_62 -> FINALLY block .)
    DOUBLE          reduce using rule 417 (expr_62 -> FINALLY block .)
    PUBLIC          reduce using rule 417 (expr_62 -> FINALLY block .)
    PROTECTED       reduce using rule 417 (expr_62 -> FINALLY block .)
    PRIVATE         reduce using rule 417 (expr_62 -> FINALLY block .)
    ABSTRACT        reduce using rule 417 (expr_62 -> FINALLY block .)
    STATIC          reduce using rule 417 (expr_62 -> FINALLY block .)
    FINAL           reduce using rule 417 (expr_62 -> FINALLY block .)
    STRICTFP        reduce using rule 417 (expr_62 -> FINALLY block .)
    AT              reduce using rule 417 (expr_62 -> FINALLY block .)
    PLUS            reduce using rule 417 (expr_62 -> FINALLY block .)
    DASH            reduce using rule 417 (expr_62 -> FINALLY block .)
    OP_INC          reduce using rule 417 (expr_62 -> FINALLY block .)
    OP_DEC          reduce using rule 417 (expr_62 -> FINALLY block .)
    TILDE           reduce using rule 417 (expr_62 -> FINALLY block .)
    EXCLAMATION     reduce using rule 417 (expr_62 -> FINALLY block .)
    LPAREN          reduce using rule 417 (expr_62 -> FINALLY block .)
    THIS            reduce using rule 417 (expr_62 -> FINALLY block .)
    SUPER           reduce using rule 417 (expr_62 -> FINALLY block .)
    NEW             reduce using rule 417 (expr_62 -> FINALLY block .)
    VOID            reduce using rule 417 (expr_62 -> FINALLY block .)
    CharacterLiteral reduce using rule 417 (expr_62 -> FINALLY block .)
    StringLiteral   reduce using rule 417 (expr_62 -> FINALLY block .)
    NULL            reduce using rule 417 (expr_62 -> FINALLY block .)
    NUMBER          reduce using rule 417 (expr_62 -> FINALLY block .)
    HEX_NUMBER      reduce using rule 417 (expr_62 -> FINALLY block .)
    LONG_NUMBER     reduce using rule 417 (expr_62 -> FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 417 (expr_62 -> FINALLY block .)
    NON_INTEGER_1   reduce using rule 417 (expr_62 -> FINALLY block .)
    NON_INTEGER_2   reduce using rule 417 (expr_62 -> FINALLY block .)
    NON_INTEGER_3   reduce using rule 417 (expr_62 -> FINALLY block .)
    TRUE            reduce using rule 417 (expr_62 -> FINALLY block .)
    FALSE           reduce using rule 417 (expr_62 -> FINALLY block .)
    CLASS           reduce using rule 417 (expr_62 -> FINALLY block .)
    ENUM            reduce using rule 417 (expr_62 -> FINALLY block .)
    INTERFACE       reduce using rule 417 (expr_62 -> FINALLY block .)
    ELSE            reduce using rule 417 (expr_62 -> FINALLY block .)
    CASE            reduce using rule 417 (expr_62 -> FINALLY block .)
    DEFAULT         reduce using rule 417 (expr_62 -> FINALLY block .)



state 774

    (175) catchClause -> CATCH LPAREN . formalParameter RPAREN block
    (176) formalParameter -> . variableModifiers type variableDeclaratorId
    (157) variableModifiers -> . expr_variableModifier
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    FINAL           shift and go to state 679
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    formalParameter                shift and go to state 819
    variableModifiers              shift and go to state 820
    expr_variableModifier          shift and go to state 611
    variableModifier               shift and go to state 590
    empty                          shift and go to state 821
    annotation                     shift and go to state 677

state 775

    (165) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups . BRPAREN

    BRPAREN         shift and go to state 822



state 776

    (179) switchLabel -> CASE . constantExpression COLON
    (180) switchLabel -> CASE . enumConstantName COLON
    (191) constantExpression -> . expression
    (88) enumConstantName -> . Identifier
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    Identifier      shift and go to state 824
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    enumConstantName               shift and go to state 823
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    additiveExpression             shift and go to state 88
    instanceOfExpression           shift and go to state 80
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    constantExpression             shift and go to state 825
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    andExpression                  shift and go to state 92
    expression                     shift and go to state 826

state 777

    (428) expr_67 -> switchLabel .

    CASE            reduce using rule 428 (expr_67 -> switchLabel .)
    DEFAULT         reduce using rule 428 (expr_67 -> switchLabel .)
    ASSERT          reduce using rule 428 (expr_67 -> switchLabel .)
    IF              reduce using rule 428 (expr_67 -> switchLabel .)
    FOR             reduce using rule 428 (expr_67 -> switchLabel .)
    WHILE           reduce using rule 428 (expr_67 -> switchLabel .)
    DO              reduce using rule 428 (expr_67 -> switchLabel .)
    TRY             reduce using rule 428 (expr_67 -> switchLabel .)
    SWITCH          reduce using rule 428 (expr_67 -> switchLabel .)
    SYNCHRONIZED    reduce using rule 428 (expr_67 -> switchLabel .)
    RETURN          reduce using rule 428 (expr_67 -> switchLabel .)
    THROW           reduce using rule 428 (expr_67 -> switchLabel .)
    BREAK           reduce using rule 428 (expr_67 -> switchLabel .)
    CONTINUE        reduce using rule 428 (expr_67 -> switchLabel .)
    SEMI            reduce using rule 428 (expr_67 -> switchLabel .)
    Identifier      reduce using rule 428 (expr_67 -> switchLabel .)
    BLPAREN         reduce using rule 428 (expr_67 -> switchLabel .)
    BOOLEAN         reduce using rule 428 (expr_67 -> switchLabel .)
    CHAR            reduce using rule 428 (expr_67 -> switchLabel .)
    BYTE            reduce using rule 428 (expr_67 -> switchLabel .)
    SHORT           reduce using rule 428 (expr_67 -> switchLabel .)
    INT             reduce using rule 428 (expr_67 -> switchLabel .)
    LONG            reduce using rule 428 (expr_67 -> switchLabel .)
    FLOAT           reduce using rule 428 (expr_67 -> switchLabel .)
    DOUBLE          reduce using rule 428 (expr_67 -> switchLabel .)
    PUBLIC          reduce using rule 428 (expr_67 -> switchLabel .)
    PROTECTED       reduce using rule 428 (expr_67 -> switchLabel .)
    PRIVATE         reduce using rule 428 (expr_67 -> switchLabel .)
    ABSTRACT        reduce using rule 428 (expr_67 -> switchLabel .)
    STATIC          reduce using rule 428 (expr_67 -> switchLabel .)
    FINAL           reduce using rule 428 (expr_67 -> switchLabel .)
    STRICTFP        reduce using rule 428 (expr_67 -> switchLabel .)
    AT              reduce using rule 428 (expr_67 -> switchLabel .)
    PLUS            reduce using rule 428 (expr_67 -> switchLabel .)
    DASH            reduce using rule 428 (expr_67 -> switchLabel .)
    OP_INC          reduce using rule 428 (expr_67 -> switchLabel .)
    OP_DEC          reduce using rule 428 (expr_67 -> switchLabel .)
    TILDE           reduce using rule 428 (expr_67 -> switchLabel .)
    EXCLAMATION     reduce using rule 428 (expr_67 -> switchLabel .)
    LPAREN          reduce using rule 428 (expr_67 -> switchLabel .)
    THIS            reduce using rule 428 (expr_67 -> switchLabel .)
    SUPER           reduce using rule 428 (expr_67 -> switchLabel .)
    NEW             reduce using rule 428 (expr_67 -> switchLabel .)
    VOID            reduce using rule 428 (expr_67 -> switchLabel .)
    CharacterLiteral reduce using rule 428 (expr_67 -> switchLabel .)
    StringLiteral   reduce using rule 428 (expr_67 -> switchLabel .)
    NULL            reduce using rule 428 (expr_67 -> switchLabel .)
    NUMBER          reduce using rule 428 (expr_67 -> switchLabel .)
    HEX_NUMBER      reduce using rule 428 (expr_67 -> switchLabel .)
    LONG_NUMBER     reduce using rule 428 (expr_67 -> switchLabel .)
    LONG_HEX_NUMBER reduce using rule 428 (expr_67 -> switchLabel .)
    NON_INTEGER_1   reduce using rule 428 (expr_67 -> switchLabel .)
    NON_INTEGER_2   reduce using rule 428 (expr_67 -> switchLabel .)
    NON_INTEGER_3   reduce using rule 428 (expr_67 -> switchLabel .)
    TRUE            reduce using rule 428 (expr_67 -> switchLabel .)
    FALSE           reduce using rule 428 (expr_67 -> switchLabel .)
    CLASS           reduce using rule 428 (expr_67 -> switchLabel .)
    ENUM            reduce using rule 428 (expr_67 -> switchLabel .)
    INTERFACE       reduce using rule 428 (expr_67 -> switchLabel .)
    BRPAREN         reduce using rule 428 (expr_67 -> switchLabel .)



state 778

    (181) switchLabel -> DEFAULT . COLON

    COLON           shift and go to state 827



state 779

    (177) switchBlockStatementGroups -> expr_66 .
    (426) expr_66 -> expr_66 . switchBlockStatementGroup
    (178) switchBlockStatementGroup -> . expr_67 expr_blockStatment
    (428) expr_67 -> . switchLabel
    (429) expr_67 -> . expr_67 switchLabel
    (179) switchLabel -> . CASE constantExpression COLON
    (180) switchLabel -> . CASE enumConstantName COLON
    (181) switchLabel -> . DEFAULT COLON

    BRPAREN         reduce using rule 177 (switchBlockStatementGroups -> expr_66 .)
    CASE            shift and go to state 776
    DEFAULT         shift and go to state 778


    switchLabel                    shift and go to state 777
    expr_67                        shift and go to state 780
    switchBlockStatementGroup      shift and go to state 828

state 780

    (178) switchBlockStatementGroup -> expr_67 . expr_blockStatment
    (429) expr_67 -> expr_67 . switchLabel
    (377) expr_blockStatment -> . blockStatement
    (378) expr_blockStatment -> . expr_blockStatment blockStatement
    (379) expr_blockStatment -> . empty
    (179) switchLabel -> . CASE constantExpression COLON
    (180) switchLabel -> . CASE enumConstantName COLON
    (181) switchLabel -> . DEFAULT COLON
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (502) empty -> .
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for DEFAULT resolved as shift.
  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CharacterLiteral resolved as shift.
  ! shift/reduce conflict for StringLiteral resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
    CASE            shift and go to state 776
    DEFAULT         shift and go to state 778
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    BRPAREN         reduce using rule 502 (empty -> .)
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! ASSERT          [ reduce using rule 502 (empty -> .) ]
  ! IF              [ reduce using rule 502 (empty -> .) ]
  ! FOR             [ reduce using rule 502 (empty -> .) ]
  ! WHILE           [ reduce using rule 502 (empty -> .) ]
  ! DO              [ reduce using rule 502 (empty -> .) ]
  ! TRY             [ reduce using rule 502 (empty -> .) ]
  ! SWITCH          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! RETURN          [ reduce using rule 502 (empty -> .) ]
  ! THROW           [ reduce using rule 502 (empty -> .) ]
  ! BREAK           [ reduce using rule 502 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 502 (empty -> .) ]
  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! PLUS            [ reduce using rule 502 (empty -> .) ]
  ! DASH            [ reduce using rule 502 (empty -> .) ]
  ! OP_INC          [ reduce using rule 502 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 502 (empty -> .) ]
  ! TILDE           [ reduce using rule 502 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 502 (empty -> .) ]
  ! LPAREN          [ reduce using rule 502 (empty -> .) ]
  ! THIS            [ reduce using rule 502 (empty -> .) ]
  ! SUPER           [ reduce using rule 502 (empty -> .) ]
  ! NEW             [ reduce using rule 502 (empty -> .) ]
  ! VOID            [ reduce using rule 502 (empty -> .) ]
  ! CharacterLiteral [ reduce using rule 502 (empty -> .) ]
  ! StringLiteral   [ reduce using rule 502 (empty -> .) ]
  ! NULL            [ reduce using rule 502 (empty -> .) ]
  ! NUMBER          [ reduce using rule 502 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 502 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 502 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 502 (empty -> .) ]
  ! TRUE            [ reduce using rule 502 (empty -> .) ]
  ! FALSE           [ reduce using rule 502 (empty -> .) ]
  ! CASE            [ reduce using rule 502 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    expr_blockStatment             shift and go to state 829
    blockStatement                 shift and go to state 588
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    booleanLiteral                 shift and go to state 73
    type                           shift and go to state 605
    parExpression                  shift and go to state 122
    empty                          shift and go to state 606
    additiveExpression             shift and go to state 88
    instanceOfExpression           shift and go to state 80
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    classOrInterfaceDeclaration    shift and go to state 589
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    localVariableDeclarationStatement shift and go to state 591
    annotation                     shift and go to state 614
    castExpression                 shift and go to state 126
    switchLabel                    shift and go to state 830
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 781

    (425) expr_66 -> switchBlockStatementGroup .

    CASE            reduce using rule 425 (expr_66 -> switchBlockStatementGroup .)
    DEFAULT         reduce using rule 425 (expr_66 -> switchBlockStatementGroup .)
    BRPAREN         reduce using rule 425 (expr_66 -> switchBlockStatementGroup .)



state 782

    (427) expr_66 -> empty .

    CASE            reduce using rule 427 (expr_66 -> empty .)
    DEFAULT         reduce using rule 427 (expr_66 -> empty .)
    BRPAREN         reduce using rule 427 (expr_66 -> empty .)



state 783

    (163) statement -> DO statement WHILE parExpression . SEMI

    SEMI            shift and go to state 831



state 784

    (159) statement -> ASSERT expression expr_60 SEMI .

    BRPAREN         reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    ASSERT          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    IF              reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    FOR             reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    WHILE           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    DO              reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    TRY             reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    SWITCH          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    SYNCHRONIZED    reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    RETURN          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    THROW           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    BREAK           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    CONTINUE        reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    SEMI            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    Identifier      reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    BLPAREN         reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    BOOLEAN         reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    CHAR            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    BYTE            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    SHORT           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    INT             reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    LONG            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    FLOAT           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    DOUBLE          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    PUBLIC          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    PROTECTED       reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    PRIVATE         reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    ABSTRACT        reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    STATIC          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    FINAL           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    STRICTFP        reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    AT              reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    PLUS            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    DASH            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    OP_INC          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    OP_DEC          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    TILDE           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    EXCLAMATION     reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    LPAREN          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    THIS            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    SUPER           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NEW             reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    VOID            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    CharacterLiteral reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    StringLiteral   reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NULL            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NUMBER          reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    HEX_NUMBER      reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    LONG_NUMBER     reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    LONG_HEX_NUMBER reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NON_INTEGER_1   reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NON_INTEGER_2   reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    NON_INTEGER_3   reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    TRUE            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    FALSE           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    CLASS           reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    ENUM            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    INTERFACE       reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    ELSE            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    CASE            reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)
    DEFAULT         reduce using rule 159 (statement -> ASSERT expression expr_60 SEMI .)



state 785

    (411) expr_60 -> COLON expression .

    SEMI            reduce using rule 411 (expr_60 -> COLON expression .)



state 786

    (160) statement -> IF parExpression statement expr_61 .

    BRPAREN         reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    ASSERT          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    IF              reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    FOR             reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    WHILE           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    DO              reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    TRY             reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    SWITCH          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    SYNCHRONIZED    reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    RETURN          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    THROW           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    BREAK           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    CONTINUE        reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    SEMI            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    Identifier      reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    BLPAREN         reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    BOOLEAN         reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    CHAR            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    BYTE            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    SHORT           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    INT             reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    LONG            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    FLOAT           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    DOUBLE          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    PUBLIC          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    PROTECTED       reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    PRIVATE         reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    ABSTRACT        reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    STATIC          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    FINAL           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    STRICTFP        reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    AT              reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    PLUS            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    DASH            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    OP_INC          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    OP_DEC          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    TILDE           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    EXCLAMATION     reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    LPAREN          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    THIS            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    SUPER           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NEW             reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    VOID            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    CharacterLiteral reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    StringLiteral   reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NULL            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NUMBER          reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    HEX_NUMBER      reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    LONG_NUMBER     reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    LONG_HEX_NUMBER reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NON_INTEGER_1   reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NON_INTEGER_2   reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    NON_INTEGER_3   reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    TRUE            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    FALSE           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    CLASS           reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    ENUM            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    INTERFACE       reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    ELSE            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    CASE            reduce using rule 160 (statement -> IF parExpression statement expr_61 .)
    DEFAULT         reduce using rule 160 (statement -> IF parExpression statement expr_61 .)



state 787

    (413) expr_61 -> ELSE . statement
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 675
    BLPAREN         shift and go to state 530
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    statement                      shift and go to state 832
    FloatingPointLiteral           shift and go to state 107
    exclusiveOrExpression          shift and go to state 96
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    conditionalAndExpression       shift and go to state 70
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 788

    (414) expr_61 -> empty .

    BRPAREN         reduce using rule 414 (expr_61 -> empty .)
    ASSERT          reduce using rule 414 (expr_61 -> empty .)
    IF              reduce using rule 414 (expr_61 -> empty .)
    FOR             reduce using rule 414 (expr_61 -> empty .)
    WHILE           reduce using rule 414 (expr_61 -> empty .)
    DO              reduce using rule 414 (expr_61 -> empty .)
    TRY             reduce using rule 414 (expr_61 -> empty .)
    SWITCH          reduce using rule 414 (expr_61 -> empty .)
    SYNCHRONIZED    reduce using rule 414 (expr_61 -> empty .)
    RETURN          reduce using rule 414 (expr_61 -> empty .)
    THROW           reduce using rule 414 (expr_61 -> empty .)
    BREAK           reduce using rule 414 (expr_61 -> empty .)
    CONTINUE        reduce using rule 414 (expr_61 -> empty .)
    SEMI            reduce using rule 414 (expr_61 -> empty .)
    Identifier      reduce using rule 414 (expr_61 -> empty .)
    BLPAREN         reduce using rule 414 (expr_61 -> empty .)
    BOOLEAN         reduce using rule 414 (expr_61 -> empty .)
    CHAR            reduce using rule 414 (expr_61 -> empty .)
    BYTE            reduce using rule 414 (expr_61 -> empty .)
    SHORT           reduce using rule 414 (expr_61 -> empty .)
    INT             reduce using rule 414 (expr_61 -> empty .)
    LONG            reduce using rule 414 (expr_61 -> empty .)
    FLOAT           reduce using rule 414 (expr_61 -> empty .)
    DOUBLE          reduce using rule 414 (expr_61 -> empty .)
    PUBLIC          reduce using rule 414 (expr_61 -> empty .)
    PROTECTED       reduce using rule 414 (expr_61 -> empty .)
    PRIVATE         reduce using rule 414 (expr_61 -> empty .)
    ABSTRACT        reduce using rule 414 (expr_61 -> empty .)
    STATIC          reduce using rule 414 (expr_61 -> empty .)
    FINAL           reduce using rule 414 (expr_61 -> empty .)
    STRICTFP        reduce using rule 414 (expr_61 -> empty .)
    AT              reduce using rule 414 (expr_61 -> empty .)
    PLUS            reduce using rule 414 (expr_61 -> empty .)
    DASH            reduce using rule 414 (expr_61 -> empty .)
    OP_INC          reduce using rule 414 (expr_61 -> empty .)
    OP_DEC          reduce using rule 414 (expr_61 -> empty .)
    TILDE           reduce using rule 414 (expr_61 -> empty .)
    EXCLAMATION     reduce using rule 414 (expr_61 -> empty .)
    LPAREN          reduce using rule 414 (expr_61 -> empty .)
    THIS            reduce using rule 414 (expr_61 -> empty .)
    SUPER           reduce using rule 414 (expr_61 -> empty .)
    NEW             reduce using rule 414 (expr_61 -> empty .)
    VOID            reduce using rule 414 (expr_61 -> empty .)
    CharacterLiteral reduce using rule 414 (expr_61 -> empty .)
    StringLiteral   reduce using rule 414 (expr_61 -> empty .)
    NULL            reduce using rule 414 (expr_61 -> empty .)
    NUMBER          reduce using rule 414 (expr_61 -> empty .)
    HEX_NUMBER      reduce using rule 414 (expr_61 -> empty .)
    LONG_NUMBER     reduce using rule 414 (expr_61 -> empty .)
    LONG_HEX_NUMBER reduce using rule 414 (expr_61 -> empty .)
    NON_INTEGER_1   reduce using rule 414 (expr_61 -> empty .)
    NON_INTEGER_2   reduce using rule 414 (expr_61 -> empty .)
    NON_INTEGER_3   reduce using rule 414 (expr_61 -> empty .)
    TRUE            reduce using rule 414 (expr_61 -> empty .)
    FALSE           reduce using rule 414 (expr_61 -> empty .)
    CLASS           reduce using rule 414 (expr_61 -> empty .)
    ENUM            reduce using rule 414 (expr_61 -> empty .)
    INTERFACE       reduce using rule 414 (expr_61 -> empty .)
    ELSE            reduce using rule 414 (expr_61 -> empty .)
    CASE            reduce using rule 414 (expr_61 -> empty .)
    DEFAULT         reduce using rule 414 (expr_61 -> empty .)



state 789

    (339) expr_methdoBody -> methodBody .

    BRPAREN         reduce using rule 339 (expr_methdoBody -> methodBody .)
    SEMI            reduce using rule 339 (expr_methdoBody -> methodBody .)
    STATIC          reduce using rule 339 (expr_methdoBody -> methodBody .)
    PUBLIC          reduce using rule 339 (expr_methdoBody -> methodBody .)
    PROTECTED       reduce using rule 339 (expr_methdoBody -> methodBody .)
    PRIVATE         reduce using rule 339 (expr_methdoBody -> methodBody .)
    ABSTRACT        reduce using rule 339 (expr_methdoBody -> methodBody .)
    FINAL           reduce using rule 339 (expr_methdoBody -> methodBody .)
    NATIVE          reduce using rule 339 (expr_methdoBody -> methodBody .)
    SYNCHRONIZED    reduce using rule 339 (expr_methdoBody -> methodBody .)
    TRANSIENT       reduce using rule 339 (expr_methdoBody -> methodBody .)
    VOLATILE        reduce using rule 339 (expr_methdoBody -> methodBody .)
    STRICTFP        reduce using rule 339 (expr_methdoBody -> methodBody .)
    AT              reduce using rule 339 (expr_methdoBody -> methodBody .)
    BLPAREN         reduce using rule 339 (expr_methdoBody -> methodBody .)
    VOID            reduce using rule 339 (expr_methdoBody -> methodBody .)
    Identifier      reduce using rule 339 (expr_methdoBody -> methodBody .)
    LESS            reduce using rule 339 (expr_methdoBody -> methodBody .)
    INTERFACE       reduce using rule 339 (expr_methdoBody -> methodBody .)
    CLASS           reduce using rule 339 (expr_methdoBody -> methodBody .)
    ENUM            reduce using rule 339 (expr_methdoBody -> methodBody .)
    BOOLEAN         reduce using rule 339 (expr_methdoBody -> methodBody .)
    CHAR            reduce using rule 339 (expr_methdoBody -> methodBody .)
    BYTE            reduce using rule 339 (expr_methdoBody -> methodBody .)
    SHORT           reduce using rule 339 (expr_methdoBody -> methodBody .)
    INT             reduce using rule 339 (expr_methdoBody -> methodBody .)
    LONG            reduce using rule 339 (expr_methdoBody -> methodBody .)
    FLOAT           reduce using rule 339 (expr_methdoBody -> methodBody .)
    DOUBLE          reduce using rule 339 (expr_methdoBody -> methodBody .)



state 790

    (340) expr_methdoBody -> SEMI .

    BRPAREN         reduce using rule 340 (expr_methdoBody -> SEMI .)
    SEMI            reduce using rule 340 (expr_methdoBody -> SEMI .)
    STATIC          reduce using rule 340 (expr_methdoBody -> SEMI .)
    PUBLIC          reduce using rule 340 (expr_methdoBody -> SEMI .)
    PROTECTED       reduce using rule 340 (expr_methdoBody -> SEMI .)
    PRIVATE         reduce using rule 340 (expr_methdoBody -> SEMI .)
    ABSTRACT        reduce using rule 340 (expr_methdoBody -> SEMI .)
    FINAL           reduce using rule 340 (expr_methdoBody -> SEMI .)
    NATIVE          reduce using rule 340 (expr_methdoBody -> SEMI .)
    SYNCHRONIZED    reduce using rule 340 (expr_methdoBody -> SEMI .)
    TRANSIENT       reduce using rule 340 (expr_methdoBody -> SEMI .)
    VOLATILE        reduce using rule 340 (expr_methdoBody -> SEMI .)
    STRICTFP        reduce using rule 340 (expr_methdoBody -> SEMI .)
    AT              reduce using rule 340 (expr_methdoBody -> SEMI .)
    BLPAREN         reduce using rule 340 (expr_methdoBody -> SEMI .)
    VOID            reduce using rule 340 (expr_methdoBody -> SEMI .)
    Identifier      reduce using rule 340 (expr_methdoBody -> SEMI .)
    LESS            reduce using rule 340 (expr_methdoBody -> SEMI .)
    INTERFACE       reduce using rule 340 (expr_methdoBody -> SEMI .)
    CLASS           reduce using rule 340 (expr_methdoBody -> SEMI .)
    ENUM            reduce using rule 340 (expr_methdoBody -> SEMI .)
    BOOLEAN         reduce using rule 340 (expr_methdoBody -> SEMI .)
    CHAR            reduce using rule 340 (expr_methdoBody -> SEMI .)
    BYTE            reduce using rule 340 (expr_methdoBody -> SEMI .)
    SHORT           reduce using rule 340 (expr_methdoBody -> SEMI .)
    INT             reduce using rule 340 (expr_methdoBody -> SEMI .)
    LONG            reduce using rule 340 (expr_methdoBody -> SEMI .)
    FLOAT           reduce using rule 340 (expr_methdoBody -> SEMI .)
    DOUBLE          reduce using rule 340 (expr_methdoBody -> SEMI .)



state 791

    (61) voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .

    BRPAREN         reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    SEMI            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    STATIC          reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    PUBLIC          reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    PROTECTED       reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    PRIVATE         reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    ABSTRACT        reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    FINAL           reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    NATIVE          reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    SYNCHRONIZED    reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    TRANSIENT       reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    VOLATILE        reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    STRICTFP        reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    AT              reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    BLPAREN         reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    VOID            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    Identifier      reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    LESS            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    INTERFACE       reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    CLASS           reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    ENUM            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    BOOLEAN         reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    CHAR            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    BYTE            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    SHORT           reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    INT             reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    LONG            reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    FLOAT           reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)
    DOUBLE          reduce using rule 61 (voidMethodDeclaratorRest -> formalParameters throwsList expr_methdoBody .)



state 792

    (111) methodBody -> block .

    BRPAREN         reduce using rule 111 (methodBody -> block .)
    SEMI            reduce using rule 111 (methodBody -> block .)
    STATIC          reduce using rule 111 (methodBody -> block .)
    PUBLIC          reduce using rule 111 (methodBody -> block .)
    PROTECTED       reduce using rule 111 (methodBody -> block .)
    PRIVATE         reduce using rule 111 (methodBody -> block .)
    ABSTRACT        reduce using rule 111 (methodBody -> block .)
    FINAL           reduce using rule 111 (methodBody -> block .)
    NATIVE          reduce using rule 111 (methodBody -> block .)
    SYNCHRONIZED    reduce using rule 111 (methodBody -> block .)
    TRANSIENT       reduce using rule 111 (methodBody -> block .)
    VOLATILE        reduce using rule 111 (methodBody -> block .)
    STRICTFP        reduce using rule 111 (methodBody -> block .)
    AT              reduce using rule 111 (methodBody -> block .)
    BLPAREN         reduce using rule 111 (methodBody -> block .)
    VOID            reduce using rule 111 (methodBody -> block .)
    Identifier      reduce using rule 111 (methodBody -> block .)
    LESS            reduce using rule 111 (methodBody -> block .)
    INTERFACE       reduce using rule 111 (methodBody -> block .)
    CLASS           reduce using rule 111 (methodBody -> block .)
    ENUM            reduce using rule 111 (methodBody -> block .)
    BOOLEAN         reduce using rule 111 (methodBody -> block .)
    CHAR            reduce using rule 111 (methodBody -> block .)
    BYTE            reduce using rule 111 (methodBody -> block .)
    SHORT           reduce using rule 111 (methodBody -> block .)
    INT             reduce using rule 111 (methodBody -> block .)
    LONG            reduce using rule 111 (methodBody -> block .)
    FLOAT           reduce using rule 111 (methodBody -> block .)
    DOUBLE          reduce using rule 111 (methodBody -> block .)



state 793

    (60) methodDeclaratorRest -> formalParameters expr_28 throwsList . expr_methdoBody
    (339) expr_methdoBody -> . methodBody
    (340) expr_methdoBody -> . SEMI
    (111) methodBody -> . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    SEMI            shift and go to state 790
    BLPAREN         shift and go to state 530


    methodBody                     shift and go to state 789
    expr_methdoBody                shift and go to state 833
    block                          shift and go to state 792

state 794

    (113) explicitConstructorInvocation -> expr_47 . expr_48 arguments SEMI
    (382) expr_48 -> . THIS
    (383) expr_48 -> . SUPER

    THIS            shift and go to state 834
    SUPER           shift and go to state 836


    expr_48                        shift and go to state 835

state 795

    (112) constructorBody -> BLPAREN expr_45 . expr_blockStatment BRPAREN
    (377) expr_blockStatment -> . blockStatement
    (378) expr_blockStatment -> . expr_blockStatment blockStatement
    (379) expr_blockStatment -> . empty
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (502) empty -> .
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CharacterLiteral resolved as shift.
  ! shift/reduce conflict for StringLiteral resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
    BRPAREN         reduce using rule 502 (empty -> .)
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! ASSERT          [ reduce using rule 502 (empty -> .) ]
  ! IF              [ reduce using rule 502 (empty -> .) ]
  ! FOR             [ reduce using rule 502 (empty -> .) ]
  ! WHILE           [ reduce using rule 502 (empty -> .) ]
  ! DO              [ reduce using rule 502 (empty -> .) ]
  ! TRY             [ reduce using rule 502 (empty -> .) ]
  ! SWITCH          [ reduce using rule 502 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 502 (empty -> .) ]
  ! RETURN          [ reduce using rule 502 (empty -> .) ]
  ! THROW           [ reduce using rule 502 (empty -> .) ]
  ! BREAK           [ reduce using rule 502 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 502 (empty -> .) ]
  ! SEMI            [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! PLUS            [ reduce using rule 502 (empty -> .) ]
  ! DASH            [ reduce using rule 502 (empty -> .) ]
  ! OP_INC          [ reduce using rule 502 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 502 (empty -> .) ]
  ! TILDE           [ reduce using rule 502 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 502 (empty -> .) ]
  ! LPAREN          [ reduce using rule 502 (empty -> .) ]
  ! THIS            [ reduce using rule 502 (empty -> .) ]
  ! SUPER           [ reduce using rule 502 (empty -> .) ]
  ! NEW             [ reduce using rule 502 (empty -> .) ]
  ! VOID            [ reduce using rule 502 (empty -> .) ]
  ! CharacterLiteral [ reduce using rule 502 (empty -> .) ]
  ! StringLiteral   [ reduce using rule 502 (empty -> .) ]
  ! NULL            [ reduce using rule 502 (empty -> .) ]
  ! NUMBER          [ reduce using rule 502 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 502 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 502 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 502 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 502 (empty -> .) ]
  ! TRUE            [ reduce using rule 502 (empty -> .) ]
  ! FALSE           [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    localVariableDeclarationStatement shift and go to state 591
    blockStatement                 shift and go to state 588
    booleanLiteral                 shift and go to state 73
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    inclusiveOrExpression          shift and go to state 85
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    type                           shift and go to state 605
    empty                          shift and go to state 606
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    classOrInterfaceDeclaration    shift and go to state 589
    parExpression                  shift and go to state 122
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    expr_blockStatment             shift and go to state 837
    annotation                     shift and go to state 614
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 796

    (114) explicitConstructorInvocation -> primary . DOT expr_47 SUPER arguments SEMI

    DOT             shift and go to state 838



state 797

    (376) expr_45 -> empty .
    (381) expr_47 -> empty .

  ! reduce/reduce conflict for THIS resolved using rule 376 (expr_45 -> empty .).
  ! reduce/reduce conflict for SUPER resolved using rule 376 (expr_45 -> empty .).
    ASSERT          reduce using rule 376 (expr_45 -> empty .)
    IF              reduce using rule 376 (expr_45 -> empty .)
    FOR             reduce using rule 376 (expr_45 -> empty .)
    WHILE           reduce using rule 376 (expr_45 -> empty .)
    DO              reduce using rule 376 (expr_45 -> empty .)
    TRY             reduce using rule 376 (expr_45 -> empty .)
    SWITCH          reduce using rule 376 (expr_45 -> empty .)
    SYNCHRONIZED    reduce using rule 376 (expr_45 -> empty .)
    RETURN          reduce using rule 376 (expr_45 -> empty .)
    THROW           reduce using rule 376 (expr_45 -> empty .)
    BREAK           reduce using rule 376 (expr_45 -> empty .)
    CONTINUE        reduce using rule 376 (expr_45 -> empty .)
    SEMI            reduce using rule 376 (expr_45 -> empty .)
    Identifier      reduce using rule 376 (expr_45 -> empty .)
    BLPAREN         reduce using rule 376 (expr_45 -> empty .)
    BOOLEAN         reduce using rule 376 (expr_45 -> empty .)
    CHAR            reduce using rule 376 (expr_45 -> empty .)
    BYTE            reduce using rule 376 (expr_45 -> empty .)
    SHORT           reduce using rule 376 (expr_45 -> empty .)
    INT             reduce using rule 376 (expr_45 -> empty .)
    LONG            reduce using rule 376 (expr_45 -> empty .)
    FLOAT           reduce using rule 376 (expr_45 -> empty .)
    DOUBLE          reduce using rule 376 (expr_45 -> empty .)
    PUBLIC          reduce using rule 376 (expr_45 -> empty .)
    PROTECTED       reduce using rule 376 (expr_45 -> empty .)
    PRIVATE         reduce using rule 376 (expr_45 -> empty .)
    ABSTRACT        reduce using rule 376 (expr_45 -> empty .)
    STATIC          reduce using rule 376 (expr_45 -> empty .)
    FINAL           reduce using rule 376 (expr_45 -> empty .)
    STRICTFP        reduce using rule 376 (expr_45 -> empty .)
    AT              reduce using rule 376 (expr_45 -> empty .)
    PLUS            reduce using rule 376 (expr_45 -> empty .)
    DASH            reduce using rule 376 (expr_45 -> empty .)
    OP_INC          reduce using rule 376 (expr_45 -> empty .)
    OP_DEC          reduce using rule 376 (expr_45 -> empty .)
    TILDE           reduce using rule 376 (expr_45 -> empty .)
    EXCLAMATION     reduce using rule 376 (expr_45 -> empty .)
    LPAREN          reduce using rule 376 (expr_45 -> empty .)
    THIS            reduce using rule 376 (expr_45 -> empty .)
    SUPER           reduce using rule 376 (expr_45 -> empty .)
    NEW             reduce using rule 376 (expr_45 -> empty .)
    VOID            reduce using rule 376 (expr_45 -> empty .)
    CharacterLiteral reduce using rule 376 (expr_45 -> empty .)
    StringLiteral   reduce using rule 376 (expr_45 -> empty .)
    NULL            reduce using rule 376 (expr_45 -> empty .)
    NUMBER          reduce using rule 376 (expr_45 -> empty .)
    HEX_NUMBER      reduce using rule 376 (expr_45 -> empty .)
    LONG_NUMBER     reduce using rule 376 (expr_45 -> empty .)
    LONG_HEX_NUMBER reduce using rule 376 (expr_45 -> empty .)
    NON_INTEGER_1   reduce using rule 376 (expr_45 -> empty .)
    NON_INTEGER_2   reduce using rule 376 (expr_45 -> empty .)
    NON_INTEGER_3   reduce using rule 376 (expr_45 -> empty .)
    TRUE            reduce using rule 376 (expr_45 -> empty .)
    FALSE           reduce using rule 376 (expr_45 -> empty .)
    BRPAREN         reduce using rule 376 (expr_45 -> empty .)
    CLASS           reduce using rule 376 (expr_45 -> empty .)
    ENUM            reduce using rule 376 (expr_45 -> empty .)
    INTERFACE       reduce using rule 376 (expr_45 -> empty .)

  ! THIS            [ reduce using rule 381 (expr_47 -> empty .) ]
  ! SUPER           [ reduce using rule 381 (expr_47 -> empty .) ]


state 798

    (375) expr_45 -> explicitConstructorInvocation .

    ASSERT          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    IF              reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    FOR             reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    WHILE           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    DO              reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    TRY             reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    SWITCH          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    SYNCHRONIZED    reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    RETURN          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    THROW           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    BREAK           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    CONTINUE        reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    SEMI            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    Identifier      reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    BLPAREN         reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    BOOLEAN         reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    CHAR            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    BYTE            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    SHORT           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    INT             reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    LONG            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    FLOAT           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    DOUBLE          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    PUBLIC          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    PROTECTED       reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    PRIVATE         reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    ABSTRACT        reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    STATIC          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    FINAL           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    STRICTFP        reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    AT              reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    PLUS            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    DASH            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    OP_INC          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    OP_DEC          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    TILDE           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    EXCLAMATION     reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    LPAREN          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    THIS            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    SUPER           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NEW             reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    VOID            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    CharacterLiteral reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    StringLiteral   reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NULL            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NUMBER          reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    HEX_NUMBER      reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    LONG_NUMBER     reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    LONG_HEX_NUMBER reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NON_INTEGER_1   reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NON_INTEGER_2   reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    NON_INTEGER_3   reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    TRUE            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    FALSE           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    BRPAREN         reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    CLASS           reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    ENUM            reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)
    INTERFACE       reduce using rule 375 (expr_45 -> explicitConstructorInvocation .)



state 799

    (106) qualifiedNameList -> qualifiedName expr_42 .
    (369) expr_42 -> expr_42 . COMMA qualifiedName

    BLPAREN         reduce using rule 106 (qualifiedNameList -> qualifiedName expr_42 .)
    SEMI            reduce using rule 106 (qualifiedNameList -> qualifiedName expr_42 .)
    COMMA           shift and go to state 839



state 800

    (368) expr_42 -> COMMA . qualifiedName
    (115) qualifiedName -> . Identifier expr_49

    Identifier      shift and go to state 12


    qualifiedName                  shift and go to state 840

state 801

    (370) expr_42 -> empty .

    COMMA           reduce using rule 370 (expr_42 -> empty .)
    BLPAREN         reduce using rule 370 (expr_42 -> empty .)
    SEMI            reduce using rule 370 (expr_42 -> empty .)



state 802

    (110) formalParameterDeclsRest -> OP_ARRAY . variableDeclaratorId
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclaratorId           shift and go to state 841

state 803

    (108) formalParameterDecls -> variableModifiers type formalParameterDeclsRest .

    RPAREN          reduce using rule 108 (formalParameterDecls -> variableModifiers type formalParameterDeclsRest .)



state 804

    (109) formalParameterDeclsRest -> variableDeclaratorId . expr_44
    (373) expr_44 -> . COMMA formalParameterDecls
    (374) expr_44 -> . empty
    (502) empty -> .

    COMMA           shift and go to state 842
    RPAREN          reduce using rule 502 (empty -> .)


    empty                          shift and go to state 843
    expr_44                        shift and go to state 844

state 805

    (64) voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .

    BRPAREN         reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    SEMI            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    PUBLIC          reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    PROTECTED       reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    PRIVATE         reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    STATIC          reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    ABSTRACT        reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    FINAL           reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    NATIVE          reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    SYNCHRONIZED    reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    TRANSIENT       reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    VOLATILE        reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    STRICTFP        reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    AT              reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    VOID            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    LESS            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    INTERFACE       reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    CLASS           reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    ENUM            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    Identifier      reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    BOOLEAN         reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    CHAR            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    BYTE            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    SHORT           reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    INT             reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    LONG            reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    FLOAT           reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)
    DOUBLE          reduce using rule 64 (voidInterfaceMethodDeclaratorRest -> formalParameters throwsList SEMI .)



state 806

    (70) constantDeclaratorRest -> expr_28 EQUALS variableInitializer .

    COMMA           reduce using rule 70 (constantDeclaratorRest -> expr_28 EQUALS variableInitializer .)
    SEMI            reduce using rule 70 (constantDeclaratorRest -> expr_28 EQUALS variableInitializer .)



state 807

    (62) interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList . SEMI

    SEMI            shift and go to state 845



state 808

    (346) expr_33 -> COMMA constantDeclarator .

    COMMA           reduce using rule 346 (expr_33 -> COMMA constantDeclarator .)
    SEMI            reduce using rule 346 (expr_33 -> COMMA constantDeclarator .)



state 809

    (66) constantDeclarator -> Identifier . constantDeclaratorRest
    (70) constantDeclaratorRest -> . expr_28 EQUALS variableInitializer
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 200
    EQUALS          reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    constantDeclaratorRest         shift and go to state 846
    empty                          shift and go to state 202
    expr_28                        shift and go to state 702

state 810

    (347) expr_33 -> expr_33 COMMA . constantDeclarator
    (66) constantDeclarator -> . Identifier constantDeclaratorRest

    Identifier      shift and go to state 809


    constantDeclarator             shift and go to state 847

state 811

    (149) defaultValue -> DEFAULT elementValue .

    SEMI            reduce using rule 149 (defaultValue -> DEFAULT elementValue .)



state 812

    (161) statement -> FOR LPAREN forControl RPAREN statement .

    BRPAREN         reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    ASSERT          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    IF              reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    FOR             reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    WHILE           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    DO              reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    TRY             reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    SWITCH          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    SYNCHRONIZED    reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    RETURN          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    THROW           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    BREAK           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    CONTINUE        reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    SEMI            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    Identifier      reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    BLPAREN         reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    BOOLEAN         reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    CHAR            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    BYTE            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    SHORT           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    INT             reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    FLOAT           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    DOUBLE          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    PUBLIC          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    PROTECTED       reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    PRIVATE         reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    ABSTRACT        reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    STATIC          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    FINAL           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    STRICTFP        reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    AT              reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    PLUS            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    DASH            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    OP_INC          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    OP_DEC          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    TILDE           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    EXCLAMATION     reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    LPAREN          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    THIS            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    SUPER           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NEW             reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    VOID            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    CharacterLiteral reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    StringLiteral   reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NULL            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NUMBER          reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    HEX_NUMBER      reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG_NUMBER     reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    LONG_HEX_NUMBER reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_1   reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_2   reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    NON_INTEGER_3   reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    TRUE            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    FALSE           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    CLASS           reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    ENUM            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    INTERFACE       reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    ELSE            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    CASE            reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)
    DEFAULT         reduce using rule 161 (statement -> FOR LPAREN forControl RPAREN statement .)



state 813

    (183) forControl -> expr_68 SEMI expr_69 . SEMI expr_70

    SEMI            shift and go to state 848



state 814

    (433) expr_69 -> empty .

    SEMI            reduce using rule 433 (expr_69 -> empty .)



state 815

    (432) expr_69 -> expression .

    SEMI            reduce using rule 432 (expr_69 -> expression .)



state 816

    (186) enhancedForControl -> variableModifiers type Identifier . COLON expression
    (71) variableDeclaratorId -> Identifier . expr_28
    (334) expr_28 -> . FLPAREN FRPAREN
    (335) expr_28 -> . expr_28 FLPAREN FRPAREN
    (336) expr_28 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    COLON           shift and go to state 849
    FLPAREN         shift and go to state 200
    EQUALS          reduce using rule 502 (empty -> .)
    COMMA           reduce using rule 502 (empty -> .)
    SEMI            reduce using rule 502 (empty -> .)

  ! FLPAREN         [ reduce using rule 502 (empty -> .) ]

    empty                          shift and go to state 202
    expr_28                        shift and go to state 645

state 817

    (415) expr_62 -> catches FINALLY block .

    BRPAREN         reduce using rule 415 (expr_62 -> catches FINALLY block .)
    ASSERT          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    IF              reduce using rule 415 (expr_62 -> catches FINALLY block .)
    FOR             reduce using rule 415 (expr_62 -> catches FINALLY block .)
    WHILE           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    DO              reduce using rule 415 (expr_62 -> catches FINALLY block .)
    TRY             reduce using rule 415 (expr_62 -> catches FINALLY block .)
    SWITCH          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    SYNCHRONIZED    reduce using rule 415 (expr_62 -> catches FINALLY block .)
    RETURN          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    THROW           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    BREAK           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    CONTINUE        reduce using rule 415 (expr_62 -> catches FINALLY block .)
    SEMI            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    Identifier      reduce using rule 415 (expr_62 -> catches FINALLY block .)
    BLPAREN         reduce using rule 415 (expr_62 -> catches FINALLY block .)
    BOOLEAN         reduce using rule 415 (expr_62 -> catches FINALLY block .)
    CHAR            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    BYTE            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    SHORT           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    INT             reduce using rule 415 (expr_62 -> catches FINALLY block .)
    LONG            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    FLOAT           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    DOUBLE          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    PUBLIC          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    PROTECTED       reduce using rule 415 (expr_62 -> catches FINALLY block .)
    PRIVATE         reduce using rule 415 (expr_62 -> catches FINALLY block .)
    ABSTRACT        reduce using rule 415 (expr_62 -> catches FINALLY block .)
    STATIC          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    FINAL           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    STRICTFP        reduce using rule 415 (expr_62 -> catches FINALLY block .)
    AT              reduce using rule 415 (expr_62 -> catches FINALLY block .)
    PLUS            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    DASH            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    OP_INC          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    OP_DEC          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    TILDE           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    EXCLAMATION     reduce using rule 415 (expr_62 -> catches FINALLY block .)
    LPAREN          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    THIS            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    SUPER           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NEW             reduce using rule 415 (expr_62 -> catches FINALLY block .)
    VOID            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    CharacterLiteral reduce using rule 415 (expr_62 -> catches FINALLY block .)
    StringLiteral   reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NULL            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NUMBER          reduce using rule 415 (expr_62 -> catches FINALLY block .)
    HEX_NUMBER      reduce using rule 415 (expr_62 -> catches FINALLY block .)
    LONG_NUMBER     reduce using rule 415 (expr_62 -> catches FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NON_INTEGER_1   reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NON_INTEGER_2   reduce using rule 415 (expr_62 -> catches FINALLY block .)
    NON_INTEGER_3   reduce using rule 415 (expr_62 -> catches FINALLY block .)
    TRUE            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    FALSE           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    CLASS           reduce using rule 415 (expr_62 -> catches FINALLY block .)
    ENUM            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    INTERFACE       reduce using rule 415 (expr_62 -> catches FINALLY block .)
    ELSE            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    CASE            reduce using rule 415 (expr_62 -> catches FINALLY block .)
    DEFAULT         reduce using rule 415 (expr_62 -> catches FINALLY block .)



state 818

    (423) expr_65 -> expr_65 catchClause .

    CATCH           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    FINALLY         reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    BRPAREN         reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    ASSERT          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    IF              reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    FOR             reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    WHILE           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    DO              reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    TRY             reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    SWITCH          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    SYNCHRONIZED    reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    RETURN          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    THROW           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    BREAK           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    CONTINUE        reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    SEMI            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    Identifier      reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    BLPAREN         reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    BOOLEAN         reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    CHAR            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    BYTE            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    SHORT           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    INT             reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    LONG            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    FLOAT           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    DOUBLE          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    PUBLIC          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    PROTECTED       reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    PRIVATE         reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    ABSTRACT        reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    STATIC          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    FINAL           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    STRICTFP        reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    AT              reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    PLUS            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    DASH            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    OP_INC          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    OP_DEC          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    TILDE           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    EXCLAMATION     reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    LPAREN          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    THIS            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    SUPER           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NEW             reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    VOID            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    CharacterLiteral reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    StringLiteral   reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NULL            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NUMBER          reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    HEX_NUMBER      reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    LONG_NUMBER     reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    LONG_HEX_NUMBER reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NON_INTEGER_1   reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NON_INTEGER_2   reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    NON_INTEGER_3   reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    TRUE            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    FALSE           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    CLASS           reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    ENUM            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    INTERFACE       reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    ELSE            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    CASE            reduce using rule 423 (expr_65 -> expr_65 catchClause .)
    DEFAULT         reduce using rule 423 (expr_65 -> expr_65 catchClause .)



state 819

    (175) catchClause -> CATCH LPAREN formalParameter . RPAREN block

    RPAREN          shift and go to state 850



state 820

    (176) formalParameter -> variableModifiers . type variableDeclaratorId
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE

    Identifier      shift and go to state 194
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82


    classOrInterfaceType           shift and go to state 219
    primitiveType                  shift and go to state 244
    type                           shift and go to state 851

state 821

    (410) expr_variableModifier -> empty .

    FINAL           reduce using rule 410 (expr_variableModifier -> empty .)
    AT              reduce using rule 410 (expr_variableModifier -> empty .)
    Identifier      reduce using rule 410 (expr_variableModifier -> empty .)
    BOOLEAN         reduce using rule 410 (expr_variableModifier -> empty .)
    CHAR            reduce using rule 410 (expr_variableModifier -> empty .)
    BYTE            reduce using rule 410 (expr_variableModifier -> empty .)
    SHORT           reduce using rule 410 (expr_variableModifier -> empty .)
    INT             reduce using rule 410 (expr_variableModifier -> empty .)
    LONG            reduce using rule 410 (expr_variableModifier -> empty .)
    FLOAT           reduce using rule 410 (expr_variableModifier -> empty .)
    DOUBLE          reduce using rule 410 (expr_variableModifier -> empty .)



state 822

    (165) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .

    BRPAREN         reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ASSERT          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    IF              reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FOR             reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    WHILE           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DO              reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRY             reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SWITCH          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SYNCHRONIZED    reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    RETURN          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THROW           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BREAK           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CONTINUE        reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SEMI            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    Identifier      reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BLPAREN         reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BOOLEAN         reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CHAR            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BYTE            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SHORT           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    INT             reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FLOAT           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DOUBLE          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PUBLIC          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PROTECTED       reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PRIVATE         reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ABSTRACT        reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STATIC          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FINAL           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STRICTFP        reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    AT              reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PLUS            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DASH            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_INC          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_DEC          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TILDE           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    EXCLAMATION     reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LPAREN          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THIS            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SUPER           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NEW             reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    VOID            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CharacterLiteral reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    StringLiteral   reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NULL            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NUMBER          reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    HEX_NUMBER      reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_NUMBER     reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_1   reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_2   reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_3   reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRUE            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FALSE           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CLASS           reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ENUM            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    INTERFACE       reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ELSE            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CASE            reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DEFAULT         reduce using rule 165 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)



state 823

    (180) switchLabel -> CASE enumConstantName . COLON

    COLON           shift and go to state 852



state 824

    (88) enumConstantName -> Identifier .
    (240) primary -> Identifier . expr_49 expr_91
    (384) expr_49 -> . DOT Identifier
    (385) expr_49 -> . expr_49 DOT Identifier
    (386) expr_49 -> . empty
    (502) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    COLON           reduce using rule 88 (enumConstantName -> Identifier .)
    DOT             shift and go to state 37
    FLPAREN         reduce using rule 502 (empty -> .)
    LPAREN          reduce using rule 502 (empty -> .)
    OP_INC          reduce using rule 502 (empty -> .)
    OP_DEC          reduce using rule 502 (empty -> .)

  ! DOT             [ reduce using rule 502 (empty -> .) ]

    expr_49                        shift and go to state 197
    empty                          shift and go to state 36

state 825

    (179) switchLabel -> CASE constantExpression . COLON

    COLON           shift and go to state 853



state 826

    (191) constantExpression -> expression .

    COLON           reduce using rule 191 (constantExpression -> expression .)



state 827

    (181) switchLabel -> DEFAULT COLON .

    CASE            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    ASSERT          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    IF              reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    DO              reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    TRY             reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    THROW           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    SEMI            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    Identifier      reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    BLPAREN         reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    INT             reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    PUBLIC          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    PROTECTED       reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    PRIVATE         reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    ABSTRACT        reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    STATIC          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    FINAL           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    STRICTFP        reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    AT              reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    PLUS            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    DASH            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    OP_INC          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    OP_DEC          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    TILDE           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    EXCLAMATION     reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    LPAREN          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    SUPER           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NEW             reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    VOID            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    CharacterLiteral reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    StringLiteral   reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NULL            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NUMBER          reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    HEX_NUMBER      reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    LONG_NUMBER     reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    LONG_HEX_NUMBER reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_1   reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_2   reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_3   reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    TRUE            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    FALSE           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    CLASS           reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    ENUM            reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    INTERFACE       reduce using rule 181 (switchLabel -> DEFAULT COLON .)
    BRPAREN         reduce using rule 181 (switchLabel -> DEFAULT COLON .)



state 828

    (426) expr_66 -> expr_66 switchBlockStatementGroup .

    CASE            reduce using rule 426 (expr_66 -> expr_66 switchBlockStatementGroup .)
    DEFAULT         reduce using rule 426 (expr_66 -> expr_66 switchBlockStatementGroup .)
    BRPAREN         reduce using rule 426 (expr_66 -> expr_66 switchBlockStatementGroup .)



state 829

    (178) switchBlockStatementGroup -> expr_67 expr_blockStatment .
    (378) expr_blockStatment -> expr_blockStatment . blockStatement
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    CASE            reduce using rule 178 (switchBlockStatementGroup -> expr_67 expr_blockStatment .)
    DEFAULT         reduce using rule 178 (switchBlockStatementGroup -> expr_67 expr_blockStatment .)
    BRPAREN         reduce using rule 178 (switchBlockStatementGroup -> expr_67 expr_blockStatment .)
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    localVariableDeclarationStatement shift and go to state 591
    blockStatement                 shift and go to state 654
    booleanLiteral                 shift and go to state 73
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    type                           shift and go to state 605
    parExpression                  shift and go to state 122
    empty                          shift and go to state 655
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    classOrInterfaceDeclaration    shift and go to state 589
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 614
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 830

    (429) expr_67 -> expr_67 switchLabel .

    CASE            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    DEFAULT         reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    ASSERT          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    IF              reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    FOR             reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    WHILE           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    DO              reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    TRY             reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    SWITCH          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    SYNCHRONIZED    reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    RETURN          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    THROW           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    BREAK           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    CONTINUE        reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    SEMI            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    Identifier      reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    BLPAREN         reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    BOOLEAN         reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    CHAR            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    BYTE            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    SHORT           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    INT             reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    LONG            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    FLOAT           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    DOUBLE          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    PUBLIC          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    PROTECTED       reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    PRIVATE         reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    ABSTRACT        reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    STATIC          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    FINAL           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    STRICTFP        reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    AT              reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    PLUS            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    DASH            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    OP_INC          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    OP_DEC          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    TILDE           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    EXCLAMATION     reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    LPAREN          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    THIS            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    SUPER           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NEW             reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    VOID            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    CharacterLiteral reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    StringLiteral   reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NULL            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NUMBER          reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    HEX_NUMBER      reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    LONG_NUMBER     reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    LONG_HEX_NUMBER reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NON_INTEGER_1   reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NON_INTEGER_2   reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    NON_INTEGER_3   reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    TRUE            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    FALSE           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    CLASS           reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    ENUM            reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    INTERFACE       reduce using rule 429 (expr_67 -> expr_67 switchLabel .)
    BRPAREN         reduce using rule 429 (expr_67 -> expr_67 switchLabel .)



state 831

    (163) statement -> DO statement WHILE parExpression SEMI .

    BRPAREN         reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    ASSERT          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    IF              reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    FOR             reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    WHILE           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    DO              reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    TRY             reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    SWITCH          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    SYNCHRONIZED    reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    RETURN          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    THROW           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    BREAK           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    CONTINUE        reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    SEMI            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    Identifier      reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    BLPAREN         reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    BOOLEAN         reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    CHAR            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    BYTE            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    SHORT           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    INT             reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    LONG            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    FLOAT           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    DOUBLE          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    PUBLIC          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    PROTECTED       reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    PRIVATE         reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    ABSTRACT        reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    STATIC          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    FINAL           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    STRICTFP        reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    AT              reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    PLUS            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    DASH            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    OP_INC          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    OP_DEC          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    TILDE           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    EXCLAMATION     reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    LPAREN          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    THIS            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    SUPER           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NEW             reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    VOID            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    CharacterLiteral reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    StringLiteral   reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NULL            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NUMBER          reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    HEX_NUMBER      reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_NUMBER     reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_HEX_NUMBER reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_1   reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_2   reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_3   reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    TRUE            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    FALSE           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    CLASS           reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    ENUM            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    INTERFACE       reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    ELSE            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    CASE            reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)
    DEFAULT         reduce using rule 163 (statement -> DO statement WHILE parExpression SEMI .)



state 832

    (413) expr_61 -> ELSE statement .

    BRPAREN         reduce using rule 413 (expr_61 -> ELSE statement .)
    ASSERT          reduce using rule 413 (expr_61 -> ELSE statement .)
    IF              reduce using rule 413 (expr_61 -> ELSE statement .)
    FOR             reduce using rule 413 (expr_61 -> ELSE statement .)
    WHILE           reduce using rule 413 (expr_61 -> ELSE statement .)
    DO              reduce using rule 413 (expr_61 -> ELSE statement .)
    TRY             reduce using rule 413 (expr_61 -> ELSE statement .)
    SWITCH          reduce using rule 413 (expr_61 -> ELSE statement .)
    SYNCHRONIZED    reduce using rule 413 (expr_61 -> ELSE statement .)
    RETURN          reduce using rule 413 (expr_61 -> ELSE statement .)
    THROW           reduce using rule 413 (expr_61 -> ELSE statement .)
    BREAK           reduce using rule 413 (expr_61 -> ELSE statement .)
    CONTINUE        reduce using rule 413 (expr_61 -> ELSE statement .)
    SEMI            reduce using rule 413 (expr_61 -> ELSE statement .)
    Identifier      reduce using rule 413 (expr_61 -> ELSE statement .)
    BLPAREN         reduce using rule 413 (expr_61 -> ELSE statement .)
    BOOLEAN         reduce using rule 413 (expr_61 -> ELSE statement .)
    CHAR            reduce using rule 413 (expr_61 -> ELSE statement .)
    BYTE            reduce using rule 413 (expr_61 -> ELSE statement .)
    SHORT           reduce using rule 413 (expr_61 -> ELSE statement .)
    INT             reduce using rule 413 (expr_61 -> ELSE statement .)
    LONG            reduce using rule 413 (expr_61 -> ELSE statement .)
    FLOAT           reduce using rule 413 (expr_61 -> ELSE statement .)
    DOUBLE          reduce using rule 413 (expr_61 -> ELSE statement .)
    PUBLIC          reduce using rule 413 (expr_61 -> ELSE statement .)
    PROTECTED       reduce using rule 413 (expr_61 -> ELSE statement .)
    PRIVATE         reduce using rule 413 (expr_61 -> ELSE statement .)
    ABSTRACT        reduce using rule 413 (expr_61 -> ELSE statement .)
    STATIC          reduce using rule 413 (expr_61 -> ELSE statement .)
    FINAL           reduce using rule 413 (expr_61 -> ELSE statement .)
    STRICTFP        reduce using rule 413 (expr_61 -> ELSE statement .)
    AT              reduce using rule 413 (expr_61 -> ELSE statement .)
    PLUS            reduce using rule 413 (expr_61 -> ELSE statement .)
    DASH            reduce using rule 413 (expr_61 -> ELSE statement .)
    OP_INC          reduce using rule 413 (expr_61 -> ELSE statement .)
    OP_DEC          reduce using rule 413 (expr_61 -> ELSE statement .)
    TILDE           reduce using rule 413 (expr_61 -> ELSE statement .)
    EXCLAMATION     reduce using rule 413 (expr_61 -> ELSE statement .)
    LPAREN          reduce using rule 413 (expr_61 -> ELSE statement .)
    THIS            reduce using rule 413 (expr_61 -> ELSE statement .)
    SUPER           reduce using rule 413 (expr_61 -> ELSE statement .)
    NEW             reduce using rule 413 (expr_61 -> ELSE statement .)
    VOID            reduce using rule 413 (expr_61 -> ELSE statement .)
    CharacterLiteral reduce using rule 413 (expr_61 -> ELSE statement .)
    StringLiteral   reduce using rule 413 (expr_61 -> ELSE statement .)
    NULL            reduce using rule 413 (expr_61 -> ELSE statement .)
    NUMBER          reduce using rule 413 (expr_61 -> ELSE statement .)
    HEX_NUMBER      reduce using rule 413 (expr_61 -> ELSE statement .)
    LONG_NUMBER     reduce using rule 413 (expr_61 -> ELSE statement .)
    LONG_HEX_NUMBER reduce using rule 413 (expr_61 -> ELSE statement .)
    NON_INTEGER_1   reduce using rule 413 (expr_61 -> ELSE statement .)
    NON_INTEGER_2   reduce using rule 413 (expr_61 -> ELSE statement .)
    NON_INTEGER_3   reduce using rule 413 (expr_61 -> ELSE statement .)
    TRUE            reduce using rule 413 (expr_61 -> ELSE statement .)
    FALSE           reduce using rule 413 (expr_61 -> ELSE statement .)
    CLASS           reduce using rule 413 (expr_61 -> ELSE statement .)
    ENUM            reduce using rule 413 (expr_61 -> ELSE statement .)
    INTERFACE       reduce using rule 413 (expr_61 -> ELSE statement .)
    ELSE            reduce using rule 413 (expr_61 -> ELSE statement .)
    CASE            reduce using rule 413 (expr_61 -> ELSE statement .)
    DEFAULT         reduce using rule 413 (expr_61 -> ELSE statement .)



state 833

    (60) methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .

    BRPAREN         reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    SEMI            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    STATIC          reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    PUBLIC          reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    PROTECTED       reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    PRIVATE         reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    ABSTRACT        reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    FINAL           reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    NATIVE          reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    SYNCHRONIZED    reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    TRANSIENT       reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    VOLATILE        reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    STRICTFP        reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    AT              reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    BLPAREN         reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    VOID            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    Identifier      reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    LESS            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    INTERFACE       reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    CLASS           reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    ENUM            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    BOOLEAN         reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    CHAR            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    BYTE            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    SHORT           reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    INT             reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    LONG            reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    FLOAT           reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)
    DOUBLE          reduce using rule 60 (methodDeclaratorRest -> formalParameters expr_28 throwsList expr_methdoBody .)



state 834

    (382) expr_48 -> THIS .

    LPAREN          reduce using rule 382 (expr_48 -> THIS .)



state 835

    (113) explicitConstructorInvocation -> expr_47 expr_48 . arguments SEMI
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    arguments                      shift and go to state 854

state 836

    (383) expr_48 -> SUPER .

    LPAREN          reduce using rule 383 (expr_48 -> SUPER .)



state 837

    (112) constructorBody -> BLPAREN expr_45 expr_blockStatment . BRPAREN
    (378) expr_blockStatment -> expr_blockStatment . blockStatement
    (151) blockStatement -> . localVariableDeclarationStatement
    (152) blockStatement -> . classOrInterfaceDeclaration
    (153) blockStatement -> . statement
    (154) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classOrInterfaceModifiers expr_6
    (158) statement -> . block
    (159) statement -> . ASSERT expression expr_60 SEMI
    (160) statement -> . IF parExpression statement expr_61
    (161) statement -> . FOR LPAREN forControl RPAREN statement
    (162) statement -> . WHILE parExpression statement
    (163) statement -> . DO statement WHILE parExpression SEMI
    (164) statement -> . TRY block expr_62
    (165) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (166) statement -> . SYNCHRONIZED parExpression block
    (167) statement -> . RETURN expr_63 SEMI
    (168) statement -> . THROW expression SEMI
    (169) statement -> . BREAK expr_64 SEMI
    (170) statement -> . CONTINUE expr_64 SEMI
    (171) statement -> . SEMI
    (172) statement -> . statementExpression SEMI
    (173) statement -> . Identifier COLON statement
    (155) localVariableDeclaration -> . variableModifiers type variableDeclarators
    (156) localVariableDeclaration -> . type variableDeclarators
    (8) classOrInterfaceModifiers -> . expr_7
    (150) block -> . BLPAREN expr_blockStatment BRPAREN
    (190) statementExpression -> . expression
    (157) variableModifiers -> . expr_variableModifier
    (90) type -> . classOrInterfaceType expr_28
    (91) type -> . primitiveType expr_28
    (284) expr_7 -> . classOrInterfaceModifier
    (285) expr_7 -> . expr_7 classOrInterfaceModifier
    (286) expr_7 -> . empty
    (192) expression -> . conditionalExpression expr_72
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (92) classOrInterfaceType -> . Identifier expr_typeArguments expr_38
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (9) classOrInterfaceModifier -> . annotation
    (10) classOrInterfaceModifier -> . PUBLIC
    (11) classOrInterfaceModifier -> . PROTECTED
    (12) classOrInterfaceModifier -> . PRIVATE
    (13) classOrInterfaceModifier -> . ABSTRACT
    (14) classOrInterfaceModifier -> . STATIC
    (15) classOrInterfaceModifier -> . FINAL
    (16) classOrInterfaceModifier -> . STRICTFP
    (502) empty -> .
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (129) annotation -> . AT annotationName expr_52
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for Identifier resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    BRPAREN         shift and go to state 855
    ASSERT          shift and go to state 612
    IF              shift and go to state 615
    FOR             shift and go to state 595
    WHILE           shift and go to state 602
    DO              shift and go to state 610
    TRY             shift and go to state 596
    SWITCH          shift and go to state 603
    SYNCHRONIZED    shift and go to state 593
    RETURN          shift and go to state 592
    THROW           shift and go to state 617
    BREAK           shift and go to state 609
    CONTINUE        shift and go to state 598
    SEMI            shift and go to state 613
    Identifier      shift and go to state 597
    BLPAREN         shift and go to state 530
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    PUBLIC          shift and go to state 33
    PROTECTED       shift and go to state 20
    PRIVATE         shift and go to state 23
    ABSTRACT        shift and go to state 19
    STATIC          shift and go to state 21
    FINAL           shift and go to state 594
    STRICTFP        shift and go to state 24
    CLASS           reduce using rule 502 (empty -> .)
    ENUM            reduce using rule 502 (empty -> .)
    INTERFACE       reduce using rule 502 (empty -> .)
    AT              shift and go to state 6
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79

  ! PUBLIC          [ reduce using rule 502 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 502 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 502 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 502 (empty -> .) ]
  ! STATIC          [ reduce using rule 502 (empty -> .) ]
  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]
  ! Identifier      [ reduce using rule 502 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 502 (empty -> .) ]
  ! CHAR            [ reduce using rule 502 (empty -> .) ]
  ! BYTE            [ reduce using rule 502 (empty -> .) ]
  ! SHORT           [ reduce using rule 502 (empty -> .) ]
  ! INT             [ reduce using rule 502 (empty -> .) ]
  ! LONG            [ reduce using rule 502 (empty -> .) ]
  ! FLOAT           [ reduce using rule 502 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 502 (empty -> .) ]

    equalityExpression             shift and go to state 94
    localVariableDeclaration       shift and go to state 601
    primary                        shift and go to state 97
    exclusiveOrExpression          shift and go to state 96
    multiplicativeExpression       shift and go to state 117
    localVariableDeclarationStatement shift and go to state 591
    blockStatement                 shift and go to state 654
    booleanLiteral                 shift and go to state 73
    conditionalAndExpression       shift and go to state 70
    shiftExpression                shift and go to state 120
    inclusiveOrExpression          shift and go to state 85
    classOrInterfaceType           shift and go to state 219
    literal                        shift and go to state 104
    statement                      shift and go to state 604
    FloatingPointLiteral           shift and go to state 107
    expr_7                         shift and go to state 25
    type                           shift and go to state 605
    empty                          shift and go to state 655
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    classOrInterfaceDeclaration    shift and go to state 589
    parExpression                  shift and go to state 122
    classOrInterfaceModifier       shift and go to state 31
    relationalExpression           shift and go to state 78
    variableModifier               shift and go to state 590
    expr_variableModifier          shift and go to state 611
    conditionalOrExpression        shift and go to state 95
    annotation                     shift and go to state 614
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    variableModifiers              shift and go to state 607
    primitiveType                  shift and go to state 608
    integerLiteral                 shift and go to state 83
    statementExpression            shift and go to state 616
    classOrInterfaceModifiers      shift and go to state 32
    andExpression                  shift and go to state 92
    expression                     shift and go to state 599
    block                          shift and go to state 600

state 838

    (114) explicitConstructorInvocation -> primary DOT . expr_47 SUPER arguments SEMI
    (380) expr_47 -> . nonWildcardTypeArguments
    (381) expr_47 -> . empty
    (259) nonWildcardTypeArguments -> . LESS typeList MORE
    (502) empty -> .

    LESS            shift and go to state 190
    SUPER           reduce using rule 502 (empty -> .)


    expr_47                        shift and go to state 856
    nonWildcardTypeArguments       shift and go to state 375
    empty                          shift and go to state 376

state 839

    (369) expr_42 -> expr_42 COMMA . qualifiedName
    (115) qualifiedName -> . Identifier expr_49

    Identifier      shift and go to state 12


    qualifiedName                  shift and go to state 857

state 840

    (368) expr_42 -> COMMA qualifiedName .

    COMMA           reduce using rule 368 (expr_42 -> COMMA qualifiedName .)
    BLPAREN         reduce using rule 368 (expr_42 -> COMMA qualifiedName .)
    SEMI            reduce using rule 368 (expr_42 -> COMMA qualifiedName .)



state 841

    (110) formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId .

    RPAREN          reduce using rule 110 (formalParameterDeclsRest -> OP_ARRAY variableDeclaratorId .)



state 842

    (373) expr_44 -> COMMA . formalParameterDecls
    (108) formalParameterDecls -> . variableModifiers type formalParameterDeclsRest
    (157) variableModifiers -> . expr_variableModifier
    (408) expr_variableModifier -> . variableModifier
    (409) expr_variableModifier -> . expr_variableModifier variableModifier
    (410) expr_variableModifier -> . empty
    (101) variableModifier -> . FINAL
    (102) variableModifier -> . annotation
    (502) empty -> .
    (129) annotation -> . AT annotationName expr_52

  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    FINAL           shift and go to state 679
    Identifier      reduce using rule 502 (empty -> .)
    BOOLEAN         reduce using rule 502 (empty -> .)
    CHAR            reduce using rule 502 (empty -> .)
    BYTE            reduce using rule 502 (empty -> .)
    SHORT           reduce using rule 502 (empty -> .)
    INT             reduce using rule 502 (empty -> .)
    LONG            reduce using rule 502 (empty -> .)
    FLOAT           reduce using rule 502 (empty -> .)
    DOUBLE          reduce using rule 502 (empty -> .)
    AT              shift and go to state 6

  ! FINAL           [ reduce using rule 502 (empty -> .) ]
  ! AT              [ reduce using rule 502 (empty -> .) ]

    variableModifiers              shift and go to state 695
    formalParameterDecls           shift and go to state 858
    expr_variableModifier          shift and go to state 611
    variableModifier               shift and go to state 590
    annotation                     shift and go to state 677
    empty                          shift and go to state 821

state 843

    (374) expr_44 -> empty .

    RPAREN          reduce using rule 374 (expr_44 -> empty .)



state 844

    (109) formalParameterDeclsRest -> variableDeclaratorId expr_44 .

    RPAREN          reduce using rule 109 (formalParameterDeclsRest -> variableDeclaratorId expr_44 .)



state 845

    (62) interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .

    BRPAREN         reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    SEMI            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    PUBLIC          reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    PROTECTED       reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    PRIVATE         reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    STATIC          reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    ABSTRACT        reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    FINAL           reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    NATIVE          reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    SYNCHRONIZED    reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    TRANSIENT       reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    VOLATILE        reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    STRICTFP        reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    AT              reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    VOID            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    LESS            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    INTERFACE       reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    CLASS           reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    ENUM            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    Identifier      reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    BOOLEAN         reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    CHAR            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    BYTE            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    SHORT           reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    INT             reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    LONG            reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    FLOAT           reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)
    DOUBLE          reduce using rule 62 (interfaceMethodDeclaratorRest -> formalParameters expr_28 throwsList SEMI .)



state 846

    (66) constantDeclarator -> Identifier constantDeclaratorRest .

    COMMA           reduce using rule 66 (constantDeclarator -> Identifier constantDeclaratorRest .)
    SEMI            reduce using rule 66 (constantDeclarator -> Identifier constantDeclaratorRest .)



state 847

    (347) expr_33 -> expr_33 COMMA constantDeclarator .

    COMMA           reduce using rule 347 (expr_33 -> expr_33 COMMA constantDeclarator .)
    SEMI            reduce using rule 347 (expr_33 -> expr_33 COMMA constantDeclarator .)



state 848

    (183) forControl -> expr_68 SEMI expr_69 SEMI . expr_70
    (434) expr_70 -> . forUpdate
    (435) expr_70 -> . empty
    (187) forUpdate -> . expressionList
    (502) empty -> .
    (189) expressionList -> . expression expr_71
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    RPAREN          reduce using rule 502 (empty -> .)
    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    conditionalExpression          shift and go to state 221
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    expressionList                 shift and go to state 860
    FloatingPointLiteral           shift and go to state 107
    parExpression                  shift and go to state 122
    empty                          shift and go to state 861
    additiveExpression             shift and go to state 88
    forUpdate                      shift and go to state 862
    unaryExpression                shift and go to state 121
    expr_70                        shift and go to state 859
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    primary                        shift and go to state 97
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    integerLiteral                 shift and go to state 83
    andExpression                  shift and go to state 92
    expression                     shift and go to state 335

state 849

    (186) enhancedForControl -> variableModifiers type Identifier COLON . expression
    (192) expression -> . conditionalExpression expr_72
    (205) conditionalExpression -> . conditionalOrExpression expr_73
    (206) conditionalOrExpression -> . conditionalAndExpression expr_74
    (207) conditionalAndExpression -> . inclusiveOrExpression expr_75
    (208) inclusiveOrExpression -> . exclusiveOrExpression expr_76
    (209) exclusiveOrExpression -> . andExpression expr_77
    (210) andExpression -> . equalityExpression expr_78
    (211) equalityExpression -> . instanceOfExpression expr_80
    (212) instanceOfExpression -> . relationalExpression expr_81
    (213) relationalExpression -> . shiftExpression expr_82
    (218) shiftExpression -> . additiveExpression expr_83
    (222) additiveExpression -> . multiplicativeExpression expr_85
    (223) multiplicativeExpression -> . unaryExpression expr_87
    (224) unaryExpression -> . PLUS unaryExpression
    (225) unaryExpression -> . DASH unaryExpression
    (226) unaryExpression -> . OP_INC unaryExpression
    (227) unaryExpression -> . OP_DEC unaryExpression
    (228) unaryExpression -> . unaryExpressionNotPlusMinus
    (229) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (230) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (231) unaryExpressionNotPlusMinus -> . castExpression
    (232) unaryExpressionNotPlusMinus -> . primary expr_88 expr_89
    (233) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (234) castExpression -> . LPAREN expr_90 RPAREN unaryExpressionNotPlusMinus
    (235) primary -> . parExpression
    (236) primary -> . THIS expr_49 expr_91
    (237) primary -> . SUPER superSuffix
    (238) primary -> . literal
    (239) primary -> . NEW creator
    (240) primary -> . Identifier expr_49 expr_91
    (241) primary -> . primitiveType expr_28 DOT CLASS
    (242) primary -> . VOID DOT CLASS
    (188) parExpression -> . LPAREN expression RPAREN
    (116) literal -> . integerLiteral
    (117) literal -> . FloatingPointLiteral
    (118) literal -> . CharacterLiteral
    (119) literal -> . StringLiteral
    (120) literal -> . booleanLiteral
    (121) literal -> . NULL
    (93) primitiveType -> . BOOLEAN
    (94) primitiveType -> . CHAR
    (95) primitiveType -> . BYTE
    (96) primitiveType -> . SHORT
    (97) primitiveType -> . INT
    (98) primitiveType -> . LONG
    (99) primitiveType -> . FLOAT
    (100) primitiveType -> . DOUBLE
    (122) integerLiteral -> . NUMBER
    (123) integerLiteral -> . HEX_NUMBER
    (124) integerLiteral -> . LONG_NUMBER
    (125) integerLiteral -> . LONG_HEX_NUMBER
    (499) FloatingPointLiteral -> . NON_INTEGER_1
    (500) FloatingPointLiteral -> . NON_INTEGER_2
    (501) FloatingPointLiteral -> . NON_INTEGER_3
    (126) booleanLiteral -> . TRUE
    (127) booleanLiteral -> . FALSE

    PLUS            shift and go to state 74
    DASH            shift and go to state 77
    OP_INC          shift and go to state 99
    OP_DEC          shift and go to state 101
    TILDE           shift and go to state 105
    EXCLAMATION     shift and go to state 69
    LPAREN          shift and go to state 123
    THIS            shift and go to state 81
    SUPER           shift and go to state 128
    NEW             shift and go to state 102
    Identifier      shift and go to state 140
    VOID            shift and go to state 75
    CharacterLiteral shift and go to state 89
    StringLiteral   shift and go to state 109
    NULL            shift and go to state 119
    BOOLEAN         shift and go to state 111
    CHAR            shift and go to state 98
    BYTE            shift and go to state 108
    SHORT           shift and go to state 84
    INT             shift and go to state 90
    LONG            shift and go to state 72
    FLOAT           shift and go to state 127
    DOUBLE          shift and go to state 82
    NUMBER          shift and go to state 118
    HEX_NUMBER      shift and go to state 113
    LONG_NUMBER     shift and go to state 86
    LONG_HEX_NUMBER shift and go to state 100
    NON_INTEGER_1   shift and go to state 116
    NON_INTEGER_2   shift and go to state 114
    NON_INTEGER_3   shift and go to state 115
    TRUE            shift and go to state 71
    FALSE           shift and go to state 79


    equalityExpression             shift and go to state 94
    primary                        shift and go to state 97
    inclusiveOrExpression          shift and go to state 85
    multiplicativeExpression       shift and go to state 117
    exclusiveOrExpression          shift and go to state 96
    conditionalAndExpression       shift and go to state 70
    booleanLiteral                 shift and go to state 73
    shiftExpression                shift and go to state 120
    literal                        shift and go to state 104
    FloatingPointLiteral           shift and go to state 107
    integerLiteral                 shift and go to state 83
    additiveExpression             shift and go to state 88
    conditionalExpression          shift and go to state 221
    unaryExpression                shift and go to state 121
    parExpression                  shift and go to state 122
    relationalExpression           shift and go to state 78
    conditionalOrExpression        shift and go to state 95
    instanceOfExpression           shift and go to state 80
    castExpression                 shift and go to state 126
    unaryExpressionNotPlusMinus    shift and go to state 91
    primitiveType                  shift and go to state 110
    andExpression                  shift and go to state 92
    expression                     shift and go to state 863

state 850

    (175) catchClause -> CATCH LPAREN formalParameter RPAREN . block
    (150) block -> . BLPAREN expr_blockStatment BRPAREN

    BLPAREN         shift and go to state 530


    block                          shift and go to state 864

state 851

    (176) formalParameter -> variableModifiers type . variableDeclaratorId
    (71) variableDeclaratorId -> . Identifier expr_28

    Identifier      shift and go to state 672


    variableDeclaratorId           shift and go to state 865

state 852

    (180) switchLabel -> CASE enumConstantName COLON .

    CASE            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    DEFAULT         reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    ASSERT          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    IF              reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    FOR             reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    WHILE           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    DO              reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    TRY             reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    SWITCH          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    SYNCHRONIZED    reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    RETURN          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    THROW           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    BREAK           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    CONTINUE        reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    SEMI            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    Identifier      reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    BLPAREN         reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    BOOLEAN         reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    CHAR            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    BYTE            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    SHORT           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    INT             reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    LONG            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    FLOAT           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    DOUBLE          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    PUBLIC          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    PROTECTED       reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    PRIVATE         reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    ABSTRACT        reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    STATIC          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    FINAL           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    STRICTFP        reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    AT              reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    PLUS            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    DASH            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    OP_INC          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    OP_DEC          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    TILDE           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    EXCLAMATION     reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    LPAREN          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    THIS            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    SUPER           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NEW             reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    VOID            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    CharacterLiteral reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    StringLiteral   reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NULL            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NUMBER          reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    HEX_NUMBER      reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    LONG_NUMBER     reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    LONG_HEX_NUMBER reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_1   reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_2   reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    NON_INTEGER_3   reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    TRUE            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    FALSE           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    CLASS           reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    ENUM            reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    INTERFACE       reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)
    BRPAREN         reduce using rule 180 (switchLabel -> CASE enumConstantName COLON .)



state 853

    (179) switchLabel -> CASE constantExpression COLON .

    CASE            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    DEFAULT         reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    ASSERT          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    IF              reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    FOR             reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    WHILE           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    DO              reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    TRY             reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    SWITCH          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    SYNCHRONIZED    reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    RETURN          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    THROW           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    BREAK           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    CONTINUE        reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    SEMI            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    Identifier      reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    BLPAREN         reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    BOOLEAN         reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    CHAR            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    BYTE            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    SHORT           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    INT             reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    LONG            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    FLOAT           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    DOUBLE          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    PUBLIC          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    PROTECTED       reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    PRIVATE         reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    ABSTRACT        reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    STATIC          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    FINAL           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    STRICTFP        reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    AT              reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    PLUS            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    DASH            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    OP_INC          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    OP_DEC          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    TILDE           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    EXCLAMATION     reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    LPAREN          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    THIS            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    SUPER           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NEW             reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    VOID            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    CharacterLiteral reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    StringLiteral   reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NULL            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NUMBER          reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    HEX_NUMBER      reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    LONG_NUMBER     reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    LONG_HEX_NUMBER reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_1   reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_2   reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    NON_INTEGER_3   reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    TRUE            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    FALSE           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    CLASS           reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    ENUM            reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    INTERFACE       reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)
    BRPAREN         reduce using rule 179 (switchLabel -> CASE constantExpression COLON .)



state 854

    (113) explicitConstructorInvocation -> expr_47 expr_48 arguments . SEMI

    SEMI            shift and go to state 866



state 855

    (112) constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .

    BRPAREN         reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    SEMI            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    STATIC          reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    PUBLIC          reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    PROTECTED       reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    PRIVATE         reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    ABSTRACT        reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    FINAL           reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    NATIVE          reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    SYNCHRONIZED    reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    TRANSIENT       reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    VOLATILE        reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    STRICTFP        reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    AT              reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    BLPAREN         reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    VOID            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    Identifier      reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    LESS            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    INTERFACE       reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    CLASS           reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    ENUM            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    BOOLEAN         reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    CHAR            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    BYTE            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    SHORT           reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    INT             reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    LONG            reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    FLOAT           reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)
    DOUBLE          reduce using rule 112 (constructorBody -> BLPAREN expr_45 expr_blockStatment BRPAREN .)



state 856

    (114) explicitConstructorInvocation -> primary DOT expr_47 . SUPER arguments SEMI

    SUPER           shift and go to state 867



state 857

    (369) expr_42 -> expr_42 COMMA qualifiedName .

    COMMA           reduce using rule 369 (expr_42 -> expr_42 COMMA qualifiedName .)
    BLPAREN         reduce using rule 369 (expr_42 -> expr_42 COMMA qualifiedName .)
    SEMI            reduce using rule 369 (expr_42 -> expr_42 COMMA qualifiedName .)



state 858

    (373) expr_44 -> COMMA formalParameterDecls .

    RPAREN          reduce using rule 373 (expr_44 -> COMMA formalParameterDecls .)



state 859

    (183) forControl -> expr_68 SEMI expr_69 SEMI expr_70 .

    RPAREN          reduce using rule 183 (forControl -> expr_68 SEMI expr_69 SEMI expr_70 .)



state 860

    (187) forUpdate -> expressionList .

    RPAREN          reduce using rule 187 (forUpdate -> expressionList .)



state 861

    (435) expr_70 -> empty .

    RPAREN          reduce using rule 435 (expr_70 -> empty .)



state 862

    (434) expr_70 -> forUpdate .

    RPAREN          reduce using rule 434 (expr_70 -> forUpdate .)



state 863

    (186) enhancedForControl -> variableModifiers type Identifier COLON expression .

    RPAREN          reduce using rule 186 (enhancedForControl -> variableModifiers type Identifier COLON expression .)



state 864

    (175) catchClause -> CATCH LPAREN formalParameter RPAREN block .

    CATCH           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINALLY         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BRPAREN         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ASSERT          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    IF              reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FOR             reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    WHILE           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DO              reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRY             reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SWITCH          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SYNCHRONIZED    reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    RETURN          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THROW           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BREAK           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CONTINUE        reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SEMI            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    Identifier      reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BLPAREN         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BOOLEAN         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CHAR            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BYTE            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SHORT           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    INT             reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FLOAT           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DOUBLE          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PUBLIC          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PROTECTED       reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PRIVATE         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ABSTRACT        reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STATIC          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINAL           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STRICTFP        reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    AT              reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PLUS            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DASH            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_INC          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_DEC          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TILDE           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    EXCLAMATION     reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LPAREN          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THIS            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SUPER           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NEW             reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    VOID            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CharacterLiteral reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    StringLiteral   reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NULL            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NUMBER          reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    HEX_NUMBER      reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_NUMBER     reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_HEX_NUMBER reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_1   reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_2   reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_3   reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRUE            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FALSE           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CLASS           reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ENUM            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    INTERFACE       reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ELSE            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CASE            reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DEFAULT         reduce using rule 175 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)



state 865

    (176) formalParameter -> variableModifiers type variableDeclaratorId .

    RPAREN          reduce using rule 176 (formalParameter -> variableModifiers type variableDeclaratorId .)



state 866

    (113) explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .

    ASSERT          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    IF              reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    FOR             reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    WHILE           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    DO              reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    TRY             reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    SWITCH          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    SYNCHRONIZED    reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    RETURN          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    THROW           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    BREAK           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    CONTINUE        reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    SEMI            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    Identifier      reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    BLPAREN         reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    BOOLEAN         reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    CHAR            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    BYTE            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    SHORT           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    INT             reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    LONG            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    FLOAT           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    DOUBLE          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    PUBLIC          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    PROTECTED       reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    PRIVATE         reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    ABSTRACT        reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    STATIC          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    FINAL           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    STRICTFP        reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    AT              reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    PLUS            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    DASH            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    OP_INC          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    OP_DEC          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    TILDE           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    EXCLAMATION     reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    LPAREN          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    THIS            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    SUPER           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NEW             reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    VOID            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    CharacterLiteral reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    StringLiteral   reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NULL            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NUMBER          reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    HEX_NUMBER      reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    LONG_NUMBER     reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NON_INTEGER_1   reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NON_INTEGER_2   reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    NON_INTEGER_3   reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    TRUE            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    FALSE           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    BRPAREN         reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    CLASS           reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    ENUM            reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)
    INTERFACE       reduce using rule 113 (explicitConstructorInvocation -> expr_47 expr_48 arguments SEMI .)



state 867

    (114) explicitConstructorInvocation -> primary DOT expr_47 SUPER . arguments SEMI
    (267) arguments -> . LPAREN expr_95 RPAREN

    LPAREN          shift and go to state 228


    arguments                      shift and go to state 868

state 868

    (114) explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments . SEMI

    SEMI            shift and go to state 869



state 869

    (114) explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .

    ASSERT          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    IF              reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    FOR             reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    WHILE           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    DO              reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    TRY             reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    SWITCH          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    SYNCHRONIZED    reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    RETURN          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    THROW           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    BREAK           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    CONTINUE        reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    SEMI            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    Identifier      reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    BLPAREN         reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    BOOLEAN         reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    CHAR            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    BYTE            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    SHORT           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    INT             reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    LONG            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    FLOAT           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    DOUBLE          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    PUBLIC          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    PROTECTED       reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    PRIVATE         reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    ABSTRACT        reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    STATIC          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    FINAL           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    STRICTFP        reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    AT              reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    PLUS            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    DASH            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    OP_INC          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    OP_DEC          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    TILDE           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    EXCLAMATION     reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    LPAREN          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    THIS            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    SUPER           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NEW             reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    VOID            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    CharacterLiteral reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    StringLiteral   reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NULL            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NUMBER          reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    HEX_NUMBER      reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    LONG_NUMBER     reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NON_INTEGER_1   reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NON_INTEGER_2   reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    NON_INTEGER_3   reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    TRUE            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    FALSE           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    BRPAREN         reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    CLASS           reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    ENUM            reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)
    INTERFACE       reduce using rule 114 (explicitConstructorInvocation -> primary DOT expr_47 SUPER arguments SEMI .)


