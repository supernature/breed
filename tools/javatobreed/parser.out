shift/reduce conflict in state 0 resolved as shift.
shift/reduce conflict in state 8 resolved as shift.
shift/reduce conflict in state 11 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
shift/reduce conflict in state 16 resolved as shift.
reduce/reduce conflict in state 26 resolved using rule 225 (expr_4 -> empty .).
reduce/reduce conflict in state 27 resolved using rule 224 (expr_4 -> STATIC .).
shift/reduce conflict in state 58 resolved as shift.
shift/reduce conflict in state 63 resolved as shift.
shift/reduce conflict in state 66 resolved as shift.
shift/reduce conflict in state 66 resolved as shift.
shift/reduce conflict in state 67 resolved as shift.
shift/reduce conflict in state 70 resolved as shift.
shift/reduce conflict in state 75 resolved as shift.
shift/reduce conflict in state 75 resolved as shift.
shift/reduce conflict in state 78 resolved as shift.
shift/reduce conflict in state 80 resolved as shift.
shift/reduce conflict in state 82 resolved as shift.
shift/reduce conflict in state 83 resolved as shift.
shift/reduce conflict in state 83 resolved as shift.
shift/reduce conflict in state 91 resolved as shift.
shift/reduce conflict in state 96 resolved as shift.
reduce/reduce conflict in state 101 resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
reduce/reduce conflict in state 101 resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
reduce/reduce conflict in state 101 resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
reduce/reduce conflict in state 101 resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
reduce/reduce conflict in state 102 resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
reduce/reduce conflict in state 102 resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
reduce/reduce conflict in state 102 resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
reduce/reduce conflict in state 102 resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
reduce/reduce conflict in state 103 resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
reduce/reduce conflict in state 103 resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
reduce/reduce conflict in state 103 resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
reduce/reduce conflict in state 103 resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 104 resolved as shift.
shift/reduce conflict in state 107 resolved as shift.
shift/reduce conflict in state 107 resolved as shift.
shift/reduce conflict in state 108 resolved as shift.
shift/reduce conflict in state 108 resolved as shift.
shift/reduce conflict in state 108 resolved as shift.
shift/reduce conflict in state 130 resolved as shift.
shift/reduce conflict in state 150 resolved as shift.
shift/reduce conflict in state 150 resolved as shift.
shift/reduce conflict in state 157 resolved as shift.
shift/reduce conflict in state 157 resolved as shift.
shift/reduce conflict in state 166 resolved as shift.
shift/reduce conflict in state 187 resolved as shift.
shift/reduce conflict in state 193 resolved as shift.
shift/reduce conflict in state 193 resolved as shift.
shift/reduce conflict in state 204 resolved as shift.
shift/reduce conflict in state 204 resolved as shift.
shift/reduce conflict in state 214 resolved as shift.
shift/reduce conflict in state 216 resolved as shift.
shift/reduce conflict in state 219 resolved as shift.
shift/reduce conflict in state 219 resolved as shift.
shift/reduce conflict in state 238 resolved as shift.
shift/reduce conflict in state 248 resolved as shift.
shift/reduce conflict in state 263 resolved as shift.
shift/reduce conflict in state 281 resolved as shift.
shift/reduce conflict in state 285 resolved as shift.
reduce/reduce conflict in state 311 resolved using rule 343 (expr_51 -> empty .).
reduce/reduce conflict in state 311 resolved using rule 343 (expr_51 -> empty .).
reduce/reduce conflict in state 329 resolved using rule 341 (expr_50 -> empty .).
shift/reduce conflict in state 332 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 392 resolved as shift.
shift/reduce conflict in state 400 resolved as shift.
shift/reduce conflict in state 402 resolved as shift.
reduce/reduce conflict in state 417 resolved using rule 339 (expr_50 -> FLPAREN FRPAREN .).
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 429 resolved as shift.
shift/reduce conflict in state 430 resolved as shift.
reduce/reduce conflict in state 457 resolved using rule 290 (expr_29 -> empty .).
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 461 resolved as shift.
shift/reduce conflict in state 466 resolved as shift.
shift/reduce conflict in state 478 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 508 resolved as shift.
shift/reduce conflict in state 510 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
shift/reduce conflict in state 528 resolved as shift.
reduce/reduce conflict in state 530 resolved using rule 296 (expr_32 -> typeParameters .).
reduce/reduce conflict in state 532 resolved using rule 297 (expr_32 -> empty .).
shift/reduce conflict in state 535 resolved as shift.
shift/reduce conflict in state 548 resolved as shift.
shift/reduce conflict in state 559 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 567 resolved as shift.
shift/reduce conflict in state 569 resolved as shift.
shift/reduce conflict in state 597 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 601 resolved as shift.
shift/reduce conflict in state 609 resolved as shift.
shift/reduce conflict in state 610 resolved as shift.
shift/reduce conflict in state 618 resolved as shift.
shift/reduce conflict in state 625 resolved as shift.
shift/reduce conflict in state 627 resolved as shift.
shift/reduce conflict in state 628 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 642 resolved as shift.
shift/reduce conflict in state 685 resolved as shift.
reduce/reduce conflict in state 706 resolved using rule 280 (expr_25 -> empty .).
shift/reduce conflict in state 727 resolved as shift.
shift/reduce conflict in state 732 resolved as shift.
shift/reduce conflict in state 732 resolved as shift.
shift/reduce conflict in state 739 resolved as shift.
shift/reduce conflict in state 740 resolved as shift.
shift/reduce conflict in state 750 resolved as shift.
shift/reduce conflict in state 759 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 786 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 805 resolved as shift.
shift/reduce conflict in state 807 resolved as shift.
shift/reduce conflict in state 813 resolved as shift.
shift/reduce conflict in state 813 resolved as shift.
shift/reduce conflict in state 820 resolved as shift.
shift/reduce conflict in state 824 resolved as shift.
reduce/reduce conflict in state 848 resolved using rule 301 (expr_34 -> empty .).
reduce/reduce conflict in state 848 resolved using rule 301 (expr_34 -> empty .).
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 849 resolved as shift.
shift/reduce conflict in state 854 resolved as shift.
shift/reduce conflict in state 902 resolved as shift.


Unused terminals:

   GENERIC
   NEWLINE
   GOTO
   VAR
   LCOMMENT
   FUTURE
   ASS_SHRR
   REST
   OPERATOR
   INNER
   CAST
   MCOMMENT
   ASS_SHR
   ASS_SHL
   CONST
   OUTER
   OP_LE
   OP_SHRR
   OP_SHR
   OP_SHL
   OP_GE

Grammar

Rule 1     compilationUnit -> expr_1 expr_2 expr_3
Rule 2     packageDeclaration -> PACKAGE qualifiedName SEMI
Rule 3     importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI
Rule 4     importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI
Rule 5     typeDeclaration -> classOrInterfaceDeclaration
Rule 6     typeDeclaration -> SEMI
Rule 7     classOrInterfaceDeclaration -> classDeclaration
Rule 8     classOrInterfaceDeclaration -> interfaceDeclaration
Rule 9     modifiers -> expr_8
Rule 10    variableModifiers -> expr_9
Rule 11    classDeclaration -> normalClassDeclaration
Rule 12    classDeclaration -> enumDeclaration
Rule 13    normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
Rule 14    typeParameters -> LESS typeParameter expr_13 MORE
Rule 15    typeParameter -> IDENTIFIER expr_14
Rule 16    typeBound -> type expr_15
Rule 17    enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody
Rule 18    enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN
Rule 19    enumConstants -> enumConstant expr_21
Rule 20    enumConstant -> expr_22 IDENTIFIER expr_23 expr_24
Rule 21    enumBodyDeclarations -> SEMI expr_25
Rule 22    interfaceDeclaration -> normalInterfaceDeclaration
Rule 23    interfaceDeclaration -> annotationTypeDeclaration
Rule 24    normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
Rule 25    typeList -> type expr_28
Rule 26    classBody -> BLPAREN expr_29 BRPAREN
Rule 27    interfaceBody -> BLPAREN expr_30 BRPAREN
Rule 28    classBodyDeclaration -> SEMI
Rule 29    classBodyDeclaration -> expr_31 block
Rule 30    classBodyDeclaration -> memberDecl
Rule 31    memberDecl -> fieldDeclaration
Rule 32    memberDecl -> methodDeclaration
Rule 33    memberDecl -> classDeclaration
Rule 34    memberDecl -> interfaceDeclaration
Rule 35    methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
Rule 36    methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
Rule 37    fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI
Rule 38    variableDeclarator -> IDENTIFIER expr_42 expr_43
Rule 39    interfaceBodyDeclaration -> interfaceFieldDeclaration
Rule 40    interfaceBodyDeclaration -> interfaceMethodDeclaration
Rule 41    interfaceBodyDeclaration -> interfaceDeclaration
Rule 42    interfaceBodyDeclaration -> classDeclaration
Rule 43    interfaceBodyDeclaration -> SEMI
Rule 44    interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI
Rule 45    interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI
Rule 46    type -> classOrInterfaceType expr_49
Rule 47    type -> primitiveType expr_50
Rule 48    classOrInterfaceType -> IDENTIFIER expr_51 expr_53
Rule 49    primitiveType -> BOOLEAN
Rule 50    primitiveType -> CHAR
Rule 51    primitiveType -> BYTE
Rule 52    primitiveType -> SHORT
Rule 53    primitiveType -> INT
Rule 54    primitiveType -> LONG
Rule 55    primitiveType -> FLOAT
Rule 56    primitiveType -> DOUBLE
Rule 57    typeArguments -> LESS typeArgument expr_54 MORE
Rule 58    typeArgument -> type
Rule 59    typeArgument -> QUES expr_56
Rule 60    qualifiedNameList -> qualifiedName expr_57
Rule 61    formalParameters -> LPAREN expr_58 RPAREN
Rule 62    formalParameterDecls -> ellipsisParameterDecl
Rule 63    formalParameterDecls -> normalParameterDecl expr_59
Rule 64    formalParameterDecls -> expr_60 ellipsisParameterDecl
Rule 65    normalParameterDecl -> variableModifiers type IDENTIFIER expr_61
Rule 66    ellipsisParameterDecl -> variableModifiers type OP_ARRAY IDENTIFIER
Rule 67    explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI
Rule 68    explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI
Rule 69    qualifiedName -> IDENTIFIER expr_65
Rule 70    annotations -> expr_66
Rule 71    annotation -> AT qualifiedName expr_68
Rule 72    elementValuePairs -> elementValuePair expr_69
Rule 73    elementValuePair -> IDENTIFIER EQUALS elementValue
Rule 74    elementValue -> conditionalExpression
Rule 75    elementValue -> annotation
Rule 76    elementValue -> elementValueArrayInitializer
Rule 77    elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN
Rule 78    annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody
Rule 79    annotationTypeBody -> BLPAREN expr_73 BRPAREN
Rule 80    annotationTypeElementDeclaration -> annotationMethodDeclaration
Rule 81    annotationTypeElementDeclaration -> interfaceFieldDeclaration
Rule 82    annotationTypeElementDeclaration -> normalClassDeclaration
Rule 83    annotationTypeElementDeclaration -> normalInterfaceDeclaration
Rule 84    annotationTypeElementDeclaration -> enumDeclaration
Rule 85    annotationTypeElementDeclaration -> annotationTypeDeclaration
Rule 86    annotationTypeElementDeclaration -> SEMI
Rule 87    annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI
Rule 88    block -> BLPAREN expr_75 BRPAREN
Rule 89    blockStatement -> localVariableDeclarationStatement
Rule 90    blockStatement -> classOrInterfaceDeclaration
Rule 91    blockStatement -> statement
Rule 92    localVariableDeclarationStatement -> localVariableDeclaration SEMI
Rule 93    localVariableDeclaration -> variableModifiers type variableDeclarator expr_76
Rule 94    statement -> block
Rule 95    statement -> expr_77 expression expr_78 SEMI
Rule 96    statement -> ASSERT expression expr_79 SEMI
Rule 97    statement -> IF parExpression statement expr_80
Rule 98    statement -> forstatement
Rule 99    statement -> WHILE parExpression statement
Rule 100   statement -> DO statement WHILE parExpression SEMI
Rule 101   statement -> trystatement
Rule 102   statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
Rule 103   statement -> SYNCHRONIZED parExpression block
Rule 104   statement -> RETURN expr_81 SEMI
Rule 105   statement -> THROW expression SEMI
Rule 106   statement -> BREAK expr_82 SEMI
Rule 107   statement -> CONTINUE expr_83 SEMI
Rule 108   statement -> expression SEMI
Rule 109   statement -> IDENTIFIER COLON statement
Rule 110   statement -> SEMI
Rule 111   switchBlockStatementGroups -> expr_84
Rule 112   switchBlockStatementGroup -> switchLabel expr_85
Rule 113   switchLabel -> CASE expression COLON
Rule 114   switchLabel -> DEFAULT COLON
Rule 115   trystatement -> TRY block expr_86
Rule 116   catches -> catchClause expr_87
Rule 117   catchClause -> CATCH LPAREN formalParameter RPAREN block
Rule 118   formalParameter -> variableModifiers type IDENTIFIER expr_88
Rule 119   forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
Rule 120   forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
Rule 121   forInit -> localVariableDeclaration
Rule 122   forInit -> expressionList
Rule 123   parExpression -> LPAREN expression RPAREN
Rule 124   expressionList -> expression expr_92
Rule 125   expression -> conditionalExpression expr_93
Rule 126   assignmentOperator -> EQUALS
Rule 127   assignmentOperator -> ASS_ADD
Rule 128   assignmentOperator -> ASS_SUB
Rule 129   assignmentOperator -> ASS_MUL
Rule 130   assignmentOperator -> ASS_DIV
Rule 131   assignmentOperator -> ASS_AND
Rule 132   assignmentOperator -> ASS_OR
Rule 133   assignmentOperator -> ASS_XOR
Rule 134   assignmentOperator -> ASS_MOD
Rule 135   assignmentOperator -> LESS LESS EQUALS
Rule 136   assignmentOperator -> MORE MORE MORE EQUALS
Rule 137   assignmentOperator -> MORE MORE EQUALS
Rule 138   conditionalExpression -> conditionalOrExpression expr_94
Rule 139   conditionalOrExpression -> conditionalAndExpression expr_95
Rule 140   conditionalAndExpression -> inclusiveOrExpression expr_96
Rule 141   inclusiveOrExpression -> exclusiveOrExpression expr_97
Rule 142   exclusiveOrExpression -> andExpression expr_98
Rule 143   andExpression -> equalityExpression expr_99
Rule 144   equalityExpression -> instanceOfExpression expr_101
Rule 145   instanceOfExpression -> relationalExpression expr_102
Rule 146   relationalExpression -> shiftExpression expr_103
Rule 147   relationalOp -> LESS EQUALS
Rule 148   relationalOp -> MORE EQUALS
Rule 149   relationalOp -> LESS
Rule 150   relationalOp -> MORE
Rule 151   shiftExpression -> additiveExpression expr_104
Rule 152   shiftOp -> LESS LESS
Rule 153   shiftOp -> MORE MORE MORE
Rule 154   shiftOp -> MORE MORE
Rule 155   additiveExpression -> multiplicativeExpression expr_106
Rule 156   multiplicativeExpression -> unaryExpression expr_108
Rule 157   unaryExpression -> PLUS unaryExpression
Rule 158   unaryExpression -> DASH unaryExpression
Rule 159   unaryExpression -> OP_INC unaryExpression
Rule 160   unaryExpression -> OP_DEC unaryExpression
Rule 161   unaryExpression -> unaryExpressionNotPlusMinus
Rule 162   unaryExpressionNotPlusMinus -> TILDE unaryExpression
Rule 163   unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression
Rule 164   unaryExpressionNotPlusMinus -> castExpression
Rule 165   unaryExpressionNotPlusMinus -> primary expr_109 expr_110
Rule 166   castExpression -> LPAREN primitiveType RPAREN unaryExpression
Rule 167   castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus
Rule 168   primary -> parExpression
Rule 169   primary -> THIS expr_111 expr_112
Rule 170   primary -> IDENTIFIER expr_113 expr_114
Rule 171   primary -> SUPER superSuffix
Rule 172   primary -> literal
Rule 173   primary -> creator
Rule 174   primary -> primitiveType expr_115 DOT CLASS
Rule 175   primary -> VOID DOT CLASS
Rule 176   superSuffix -> arguments
Rule 177   superSuffix -> DOT expr_116 IDENTIFIER expr_117
Rule 178   identifierSuffix -> expr_118 DOT CLASS
Rule 179   identifierSuffix -> expr_119
Rule 180   identifierSuffix -> arguments
Rule 181   identifierSuffix -> DOT CLASS
Rule 182   identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments
Rule 183   identifierSuffix -> DOT THIS
Rule 184   identifierSuffix -> DOT SUPER arguments
Rule 185   identifierSuffix -> innerCreator
Rule 186   selector -> DOT IDENTIFIER expr_120
Rule 187   selector -> DOT THIS
Rule 188   selector -> DOT SUPER superSuffix
Rule 189   selector -> innerCreator
Rule 190   selector -> FLPAREN expression FRPAREN
Rule 191   creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
Rule 192   creator -> NEW classOrInterfaceType classCreatorRest
Rule 193   creator -> arrayCreator
Rule 194   arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
Rule 195   arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123
Rule 196   variableInitializer -> arrayInitializer
Rule 197   variableInitializer -> expression
Rule 198   arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN
Rule 199   createdName -> classOrInterfaceType
Rule 200   createdName -> primitiveType
Rule 201   innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest
Rule 202   classCreatorRest -> arguments expr_129
Rule 203   nonWildcardTypeArguments -> LESS typeList MORE
Rule 204   arguments -> LPAREN expr_130 RPAREN
Rule 205   literal -> INTLITERAL
Rule 206   literal -> LONGLITERAL
Rule 207   literal -> FLOATLITERAL
Rule 208   literal -> DOUBLELITERAL
Rule 209   literal -> CHARLITERAL
Rule 210   literal -> STRINGLITERAL
Rule 211   literal -> TRUE
Rule 212   literal -> FALSE
Rule 213   literal -> NULL
Rule 214   expr_0 -> annotations
Rule 215   expr_0 -> empty
Rule 216   expr_1 -> expr_0 packageDeclaration
Rule 217   expr_1 -> empty
Rule 218   expr_2 -> importDeclaration
Rule 219   expr_2 -> expr_2 importDeclaration
Rule 220   expr_2 -> empty
Rule 221   expr_3 -> typeDeclaration
Rule 222   expr_3 -> expr_3 typeDeclaration
Rule 223   expr_3 -> empty
Rule 224   expr_4 -> STATIC
Rule 225   expr_4 -> empty
Rule 226   expr_5 -> STATIC
Rule 227   expr_5 -> empty
Rule 228   expr_6 -> DOT IDENTIFIER
Rule 229   expr_6 -> expr_6 DOT IDENTIFIER
Rule 230   expr_7 -> DOT MULT
Rule 231   expr_7 -> empty
Rule 232   expr_8 -> annotation
Rule 233   expr_8 -> PUBLIC
Rule 234   expr_8 -> PROTECTED
Rule 235   expr_8 -> PRIVATE
Rule 236   expr_8 -> STATIC
Rule 237   expr_8 -> ABSTRACT
Rule 238   expr_8 -> FINAL
Rule 239   expr_8 -> NATIVE
Rule 240   expr_8 -> SYNCHRONIZED
Rule 241   expr_8 -> TRANSIENT
Rule 242   expr_8 -> VOLATILE
Rule 243   expr_8 -> STRICTFP
Rule 244   expr_9 -> FINAL
Rule 245   expr_9 -> annotation
Rule 246   expr_10 -> typeParameters
Rule 247   expr_10 -> empty
Rule 248   expr_11 -> EXTENDS type
Rule 249   expr_11 -> empty
Rule 250   expr_12 -> IMPLEMENTS typeList
Rule 251   expr_12 -> empty
Rule 252   expr_13 -> COMMA typeParameter
Rule 253   expr_13 -> expr_13 COMMA typeParameter
Rule 254   expr_13 -> empty
Rule 255   expr_14 -> EXTENDS typeBound
Rule 256   expr_14 -> empty
Rule 257   expr_15 -> AND type
Rule 258   expr_15 -> expr_15 AND type
Rule 259   expr_15 -> empty
Rule 260   expr_16 -> ENUM
Rule 261   expr_17 -> IMPLEMENTS typeList
Rule 262   expr_17 -> empty
Rule 263   expr_18 -> enumConstants
Rule 264   expr_18 -> empty
Rule 265   expr_19 -> COMMA
Rule 266   expr_19 -> empty
Rule 267   expr_20 -> enumBodyDeclarations
Rule 268   expr_20 -> empty
Rule 269   expr_21 -> COMMA enumConstant
Rule 270   expr_21 -> expr_21 COMMA enumConstant
Rule 271   expr_21 -> empty
Rule 272   expr_22 -> annotations
Rule 273   expr_22 -> empty
Rule 274   expr_23 -> arguments
Rule 275   expr_23 -> empty
Rule 276   expr_24 -> classBody
Rule 277   expr_24 -> empty
Rule 278   expr_25 -> classBodyDeclaration
Rule 279   expr_25 -> expr_25 classBodyDeclaration
Rule 280   expr_25 -> empty
Rule 281   expr_26 -> typeParameters
Rule 282   expr_26 -> empty
Rule 283   expr_27 -> EXTENDS typeList
Rule 284   expr_27 -> empty
Rule 285   expr_28 -> COMMA type
Rule 286   expr_28 -> expr_28 COMMA type
Rule 287   expr_28 -> empty
Rule 288   expr_29 -> classBodyDeclaration
Rule 289   expr_29 -> expr_29 classBodyDeclaration
Rule 290   expr_29 -> empty
Rule 291   expr_30 -> interfaceBodyDeclaration
Rule 292   expr_30 -> expr_30 interfaceBodyDeclaration
Rule 293   expr_30 -> empty
Rule 294   expr_31 -> STATIC
Rule 295   expr_31 -> empty
Rule 296   expr_32 -> typeParameters
Rule 297   expr_32 -> empty
Rule 298   expr_33 -> THROWS qualifiedNameList
Rule 299   expr_33 -> empty
Rule 300   expr_34 -> explicitConstructorInvocation
Rule 301   expr_34 -> empty
Rule 302   expr_35 -> blockStatement
Rule 303   expr_35 -> expr_35 blockStatement
Rule 304   expr_35 -> empty
Rule 305   expr_36 -> typeParameters
Rule 306   expr_36 -> empty
Rule 307   expr_37 -> type
Rule 308   expr_37 -> VOID
Rule 309   expr_38 -> FLPAREN FRPAREN
Rule 310   expr_38 -> expr_38 FLPAREN FRPAREN
Rule 311   expr_38 -> empty
Rule 312   expr_39 -> THROWS qualifiedNameList
Rule 313   expr_39 -> empty
Rule 314   expr_40 -> block
Rule 315   expr_40 -> SEMI
Rule 316   expr_41 -> COMMA variableDeclarator
Rule 317   expr_41 -> expr_41 COMMA variableDeclarator
Rule 318   expr_41 -> empty
Rule 319   expr_42 -> FLPAREN FRPAREN
Rule 320   expr_42 -> expr_42 FLPAREN FRPAREN
Rule 321   expr_42 -> empty
Rule 322   expr_43 -> EQUALS variableInitializer
Rule 323   expr_43 -> empty
Rule 324   expr_44 -> typeParameters
Rule 325   expr_44 -> empty
Rule 326   expr_45 -> type
Rule 327   expr_45 -> VOID
Rule 328   expr_46 -> FLPAREN FRPAREN
Rule 329   expr_46 -> expr_46 FLPAREN FRPAREN
Rule 330   expr_46 -> empty
Rule 331   expr_47 -> THROWS qualifiedNameList
Rule 332   expr_47 -> empty
Rule 333   expr_48 -> COMMA variableDeclarator
Rule 334   expr_48 -> expr_48 COMMA variableDeclarator
Rule 335   expr_48 -> empty
Rule 336   expr_49 -> FLPAREN FRPAREN
Rule 337   expr_49 -> expr_49 FLPAREN FRPAREN
Rule 338   expr_49 -> empty
Rule 339   expr_50 -> FLPAREN FRPAREN
Rule 340   expr_50 -> expr_50 FLPAREN FRPAREN
Rule 341   expr_50 -> empty
Rule 342   expr_51 -> typeArguments
Rule 343   expr_51 -> empty
Rule 344   expr_52 -> typeArguments
Rule 345   expr_52 -> empty
Rule 346   expr_53 -> DOT IDENTIFIER expr_52
Rule 347   expr_53 -> expr_53 DOT IDENTIFIER expr_52
Rule 348   expr_53 -> empty
Rule 349   expr_54 -> COMMA typeArgument
Rule 350   expr_54 -> expr_54 COMMA typeArgument
Rule 351   expr_54 -> empty
Rule 352   expr_55 -> EXTENDS
Rule 353   expr_55 -> SUPER
Rule 354   expr_56 -> expr_55 type
Rule 355   expr_56 -> empty
Rule 356   expr_57 -> COMMA qualifiedName
Rule 357   expr_57 -> expr_57 COMMA qualifiedName
Rule 358   expr_57 -> empty
Rule 359   expr_58 -> formalParameterDecls
Rule 360   expr_58 -> empty
Rule 361   expr_59 -> COMMA normalParameterDecl
Rule 362   expr_59 -> expr_59 COMMA normalParameterDecl
Rule 363   expr_59 -> empty
Rule 364   expr_60 -> normalParameterDecl COMMA
Rule 365   expr_60 -> expr_60 normalParameterDecl COMMA
Rule 366   expr_61 -> FLPAREN FRPAREN
Rule 367   expr_61 -> expr_61 FLPAREN FRPAREN
Rule 368   expr_61 -> empty
Rule 369   expr_62 -> nonWildcardTypeArguments
Rule 370   expr_62 -> empty
Rule 371   expr_63 -> THIS
Rule 372   expr_63 -> SUPER
Rule 373   expr_64 -> nonWildcardTypeArguments
Rule 374   expr_64 -> empty
Rule 375   expr_65 -> DOT IDENTIFIER
Rule 376   expr_65 -> expr_65 DOT IDENTIFIER
Rule 377   expr_65 -> empty
Rule 378   expr_66 -> annotation
Rule 379   expr_66 -> expr_66 annotation
Rule 380   expr_67 -> elementValuePairs
Rule 381   expr_67 -> elementValue
Rule 382   expr_68 -> LPAREN expr_67 RPAREN
Rule 383   expr_68 -> empty
Rule 384   expr_69 -> COMMA elementValuePair
Rule 385   expr_69 -> expr_69 COMMA elementValuePair
Rule 386   expr_69 -> empty
Rule 387   expr_70 -> COMMA elementValue
Rule 388   expr_70 -> expr_70 COMMA elementValue
Rule 389   expr_70 -> empty
Rule 390   expr_71 -> elementValue expr_70
Rule 391   expr_71 -> empty
Rule 392   expr_72 -> COMMA
Rule 393   expr_72 -> empty
Rule 394   expr_73 -> annotationTypeElementDeclaration
Rule 395   expr_73 -> expr_73 annotationTypeElementDeclaration
Rule 396   expr_73 -> empty
Rule 397   expr_74 -> DEFAULT elementValue
Rule 398   expr_74 -> empty
Rule 399   expr_75 -> blockStatement
Rule 400   expr_75 -> expr_75 blockStatement
Rule 401   expr_75 -> empty
Rule 402   expr_76 -> COMMA variableDeclarator
Rule 403   expr_76 -> expr_76 COMMA variableDeclarator
Rule 404   expr_76 -> empty
Rule 405   expr_77 -> ASSERT
Rule 406   expr_78 -> COLON expression
Rule 407   expr_78 -> empty
Rule 408   expr_79 -> COLON expression
Rule 409   expr_79 -> empty
Rule 410   expr_80 -> ELSE statement
Rule 411   expr_80 -> empty
Rule 412   expr_81 -> expression
Rule 413   expr_81 -> empty
Rule 414   expr_82 -> IDENTIFIER
Rule 415   expr_82 -> empty
Rule 416   expr_83 -> IDENTIFIER
Rule 417   expr_83 -> empty
Rule 418   expr_84 -> switchBlockStatementGroup
Rule 419   expr_84 -> expr_84 switchBlockStatementGroup
Rule 420   expr_84 -> empty
Rule 421   expr_85 -> blockStatement
Rule 422   expr_85 -> expr_85 blockStatement
Rule 423   expr_85 -> empty
Rule 424   expr_86 -> catches FINALLY block
Rule 425   expr_86 -> catches
Rule 426   expr_86 -> FINALLY block
Rule 427   expr_87 -> catchClause
Rule 428   expr_87 -> expr_87 catchClause
Rule 429   expr_87 -> empty
Rule 430   expr_88 -> FLPAREN FRPAREN
Rule 431   expr_88 -> expr_88 FLPAREN FRPAREN
Rule 432   expr_88 -> empty
Rule 433   expr_89 -> forInit
Rule 434   expr_89 -> empty
Rule 435   expr_90 -> expression
Rule 436   expr_90 -> empty
Rule 437   expr_91 -> expressionList
Rule 438   expr_91 -> empty
Rule 439   expr_92 -> COMMA expression
Rule 440   expr_92 -> expr_92 COMMA expression
Rule 441   expr_92 -> empty
Rule 442   expr_93 -> assignmentOperator expression
Rule 443   expr_93 -> empty
Rule 444   expr_94 -> QUES expression COLON conditionalExpression
Rule 445   expr_94 -> empty
Rule 446   expr_95 -> OP_LOR conditionalAndExpression
Rule 447   expr_95 -> expr_95 OP_LOR conditionalAndExpression
Rule 448   expr_95 -> empty
Rule 449   expr_96 -> OP_LAND inclusiveOrExpression
Rule 450   expr_96 -> expr_96 OP_LAND inclusiveOrExpression
Rule 451   expr_96 -> empty
Rule 452   expr_97 -> VERTICAL exclusiveOrExpression
Rule 453   expr_97 -> expr_97 VERTICAL exclusiveOrExpression
Rule 454   expr_97 -> empty
Rule 455   expr_98 -> CARET andExpression
Rule 456   expr_98 -> expr_98 CARET andExpression
Rule 457   expr_98 -> empty
Rule 458   expr_99 -> AND equalityExpression
Rule 459   expr_99 -> expr_99 AND equalityExpression
Rule 460   expr_99 -> empty
Rule 461   expr_100 -> OP_EQ
Rule 462   expr_100 -> OP_NE
Rule 463   expr_101 -> expr_100 instanceOfExpression
Rule 464   expr_101 -> expr_101 expr_100 instanceOfExpression
Rule 465   expr_101 -> empty
Rule 466   expr_102 -> INSTANCEOF type
Rule 467   expr_102 -> empty
Rule 468   expr_103 -> relationalOp shiftExpression
Rule 469   expr_103 -> expr_103 relationalOp shiftExpression
Rule 470   expr_103 -> empty
Rule 471   expr_104 -> shiftOp additiveExpression
Rule 472   expr_104 -> expr_104 shiftOp additiveExpression
Rule 473   expr_104 -> empty
Rule 474   expr_105 -> PLUS
Rule 475   expr_105 -> DASH
Rule 476   expr_106 -> expr_105 multiplicativeExpression
Rule 477   expr_106 -> expr_106 expr_105 multiplicativeExpression
Rule 478   expr_106 -> empty
Rule 479   expr_107 -> MULT
Rule 480   expr_107 -> SLASH
Rule 481   expr_107 -> PERCENT
Rule 482   expr_108 -> expr_107 unaryExpression
Rule 483   expr_108 -> expr_108 expr_107 unaryExpression
Rule 484   expr_108 -> empty
Rule 485   expr_109 -> selector
Rule 486   expr_109 -> expr_109 selector
Rule 487   expr_109 -> empty
Rule 488   expr_110 -> OP_INC
Rule 489   expr_110 -> OP_DEC
Rule 490   expr_111 -> DOT IDENTIFIER
Rule 491   expr_111 -> expr_111 DOT IDENTIFIER
Rule 492   expr_111 -> empty
Rule 493   expr_112 -> identifierSuffix
Rule 494   expr_112 -> empty
Rule 495   expr_113 -> DOT IDENTIFIER
Rule 496   expr_113 -> expr_113 DOT IDENTIFIER
Rule 497   expr_113 -> empty
Rule 498   expr_114 -> identifierSuffix
Rule 499   expr_114 -> empty
Rule 500   expr_115 -> FLPAREN FRPAREN
Rule 501   expr_115 -> expr_115 FLPAREN FRPAREN
Rule 502   expr_115 -> empty
Rule 503   expr_116 -> typeArguments
Rule 504   expr_116 -> empty
Rule 505   expr_117 -> arguments
Rule 506   expr_117 -> empty
Rule 507   expr_118 -> FLPAREN FRPAREN
Rule 508   expr_118 -> expr_118 FLPAREN FRPAREN
Rule 509   expr_119 -> FLPAREN expression FRPAREN
Rule 510   expr_119 -> expr_119 FLPAREN expression FRPAREN
Rule 511   expr_120 -> arguments
Rule 512   expr_120 -> empty
Rule 513   expr_121 -> FLPAREN FRPAREN
Rule 514   expr_121 -> expr_121 FLPAREN FRPAREN
Rule 515   expr_121 -> empty
Rule 516   expr_122 -> FLPAREN expression FRPAREN
Rule 517   expr_122 -> expr_122 FLPAREN expression FRPAREN
Rule 518   expr_122 -> empty
Rule 519   expr_123 -> FLPAREN FRPAREN
Rule 520   expr_123 -> expr_123 FLPAREN FRPAREN
Rule 521   expr_123 -> empty
Rule 522   expr_124 -> COMMA variableInitializer
Rule 523   expr_124 -> expr_124 COMMA variableInitializer
Rule 524   expr_124 -> empty
Rule 525   expr_125 -> variableInitializer expr_124
Rule 526   expr_125 -> empty
Rule 527   expr_126 -> COMMA
Rule 528   expr_126 -> empty
Rule 529   expr_127 -> nonWildcardTypeArguments
Rule 530   expr_127 -> empty
Rule 531   expr_128 -> typeArguments
Rule 532   expr_128 -> empty
Rule 533   expr_129 -> classBody
Rule 534   expr_129 -> empty
Rule 535   expr_130 -> expressionList
Rule 536   expr_130 -> empty
Rule 537   INTLITERAL -> NUMBER
Rule 538   INTLITERAL -> HEX_NUMBER
Rule 539   LONGLITERAL -> LONG_NUMBER
Rule 540   LONGLITERAL -> LONG_HEX_NUMBER
Rule 541   FLOATLITERAL -> NON_INTEGER_1
Rule 542   FLOATLITERAL -> NON_INTEGER_2
Rule 543   FLOATLITERAL -> NON_INTEGER_3
Rule 544   DOUBLELITERAL -> NON_INTEGER_1
Rule 545   DOUBLELITERAL -> NON_INTEGER_2
Rule 546   DOUBLELITERAL -> NON_INTEGER_3
Rule 547   empty -> <empty>

Terminals, with rules where they appear

ABSTRACT             : 237
AND                  : 257 258 458 459
ASSERT               : 96 405
ASS_ADD              : 127
ASS_AND              : 131
ASS_DIV              : 130
ASS_MOD              : 134
ASS_MUL              : 129
ASS_OR               : 132
ASS_SHL              : 
ASS_SHR              : 
ASS_SHRR             : 
ASS_SUB              : 128
ASS_XOR              : 133
AT                   : 71 78
BLPAREN              : 18 26 27 35 77 79 88 102 198
BOOLEAN              : 49
BREAK                : 106
BRPAREN              : 18 26 27 35 77 79 88 102 198
BYTE                 : 51
CARET                : 455 456
CASE                 : 113
CAST                 : 
CATCH                : 117
CHAR                 : 50
CHARLITERAL          : 209
CLASS                : 13 174 175 178 181
COLON                : 109 113 114 119 406 408 444
COMMA                : 252 253 265 269 270 285 286 316 317 333 334 349 350 356 357 361 362 364 365 384 385 387 388 392 402 403 439 440 522 523 527
CONST                : 
CONTINUE             : 107
DASH                 : 158 475
DEFAULT              : 114 397
DO                   : 100
DOT                  : 3 68 174 175 177 178 181 182 183 184 186 187 188 201 228 229 230 346 347 375 376 490 491 495 496
DOUBLE               : 56
ELSE                 : 410
ENUM                 : 260
EQUALS               : 73 126 135 136 137 147 148 322
EXCLAMATION          : 163
EXTENDS              : 248 255 283 352
FALSE                : 212
FINAL                : 238 244
FINALLY              : 424 426
FLOAT                : 55
FLPAREN              : 190 194 195 309 310 319 320 328 329 336 337 339 340 366 367 430 431 500 501 507 508 509 510 513 514 516 517 519 520
FOR                  : 119 120
FRPAREN              : 190 194 195 309 310 319 320 328 329 336 337 339 340 366 367 430 431 500 501 507 508 509 510 513 514 516 517 519 520
FUTURE               : 
GENERIC              : 
GOTO                 : 
HEX_NUMBER           : 538
IDENTIFIER           : 3 4 13 15 17 20 24 35 36 38 44 48 65 66 69 73 78 87 109 118 119 170 177 182 186 201 228 229 346 347 375 376 414 416 490 491 495 496
IF                   : 97
IMPLEMENTS           : 250 261
IMPORT               : 3 4
INNER                : 
INSTANCEOF           : 466
INT                  : 53
INTERFACE            : 24 78
LCOMMENT             : 
LESS                 : 14 57 135 135 147 149 152 152 203
LONG                 : 54
LONG_HEX_NUMBER      : 540
LONG_NUMBER          : 539
LPAREN               : 61 87 117 119 120 123 166 167 204 382
MCOMMENT             : 
MORE                 : 14 57 136 136 136 137 137 148 150 153 153 153 154 154 203
MULT                 : 3 230 479
NATIVE               : 239
NEW                  : 191 192 194 195 201
NEWLINE              : 
NON_INTEGER_1        : 541 544
NON_INTEGER_2        : 542 545
NON_INTEGER_3        : 543 546
NULL                 : 213
NUMBER               : 537
OPERATOR             : 
OP_ARRAY             : 66
OP_DEC               : 160 489
OP_EQ                : 461
OP_GE                : 
OP_INC               : 159 488
OP_LAND              : 449 450
OP_LE                : 
OP_LOR               : 446 447
OP_NE                : 462
OP_SHL               : 
OP_SHR               : 
OP_SHRR              : 
OUTER                : 
PACKAGE              : 2
PERCENT              : 481
PLUS                 : 157 474
PRIVATE              : 235
PROTECTED            : 234
PUBLIC               : 233
QUES                 : 59 444
REST                 : 
RETURN               : 104
RPAREN               : 61 87 117 119 120 123 166 167 204 382
SEMI                 : 2 3 4 6 21 28 37 43 44 45 67 68 86 87 92 95 96 100 104 105 106 107 108 110 120 120 315
SHORT                : 52
SLASH                : 480
STATIC               : 224 226 236 294
STRICTFP             : 243
STRINGLITERAL        : 210
SUPER                : 68 171 184 188 353 372
SWITCH               : 102
SYNCHRONIZED         : 103 240
THIS                 : 169 183 187 371
THROW                : 105
THROWS               : 298 312 331
TILDE                : 162
TRANSIENT            : 241
TRUE                 : 211
TRY                  : 115
VAR                  : 
VERTICAL             : 452 453
VOID                 : 175 308 327
VOLATILE             : 242
WHILE                : 99 100
error                : 

Nonterminals, with rules where they appear

DOUBLELITERAL        : 208
FLOATLITERAL         : 207
INTLITERAL           : 205
LONGLITERAL          : 206
additiveExpression   : 151 471 472
andExpression        : 142 455 456
annotation           : 75 232 245 378 379
annotationMethodDeclaration : 80
annotationTypeBody   : 78
annotationTypeDeclaration : 23 85
annotationTypeElementDeclaration : 394 395
annotations          : 214 272
arguments            : 67 68 176 180 182 184 202 274 505 511
arrayCreator         : 193
arrayInitializer     : 194 196
assignmentOperator   : 442
block                : 29 94 103 115 117 314 424 426
blockStatement       : 302 303 399 400 421 422
castExpression       : 164
catchClause          : 116 427 428
catches              : 424 425
classBody            : 13 276 533
classBodyDeclaration : 278 279 288 289
classCreatorRest     : 191 192 201
classDeclaration     : 7 33 42
classOrInterfaceDeclaration : 5 90
classOrInterfaceType : 46 191 192 199
compilationUnit      : 0
conditionalAndExpression : 139 446 447
conditionalExpression : 74 125 444
conditionalOrExpression : 138
createdName          : 194 195
creator              : 173
elementValue         : 73 381 387 388 390 397
elementValueArrayInitializer : 76
elementValuePair     : 72 384 385
elementValuePairs    : 380
ellipsisParameterDecl : 62 64
empty                : 215 217 220 223 225 227 231 247 249 251 254 256 259 262 264 266 268 271 273 275 277 280 282 284 287 290 293 295 297 299 301 304 306 311 313 318 321 323 325 330 332 335 338 341 343 345 348 351 355 358 360 363 368 370 374 377 383 386 389 391 393 396 398 401 404 407 409 411 413 415 417 420 423 429 432 434 436 438 441 443 445 448 451 454 457 460 465 467 470 473 478 484 487 492 494 497 499 502 504 506 512 515 518 521 524 526 528 530 532 534 536
enumBody             : 17
enumBodyDeclarations : 267
enumConstant         : 19 269 270
enumConstants        : 263
enumDeclaration      : 12 84
equalityExpression   : 143 458 459
exclusiveOrExpression : 141 452 453
explicitConstructorInvocation : 300
expr_0               : 216
expr_1               : 1
expr_10              : 13
expr_100             : 463 464
expr_101             : 144 464
expr_102             : 145
expr_103             : 146 469
expr_104             : 151 472
expr_105             : 476 477
expr_106             : 155 477
expr_107             : 482 483
expr_108             : 156 483
expr_109             : 165 486
expr_11              : 13
expr_110             : 165
expr_111             : 169 491
expr_112             : 169
expr_113             : 170 496
expr_114             : 170
expr_115             : 174 501
expr_116             : 177
expr_117             : 177
expr_118             : 178 508
expr_119             : 179 510
expr_12              : 13
expr_120             : 186
expr_121             : 194 514
expr_122             : 195 517
expr_123             : 195 520
expr_124             : 523 525
expr_125             : 198
expr_126             : 198
expr_127             : 201
expr_128             : 201
expr_129             : 202
expr_13              : 14 253
expr_130             : 204
expr_14              : 15
expr_15              : 16 258
expr_16              : 17
expr_17              : 17
expr_18              : 18
expr_19              : 18
expr_2               : 1 219
expr_20              : 18
expr_21              : 19 270
expr_22              : 20
expr_23              : 20
expr_24              : 20
expr_25              : 21 279
expr_26              : 24
expr_27              : 24
expr_28              : 25 286
expr_29              : 26 289
expr_3               : 1 222
expr_30              : 27 292
expr_31              : 29
expr_32              : 35
expr_33              : 35
expr_34              : 35
expr_35              : 35 303
expr_36              : 36
expr_37              : 36
expr_38              : 36 310
expr_39              : 36
expr_4               : 3
expr_40              : 36
expr_41              : 37 317
expr_42              : 38 320
expr_43              : 38
expr_44              : 44
expr_45              : 44
expr_46              : 44 329
expr_47              : 44
expr_48              : 45 334
expr_49              : 46 337
expr_5               : 4
expr_50              : 47 340
expr_51              : 48
expr_52              : 346 347
expr_53              : 48 347
expr_54              : 57 350
expr_55              : 354
expr_56              : 59
expr_57              : 60 357
expr_58              : 61
expr_59              : 63 362
expr_6               : 4 229
expr_60              : 64 365
expr_61              : 65 367
expr_62              : 67
expr_63              : 67
expr_64              : 68
expr_65              : 69 376
expr_66              : 70 379
expr_67              : 382
expr_68              : 71
expr_69              : 72 385
expr_7               : 4
expr_70              : 388 390
expr_71              : 77
expr_72              : 77
expr_73              : 79 395
expr_74              : 87
expr_75              : 88 400
expr_76              : 93 403
expr_77              : 95
expr_78              : 95
expr_79              : 96
expr_8               : 9
expr_80              : 97
expr_81              : 104
expr_82              : 106
expr_83              : 107
expr_84              : 111 419
expr_85              : 112 422
expr_86              : 115
expr_87              : 116 428
expr_88              : 118 431
expr_89              : 120
expr_9               : 10
expr_90              : 120
expr_91              : 120
expr_92              : 124 440
expr_93              : 125
expr_94              : 138
expr_95              : 139 447
expr_96              : 140 450
expr_97              : 141 453
expr_98              : 142 456
expr_99              : 143 459
expression           : 95 96 105 108 113 119 123 124 190 195 197 406 408 412 435 439 440 442 444 509 510 516 517
expressionList       : 122 437 535
fieldDeclaration     : 31
forInit              : 433
formalParameter      : 117
formalParameterDecls : 359
formalParameters     : 35 36 44
forstatement         : 98
identifierSuffix     : 493 498
importDeclaration    : 218 219
inclusiveOrExpression : 140 449 450
innerCreator         : 185 189
instanceOfExpression : 144 463 464
interfaceBody        : 24
interfaceBodyDeclaration : 291 292
interfaceDeclaration : 8 34 41
interfaceFieldDeclaration : 39 81
interfaceMethodDeclaration : 40
literal              : 172
localVariableDeclaration : 92 121
localVariableDeclarationStatement : 89
memberDecl           : 30
methodDeclaration    : 32
modifiers            : 13 17 24 35 36 37 44 45 78 87
multiplicativeExpression : 155 476 477
nonWildcardTypeArguments : 182 191 369 373 529
normalClassDeclaration : 11 82
normalInterfaceDeclaration : 22 83
normalParameterDecl  : 63 361 362 364 365
packageDeclaration   : 216
parExpression        : 97 99 100 102 103 168
primary              : 68 165
primitiveType        : 47 166 174 200
qualifiedName        : 2 60 71 356 357
qualifiedNameList    : 298 312 331
relationalExpression : 145
relationalOp         : 468 469
selector             : 485 486
shiftExpression      : 146 468 469
shiftOp              : 471 472
statement            : 91 97 99 100 109 119 120 410
superSuffix          : 171 188
switchBlockStatementGroup : 418 419
switchBlockStatementGroups : 102
switchLabel          : 112
trystatement         : 101
type                 : 16 25 37 45 58 65 66 87 93 118 119 167 248 257 258 285 286 307 326 354 466
typeArgument         : 57 349 350
typeArguments        : 342 344 503 531
typeBound            : 255
typeDeclaration      : 221 222
typeList             : 203 250 261 283
typeParameter        : 14 252 253
typeParameters       : 246 281 296 305 324
unaryExpression      : 156 157 158 159 160 162 163 166 482 483
unaryExpressionNotPlusMinus : 161 167
variableDeclarator   : 37 45 93 316 317 333 334 402 403
variableInitializer  : 322 522 523 525
variableModifiers    : 65 66 93 118 119


Parsing method: LALR


state 0

    (0) S' -> . compilationUnit
    (1) compilationUnit -> . expr_1 expr_2 expr_3
    (216) expr_1 -> . expr_0 packageDeclaration
    (217) expr_1 -> . empty
    (214) expr_0 -> . annotations
    (215) expr_0 -> . empty
    (547) empty -> .
    (70) annotations -> . expr_66
    (378) expr_66 -> . annotation
    (379) expr_66 -> . expr_66 annotation
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for AT resolved as shift.
    IMPORT          reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    PUBLIC          reduce using rule 547 (empty -> .)
    PROTECTED       reduce using rule 547 (empty -> .)
    PRIVATE         reduce using rule 547 (empty -> .)
    STATIC          reduce using rule 547 (empty -> .)
    ABSTRACT        reduce using rule 547 (empty -> .)
    FINAL           reduce using rule 547 (empty -> .)
    NATIVE          reduce using rule 547 (empty -> .)
    SYNCHRONIZED    reduce using rule 547 (empty -> .)
    TRANSIENT       reduce using rule 547 (empty -> .)
    VOLATILE        reduce using rule 547 (empty -> .)
    STRICTFP        reduce using rule 547 (empty -> .)
    $end            reduce using rule 547 (empty -> .)
    PACKAGE         reduce using rule 547 (empty -> .)
    AT              shift and go to state 4

  ! AT              [ reduce using rule 547 (empty -> .) ]

    compilationUnit                shift and go to state 1
    expr_66                        shift and go to state 2
    annotations                    shift and go to state 3
    empty                          shift and go to state 5
    annotation                     shift and go to state 6
    expr_0                         shift and go to state 7
    expr_1                         shift and go to state 8

state 1

    (0) S' -> compilationUnit .




state 2

    (70) annotations -> expr_66 .
    (379) expr_66 -> expr_66 . annotation
    (71) annotation -> . AT qualifiedName expr_68

    IDENTIFIER      reduce using rule 70 (annotations -> expr_66 .)
    PACKAGE         reduce using rule 70 (annotations -> expr_66 .)
    AT              shift and go to state 4


    annotation                     shift and go to state 9

state 3

    (214) expr_0 -> annotations .

    PACKAGE         reduce using rule 214 (expr_0 -> annotations .)



state 4

    (71) annotation -> AT . qualifiedName expr_68
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedName                  shift and go to state 10

state 5

    (217) expr_1 -> empty .
    (215) expr_0 -> empty .

    IMPORT          reduce using rule 217 (expr_1 -> empty .)
    SEMI            reduce using rule 217 (expr_1 -> empty .)
    PUBLIC          reduce using rule 217 (expr_1 -> empty .)
    PROTECTED       reduce using rule 217 (expr_1 -> empty .)
    PRIVATE         reduce using rule 217 (expr_1 -> empty .)
    STATIC          reduce using rule 217 (expr_1 -> empty .)
    ABSTRACT        reduce using rule 217 (expr_1 -> empty .)
    FINAL           reduce using rule 217 (expr_1 -> empty .)
    NATIVE          reduce using rule 217 (expr_1 -> empty .)
    SYNCHRONIZED    reduce using rule 217 (expr_1 -> empty .)
    TRANSIENT       reduce using rule 217 (expr_1 -> empty .)
    VOLATILE        reduce using rule 217 (expr_1 -> empty .)
    STRICTFP        reduce using rule 217 (expr_1 -> empty .)
    AT              reduce using rule 217 (expr_1 -> empty .)
    $end            reduce using rule 217 (expr_1 -> empty .)
    PACKAGE         reduce using rule 215 (expr_0 -> empty .)



state 6

    (378) expr_66 -> annotation .

    AT              reduce using rule 378 (expr_66 -> annotation .)
    IDENTIFIER      reduce using rule 378 (expr_66 -> annotation .)
    PACKAGE         reduce using rule 378 (expr_66 -> annotation .)



state 7

    (216) expr_1 -> expr_0 . packageDeclaration
    (2) packageDeclaration -> . PACKAGE qualifiedName SEMI

    PACKAGE         shift and go to state 13


    packageDeclaration             shift and go to state 12

state 8

    (1) compilationUnit -> expr_1 . expr_2 expr_3
    (218) expr_2 -> . importDeclaration
    (219) expr_2 -> . expr_2 importDeclaration
    (220) expr_2 -> . empty
    (3) importDeclaration -> . IMPORT expr_4 IDENTIFIER DOT MULT SEMI
    (4) importDeclaration -> . IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI
    (547) empty -> .

  ! shift/reduce conflict for IMPORT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            reduce using rule 547 (empty -> .)
    PUBLIC          reduce using rule 547 (empty -> .)
    PROTECTED       reduce using rule 547 (empty -> .)
    PRIVATE         reduce using rule 547 (empty -> .)
    STATIC          reduce using rule 547 (empty -> .)
    ABSTRACT        reduce using rule 547 (empty -> .)
    FINAL           reduce using rule 547 (empty -> .)
    NATIVE          reduce using rule 547 (empty -> .)
    SYNCHRONIZED    reduce using rule 547 (empty -> .)
    TRANSIENT       reduce using rule 547 (empty -> .)
    VOLATILE        reduce using rule 547 (empty -> .)
    STRICTFP        reduce using rule 547 (empty -> .)
    AT              reduce using rule 547 (empty -> .)
    $end            reduce using rule 547 (empty -> .)

  ! IMPORT          [ reduce using rule 547 (empty -> .) ]

    importDeclaration              shift and go to state 14
    expr_2                         shift and go to state 16
    empty                          shift and go to state 17

state 9

    (379) expr_66 -> expr_66 annotation .

    AT              reduce using rule 379 (expr_66 -> expr_66 annotation .)
    IDENTIFIER      reduce using rule 379 (expr_66 -> expr_66 annotation .)
    PACKAGE         reduce using rule 379 (expr_66 -> expr_66 annotation .)



state 10

    (71) annotation -> AT qualifiedName . expr_68
    (382) expr_68 -> . LPAREN expr_67 RPAREN
    (383) expr_68 -> . empty
    (547) empty -> .

    LPAREN          shift and go to state 19
    AT              reduce using rule 547 (empty -> .)
    PACKAGE         reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    CLASS           reduce using rule 547 (empty -> .)
    INTERFACE       reduce using rule 547 (empty -> .)
    ENUM            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    BOOLEAN         reduce using rule 547 (empty -> .)
    CHAR            reduce using rule 547 (empty -> .)
    BYTE            reduce using rule 547 (empty -> .)
    SHORT           reduce using rule 547 (empty -> .)
    INT             reduce using rule 547 (empty -> .)
    LONG            reduce using rule 547 (empty -> .)
    FLOAT           reduce using rule 547 (empty -> .)
    DOUBLE          reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    VOID            reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)


    empty                          shift and go to state 20
    expr_68                        shift and go to state 18

state 11

    (69) qualifiedName -> IDENTIFIER . expr_65
    (375) expr_65 -> . DOT IDENTIFIER
    (376) expr_65 -> . expr_65 DOT IDENTIFIER
    (377) expr_65 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 23
    LPAREN          reduce using rule 547 (empty -> .)
    AT              reduce using rule 547 (empty -> .)
    PACKAGE         reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    CLASS           reduce using rule 547 (empty -> .)
    INTERFACE       reduce using rule 547 (empty -> .)
    ENUM            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    BOOLEAN         reduce using rule 547 (empty -> .)
    CHAR            reduce using rule 547 (empty -> .)
    BYTE            reduce using rule 547 (empty -> .)
    SHORT           reduce using rule 547 (empty -> .)
    INT             reduce using rule 547 (empty -> .)
    LONG            reduce using rule 547 (empty -> .)
    FLOAT           reduce using rule 547 (empty -> .)
    DOUBLE          reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    VOID            reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    expr_65                        shift and go to state 21
    empty                          shift and go to state 22

state 12

    (216) expr_1 -> expr_0 packageDeclaration .

    IMPORT          reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    SEMI            reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    PUBLIC          reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    PROTECTED       reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    PRIVATE         reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    STATIC          reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    ABSTRACT        reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    FINAL           reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    NATIVE          reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    SYNCHRONIZED    reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    TRANSIENT       reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    VOLATILE        reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    STRICTFP        reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    AT              reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)
    $end            reduce using rule 216 (expr_1 -> expr_0 packageDeclaration .)



state 13

    (2) packageDeclaration -> PACKAGE . qualifiedName SEMI
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedName                  shift and go to state 24

state 14

    (218) expr_2 -> importDeclaration .

    IMPORT          reduce using rule 218 (expr_2 -> importDeclaration .)
    SEMI            reduce using rule 218 (expr_2 -> importDeclaration .)
    PUBLIC          reduce using rule 218 (expr_2 -> importDeclaration .)
    PROTECTED       reduce using rule 218 (expr_2 -> importDeclaration .)
    PRIVATE         reduce using rule 218 (expr_2 -> importDeclaration .)
    STATIC          reduce using rule 218 (expr_2 -> importDeclaration .)
    ABSTRACT        reduce using rule 218 (expr_2 -> importDeclaration .)
    FINAL           reduce using rule 218 (expr_2 -> importDeclaration .)
    NATIVE          reduce using rule 218 (expr_2 -> importDeclaration .)
    SYNCHRONIZED    reduce using rule 218 (expr_2 -> importDeclaration .)
    TRANSIENT       reduce using rule 218 (expr_2 -> importDeclaration .)
    VOLATILE        reduce using rule 218 (expr_2 -> importDeclaration .)
    STRICTFP        reduce using rule 218 (expr_2 -> importDeclaration .)
    AT              reduce using rule 218 (expr_2 -> importDeclaration .)
    $end            reduce using rule 218 (expr_2 -> importDeclaration .)



state 15

    (3) importDeclaration -> IMPORT . expr_4 IDENTIFIER DOT MULT SEMI
    (4) importDeclaration -> IMPORT . expr_5 IDENTIFIER expr_6 expr_7 SEMI
    (224) expr_4 -> . STATIC
    (225) expr_4 -> . empty
    (226) expr_5 -> . STATIC
    (227) expr_5 -> . empty
    (547) empty -> .

    STATIC          shift and go to state 27
    IDENTIFIER      reduce using rule 547 (empty -> .)


    expr_4                         shift and go to state 28
    expr_5                         shift and go to state 25
    empty                          shift and go to state 26

state 16

    (1) compilationUnit -> expr_1 expr_2 . expr_3
    (219) expr_2 -> expr_2 . importDeclaration
    (221) expr_3 -> . typeDeclaration
    (222) expr_3 -> . expr_3 typeDeclaration
    (223) expr_3 -> . empty
    (3) importDeclaration -> . IMPORT expr_4 IDENTIFIER DOT MULT SEMI
    (4) importDeclaration -> . IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (547) empty -> .
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (9) modifiers -> . expr_8
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    IMPORT          shift and go to state 15
    SEMI            shift and go to state 36
    $end            reduce using rule 547 (empty -> .)
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4

  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]

    importDeclaration              shift and go to state 30
    normalInterfaceDeclaration     shift and go to state 34
    normalClassDeclaration         shift and go to state 37
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    expr_3                         shift and go to state 43
    empty                          shift and go to state 44
    enumDeclaration                shift and go to state 45
    classOrInterfaceDeclaration    shift and go to state 46
    classDeclaration               shift and go to state 49
    modifiers                      shift and go to state 48
    typeDeclaration                shift and go to state 50
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52

state 17

    (220) expr_2 -> empty .

    IMPORT          reduce using rule 220 (expr_2 -> empty .)
    SEMI            reduce using rule 220 (expr_2 -> empty .)
    PUBLIC          reduce using rule 220 (expr_2 -> empty .)
    PROTECTED       reduce using rule 220 (expr_2 -> empty .)
    PRIVATE         reduce using rule 220 (expr_2 -> empty .)
    STATIC          reduce using rule 220 (expr_2 -> empty .)
    ABSTRACT        reduce using rule 220 (expr_2 -> empty .)
    FINAL           reduce using rule 220 (expr_2 -> empty .)
    NATIVE          reduce using rule 220 (expr_2 -> empty .)
    SYNCHRONIZED    reduce using rule 220 (expr_2 -> empty .)
    TRANSIENT       reduce using rule 220 (expr_2 -> empty .)
    VOLATILE        reduce using rule 220 (expr_2 -> empty .)
    STRICTFP        reduce using rule 220 (expr_2 -> empty .)
    AT              reduce using rule 220 (expr_2 -> empty .)
    $end            reduce using rule 220 (expr_2 -> empty .)



state 18

    (71) annotation -> AT qualifiedName expr_68 .

    AT              reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    IDENTIFIER      reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    INTERFACE       reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    CLASS           reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    ENUM            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    BOOLEAN         reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    CHAR            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    BYTE            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    SHORT           reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    INT             reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    LONG            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    FLOAT           reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    DOUBLE          reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    LESS            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    VOID            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    COMMA           reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    BRPAREN         reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    RPAREN          reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    PACKAGE         reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)
    SEMI            reduce using rule 71 (annotation -> AT qualifiedName expr_68 .)



state 19

    (382) expr_68 -> LPAREN . expr_67 RPAREN
    (380) expr_67 -> . elementValuePairs
    (381) expr_67 -> . elementValue
    (72) elementValuePairs -> . elementValuePair expr_69
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (73) elementValuePair -> . IDENTIFIER EQUALS elementValue
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    IDENTIFIER      shift and go to state 91
    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    expr_67                        shift and go to state 72
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    elementValuePair               shift and go to state 63
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    elementValuePairs              shift and go to state 111
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 118

state 20

    (383) expr_68 -> empty .

    AT              reduce using rule 383 (expr_68 -> empty .)
    PACKAGE         reduce using rule 383 (expr_68 -> empty .)
    IDENTIFIER      reduce using rule 383 (expr_68 -> empty .)
    CLASS           reduce using rule 383 (expr_68 -> empty .)
    INTERFACE       reduce using rule 383 (expr_68 -> empty .)
    ENUM            reduce using rule 383 (expr_68 -> empty .)
    RPAREN          reduce using rule 383 (expr_68 -> empty .)
    COMMA           reduce using rule 383 (expr_68 -> empty .)
    BRPAREN         reduce using rule 383 (expr_68 -> empty .)
    BOOLEAN         reduce using rule 383 (expr_68 -> empty .)
    CHAR            reduce using rule 383 (expr_68 -> empty .)
    BYTE            reduce using rule 383 (expr_68 -> empty .)
    SHORT           reduce using rule 383 (expr_68 -> empty .)
    INT             reduce using rule 383 (expr_68 -> empty .)
    LONG            reduce using rule 383 (expr_68 -> empty .)
    FLOAT           reduce using rule 383 (expr_68 -> empty .)
    DOUBLE          reduce using rule 383 (expr_68 -> empty .)
    LESS            reduce using rule 383 (expr_68 -> empty .)
    VOID            reduce using rule 383 (expr_68 -> empty .)
    SEMI            reduce using rule 383 (expr_68 -> empty .)



state 21

    (69) qualifiedName -> IDENTIFIER expr_65 .
    (376) expr_65 -> expr_65 . DOT IDENTIFIER

    COMMA           reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    SEMI            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    BLPAREN         reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    LPAREN          reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    AT              reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    PACKAGE         reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    IDENTIFIER      reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    CLASS           reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    INTERFACE       reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    ENUM            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    RPAREN          reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    BRPAREN         reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    BOOLEAN         reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    CHAR            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    BYTE            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    SHORT           reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    INT             reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    LONG            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    FLOAT           reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    DOUBLE          reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    LESS            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    VOID            reduce using rule 69 (qualifiedName -> IDENTIFIER expr_65 .)
    DOT             shift and go to state 119



state 22

    (377) expr_65 -> empty .

    DOT             reduce using rule 377 (expr_65 -> empty .)
    LPAREN          reduce using rule 377 (expr_65 -> empty .)
    AT              reduce using rule 377 (expr_65 -> empty .)
    PACKAGE         reduce using rule 377 (expr_65 -> empty .)
    IDENTIFIER      reduce using rule 377 (expr_65 -> empty .)
    CLASS           reduce using rule 377 (expr_65 -> empty .)
    INTERFACE       reduce using rule 377 (expr_65 -> empty .)
    ENUM            reduce using rule 377 (expr_65 -> empty .)
    RPAREN          reduce using rule 377 (expr_65 -> empty .)
    COMMA           reduce using rule 377 (expr_65 -> empty .)
    BRPAREN         reduce using rule 377 (expr_65 -> empty .)
    BOOLEAN         reduce using rule 377 (expr_65 -> empty .)
    CHAR            reduce using rule 377 (expr_65 -> empty .)
    BYTE            reduce using rule 377 (expr_65 -> empty .)
    SHORT           reduce using rule 377 (expr_65 -> empty .)
    INT             reduce using rule 377 (expr_65 -> empty .)
    LONG            reduce using rule 377 (expr_65 -> empty .)
    FLOAT           reduce using rule 377 (expr_65 -> empty .)
    DOUBLE          reduce using rule 377 (expr_65 -> empty .)
    LESS            reduce using rule 377 (expr_65 -> empty .)
    VOID            reduce using rule 377 (expr_65 -> empty .)
    SEMI            reduce using rule 377 (expr_65 -> empty .)
    BLPAREN         reduce using rule 377 (expr_65 -> empty .)



state 23

    (375) expr_65 -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 120



state 24

    (2) packageDeclaration -> PACKAGE qualifiedName . SEMI

    SEMI            shift and go to state 121



state 25

    (4) importDeclaration -> IMPORT expr_5 . IDENTIFIER expr_6 expr_7 SEMI

    IDENTIFIER      shift and go to state 122



state 26

    (225) expr_4 -> empty .
    (227) expr_5 -> empty .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 225 (expr_4 -> empty .).
    IDENTIFIER      reduce using rule 225 (expr_4 -> empty .)

  ! IDENTIFIER      [ reduce using rule 227 (expr_5 -> empty .) ]


state 27

    (224) expr_4 -> STATIC .
    (226) expr_5 -> STATIC .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 224 (expr_4 -> STATIC .).
    IDENTIFIER      reduce using rule 224 (expr_4 -> STATIC .)

  ! IDENTIFIER      [ reduce using rule 226 (expr_5 -> STATIC .) ]


state 28

    (3) importDeclaration -> IMPORT expr_4 . IDENTIFIER DOT MULT SEMI

    IDENTIFIER      shift and go to state 123



state 29

    (240) expr_8 -> SYNCHRONIZED .

    CLASS           reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    AT              reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    ENUM            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    IDENTIFIER      reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    BOOLEAN         reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    CHAR            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    BYTE            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    SHORT           reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    INT             reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    LONG            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    FLOAT           reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    DOUBLE          reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    LESS            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    VOID            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)



state 30

    (219) expr_2 -> expr_2 importDeclaration .

    IMPORT          reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    SEMI            reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    PUBLIC          reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    PROTECTED       reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    PRIVATE         reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    STATIC          reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    ABSTRACT        reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    FINAL           reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    NATIVE          reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    SYNCHRONIZED    reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    TRANSIENT       reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    VOLATILE        reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    STRICTFP        reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    AT              reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)
    $end            reduce using rule 219 (expr_2 -> expr_2 importDeclaration .)



state 31

    (237) expr_8 -> ABSTRACT .

    CLASS           reduce using rule 237 (expr_8 -> ABSTRACT .)
    INTERFACE       reduce using rule 237 (expr_8 -> ABSTRACT .)
    AT              reduce using rule 237 (expr_8 -> ABSTRACT .)
    ENUM            reduce using rule 237 (expr_8 -> ABSTRACT .)
    IDENTIFIER      reduce using rule 237 (expr_8 -> ABSTRACT .)
    BOOLEAN         reduce using rule 237 (expr_8 -> ABSTRACT .)
    CHAR            reduce using rule 237 (expr_8 -> ABSTRACT .)
    BYTE            reduce using rule 237 (expr_8 -> ABSTRACT .)
    SHORT           reduce using rule 237 (expr_8 -> ABSTRACT .)
    INT             reduce using rule 237 (expr_8 -> ABSTRACT .)
    LONG            reduce using rule 237 (expr_8 -> ABSTRACT .)
    FLOAT           reduce using rule 237 (expr_8 -> ABSTRACT .)
    DOUBLE          reduce using rule 237 (expr_8 -> ABSTRACT .)
    LESS            reduce using rule 237 (expr_8 -> ABSTRACT .)
    VOID            reduce using rule 237 (expr_8 -> ABSTRACT .)



state 32

    (234) expr_8 -> PROTECTED .

    CLASS           reduce using rule 234 (expr_8 -> PROTECTED .)
    INTERFACE       reduce using rule 234 (expr_8 -> PROTECTED .)
    AT              reduce using rule 234 (expr_8 -> PROTECTED .)
    ENUM            reduce using rule 234 (expr_8 -> PROTECTED .)
    IDENTIFIER      reduce using rule 234 (expr_8 -> PROTECTED .)
    BOOLEAN         reduce using rule 234 (expr_8 -> PROTECTED .)
    CHAR            reduce using rule 234 (expr_8 -> PROTECTED .)
    BYTE            reduce using rule 234 (expr_8 -> PROTECTED .)
    SHORT           reduce using rule 234 (expr_8 -> PROTECTED .)
    INT             reduce using rule 234 (expr_8 -> PROTECTED .)
    LONG            reduce using rule 234 (expr_8 -> PROTECTED .)
    FLOAT           reduce using rule 234 (expr_8 -> PROTECTED .)
    DOUBLE          reduce using rule 234 (expr_8 -> PROTECTED .)
    LESS            reduce using rule 234 (expr_8 -> PROTECTED .)
    VOID            reduce using rule 234 (expr_8 -> PROTECTED .)



state 33

    (236) expr_8 -> STATIC .

    CLASS           reduce using rule 236 (expr_8 -> STATIC .)
    INTERFACE       reduce using rule 236 (expr_8 -> STATIC .)
    AT              reduce using rule 236 (expr_8 -> STATIC .)
    ENUM            reduce using rule 236 (expr_8 -> STATIC .)
    IDENTIFIER      reduce using rule 236 (expr_8 -> STATIC .)
    BOOLEAN         reduce using rule 236 (expr_8 -> STATIC .)
    CHAR            reduce using rule 236 (expr_8 -> STATIC .)
    BYTE            reduce using rule 236 (expr_8 -> STATIC .)
    SHORT           reduce using rule 236 (expr_8 -> STATIC .)
    INT             reduce using rule 236 (expr_8 -> STATIC .)
    LONG            reduce using rule 236 (expr_8 -> STATIC .)
    FLOAT           reduce using rule 236 (expr_8 -> STATIC .)
    DOUBLE          reduce using rule 236 (expr_8 -> STATIC .)
    LESS            reduce using rule 236 (expr_8 -> STATIC .)
    VOID            reduce using rule 236 (expr_8 -> STATIC .)



state 34

    (22) interfaceDeclaration -> normalInterfaceDeclaration .

    BRPAREN         reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ASSERT          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    IF              reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    WHILE           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DO              reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SWITCH          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    RETURN          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THROW           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BREAK           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CONTINUE        reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    IDENTIFIER      reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SEMI            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BLPAREN         reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FOR             reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRY             reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FINAL           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    AT              reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PUBLIC          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PROTECTED       reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PRIVATE         reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STATIC          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    ABSTRACT        reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NATIVE          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRANSIENT       reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOLATILE        reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STRICTFP        reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    PLUS            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DASH            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_INC          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    OP_DEC          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TILDE           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LPAREN          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    THIS            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SUPER           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    VOID            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CHARLITERAL     reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    STRINGLITERAL   reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    TRUE            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FALSE           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NULL            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NEW             reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BOOLEAN         reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CHAR            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    BYTE            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    SHORT           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    INT             reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    FLOAT           reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DOUBLE          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NUMBER          reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    CASE            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    DEFAULT         reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)
    $end            reduce using rule 22 (interfaceDeclaration -> normalInterfaceDeclaration .)



state 35

    (238) expr_8 -> FINAL .

    CLASS           reduce using rule 238 (expr_8 -> FINAL .)
    INTERFACE       reduce using rule 238 (expr_8 -> FINAL .)
    AT              reduce using rule 238 (expr_8 -> FINAL .)
    ENUM            reduce using rule 238 (expr_8 -> FINAL .)
    IDENTIFIER      reduce using rule 238 (expr_8 -> FINAL .)
    BOOLEAN         reduce using rule 238 (expr_8 -> FINAL .)
    CHAR            reduce using rule 238 (expr_8 -> FINAL .)
    BYTE            reduce using rule 238 (expr_8 -> FINAL .)
    SHORT           reduce using rule 238 (expr_8 -> FINAL .)
    INT             reduce using rule 238 (expr_8 -> FINAL .)
    LONG            reduce using rule 238 (expr_8 -> FINAL .)
    FLOAT           reduce using rule 238 (expr_8 -> FINAL .)
    DOUBLE          reduce using rule 238 (expr_8 -> FINAL .)
    LESS            reduce using rule 238 (expr_8 -> FINAL .)
    VOID            reduce using rule 238 (expr_8 -> FINAL .)



state 36

    (6) typeDeclaration -> SEMI .

    SEMI            reduce using rule 6 (typeDeclaration -> SEMI .)
    PUBLIC          reduce using rule 6 (typeDeclaration -> SEMI .)
    PROTECTED       reduce using rule 6 (typeDeclaration -> SEMI .)
    PRIVATE         reduce using rule 6 (typeDeclaration -> SEMI .)
    STATIC          reduce using rule 6 (typeDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 6 (typeDeclaration -> SEMI .)
    FINAL           reduce using rule 6 (typeDeclaration -> SEMI .)
    NATIVE          reduce using rule 6 (typeDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 6 (typeDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 6 (typeDeclaration -> SEMI .)
    VOLATILE        reduce using rule 6 (typeDeclaration -> SEMI .)
    STRICTFP        reduce using rule 6 (typeDeclaration -> SEMI .)
    AT              reduce using rule 6 (typeDeclaration -> SEMI .)
    $end            reduce using rule 6 (typeDeclaration -> SEMI .)



state 37

    (11) classDeclaration -> normalClassDeclaration .

    BRPAREN         reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    SEMI            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    STATIC          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    PUBLIC          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    PROTECTED       reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    PRIVATE         reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    ABSTRACT        reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    FINAL           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NATIVE          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    SYNCHRONIZED    reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    TRANSIENT       reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    VOLATILE        reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    STRICTFP        reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    AT              reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    BLPAREN         reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    $end            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    ASSERT          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    IF              reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    WHILE           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    DO              reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    SWITCH          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    RETURN          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    THROW           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    BREAK           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    CONTINUE        reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    IDENTIFIER      reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    FOR             reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    TRY             reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    PLUS            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    DASH            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    OP_INC          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    OP_DEC          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    TILDE           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    EXCLAMATION     reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    LPAREN          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    THIS            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    SUPER           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    VOID            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    CHARLITERAL     reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    STRINGLITERAL   reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    TRUE            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    FALSE           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NULL            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NEW             reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    BOOLEAN         reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    CHAR            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    BYTE            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    SHORT           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    INT             reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    LONG            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    FLOAT           reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    DOUBLE          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NUMBER          reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    HEX_NUMBER      reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    LONG_NUMBER     reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    LONG_HEX_NUMBER reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_1   reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_2   reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    NON_INTEGER_3   reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    CASE            reduce using rule 11 (classDeclaration -> normalClassDeclaration .)
    DEFAULT         reduce using rule 11 (classDeclaration -> normalClassDeclaration .)



state 38

    (235) expr_8 -> PRIVATE .

    CLASS           reduce using rule 235 (expr_8 -> PRIVATE .)
    INTERFACE       reduce using rule 235 (expr_8 -> PRIVATE .)
    AT              reduce using rule 235 (expr_8 -> PRIVATE .)
    ENUM            reduce using rule 235 (expr_8 -> PRIVATE .)
    IDENTIFIER      reduce using rule 235 (expr_8 -> PRIVATE .)
    BOOLEAN         reduce using rule 235 (expr_8 -> PRIVATE .)
    CHAR            reduce using rule 235 (expr_8 -> PRIVATE .)
    BYTE            reduce using rule 235 (expr_8 -> PRIVATE .)
    SHORT           reduce using rule 235 (expr_8 -> PRIVATE .)
    INT             reduce using rule 235 (expr_8 -> PRIVATE .)
    LONG            reduce using rule 235 (expr_8 -> PRIVATE .)
    FLOAT           reduce using rule 235 (expr_8 -> PRIVATE .)
    DOUBLE          reduce using rule 235 (expr_8 -> PRIVATE .)
    LESS            reduce using rule 235 (expr_8 -> PRIVATE .)
    VOID            reduce using rule 235 (expr_8 -> PRIVATE .)



state 39

    (232) expr_8 -> annotation .

    CLASS           reduce using rule 232 (expr_8 -> annotation .)
    INTERFACE       reduce using rule 232 (expr_8 -> annotation .)
    AT              reduce using rule 232 (expr_8 -> annotation .)
    ENUM            reduce using rule 232 (expr_8 -> annotation .)
    IDENTIFIER      reduce using rule 232 (expr_8 -> annotation .)
    BOOLEAN         reduce using rule 232 (expr_8 -> annotation .)
    CHAR            reduce using rule 232 (expr_8 -> annotation .)
    BYTE            reduce using rule 232 (expr_8 -> annotation .)
    SHORT           reduce using rule 232 (expr_8 -> annotation .)
    INT             reduce using rule 232 (expr_8 -> annotation .)
    LONG            reduce using rule 232 (expr_8 -> annotation .)
    FLOAT           reduce using rule 232 (expr_8 -> annotation .)
    DOUBLE          reduce using rule 232 (expr_8 -> annotation .)
    LESS            reduce using rule 232 (expr_8 -> annotation .)
    VOID            reduce using rule 232 (expr_8 -> annotation .)



state 40

    (243) expr_8 -> STRICTFP .

    CLASS           reduce using rule 243 (expr_8 -> STRICTFP .)
    INTERFACE       reduce using rule 243 (expr_8 -> STRICTFP .)
    AT              reduce using rule 243 (expr_8 -> STRICTFP .)
    ENUM            reduce using rule 243 (expr_8 -> STRICTFP .)
    IDENTIFIER      reduce using rule 243 (expr_8 -> STRICTFP .)
    BOOLEAN         reduce using rule 243 (expr_8 -> STRICTFP .)
    CHAR            reduce using rule 243 (expr_8 -> STRICTFP .)
    BYTE            reduce using rule 243 (expr_8 -> STRICTFP .)
    SHORT           reduce using rule 243 (expr_8 -> STRICTFP .)
    INT             reduce using rule 243 (expr_8 -> STRICTFP .)
    LONG            reduce using rule 243 (expr_8 -> STRICTFP .)
    FLOAT           reduce using rule 243 (expr_8 -> STRICTFP .)
    DOUBLE          reduce using rule 243 (expr_8 -> STRICTFP .)
    LESS            reduce using rule 243 (expr_8 -> STRICTFP .)
    VOID            reduce using rule 243 (expr_8 -> STRICTFP .)



state 41

    (241) expr_8 -> TRANSIENT .

    CLASS           reduce using rule 241 (expr_8 -> TRANSIENT .)
    INTERFACE       reduce using rule 241 (expr_8 -> TRANSIENT .)
    AT              reduce using rule 241 (expr_8 -> TRANSIENT .)
    ENUM            reduce using rule 241 (expr_8 -> TRANSIENT .)
    IDENTIFIER      reduce using rule 241 (expr_8 -> TRANSIENT .)
    BOOLEAN         reduce using rule 241 (expr_8 -> TRANSIENT .)
    CHAR            reduce using rule 241 (expr_8 -> TRANSIENT .)
    BYTE            reduce using rule 241 (expr_8 -> TRANSIENT .)
    SHORT           reduce using rule 241 (expr_8 -> TRANSIENT .)
    INT             reduce using rule 241 (expr_8 -> TRANSIENT .)
    LONG            reduce using rule 241 (expr_8 -> TRANSIENT .)
    FLOAT           reduce using rule 241 (expr_8 -> TRANSIENT .)
    DOUBLE          reduce using rule 241 (expr_8 -> TRANSIENT .)
    LESS            reduce using rule 241 (expr_8 -> TRANSIENT .)
    VOID            reduce using rule 241 (expr_8 -> TRANSIENT .)



state 42

    (9) modifiers -> expr_8 .

    CLASS           reduce using rule 9 (modifiers -> expr_8 .)
    INTERFACE       reduce using rule 9 (modifiers -> expr_8 .)
    AT              reduce using rule 9 (modifiers -> expr_8 .)
    ENUM            reduce using rule 9 (modifiers -> expr_8 .)
    IDENTIFIER      reduce using rule 9 (modifiers -> expr_8 .)
    BOOLEAN         reduce using rule 9 (modifiers -> expr_8 .)
    CHAR            reduce using rule 9 (modifiers -> expr_8 .)
    BYTE            reduce using rule 9 (modifiers -> expr_8 .)
    SHORT           reduce using rule 9 (modifiers -> expr_8 .)
    INT             reduce using rule 9 (modifiers -> expr_8 .)
    LONG            reduce using rule 9 (modifiers -> expr_8 .)
    FLOAT           reduce using rule 9 (modifiers -> expr_8 .)
    DOUBLE          reduce using rule 9 (modifiers -> expr_8 .)
    LESS            reduce using rule 9 (modifiers -> expr_8 .)
    VOID            reduce using rule 9 (modifiers -> expr_8 .)



state 43

    (1) compilationUnit -> expr_1 expr_2 expr_3 .
    (222) expr_3 -> expr_3 . typeDeclaration
    (5) typeDeclaration -> . classOrInterfaceDeclaration
    (6) typeDeclaration -> . SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (9) modifiers -> . expr_8
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

    $end            reduce using rule 1 (compilationUnit -> expr_1 expr_2 expr_3 .)
    SEMI            shift and go to state 36
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4


    normalInterfaceDeclaration     shift and go to state 34
    normalClassDeclaration         shift and go to state 37
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    enumDeclaration                shift and go to state 45
    classOrInterfaceDeclaration    shift and go to state 46
    classDeclaration               shift and go to state 49
    modifiers                      shift and go to state 48
    typeDeclaration                shift and go to state 124
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52

state 44

    (223) expr_3 -> empty .

    SEMI            reduce using rule 223 (expr_3 -> empty .)
    PUBLIC          reduce using rule 223 (expr_3 -> empty .)
    PROTECTED       reduce using rule 223 (expr_3 -> empty .)
    PRIVATE         reduce using rule 223 (expr_3 -> empty .)
    STATIC          reduce using rule 223 (expr_3 -> empty .)
    ABSTRACT        reduce using rule 223 (expr_3 -> empty .)
    FINAL           reduce using rule 223 (expr_3 -> empty .)
    NATIVE          reduce using rule 223 (expr_3 -> empty .)
    SYNCHRONIZED    reduce using rule 223 (expr_3 -> empty .)
    TRANSIENT       reduce using rule 223 (expr_3 -> empty .)
    VOLATILE        reduce using rule 223 (expr_3 -> empty .)
    STRICTFP        reduce using rule 223 (expr_3 -> empty .)
    AT              reduce using rule 223 (expr_3 -> empty .)
    $end            reduce using rule 223 (expr_3 -> empty .)



state 45

    (12) classDeclaration -> enumDeclaration .

    BRPAREN         reduce using rule 12 (classDeclaration -> enumDeclaration .)
    SEMI            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    STATIC          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    PUBLIC          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    PROTECTED       reduce using rule 12 (classDeclaration -> enumDeclaration .)
    PRIVATE         reduce using rule 12 (classDeclaration -> enumDeclaration .)
    ABSTRACT        reduce using rule 12 (classDeclaration -> enumDeclaration .)
    FINAL           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NATIVE          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    SYNCHRONIZED    reduce using rule 12 (classDeclaration -> enumDeclaration .)
    TRANSIENT       reduce using rule 12 (classDeclaration -> enumDeclaration .)
    VOLATILE        reduce using rule 12 (classDeclaration -> enumDeclaration .)
    STRICTFP        reduce using rule 12 (classDeclaration -> enumDeclaration .)
    AT              reduce using rule 12 (classDeclaration -> enumDeclaration .)
    BLPAREN         reduce using rule 12 (classDeclaration -> enumDeclaration .)
    $end            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    ASSERT          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    IF              reduce using rule 12 (classDeclaration -> enumDeclaration .)
    WHILE           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    DO              reduce using rule 12 (classDeclaration -> enumDeclaration .)
    SWITCH          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    RETURN          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    THROW           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    BREAK           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    CONTINUE        reduce using rule 12 (classDeclaration -> enumDeclaration .)
    IDENTIFIER      reduce using rule 12 (classDeclaration -> enumDeclaration .)
    FOR             reduce using rule 12 (classDeclaration -> enumDeclaration .)
    TRY             reduce using rule 12 (classDeclaration -> enumDeclaration .)
    PLUS            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    DASH            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    OP_INC          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    OP_DEC          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    TILDE           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    EXCLAMATION     reduce using rule 12 (classDeclaration -> enumDeclaration .)
    LPAREN          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    THIS            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    SUPER           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    VOID            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    CHARLITERAL     reduce using rule 12 (classDeclaration -> enumDeclaration .)
    STRINGLITERAL   reduce using rule 12 (classDeclaration -> enumDeclaration .)
    TRUE            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    FALSE           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NULL            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NEW             reduce using rule 12 (classDeclaration -> enumDeclaration .)
    BOOLEAN         reduce using rule 12 (classDeclaration -> enumDeclaration .)
    CHAR            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    BYTE            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    SHORT           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    INT             reduce using rule 12 (classDeclaration -> enumDeclaration .)
    LONG            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    FLOAT           reduce using rule 12 (classDeclaration -> enumDeclaration .)
    DOUBLE          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NUMBER          reduce using rule 12 (classDeclaration -> enumDeclaration .)
    HEX_NUMBER      reduce using rule 12 (classDeclaration -> enumDeclaration .)
    LONG_NUMBER     reduce using rule 12 (classDeclaration -> enumDeclaration .)
    LONG_HEX_NUMBER reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_1   reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_2   reduce using rule 12 (classDeclaration -> enumDeclaration .)
    NON_INTEGER_3   reduce using rule 12 (classDeclaration -> enumDeclaration .)
    CASE            reduce using rule 12 (classDeclaration -> enumDeclaration .)
    DEFAULT         reduce using rule 12 (classDeclaration -> enumDeclaration .)



state 46

    (5) typeDeclaration -> classOrInterfaceDeclaration .

    SEMI            reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    NATIVE          reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    TRANSIENT       reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    VOLATILE        reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    AT              reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)
    $end            reduce using rule 5 (typeDeclaration -> classOrInterfaceDeclaration .)



state 47

    (239) expr_8 -> NATIVE .

    CLASS           reduce using rule 239 (expr_8 -> NATIVE .)
    INTERFACE       reduce using rule 239 (expr_8 -> NATIVE .)
    AT              reduce using rule 239 (expr_8 -> NATIVE .)
    ENUM            reduce using rule 239 (expr_8 -> NATIVE .)
    IDENTIFIER      reduce using rule 239 (expr_8 -> NATIVE .)
    BOOLEAN         reduce using rule 239 (expr_8 -> NATIVE .)
    CHAR            reduce using rule 239 (expr_8 -> NATIVE .)
    BYTE            reduce using rule 239 (expr_8 -> NATIVE .)
    SHORT           reduce using rule 239 (expr_8 -> NATIVE .)
    INT             reduce using rule 239 (expr_8 -> NATIVE .)
    LONG            reduce using rule 239 (expr_8 -> NATIVE .)
    FLOAT           reduce using rule 239 (expr_8 -> NATIVE .)
    DOUBLE          reduce using rule 239 (expr_8 -> NATIVE .)
    LESS            reduce using rule 239 (expr_8 -> NATIVE .)
    VOID            reduce using rule 239 (expr_8 -> NATIVE .)



state 48

    (13) normalClassDeclaration -> modifiers . CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> modifiers . expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> modifiers . INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> modifiers . AT INTERFACE IDENTIFIER annotationTypeBody
    (260) expr_16 -> . ENUM

    CLASS           shift and go to state 129
    INTERFACE       shift and go to state 127
    AT              shift and go to state 126
    ENUM            shift and go to state 125


    expr_16                        shift and go to state 128

state 49

    (7) classOrInterfaceDeclaration -> classDeclaration .

    ASSERT          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    IF              reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    WHILE           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    DO              reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    SWITCH          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    RETURN          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    THROW           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    BREAK           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    CONTINUE        reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    IDENTIFIER      reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    SEMI            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    BLPAREN         reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    FOR             reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    TRY             reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    FINAL           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    AT              reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    PUBLIC          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    PROTECTED       reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    PRIVATE         reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    STATIC          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    ABSTRACT        reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NATIVE          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    TRANSIENT       reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    VOLATILE        reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    STRICTFP        reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    PLUS            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    DASH            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    OP_INC          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    OP_DEC          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    TILDE           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    EXCLAMATION     reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    LPAREN          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    THIS            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    SUPER           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    VOID            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    CHARLITERAL     reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    STRINGLITERAL   reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    TRUE            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    FALSE           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NULL            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NEW             reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    BOOLEAN         reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    CHAR            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    BYTE            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    SHORT           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    INT             reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    LONG            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    FLOAT           reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    DOUBLE          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NUMBER          reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    HEX_NUMBER      reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    LONG_NUMBER     reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    LONG_HEX_NUMBER reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NON_INTEGER_1   reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NON_INTEGER_2   reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    NON_INTEGER_3   reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    CASE            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    DEFAULT         reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    BRPAREN         reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)
    $end            reduce using rule 7 (classOrInterfaceDeclaration -> classDeclaration .)



state 50

    (221) expr_3 -> typeDeclaration .

    SEMI            reduce using rule 221 (expr_3 -> typeDeclaration .)
    PUBLIC          reduce using rule 221 (expr_3 -> typeDeclaration .)
    PROTECTED       reduce using rule 221 (expr_3 -> typeDeclaration .)
    PRIVATE         reduce using rule 221 (expr_3 -> typeDeclaration .)
    STATIC          reduce using rule 221 (expr_3 -> typeDeclaration .)
    ABSTRACT        reduce using rule 221 (expr_3 -> typeDeclaration .)
    FINAL           reduce using rule 221 (expr_3 -> typeDeclaration .)
    NATIVE          reduce using rule 221 (expr_3 -> typeDeclaration .)
    SYNCHRONIZED    reduce using rule 221 (expr_3 -> typeDeclaration .)
    TRANSIENT       reduce using rule 221 (expr_3 -> typeDeclaration .)
    VOLATILE        reduce using rule 221 (expr_3 -> typeDeclaration .)
    STRICTFP        reduce using rule 221 (expr_3 -> typeDeclaration .)
    AT              reduce using rule 221 (expr_3 -> typeDeclaration .)
    $end            reduce using rule 221 (expr_3 -> typeDeclaration .)



state 51

    (23) interfaceDeclaration -> annotationTypeDeclaration .

    BRPAREN         reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    ASSERT          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    IF              reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    WHILE           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    DO              reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    SWITCH          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    SYNCHRONIZED    reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    RETURN          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    THROW           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    BREAK           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    CONTINUE        reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    IDENTIFIER      reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    SEMI            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    BLPAREN         reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    FOR             reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRY             reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    FINAL           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    AT              reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    PUBLIC          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    PROTECTED       reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    PRIVATE         reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    STATIC          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    ABSTRACT        reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NATIVE          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRANSIENT       reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOLATILE        reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    STRICTFP        reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    PLUS            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    DASH            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_INC          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    OP_DEC          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    TILDE           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    EXCLAMATION     reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    LPAREN          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    THIS            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    SUPER           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    VOID            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    CHARLITERAL     reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    STRINGLITERAL   reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    TRUE            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    FALSE           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NULL            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NEW             reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    BOOLEAN         reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    CHAR            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    BYTE            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    SHORT           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    INT             reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    FLOAT           reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    DOUBLE          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NUMBER          reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    HEX_NUMBER      reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_NUMBER     reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    LONG_HEX_NUMBER reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_1   reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_2   reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    NON_INTEGER_3   reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    CASE            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    DEFAULT         reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)
    $end            reduce using rule 23 (interfaceDeclaration -> annotationTypeDeclaration .)



state 52

    (8) classOrInterfaceDeclaration -> interfaceDeclaration .

    ASSERT          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    IF              reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    WHILE           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    DO              reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    SWITCH          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    RETURN          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    THROW           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    BREAK           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    CONTINUE        reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    IDENTIFIER      reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    SEMI            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    BLPAREN         reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    FOR             reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    TRY             reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    FINAL           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    AT              reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    PUBLIC          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    PROTECTED       reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    PRIVATE         reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    STATIC          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NATIVE          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    VOLATILE        reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    STRICTFP        reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    PLUS            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    DASH            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    OP_INC          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    OP_DEC          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    TILDE           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    EXCLAMATION     reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    LPAREN          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    THIS            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    SUPER           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    VOID            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    CHARLITERAL     reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    STRINGLITERAL   reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    TRUE            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    FALSE           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NULL            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NEW             reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    BOOLEAN         reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    CHAR            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    BYTE            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    SHORT           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    INT             reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    LONG            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    FLOAT           reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    DOUBLE          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NUMBER          reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    HEX_NUMBER      reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    LONG_NUMBER     reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    CASE            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    DEFAULT         reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    BRPAREN         reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)
    $end            reduce using rule 8 (classOrInterfaceDeclaration -> interfaceDeclaration .)



state 53

    (242) expr_8 -> VOLATILE .

    CLASS           reduce using rule 242 (expr_8 -> VOLATILE .)
    INTERFACE       reduce using rule 242 (expr_8 -> VOLATILE .)
    AT              reduce using rule 242 (expr_8 -> VOLATILE .)
    ENUM            reduce using rule 242 (expr_8 -> VOLATILE .)
    IDENTIFIER      reduce using rule 242 (expr_8 -> VOLATILE .)
    BOOLEAN         reduce using rule 242 (expr_8 -> VOLATILE .)
    CHAR            reduce using rule 242 (expr_8 -> VOLATILE .)
    BYTE            reduce using rule 242 (expr_8 -> VOLATILE .)
    SHORT           reduce using rule 242 (expr_8 -> VOLATILE .)
    INT             reduce using rule 242 (expr_8 -> VOLATILE .)
    LONG            reduce using rule 242 (expr_8 -> VOLATILE .)
    FLOAT           reduce using rule 242 (expr_8 -> VOLATILE .)
    DOUBLE          reduce using rule 242 (expr_8 -> VOLATILE .)
    LESS            reduce using rule 242 (expr_8 -> VOLATILE .)
    VOID            reduce using rule 242 (expr_8 -> VOLATILE .)



state 54

    (233) expr_8 -> PUBLIC .

    CLASS           reduce using rule 233 (expr_8 -> PUBLIC .)
    INTERFACE       reduce using rule 233 (expr_8 -> PUBLIC .)
    AT              reduce using rule 233 (expr_8 -> PUBLIC .)
    ENUM            reduce using rule 233 (expr_8 -> PUBLIC .)
    IDENTIFIER      reduce using rule 233 (expr_8 -> PUBLIC .)
    BOOLEAN         reduce using rule 233 (expr_8 -> PUBLIC .)
    CHAR            reduce using rule 233 (expr_8 -> PUBLIC .)
    BYTE            reduce using rule 233 (expr_8 -> PUBLIC .)
    SHORT           reduce using rule 233 (expr_8 -> PUBLIC .)
    INT             reduce using rule 233 (expr_8 -> PUBLIC .)
    LONG            reduce using rule 233 (expr_8 -> PUBLIC .)
    FLOAT           reduce using rule 233 (expr_8 -> PUBLIC .)
    DOUBLE          reduce using rule 233 (expr_8 -> PUBLIC .)
    LESS            reduce using rule 233 (expr_8 -> PUBLIC .)
    VOID            reduce using rule 233 (expr_8 -> PUBLIC .)



state 55

    (163) unaryExpressionNotPlusMinus -> EXCLAMATION . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 131
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 56

    (205) literal -> INTLITERAL .

    DOT             reduce using rule 205 (literal -> INTLITERAL .)
    FLPAREN         reduce using rule 205 (literal -> INTLITERAL .)
    OP_INC          reduce using rule 205 (literal -> INTLITERAL .)
    OP_DEC          reduce using rule 205 (literal -> INTLITERAL .)



state 57

    (175) primary -> VOID . DOT CLASS

    DOT             shift and go to state 132



state 58

    (139) conditionalOrExpression -> conditionalAndExpression . expr_95
    (446) expr_95 -> . OP_LOR conditionalAndExpression
    (447) expr_95 -> . expr_95 OP_LOR conditionalAndExpression
    (448) expr_95 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for OP_LOR resolved as shift.
    OP_LOR          shift and go to state 135
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! OP_LOR          [ reduce using rule 547 (empty -> .) ]

    expr_95                        shift and go to state 133
    empty                          shift and go to state 134

state 59

    (211) literal -> TRUE .

    DOT             reduce using rule 211 (literal -> TRUE .)
    FLPAREN         reduce using rule 211 (literal -> TRUE .)
    OP_INC          reduce using rule 211 (literal -> TRUE .)
    OP_DEC          reduce using rule 211 (literal -> TRUE .)



state 60

    (209) literal -> CHARLITERAL .

    DOT             reduce using rule 209 (literal -> CHARLITERAL .)
    FLPAREN         reduce using rule 209 (literal -> CHARLITERAL .)
    OP_INC          reduce using rule 209 (literal -> CHARLITERAL .)
    OP_DEC          reduce using rule 209 (literal -> CHARLITERAL .)



state 61

    (54) primitiveType -> LONG .

    FLPAREN         reduce using rule 54 (primitiveType -> LONG .)
    DOT             reduce using rule 54 (primitiveType -> LONG .)
    IDENTIFIER      reduce using rule 54 (primitiveType -> LONG .)
    AND             reduce using rule 54 (primitiveType -> LONG .)
    COMMA           reduce using rule 54 (primitiveType -> LONG .)
    MORE            reduce using rule 54 (primitiveType -> LONG .)
    OP_ARRAY        reduce using rule 54 (primitiveType -> LONG .)
    OP_EQ           reduce using rule 54 (primitiveType -> LONG .)
    OP_NE           reduce using rule 54 (primitiveType -> LONG .)
    CARET           reduce using rule 54 (primitiveType -> LONG .)
    VERTICAL        reduce using rule 54 (primitiveType -> LONG .)
    OP_LAND         reduce using rule 54 (primitiveType -> LONG .)
    OP_LOR          reduce using rule 54 (primitiveType -> LONG .)
    QUES            reduce using rule 54 (primitiveType -> LONG .)
    RPAREN          reduce using rule 54 (primitiveType -> LONG .)
    BRPAREN         reduce using rule 54 (primitiveType -> LONG .)
    EQUALS          reduce using rule 54 (primitiveType -> LONG .)
    ASS_ADD         reduce using rule 54 (primitiveType -> LONG .)
    ASS_SUB         reduce using rule 54 (primitiveType -> LONG .)
    ASS_MUL         reduce using rule 54 (primitiveType -> LONG .)
    ASS_DIV         reduce using rule 54 (primitiveType -> LONG .)
    ASS_AND         reduce using rule 54 (primitiveType -> LONG .)
    ASS_OR          reduce using rule 54 (primitiveType -> LONG .)
    ASS_XOR         reduce using rule 54 (primitiveType -> LONG .)
    ASS_MOD         reduce using rule 54 (primitiveType -> LONG .)
    LESS            reduce using rule 54 (primitiveType -> LONG .)
    COLON           reduce using rule 54 (primitiveType -> LONG .)
    FRPAREN         reduce using rule 54 (primitiveType -> LONG .)
    SEMI            reduce using rule 54 (primitiveType -> LONG .)
    BLPAREN         reduce using rule 54 (primitiveType -> LONG .)
    IMPLEMENTS      reduce using rule 54 (primitiveType -> LONG .)



state 62

    (157) unaryExpression -> PLUS . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 136
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 63

    (72) elementValuePairs -> elementValuePair . expr_69
    (384) expr_69 -> . COMMA elementValuePair
    (385) expr_69 -> . expr_69 COMMA elementValuePair
    (386) expr_69 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 137
    RPAREN          reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_69                        shift and go to state 138
    empty                          shift and go to state 139

state 64

    (158) unaryExpression -> DASH . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 140
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 65

    (145) instanceOfExpression -> relationalExpression . expr_102
    (466) expr_102 -> . INSTANCEOF type
    (467) expr_102 -> . empty
    (547) empty -> .

    INSTANCEOF      shift and go to state 141
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)


    expr_102                       shift and go to state 142
    empty                          shift and go to state 143

state 66

    (144) equalityExpression -> instanceOfExpression . expr_101
    (463) expr_101 -> . expr_100 instanceOfExpression
    (464) expr_101 -> . expr_101 expr_100 instanceOfExpression
    (465) expr_101 -> . empty
    (461) expr_100 -> . OP_EQ
    (462) expr_100 -> . OP_NE
    (547) empty -> .

  ! shift/reduce conflict for OP_EQ resolved as shift.
  ! shift/reduce conflict for OP_NE resolved as shift.
    OP_EQ           shift and go to state 145
    OP_NE           shift and go to state 144
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! OP_EQ           [ reduce using rule 547 (empty -> .) ]
  ! OP_NE           [ reduce using rule 547 (empty -> .) ]

    expr_101                       shift and go to state 146
    empty                          shift and go to state 148
    expr_100                       shift and go to state 147

state 67

    (169) primary -> THIS . expr_111 expr_112
    (490) expr_111 -> . DOT IDENTIFIER
    (491) expr_111 -> . expr_111 DOT IDENTIFIER
    (492) expr_111 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 149
    FLPAREN         reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 151
    expr_111                       shift and go to state 150

state 68

    (56) primitiveType -> DOUBLE .

    FLPAREN         reduce using rule 56 (primitiveType -> DOUBLE .)
    DOT             reduce using rule 56 (primitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 56 (primitiveType -> DOUBLE .)
    AND             reduce using rule 56 (primitiveType -> DOUBLE .)
    COMMA           reduce using rule 56 (primitiveType -> DOUBLE .)
    MORE            reduce using rule 56 (primitiveType -> DOUBLE .)
    OP_ARRAY        reduce using rule 56 (primitiveType -> DOUBLE .)
    OP_EQ           reduce using rule 56 (primitiveType -> DOUBLE .)
    OP_NE           reduce using rule 56 (primitiveType -> DOUBLE .)
    CARET           reduce using rule 56 (primitiveType -> DOUBLE .)
    VERTICAL        reduce using rule 56 (primitiveType -> DOUBLE .)
    OP_LAND         reduce using rule 56 (primitiveType -> DOUBLE .)
    OP_LOR          reduce using rule 56 (primitiveType -> DOUBLE .)
    QUES            reduce using rule 56 (primitiveType -> DOUBLE .)
    RPAREN          reduce using rule 56 (primitiveType -> DOUBLE .)
    BRPAREN         reduce using rule 56 (primitiveType -> DOUBLE .)
    EQUALS          reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_ADD         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_SUB         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_MUL         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_DIV         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_AND         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_OR          reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_XOR         reduce using rule 56 (primitiveType -> DOUBLE .)
    ASS_MOD         reduce using rule 56 (primitiveType -> DOUBLE .)
    LESS            reduce using rule 56 (primitiveType -> DOUBLE .)
    COLON           reduce using rule 56 (primitiveType -> DOUBLE .)
    FRPAREN         reduce using rule 56 (primitiveType -> DOUBLE .)
    SEMI            reduce using rule 56 (primitiveType -> DOUBLE .)
    BLPAREN         reduce using rule 56 (primitiveType -> DOUBLE .)
    IMPLEMENTS      reduce using rule 56 (primitiveType -> DOUBLE .)



state 69

    (52) primitiveType -> SHORT .

    FLPAREN         reduce using rule 52 (primitiveType -> SHORT .)
    DOT             reduce using rule 52 (primitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 52 (primitiveType -> SHORT .)
    AND             reduce using rule 52 (primitiveType -> SHORT .)
    COMMA           reduce using rule 52 (primitiveType -> SHORT .)
    MORE            reduce using rule 52 (primitiveType -> SHORT .)
    OP_ARRAY        reduce using rule 52 (primitiveType -> SHORT .)
    OP_EQ           reduce using rule 52 (primitiveType -> SHORT .)
    OP_NE           reduce using rule 52 (primitiveType -> SHORT .)
    CARET           reduce using rule 52 (primitiveType -> SHORT .)
    VERTICAL        reduce using rule 52 (primitiveType -> SHORT .)
    OP_LAND         reduce using rule 52 (primitiveType -> SHORT .)
    OP_LOR          reduce using rule 52 (primitiveType -> SHORT .)
    QUES            reduce using rule 52 (primitiveType -> SHORT .)
    RPAREN          reduce using rule 52 (primitiveType -> SHORT .)
    BRPAREN         reduce using rule 52 (primitiveType -> SHORT .)
    EQUALS          reduce using rule 52 (primitiveType -> SHORT .)
    ASS_ADD         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_SUB         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_MUL         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_DIV         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_AND         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_OR          reduce using rule 52 (primitiveType -> SHORT .)
    ASS_XOR         reduce using rule 52 (primitiveType -> SHORT .)
    ASS_MOD         reduce using rule 52 (primitiveType -> SHORT .)
    LESS            reduce using rule 52 (primitiveType -> SHORT .)
    COLON           reduce using rule 52 (primitiveType -> SHORT .)
    FRPAREN         reduce using rule 52 (primitiveType -> SHORT .)
    SEMI            reduce using rule 52 (primitiveType -> SHORT .)
    BLPAREN         reduce using rule 52 (primitiveType -> SHORT .)
    IMPLEMENTS      reduce using rule 52 (primitiveType -> SHORT .)



state 70

    (140) conditionalAndExpression -> inclusiveOrExpression . expr_96
    (449) expr_96 -> . OP_LAND inclusiveOrExpression
    (450) expr_96 -> . expr_96 OP_LAND inclusiveOrExpression
    (451) expr_96 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for OP_LAND resolved as shift.
    OP_LAND         shift and go to state 152
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! OP_LAND         [ reduce using rule 547 (empty -> .) ]

    expr_96                        shift and go to state 153
    empty                          shift and go to state 154

state 71

    (173) primary -> creator .

    DOT             reduce using rule 173 (primary -> creator .)
    FLPAREN         reduce using rule 173 (primary -> creator .)
    OP_INC          reduce using rule 173 (primary -> creator .)
    OP_DEC          reduce using rule 173 (primary -> creator .)



state 72

    (382) expr_68 -> LPAREN expr_67 . RPAREN

    RPAREN          shift and go to state 155



state 73

    (206) literal -> LONGLITERAL .

    DOT             reduce using rule 206 (literal -> LONGLITERAL .)
    FLPAREN         reduce using rule 206 (literal -> LONGLITERAL .)
    OP_INC          reduce using rule 206 (literal -> LONGLITERAL .)
    OP_DEC          reduce using rule 206 (literal -> LONGLITERAL .)



state 74

    (210) literal -> STRINGLITERAL .

    DOT             reduce using rule 210 (literal -> STRINGLITERAL .)
    FLPAREN         reduce using rule 210 (literal -> STRINGLITERAL .)
    OP_INC          reduce using rule 210 (literal -> STRINGLITERAL .)
    OP_DEC          reduce using rule 210 (literal -> STRINGLITERAL .)



state 75

    (151) shiftExpression -> additiveExpression . expr_104
    (471) expr_104 -> . shiftOp additiveExpression
    (472) expr_104 -> . expr_104 shiftOp additiveExpression
    (473) expr_104 -> . empty
    (152) shiftOp -> . LESS LESS
    (153) shiftOp -> . MORE MORE MORE
    (154) shiftOp -> . MORE MORE
    (547) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    LESS            shift and go to state 156
    MORE            shift and go to state 160
    INSTANCEOF      reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! LESS            [ reduce using rule 547 (empty -> .) ]
  ! MORE            [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 159
    expr_104                       shift and go to state 157
    shiftOp                        shift and go to state 158

state 76

    (161) unaryExpression -> unaryExpressionNotPlusMinus .

    MULT            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    AND             reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 161 (unaryExpression -> unaryExpressionNotPlusMinus .)



state 77

    (207) literal -> FLOATLITERAL .

    DOT             reduce using rule 207 (literal -> FLOATLITERAL .)
    FLPAREN         reduce using rule 207 (literal -> FLOATLITERAL .)
    OP_INC          reduce using rule 207 (literal -> FLOATLITERAL .)
    OP_DEC          reduce using rule 207 (literal -> FLOATLITERAL .)



state 78

    (142) exclusiveOrExpression -> andExpression . expr_98
    (455) expr_98 -> . CARET andExpression
    (456) expr_98 -> . expr_98 CARET andExpression
    (457) expr_98 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for CARET resolved as shift.
    CARET           shift and go to state 161
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! CARET           [ reduce using rule 547 (empty -> .) ]

    expr_98                        shift and go to state 162
    empty                          shift and go to state 163

state 79

    (77) elementValueArrayInitializer -> BLPAREN . expr_71 expr_72 BRPAREN
    (390) expr_71 -> . elementValue expr_70
    (391) expr_71 -> . empty
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (547) empty -> .
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    parExpression                  shift and go to state 109
    empty                          shift and go to state 165
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    expr_71                        shift and go to state 164
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 166

state 80

    (143) andExpression -> equalityExpression . expr_99
    (458) expr_99 -> . AND equalityExpression
    (459) expr_99 -> . expr_99 AND equalityExpression
    (460) expr_99 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for AND resolved as shift.
    AND             shift and go to state 167
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! AND             [ reduce using rule 547 (empty -> .) ]

    expr_99                        shift and go to state 168
    empty                          shift and go to state 169

state 81

    (138) conditionalExpression -> conditionalOrExpression . expr_94
    (444) expr_94 -> . QUES expression COLON conditionalExpression
    (445) expr_94 -> . empty
    (547) empty -> .

    QUES            shift and go to state 171
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)


    expr_94                        shift and go to state 170
    empty                          shift and go to state 172

state 82

    (141) inclusiveOrExpression -> exclusiveOrExpression . expr_97
    (452) expr_97 -> . VERTICAL exclusiveOrExpression
    (453) expr_97 -> . expr_97 VERTICAL exclusiveOrExpression
    (454) expr_97 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for VERTICAL resolved as shift.
    VERTICAL        shift and go to state 175
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! VERTICAL        [ reduce using rule 547 (empty -> .) ]

    expr_97                        shift and go to state 173
    empty                          shift and go to state 174

state 83

    (165) unaryExpressionNotPlusMinus -> primary . expr_109 expr_110
    (485) expr_109 -> . selector
    (486) expr_109 -> . expr_109 selector
    (487) expr_109 -> . empty
    (186) selector -> . DOT IDENTIFIER expr_120
    (187) selector -> . DOT THIS
    (188) selector -> . DOT SUPER superSuffix
    (189) selector -> . innerCreator
    (190) selector -> . FLPAREN expression FRPAREN
    (547) empty -> .
    (201) innerCreator -> . DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 181
    FLPAREN         shift and go to state 177
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_109                       shift and go to state 176
    selector                       shift and go to state 179
    innerCreator                   shift and go to state 178
    empty                          shift and go to state 180

state 84

    (50) primitiveType -> CHAR .

    FLPAREN         reduce using rule 50 (primitiveType -> CHAR .)
    DOT             reduce using rule 50 (primitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 50 (primitiveType -> CHAR .)
    AND             reduce using rule 50 (primitiveType -> CHAR .)
    COMMA           reduce using rule 50 (primitiveType -> CHAR .)
    MORE            reduce using rule 50 (primitiveType -> CHAR .)
    OP_ARRAY        reduce using rule 50 (primitiveType -> CHAR .)
    OP_EQ           reduce using rule 50 (primitiveType -> CHAR .)
    OP_NE           reduce using rule 50 (primitiveType -> CHAR .)
    CARET           reduce using rule 50 (primitiveType -> CHAR .)
    VERTICAL        reduce using rule 50 (primitiveType -> CHAR .)
    OP_LAND         reduce using rule 50 (primitiveType -> CHAR .)
    OP_LOR          reduce using rule 50 (primitiveType -> CHAR .)
    QUES            reduce using rule 50 (primitiveType -> CHAR .)
    RPAREN          reduce using rule 50 (primitiveType -> CHAR .)
    BRPAREN         reduce using rule 50 (primitiveType -> CHAR .)
    EQUALS          reduce using rule 50 (primitiveType -> CHAR .)
    ASS_ADD         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_SUB         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_MUL         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_DIV         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_AND         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_OR          reduce using rule 50 (primitiveType -> CHAR .)
    ASS_XOR         reduce using rule 50 (primitiveType -> CHAR .)
    ASS_MOD         reduce using rule 50 (primitiveType -> CHAR .)
    LESS            reduce using rule 50 (primitiveType -> CHAR .)
    COLON           reduce using rule 50 (primitiveType -> CHAR .)
    FRPAREN         reduce using rule 50 (primitiveType -> CHAR .)
    SEMI            reduce using rule 50 (primitiveType -> CHAR .)
    BLPAREN         reduce using rule 50 (primitiveType -> CHAR .)
    IMPLEMENTS      reduce using rule 50 (primitiveType -> CHAR .)



state 85

    (159) unaryExpression -> OP_INC . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 182
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 86

    (540) LONGLITERAL -> LONG_HEX_NUMBER .

    DOT             reduce using rule 540 (LONGLITERAL -> LONG_HEX_NUMBER .)
    FLPAREN         reduce using rule 540 (LONGLITERAL -> LONG_HEX_NUMBER .)
    OP_INC          reduce using rule 540 (LONGLITERAL -> LONG_HEX_NUMBER .)
    OP_DEC          reduce using rule 540 (LONGLITERAL -> LONG_HEX_NUMBER .)



state 87

    (160) unaryExpression -> OP_DEC . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 183
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 88

    (191) creator -> NEW . nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> NEW . classOrInterfaceType classCreatorRest
    (194) arrayCreator -> NEW . createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> NEW . createdName FLPAREN expression FRPAREN expr_122 expr_123
    (203) nonWildcardTypeArguments -> . LESS typeList MORE
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (199) createdName -> . classOrInterfaceType
    (200) createdName -> . primitiveType
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    LESS            shift and go to state 184
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    createdName                    shift and go to state 188
    classOrInterfaceType           shift and go to state 185
    primitiveType                  shift and go to state 189
    nonWildcardTypeArguments       shift and go to state 186

state 89

    (172) primary -> literal .

    DOT             reduce using rule 172 (primary -> literal .)
    FLPAREN         reduce using rule 172 (primary -> literal .)
    OP_INC          reduce using rule 172 (primary -> literal .)
    OP_DEC          reduce using rule 172 (primary -> literal .)



state 90

    (162) unaryExpressionNotPlusMinus -> TILDE . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 190
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 91

    (73) elementValuePair -> IDENTIFIER . EQUALS elementValue
    (170) primary -> IDENTIFIER . expr_113 expr_114
    (495) expr_113 -> . DOT IDENTIFIER
    (496) expr_113 -> . expr_113 DOT IDENTIFIER
    (497) expr_113 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    EQUALS          shift and go to state 191
    DOT             shift and go to state 194
    FLPAREN         reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    expr_113                       shift and go to state 193
    empty                          shift and go to state 192

state 92

    (74) elementValue -> conditionalExpression .

    COMMA           reduce using rule 74 (elementValue -> conditionalExpression .)
    BRPAREN         reduce using rule 74 (elementValue -> conditionalExpression .)
    SEMI            reduce using rule 74 (elementValue -> conditionalExpression .)
    RPAREN          reduce using rule 74 (elementValue -> conditionalExpression .)



state 93

    (539) LONGLITERAL -> LONG_NUMBER .

    DOT             reduce using rule 539 (LONGLITERAL -> LONG_NUMBER .)
    FLPAREN         reduce using rule 539 (LONGLITERAL -> LONG_NUMBER .)
    OP_INC          reduce using rule 539 (LONGLITERAL -> LONG_NUMBER .)
    OP_DEC          reduce using rule 539 (LONGLITERAL -> LONG_NUMBER .)



state 94

    (51) primitiveType -> BYTE .

    FLPAREN         reduce using rule 51 (primitiveType -> BYTE .)
    DOT             reduce using rule 51 (primitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 51 (primitiveType -> BYTE .)
    AND             reduce using rule 51 (primitiveType -> BYTE .)
    COMMA           reduce using rule 51 (primitiveType -> BYTE .)
    MORE            reduce using rule 51 (primitiveType -> BYTE .)
    OP_ARRAY        reduce using rule 51 (primitiveType -> BYTE .)
    OP_EQ           reduce using rule 51 (primitiveType -> BYTE .)
    OP_NE           reduce using rule 51 (primitiveType -> BYTE .)
    CARET           reduce using rule 51 (primitiveType -> BYTE .)
    VERTICAL        reduce using rule 51 (primitiveType -> BYTE .)
    OP_LAND         reduce using rule 51 (primitiveType -> BYTE .)
    OP_LOR          reduce using rule 51 (primitiveType -> BYTE .)
    QUES            reduce using rule 51 (primitiveType -> BYTE .)
    RPAREN          reduce using rule 51 (primitiveType -> BYTE .)
    BRPAREN         reduce using rule 51 (primitiveType -> BYTE .)
    EQUALS          reduce using rule 51 (primitiveType -> BYTE .)
    ASS_ADD         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_SUB         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_MUL         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_DIV         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_AND         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_OR          reduce using rule 51 (primitiveType -> BYTE .)
    ASS_XOR         reduce using rule 51 (primitiveType -> BYTE .)
    ASS_MOD         reduce using rule 51 (primitiveType -> BYTE .)
    LESS            reduce using rule 51 (primitiveType -> BYTE .)
    COLON           reduce using rule 51 (primitiveType -> BYTE .)
    FRPAREN         reduce using rule 51 (primitiveType -> BYTE .)
    SEMI            reduce using rule 51 (primitiveType -> BYTE .)
    BLPAREN         reduce using rule 51 (primitiveType -> BYTE .)
    IMPLEMENTS      reduce using rule 51 (primitiveType -> BYTE .)



state 95

    (212) literal -> FALSE .

    DOT             reduce using rule 212 (literal -> FALSE .)
    FLPAREN         reduce using rule 212 (literal -> FALSE .)
    OP_INC          reduce using rule 212 (literal -> FALSE .)
    OP_DEC          reduce using rule 212 (literal -> FALSE .)



state 96

    (174) primary -> primitiveType . expr_115 DOT CLASS
    (500) expr_115 -> . FLPAREN FRPAREN
    (501) expr_115 -> . expr_115 FLPAREN FRPAREN
    (502) expr_115 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 195
    DOT             reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_115                       shift and go to state 196
    empty                          shift and go to state 197

state 97

    (53) primitiveType -> INT .

    FLPAREN         reduce using rule 53 (primitiveType -> INT .)
    DOT             reduce using rule 53 (primitiveType -> INT .)
    IDENTIFIER      reduce using rule 53 (primitiveType -> INT .)
    AND             reduce using rule 53 (primitiveType -> INT .)
    COMMA           reduce using rule 53 (primitiveType -> INT .)
    MORE            reduce using rule 53 (primitiveType -> INT .)
    OP_ARRAY        reduce using rule 53 (primitiveType -> INT .)
    OP_EQ           reduce using rule 53 (primitiveType -> INT .)
    OP_NE           reduce using rule 53 (primitiveType -> INT .)
    CARET           reduce using rule 53 (primitiveType -> INT .)
    VERTICAL        reduce using rule 53 (primitiveType -> INT .)
    OP_LAND         reduce using rule 53 (primitiveType -> INT .)
    OP_LOR          reduce using rule 53 (primitiveType -> INT .)
    QUES            reduce using rule 53 (primitiveType -> INT .)
    RPAREN          reduce using rule 53 (primitiveType -> INT .)
    BRPAREN         reduce using rule 53 (primitiveType -> INT .)
    EQUALS          reduce using rule 53 (primitiveType -> INT .)
    ASS_ADD         reduce using rule 53 (primitiveType -> INT .)
    ASS_SUB         reduce using rule 53 (primitiveType -> INT .)
    ASS_MUL         reduce using rule 53 (primitiveType -> INT .)
    ASS_DIV         reduce using rule 53 (primitiveType -> INT .)
    ASS_AND         reduce using rule 53 (primitiveType -> INT .)
    ASS_OR          reduce using rule 53 (primitiveType -> INT .)
    ASS_XOR         reduce using rule 53 (primitiveType -> INT .)
    ASS_MOD         reduce using rule 53 (primitiveType -> INT .)
    LESS            reduce using rule 53 (primitiveType -> INT .)
    COLON           reduce using rule 53 (primitiveType -> INT .)
    FRPAREN         reduce using rule 53 (primitiveType -> INT .)
    SEMI            reduce using rule 53 (primitiveType -> INT .)
    BLPAREN         reduce using rule 53 (primitiveType -> INT .)
    IMPLEMENTS      reduce using rule 53 (primitiveType -> INT .)



state 98

    (49) primitiveType -> BOOLEAN .

    FLPAREN         reduce using rule 49 (primitiveType -> BOOLEAN .)
    DOT             reduce using rule 49 (primitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 49 (primitiveType -> BOOLEAN .)
    AND             reduce using rule 49 (primitiveType -> BOOLEAN .)
    COMMA           reduce using rule 49 (primitiveType -> BOOLEAN .)
    MORE            reduce using rule 49 (primitiveType -> BOOLEAN .)
    OP_ARRAY        reduce using rule 49 (primitiveType -> BOOLEAN .)
    OP_EQ           reduce using rule 49 (primitiveType -> BOOLEAN .)
    OP_NE           reduce using rule 49 (primitiveType -> BOOLEAN .)
    CARET           reduce using rule 49 (primitiveType -> BOOLEAN .)
    VERTICAL        reduce using rule 49 (primitiveType -> BOOLEAN .)
    OP_LAND         reduce using rule 49 (primitiveType -> BOOLEAN .)
    OP_LOR          reduce using rule 49 (primitiveType -> BOOLEAN .)
    QUES            reduce using rule 49 (primitiveType -> BOOLEAN .)
    RPAREN          reduce using rule 49 (primitiveType -> BOOLEAN .)
    BRPAREN         reduce using rule 49 (primitiveType -> BOOLEAN .)
    EQUALS          reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_ADD         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_SUB         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_MUL         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_DIV         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_AND         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_OR          reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_XOR         reduce using rule 49 (primitiveType -> BOOLEAN .)
    ASS_MOD         reduce using rule 49 (primitiveType -> BOOLEAN .)
    LESS            reduce using rule 49 (primitiveType -> BOOLEAN .)
    COLON           reduce using rule 49 (primitiveType -> BOOLEAN .)
    FRPAREN         reduce using rule 49 (primitiveType -> BOOLEAN .)
    SEMI            reduce using rule 49 (primitiveType -> BOOLEAN .)
    BLPAREN         reduce using rule 49 (primitiveType -> BOOLEAN .)
    IMPLEMENTS      reduce using rule 49 (primitiveType -> BOOLEAN .)



state 99

    (76) elementValue -> elementValueArrayInitializer .

    COMMA           reduce using rule 76 (elementValue -> elementValueArrayInitializer .)
    BRPAREN         reduce using rule 76 (elementValue -> elementValueArrayInitializer .)
    SEMI            reduce using rule 76 (elementValue -> elementValueArrayInitializer .)
    RPAREN          reduce using rule 76 (elementValue -> elementValueArrayInitializer .)



state 100

    (538) INTLITERAL -> HEX_NUMBER .

    DOT             reduce using rule 538 (INTLITERAL -> HEX_NUMBER .)
    FLPAREN         reduce using rule 538 (INTLITERAL -> HEX_NUMBER .)
    OP_INC          reduce using rule 538 (INTLITERAL -> HEX_NUMBER .)
    OP_DEC          reduce using rule 538 (INTLITERAL -> HEX_NUMBER .)



state 101

    (542) FLOATLITERAL -> NON_INTEGER_2 .
    (545) DOUBLELITERAL -> NON_INTEGER_2 .

  ! reduce/reduce conflict for DOT resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
  ! reduce/reduce conflict for OP_INC resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
  ! reduce/reduce conflict for OP_DEC resolved using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .).
    DOT             reduce using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .)
    FLPAREN         reduce using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .)
    OP_INC          reduce using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .)
    OP_DEC          reduce using rule 542 (FLOATLITERAL -> NON_INTEGER_2 .)

  ! DOT             [ reduce using rule 545 (DOUBLELITERAL -> NON_INTEGER_2 .) ]
  ! FLPAREN         [ reduce using rule 545 (DOUBLELITERAL -> NON_INTEGER_2 .) ]
  ! OP_INC          [ reduce using rule 545 (DOUBLELITERAL -> NON_INTEGER_2 .) ]
  ! OP_DEC          [ reduce using rule 545 (DOUBLELITERAL -> NON_INTEGER_2 .) ]


state 102

    (543) FLOATLITERAL -> NON_INTEGER_3 .
    (546) DOUBLELITERAL -> NON_INTEGER_3 .

  ! reduce/reduce conflict for DOT resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
  ! reduce/reduce conflict for OP_INC resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
  ! reduce/reduce conflict for OP_DEC resolved using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .).
    DOT             reduce using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .)
    FLPAREN         reduce using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .)
    OP_INC          reduce using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .)
    OP_DEC          reduce using rule 543 (FLOATLITERAL -> NON_INTEGER_3 .)

  ! DOT             [ reduce using rule 546 (DOUBLELITERAL -> NON_INTEGER_3 .) ]
  ! FLPAREN         [ reduce using rule 546 (DOUBLELITERAL -> NON_INTEGER_3 .) ]
  ! OP_INC          [ reduce using rule 546 (DOUBLELITERAL -> NON_INTEGER_3 .) ]
  ! OP_DEC          [ reduce using rule 546 (DOUBLELITERAL -> NON_INTEGER_3 .) ]


state 103

    (541) FLOATLITERAL -> NON_INTEGER_1 .
    (544) DOUBLELITERAL -> NON_INTEGER_1 .

  ! reduce/reduce conflict for DOT resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
  ! reduce/reduce conflict for OP_INC resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
  ! reduce/reduce conflict for OP_DEC resolved using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .).
    DOT             reduce using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .)
    FLPAREN         reduce using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .)
    OP_INC          reduce using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .)
    OP_DEC          reduce using rule 541 (FLOATLITERAL -> NON_INTEGER_1 .)

  ! DOT             [ reduce using rule 544 (DOUBLELITERAL -> NON_INTEGER_1 .) ]
  ! FLPAREN         [ reduce using rule 544 (DOUBLELITERAL -> NON_INTEGER_1 .) ]
  ! OP_INC          [ reduce using rule 544 (DOUBLELITERAL -> NON_INTEGER_1 .) ]
  ! OP_DEC          [ reduce using rule 544 (DOUBLELITERAL -> NON_INTEGER_1 .) ]


state 104

    (155) additiveExpression -> multiplicativeExpression . expr_106
    (476) expr_106 -> . expr_105 multiplicativeExpression
    (477) expr_106 -> . expr_106 expr_105 multiplicativeExpression
    (478) expr_106 -> . empty
    (474) expr_105 -> . PLUS
    (475) expr_105 -> . DASH
    (547) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
    PLUS            shift and go to state 201
    DASH            shift and go to state 200
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    INSTANCEOF      reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! PLUS            [ reduce using rule 547 (empty -> .) ]
  ! DASH            [ reduce using rule 547 (empty -> .) ]

    expr_105                       shift and go to state 198
    empty                          shift and go to state 202
    expr_106                       shift and go to state 199

state 105

    (537) INTLITERAL -> NUMBER .

    DOT             reduce using rule 537 (INTLITERAL -> NUMBER .)
    FLPAREN         reduce using rule 537 (INTLITERAL -> NUMBER .)
    OP_INC          reduce using rule 537 (INTLITERAL -> NUMBER .)
    OP_DEC          reduce using rule 537 (INTLITERAL -> NUMBER .)



state 106

    (213) literal -> NULL .

    DOT             reduce using rule 213 (literal -> NULL .)
    FLPAREN         reduce using rule 213 (literal -> NULL .)
    OP_INC          reduce using rule 213 (literal -> NULL .)
    OP_DEC          reduce using rule 213 (literal -> NULL .)



state 107

    (146) relationalExpression -> shiftExpression . expr_103
    (468) expr_103 -> . relationalOp shiftExpression
    (469) expr_103 -> . expr_103 relationalOp shiftExpression
    (470) expr_103 -> . empty
    (147) relationalOp -> . LESS EQUALS
    (148) relationalOp -> . MORE EQUALS
    (149) relationalOp -> . LESS
    (150) relationalOp -> . MORE
    (547) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    LESS            shift and go to state 203
    MORE            shift and go to state 207
    INSTANCEOF      reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! LESS            [ reduce using rule 547 (empty -> .) ]
  ! MORE            [ reduce using rule 547 (empty -> .) ]

    expr_103                       shift and go to state 204
    empty                          shift and go to state 206
    relationalOp                   shift and go to state 205

state 108

    (156) multiplicativeExpression -> unaryExpression . expr_108
    (482) expr_108 -> . expr_107 unaryExpression
    (483) expr_108 -> . expr_108 expr_107 unaryExpression
    (484) expr_108 -> . empty
    (479) expr_107 -> . MULT
    (480) expr_107 -> . SLASH
    (481) expr_107 -> . PERCENT
    (547) empty -> .

  ! shift/reduce conflict for MULT resolved as shift.
  ! shift/reduce conflict for SLASH resolved as shift.
  ! shift/reduce conflict for PERCENT resolved as shift.
    MULT            shift and go to state 213
    SLASH           shift and go to state 212
    PERCENT         shift and go to state 209
    PLUS            reduce using rule 547 (empty -> .)
    DASH            reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    INSTANCEOF      reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! MULT            [ reduce using rule 547 (empty -> .) ]
  ! SLASH           [ reduce using rule 547 (empty -> .) ]
  ! PERCENT         [ reduce using rule 547 (empty -> .) ]

    expr_108                       shift and go to state 208
    empty                          shift and go to state 211
    expr_107                       shift and go to state 210

state 109

    (168) primary -> parExpression .

    DOT             reduce using rule 168 (primary -> parExpression .)
    FLPAREN         reduce using rule 168 (primary -> parExpression .)
    OP_INC          reduce using rule 168 (primary -> parExpression .)
    OP_DEC          reduce using rule 168 (primary -> parExpression .)



state 110

    (166) castExpression -> LPAREN . primitiveType RPAREN unaryExpression
    (167) castExpression -> LPAREN . type RPAREN unaryExpressionNotPlusMinus
    (123) parExpression -> LPAREN . expression RPAREN
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (125) expression -> . conditionalExpression expr_93
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    IDENTIFIER      shift and go to state 216
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    additiveExpression             shift and go to state 75
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    classOrInterfaceType           shift and go to state 214
    literal                        shift and go to state 89
    type                           shift and go to state 217
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 219
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 215

state 111

    (380) expr_67 -> elementValuePairs .

    RPAREN          reduce using rule 380 (expr_67 -> elementValuePairs .)



state 112

    (208) literal -> DOUBLELITERAL .

    DOT             reduce using rule 208 (literal -> DOUBLELITERAL .)
    FLPAREN         reduce using rule 208 (literal -> DOUBLELITERAL .)
    OP_INC          reduce using rule 208 (literal -> DOUBLELITERAL .)
    OP_DEC          reduce using rule 208 (literal -> DOUBLELITERAL .)



state 113

    (75) elementValue -> annotation .

    COMMA           reduce using rule 75 (elementValue -> annotation .)
    BRPAREN         reduce using rule 75 (elementValue -> annotation .)
    SEMI            reduce using rule 75 (elementValue -> annotation .)
    RPAREN          reduce using rule 75 (elementValue -> annotation .)



state 114

    (164) unaryExpressionNotPlusMinus -> castExpression .

    MULT            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    SLASH           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    PERCENT         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    PLUS            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    DASH            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    LESS            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    MORE            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    INSTANCEOF      reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_EQ           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_NE           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    AND             reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    CARET           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    VERTICAL        reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LAND         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    OP_LOR          reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    QUES            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    RPAREN          reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    COMMA           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    BRPAREN         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    EQUALS          reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_ADD         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_SUB         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MUL         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_DIV         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_AND         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_OR          reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_XOR         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    ASS_MOD         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    COLON           reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    FRPAREN         reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)
    SEMI            reduce using rule 164 (unaryExpressionNotPlusMinus -> castExpression .)



state 115

    (55) primitiveType -> FLOAT .

    FLPAREN         reduce using rule 55 (primitiveType -> FLOAT .)
    DOT             reduce using rule 55 (primitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 55 (primitiveType -> FLOAT .)
    AND             reduce using rule 55 (primitiveType -> FLOAT .)
    COMMA           reduce using rule 55 (primitiveType -> FLOAT .)
    MORE            reduce using rule 55 (primitiveType -> FLOAT .)
    OP_ARRAY        reduce using rule 55 (primitiveType -> FLOAT .)
    OP_EQ           reduce using rule 55 (primitiveType -> FLOAT .)
    OP_NE           reduce using rule 55 (primitiveType -> FLOAT .)
    CARET           reduce using rule 55 (primitiveType -> FLOAT .)
    VERTICAL        reduce using rule 55 (primitiveType -> FLOAT .)
    OP_LAND         reduce using rule 55 (primitiveType -> FLOAT .)
    OP_LOR          reduce using rule 55 (primitiveType -> FLOAT .)
    QUES            reduce using rule 55 (primitiveType -> FLOAT .)
    RPAREN          reduce using rule 55 (primitiveType -> FLOAT .)
    BRPAREN         reduce using rule 55 (primitiveType -> FLOAT .)
    EQUALS          reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_ADD         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_SUB         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_MUL         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_DIV         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_AND         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_OR          reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_XOR         reduce using rule 55 (primitiveType -> FLOAT .)
    ASS_MOD         reduce using rule 55 (primitiveType -> FLOAT .)
    LESS            reduce using rule 55 (primitiveType -> FLOAT .)
    COLON           reduce using rule 55 (primitiveType -> FLOAT .)
    FRPAREN         reduce using rule 55 (primitiveType -> FLOAT .)
    SEMI            reduce using rule 55 (primitiveType -> FLOAT .)
    BLPAREN         reduce using rule 55 (primitiveType -> FLOAT .)
    IMPLEMENTS      reduce using rule 55 (primitiveType -> FLOAT .)



state 116

    (193) creator -> arrayCreator .

    DOT             reduce using rule 193 (creator -> arrayCreator .)
    FLPAREN         reduce using rule 193 (creator -> arrayCreator .)
    OP_INC          reduce using rule 193 (creator -> arrayCreator .)
    OP_DEC          reduce using rule 193 (creator -> arrayCreator .)



state 117

    (171) primary -> SUPER . superSuffix
    (176) superSuffix -> . arguments
    (177) superSuffix -> . DOT expr_116 IDENTIFIER expr_117
    (204) arguments -> . LPAREN expr_130 RPAREN

    DOT             shift and go to state 223
    LPAREN          shift and go to state 222


    superSuffix                    shift and go to state 220
    arguments                      shift and go to state 221

state 118

    (381) expr_67 -> elementValue .

    RPAREN          reduce using rule 381 (expr_67 -> elementValue .)



state 119

    (376) expr_65 -> expr_65 DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 224



state 120

    (375) expr_65 -> DOT IDENTIFIER .

    DOT             reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    AT              reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    PACKAGE         reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    CLASS           reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    INTERFACE       reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    ENUM            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    RPAREN          reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    COMMA           reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    BRPAREN         reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    BOOLEAN         reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    CHAR            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    BYTE            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    SHORT           reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    INT             reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    LONG            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    FLOAT           reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    DOUBLE          reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    LESS            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    VOID            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    SEMI            reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)
    BLPAREN         reduce using rule 375 (expr_65 -> DOT IDENTIFIER .)



state 121

    (2) packageDeclaration -> PACKAGE qualifiedName SEMI .

    IMPORT          reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    SEMI            reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PUBLIC          reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PROTECTED       reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    PRIVATE         reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STATIC          reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    ABSTRACT        reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    FINAL           reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    NATIVE          reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    SYNCHRONIZED    reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    TRANSIENT       reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    VOLATILE        reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    STRICTFP        reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    AT              reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)
    $end            reduce using rule 2 (packageDeclaration -> PACKAGE qualifiedName SEMI .)



state 122

    (4) importDeclaration -> IMPORT expr_5 IDENTIFIER . expr_6 expr_7 SEMI
    (228) expr_6 -> . DOT IDENTIFIER
    (229) expr_6 -> . expr_6 DOT IDENTIFIER

    DOT             shift and go to state 226


    expr_6                         shift and go to state 225

state 123

    (3) importDeclaration -> IMPORT expr_4 IDENTIFIER . DOT MULT SEMI

    DOT             shift and go to state 227



state 124

    (222) expr_3 -> expr_3 typeDeclaration .

    SEMI            reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    PUBLIC          reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    PROTECTED       reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    PRIVATE         reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    STATIC          reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    ABSTRACT        reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    FINAL           reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    NATIVE          reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    SYNCHRONIZED    reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    TRANSIENT       reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    VOLATILE        reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    STRICTFP        reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    AT              reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)
    $end            reduce using rule 222 (expr_3 -> expr_3 typeDeclaration .)



state 125

    (260) expr_16 -> ENUM .

    IDENTIFIER      reduce using rule 260 (expr_16 -> ENUM .)



state 126

    (78) annotationTypeDeclaration -> modifiers AT . INTERFACE IDENTIFIER annotationTypeBody

    INTERFACE       shift and go to state 228



state 127

    (24) normalInterfaceDeclaration -> modifiers INTERFACE . IDENTIFIER expr_26 expr_27 interfaceBody

    IDENTIFIER      shift and go to state 229



state 128

    (17) enumDeclaration -> modifiers expr_16 . IDENTIFIER expr_17 enumBody

    IDENTIFIER      shift and go to state 230



state 129

    (13) normalClassDeclaration -> modifiers CLASS . IDENTIFIER expr_10 expr_11 expr_12 classBody

    IDENTIFIER      shift and go to state 231



state 130

    (170) primary -> IDENTIFIER . expr_113 expr_114
    (495) expr_113 -> . DOT IDENTIFIER
    (496) expr_113 -> . expr_113 DOT IDENTIFIER
    (497) expr_113 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 194
    FLPAREN         reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    expr_113                       shift and go to state 193
    empty                          shift and go to state 192

state 131

    (163) unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .

    MULT            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SLASH           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PERCENT         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    PLUS            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    DASH            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    LESS            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    MORE            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    INSTANCEOF      reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_EQ           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_NE           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    AND             reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    CARET           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    VERTICAL        reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LAND         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    OP_LOR          reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    QUES            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    RPAREN          reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COMMA           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    BRPAREN         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    EQUALS          reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_ADD         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_SUB         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MUL         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_DIV         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_AND         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_OR          reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_XOR         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    ASS_MOD         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    COLON           reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    FRPAREN         reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)
    SEMI            reduce using rule 163 (unaryExpressionNotPlusMinus -> EXCLAMATION unaryExpression .)



state 132

    (175) primary -> VOID DOT . CLASS

    CLASS           shift and go to state 232



state 133

    (139) conditionalOrExpression -> conditionalAndExpression expr_95 .
    (447) expr_95 -> expr_95 . OP_LOR conditionalAndExpression

    QUES            reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    EQUALS          reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_ADD         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_SUB         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_MUL         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_DIV         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_AND         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_OR          reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_XOR         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    ASS_MOD         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    LESS            reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    MORE            reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    FRPAREN         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    COMMA           reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    RPAREN          reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    SEMI            reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    BRPAREN         reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    COLON           reduce using rule 139 (conditionalOrExpression -> conditionalAndExpression expr_95 .)
    OP_LOR          shift and go to state 233



state 134

    (448) expr_95 -> empty .

    OP_LOR          reduce using rule 448 (expr_95 -> empty .)
    QUES            reduce using rule 448 (expr_95 -> empty .)
    RPAREN          reduce using rule 448 (expr_95 -> empty .)
    COMMA           reduce using rule 448 (expr_95 -> empty .)
    BRPAREN         reduce using rule 448 (expr_95 -> empty .)
    EQUALS          reduce using rule 448 (expr_95 -> empty .)
    ASS_ADD         reduce using rule 448 (expr_95 -> empty .)
    ASS_SUB         reduce using rule 448 (expr_95 -> empty .)
    ASS_MUL         reduce using rule 448 (expr_95 -> empty .)
    ASS_DIV         reduce using rule 448 (expr_95 -> empty .)
    ASS_AND         reduce using rule 448 (expr_95 -> empty .)
    ASS_OR          reduce using rule 448 (expr_95 -> empty .)
    ASS_XOR         reduce using rule 448 (expr_95 -> empty .)
    ASS_MOD         reduce using rule 448 (expr_95 -> empty .)
    LESS            reduce using rule 448 (expr_95 -> empty .)
    MORE            reduce using rule 448 (expr_95 -> empty .)
    COLON           reduce using rule 448 (expr_95 -> empty .)
    FRPAREN         reduce using rule 448 (expr_95 -> empty .)
    SEMI            reduce using rule 448 (expr_95 -> empty .)



state 135

    (446) expr_95 -> OP_LOR . conditionalAndExpression
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 234
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 136

    (157) unaryExpression -> PLUS unaryExpression .

    MULT            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    SLASH           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    PERCENT         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    PLUS            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    DASH            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    LESS            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    MORE            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    INSTANCEOF      reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    OP_EQ           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    OP_NE           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    AND             reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    CARET           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    VERTICAL        reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    OP_LAND         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    OP_LOR          reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    QUES            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    RPAREN          reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    COMMA           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    BRPAREN         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    EQUALS          reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_ADD         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_SUB         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_MUL         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_DIV         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_AND         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_OR          reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_XOR         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    ASS_MOD         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    COLON           reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    FRPAREN         reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)
    SEMI            reduce using rule 157 (unaryExpression -> PLUS unaryExpression .)



state 137

    (384) expr_69 -> COMMA . elementValuePair
    (73) elementValuePair -> . IDENTIFIER EQUALS elementValue

    IDENTIFIER      shift and go to state 235


    elementValuePair               shift and go to state 236

state 138

    (72) elementValuePairs -> elementValuePair expr_69 .
    (385) expr_69 -> expr_69 . COMMA elementValuePair

    RPAREN          reduce using rule 72 (elementValuePairs -> elementValuePair expr_69 .)
    COMMA           shift and go to state 237



state 139

    (386) expr_69 -> empty .

    COMMA           reduce using rule 386 (expr_69 -> empty .)
    RPAREN          reduce using rule 386 (expr_69 -> empty .)



state 140

    (158) unaryExpression -> DASH unaryExpression .

    MULT            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    SLASH           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    PERCENT         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    PLUS            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    DASH            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    LESS            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    MORE            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    INSTANCEOF      reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    OP_EQ           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    OP_NE           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    AND             reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    CARET           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    VERTICAL        reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    OP_LAND         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    OP_LOR          reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    QUES            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    RPAREN          reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    COMMA           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    BRPAREN         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    EQUALS          reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_ADD         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_SUB         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_MUL         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_DIV         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_AND         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_OR          reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_XOR         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    ASS_MOD         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    COLON           reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    FRPAREN         reduce using rule 158 (unaryExpression -> DASH unaryExpression .)
    SEMI            reduce using rule 158 (unaryExpression -> DASH unaryExpression .)



state 141

    (466) expr_102 -> INSTANCEOF . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 239

state 142

    (145) instanceOfExpression -> relationalExpression expr_102 .

    OP_EQ           reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    OP_NE           reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    AND             reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    CARET           reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    VERTICAL        reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    OP_LAND         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    OP_LOR          reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    QUES            reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    RPAREN          reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    COMMA           reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    BRPAREN         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    EQUALS          reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_ADD         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_SUB         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_MUL         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_DIV         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_AND         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_OR          reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_XOR         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    ASS_MOD         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    LESS            reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    MORE            reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    COLON           reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    FRPAREN         reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)
    SEMI            reduce using rule 145 (instanceOfExpression -> relationalExpression expr_102 .)



state 143

    (467) expr_102 -> empty .

    OP_EQ           reduce using rule 467 (expr_102 -> empty .)
    OP_NE           reduce using rule 467 (expr_102 -> empty .)
    AND             reduce using rule 467 (expr_102 -> empty .)
    CARET           reduce using rule 467 (expr_102 -> empty .)
    VERTICAL        reduce using rule 467 (expr_102 -> empty .)
    OP_LAND         reduce using rule 467 (expr_102 -> empty .)
    OP_LOR          reduce using rule 467 (expr_102 -> empty .)
    QUES            reduce using rule 467 (expr_102 -> empty .)
    RPAREN          reduce using rule 467 (expr_102 -> empty .)
    COMMA           reduce using rule 467 (expr_102 -> empty .)
    BRPAREN         reduce using rule 467 (expr_102 -> empty .)
    EQUALS          reduce using rule 467 (expr_102 -> empty .)
    ASS_ADD         reduce using rule 467 (expr_102 -> empty .)
    ASS_SUB         reduce using rule 467 (expr_102 -> empty .)
    ASS_MUL         reduce using rule 467 (expr_102 -> empty .)
    ASS_DIV         reduce using rule 467 (expr_102 -> empty .)
    ASS_AND         reduce using rule 467 (expr_102 -> empty .)
    ASS_OR          reduce using rule 467 (expr_102 -> empty .)
    ASS_XOR         reduce using rule 467 (expr_102 -> empty .)
    ASS_MOD         reduce using rule 467 (expr_102 -> empty .)
    LESS            reduce using rule 467 (expr_102 -> empty .)
    MORE            reduce using rule 467 (expr_102 -> empty .)
    COLON           reduce using rule 467 (expr_102 -> empty .)
    FRPAREN         reduce using rule 467 (expr_102 -> empty .)
    SEMI            reduce using rule 467 (expr_102 -> empty .)



state 144

    (462) expr_100 -> OP_NE .

    PLUS            reduce using rule 462 (expr_100 -> OP_NE .)
    DASH            reduce using rule 462 (expr_100 -> OP_NE .)
    OP_INC          reduce using rule 462 (expr_100 -> OP_NE .)
    OP_DEC          reduce using rule 462 (expr_100 -> OP_NE .)
    TILDE           reduce using rule 462 (expr_100 -> OP_NE .)
    EXCLAMATION     reduce using rule 462 (expr_100 -> OP_NE .)
    LPAREN          reduce using rule 462 (expr_100 -> OP_NE .)
    THIS            reduce using rule 462 (expr_100 -> OP_NE .)
    IDENTIFIER      reduce using rule 462 (expr_100 -> OP_NE .)
    SUPER           reduce using rule 462 (expr_100 -> OP_NE .)
    VOID            reduce using rule 462 (expr_100 -> OP_NE .)
    CHARLITERAL     reduce using rule 462 (expr_100 -> OP_NE .)
    STRINGLITERAL   reduce using rule 462 (expr_100 -> OP_NE .)
    TRUE            reduce using rule 462 (expr_100 -> OP_NE .)
    FALSE           reduce using rule 462 (expr_100 -> OP_NE .)
    NULL            reduce using rule 462 (expr_100 -> OP_NE .)
    NEW             reduce using rule 462 (expr_100 -> OP_NE .)
    BOOLEAN         reduce using rule 462 (expr_100 -> OP_NE .)
    CHAR            reduce using rule 462 (expr_100 -> OP_NE .)
    BYTE            reduce using rule 462 (expr_100 -> OP_NE .)
    SHORT           reduce using rule 462 (expr_100 -> OP_NE .)
    INT             reduce using rule 462 (expr_100 -> OP_NE .)
    LONG            reduce using rule 462 (expr_100 -> OP_NE .)
    FLOAT           reduce using rule 462 (expr_100 -> OP_NE .)
    DOUBLE          reduce using rule 462 (expr_100 -> OP_NE .)
    NUMBER          reduce using rule 462 (expr_100 -> OP_NE .)
    HEX_NUMBER      reduce using rule 462 (expr_100 -> OP_NE .)
    LONG_NUMBER     reduce using rule 462 (expr_100 -> OP_NE .)
    LONG_HEX_NUMBER reduce using rule 462 (expr_100 -> OP_NE .)
    NON_INTEGER_1   reduce using rule 462 (expr_100 -> OP_NE .)
    NON_INTEGER_2   reduce using rule 462 (expr_100 -> OP_NE .)
    NON_INTEGER_3   reduce using rule 462 (expr_100 -> OP_NE .)



state 145

    (461) expr_100 -> OP_EQ .

    PLUS            reduce using rule 461 (expr_100 -> OP_EQ .)
    DASH            reduce using rule 461 (expr_100 -> OP_EQ .)
    OP_INC          reduce using rule 461 (expr_100 -> OP_EQ .)
    OP_DEC          reduce using rule 461 (expr_100 -> OP_EQ .)
    TILDE           reduce using rule 461 (expr_100 -> OP_EQ .)
    EXCLAMATION     reduce using rule 461 (expr_100 -> OP_EQ .)
    LPAREN          reduce using rule 461 (expr_100 -> OP_EQ .)
    THIS            reduce using rule 461 (expr_100 -> OP_EQ .)
    IDENTIFIER      reduce using rule 461 (expr_100 -> OP_EQ .)
    SUPER           reduce using rule 461 (expr_100 -> OP_EQ .)
    VOID            reduce using rule 461 (expr_100 -> OP_EQ .)
    CHARLITERAL     reduce using rule 461 (expr_100 -> OP_EQ .)
    STRINGLITERAL   reduce using rule 461 (expr_100 -> OP_EQ .)
    TRUE            reduce using rule 461 (expr_100 -> OP_EQ .)
    FALSE           reduce using rule 461 (expr_100 -> OP_EQ .)
    NULL            reduce using rule 461 (expr_100 -> OP_EQ .)
    NEW             reduce using rule 461 (expr_100 -> OP_EQ .)
    BOOLEAN         reduce using rule 461 (expr_100 -> OP_EQ .)
    CHAR            reduce using rule 461 (expr_100 -> OP_EQ .)
    BYTE            reduce using rule 461 (expr_100 -> OP_EQ .)
    SHORT           reduce using rule 461 (expr_100 -> OP_EQ .)
    INT             reduce using rule 461 (expr_100 -> OP_EQ .)
    LONG            reduce using rule 461 (expr_100 -> OP_EQ .)
    FLOAT           reduce using rule 461 (expr_100 -> OP_EQ .)
    DOUBLE          reduce using rule 461 (expr_100 -> OP_EQ .)
    NUMBER          reduce using rule 461 (expr_100 -> OP_EQ .)
    HEX_NUMBER      reduce using rule 461 (expr_100 -> OP_EQ .)
    LONG_NUMBER     reduce using rule 461 (expr_100 -> OP_EQ .)
    LONG_HEX_NUMBER reduce using rule 461 (expr_100 -> OP_EQ .)
    NON_INTEGER_1   reduce using rule 461 (expr_100 -> OP_EQ .)
    NON_INTEGER_2   reduce using rule 461 (expr_100 -> OP_EQ .)
    NON_INTEGER_3   reduce using rule 461 (expr_100 -> OP_EQ .)



state 146

    (144) equalityExpression -> instanceOfExpression expr_101 .
    (464) expr_101 -> expr_101 . expr_100 instanceOfExpression
    (461) expr_100 -> . OP_EQ
    (462) expr_100 -> . OP_NE

    AND             reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    CARET           reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    VERTICAL        reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    OP_LAND         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    OP_LOR          reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    QUES            reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    RPAREN          reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    COMMA           reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    BRPAREN         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    EQUALS          reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_ADD         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_SUB         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_MUL         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_DIV         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_AND         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_OR          reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_XOR         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    ASS_MOD         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    LESS            reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    MORE            reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    COLON           reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    FRPAREN         reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    SEMI            reduce using rule 144 (equalityExpression -> instanceOfExpression expr_101 .)
    OP_EQ           shift and go to state 145
    OP_NE           shift and go to state 144


    expr_100                       shift and go to state 240

state 147

    (463) expr_101 -> expr_100 . instanceOfExpression
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 241
    castExpression                 shift and go to state 114
    primitiveType                  shift and go to state 96
    unaryExpressionNotPlusMinus    shift and go to state 76
    arrayCreator                   shift and go to state 116

state 148

    (465) expr_101 -> empty .

    OP_EQ           reduce using rule 465 (expr_101 -> empty .)
    OP_NE           reduce using rule 465 (expr_101 -> empty .)
    AND             reduce using rule 465 (expr_101 -> empty .)
    CARET           reduce using rule 465 (expr_101 -> empty .)
    VERTICAL        reduce using rule 465 (expr_101 -> empty .)
    OP_LAND         reduce using rule 465 (expr_101 -> empty .)
    OP_LOR          reduce using rule 465 (expr_101 -> empty .)
    QUES            reduce using rule 465 (expr_101 -> empty .)
    RPAREN          reduce using rule 465 (expr_101 -> empty .)
    COMMA           reduce using rule 465 (expr_101 -> empty .)
    BRPAREN         reduce using rule 465 (expr_101 -> empty .)
    EQUALS          reduce using rule 465 (expr_101 -> empty .)
    ASS_ADD         reduce using rule 465 (expr_101 -> empty .)
    ASS_SUB         reduce using rule 465 (expr_101 -> empty .)
    ASS_MUL         reduce using rule 465 (expr_101 -> empty .)
    ASS_DIV         reduce using rule 465 (expr_101 -> empty .)
    ASS_AND         reduce using rule 465 (expr_101 -> empty .)
    ASS_OR          reduce using rule 465 (expr_101 -> empty .)
    ASS_XOR         reduce using rule 465 (expr_101 -> empty .)
    ASS_MOD         reduce using rule 465 (expr_101 -> empty .)
    LESS            reduce using rule 465 (expr_101 -> empty .)
    MORE            reduce using rule 465 (expr_101 -> empty .)
    COLON           reduce using rule 465 (expr_101 -> empty .)
    FRPAREN         reduce using rule 465 (expr_101 -> empty .)
    SEMI            reduce using rule 465 (expr_101 -> empty .)



state 149

    (490) expr_111 -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 242



state 150

    (169) primary -> THIS expr_111 . expr_112
    (491) expr_111 -> expr_111 . DOT IDENTIFIER
    (493) expr_112 -> . identifierSuffix
    (494) expr_112 -> . empty
    (178) identifierSuffix -> . expr_118 DOT CLASS
    (179) identifierSuffix -> . expr_119
    (180) identifierSuffix -> . arguments
    (181) identifierSuffix -> . DOT CLASS
    (182) identifierSuffix -> . DOT nonWildcardTypeArguments IDENTIFIER arguments
    (183) identifierSuffix -> . DOT THIS
    (184) identifierSuffix -> . DOT SUPER arguments
    (185) identifierSuffix -> . innerCreator
    (547) empty -> .
    (507) expr_118 -> . FLPAREN FRPAREN
    (508) expr_118 -> . expr_118 FLPAREN FRPAREN
    (509) expr_119 -> . FLPAREN expression FRPAREN
    (510) expr_119 -> . expr_119 FLPAREN expression FRPAREN
    (204) arguments -> . LPAREN expr_130 RPAREN
    (201) innerCreator -> . DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 243
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    FLPAREN         shift and go to state 244
    LPAREN          shift and go to state 222

  ! DOT             [ reduce using rule 547 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    identifierSuffix               shift and go to state 249
    arguments                      shift and go to state 246
    expr_112                       shift and go to state 245
    empty                          shift and go to state 247
    innerCreator                   shift and go to state 250
    expr_118                       shift and go to state 251
    expr_119                       shift and go to state 248

state 151

    (492) expr_111 -> empty .

    DOT             reduce using rule 492 (expr_111 -> empty .)
    FLPAREN         reduce using rule 492 (expr_111 -> empty .)
    LPAREN          reduce using rule 492 (expr_111 -> empty .)
    OP_INC          reduce using rule 492 (expr_111 -> empty .)
    OP_DEC          reduce using rule 492 (expr_111 -> empty .)



state 152

    (449) expr_96 -> OP_LAND . inclusiveOrExpression
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 252
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 153

    (140) conditionalAndExpression -> inclusiveOrExpression expr_96 .
    (450) expr_96 -> expr_96 . OP_LAND inclusiveOrExpression

    OP_LOR          reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    QUES            reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    EQUALS          reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_ADD         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_SUB         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_MUL         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_DIV         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_AND         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_OR          reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_XOR         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    ASS_MOD         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    LESS            reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    MORE            reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    COMMA           reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    RPAREN          reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    SEMI            reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    BRPAREN         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    COLON           reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    FRPAREN         reduce using rule 140 (conditionalAndExpression -> inclusiveOrExpression expr_96 .)
    OP_LAND         shift and go to state 253



state 154

    (451) expr_96 -> empty .

    OP_LAND         reduce using rule 451 (expr_96 -> empty .)
    OP_LOR          reduce using rule 451 (expr_96 -> empty .)
    QUES            reduce using rule 451 (expr_96 -> empty .)
    RPAREN          reduce using rule 451 (expr_96 -> empty .)
    COMMA           reduce using rule 451 (expr_96 -> empty .)
    BRPAREN         reduce using rule 451 (expr_96 -> empty .)
    EQUALS          reduce using rule 451 (expr_96 -> empty .)
    ASS_ADD         reduce using rule 451 (expr_96 -> empty .)
    ASS_SUB         reduce using rule 451 (expr_96 -> empty .)
    ASS_MUL         reduce using rule 451 (expr_96 -> empty .)
    ASS_DIV         reduce using rule 451 (expr_96 -> empty .)
    ASS_AND         reduce using rule 451 (expr_96 -> empty .)
    ASS_OR          reduce using rule 451 (expr_96 -> empty .)
    ASS_XOR         reduce using rule 451 (expr_96 -> empty .)
    ASS_MOD         reduce using rule 451 (expr_96 -> empty .)
    LESS            reduce using rule 451 (expr_96 -> empty .)
    MORE            reduce using rule 451 (expr_96 -> empty .)
    COLON           reduce using rule 451 (expr_96 -> empty .)
    FRPAREN         reduce using rule 451 (expr_96 -> empty .)
    SEMI            reduce using rule 451 (expr_96 -> empty .)



state 155

    (382) expr_68 -> LPAREN expr_67 RPAREN .

    AT              reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    PACKAGE         reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    IDENTIFIER      reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    CLASS           reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    INTERFACE       reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    ENUM            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    RPAREN          reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    COMMA           reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    BRPAREN         reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    BOOLEAN         reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    CHAR            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    BYTE            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    SHORT           reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    INT             reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    LONG            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    FLOAT           reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    DOUBLE          reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    LESS            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    VOID            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)
    SEMI            reduce using rule 382 (expr_68 -> LPAREN expr_67 RPAREN .)



state 156

    (152) shiftOp -> LESS . LESS

    LESS            shift and go to state 254



state 157

    (151) shiftExpression -> additiveExpression expr_104 .
    (472) expr_104 -> expr_104 . shiftOp additiveExpression
    (152) shiftOp -> . LESS LESS
    (153) shiftOp -> . MORE MORE MORE
    (154) shiftOp -> . MORE MORE

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    INSTANCEOF      reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    OP_EQ           reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    OP_NE           reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    AND             reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    CARET           reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    VERTICAL        reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    OP_LAND         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    OP_LOR          reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    QUES            reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    EQUALS          reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_ADD         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_SUB         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_MUL         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_DIV         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_AND         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_OR          reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_XOR         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    ASS_MOD         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    SEMI            reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    RPAREN          reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    FRPAREN         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    COMMA           reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    COLON           reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    BRPAREN         reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .)
    LESS            shift and go to state 156
    MORE            shift and go to state 160

  ! LESS            [ reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .) ]
  ! MORE            [ reduce using rule 151 (shiftExpression -> additiveExpression expr_104 .) ]

    shiftOp                        shift and go to state 255

state 158

    (471) expr_104 -> shiftOp . additiveExpression
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 256
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 159

    (473) expr_104 -> empty .

    LESS            reduce using rule 473 (expr_104 -> empty .)
    MORE            reduce using rule 473 (expr_104 -> empty .)
    INSTANCEOF      reduce using rule 473 (expr_104 -> empty .)
    OP_EQ           reduce using rule 473 (expr_104 -> empty .)
    OP_NE           reduce using rule 473 (expr_104 -> empty .)
    AND             reduce using rule 473 (expr_104 -> empty .)
    CARET           reduce using rule 473 (expr_104 -> empty .)
    VERTICAL        reduce using rule 473 (expr_104 -> empty .)
    OP_LAND         reduce using rule 473 (expr_104 -> empty .)
    OP_LOR          reduce using rule 473 (expr_104 -> empty .)
    QUES            reduce using rule 473 (expr_104 -> empty .)
    RPAREN          reduce using rule 473 (expr_104 -> empty .)
    COMMA           reduce using rule 473 (expr_104 -> empty .)
    BRPAREN         reduce using rule 473 (expr_104 -> empty .)
    EQUALS          reduce using rule 473 (expr_104 -> empty .)
    ASS_ADD         reduce using rule 473 (expr_104 -> empty .)
    ASS_SUB         reduce using rule 473 (expr_104 -> empty .)
    ASS_MUL         reduce using rule 473 (expr_104 -> empty .)
    ASS_DIV         reduce using rule 473 (expr_104 -> empty .)
    ASS_AND         reduce using rule 473 (expr_104 -> empty .)
    ASS_OR          reduce using rule 473 (expr_104 -> empty .)
    ASS_XOR         reduce using rule 473 (expr_104 -> empty .)
    ASS_MOD         reduce using rule 473 (expr_104 -> empty .)
    COLON           reduce using rule 473 (expr_104 -> empty .)
    FRPAREN         reduce using rule 473 (expr_104 -> empty .)
    SEMI            reduce using rule 473 (expr_104 -> empty .)



state 160

    (153) shiftOp -> MORE . MORE MORE
    (154) shiftOp -> MORE . MORE

    MORE            shift and go to state 257



state 161

    (455) expr_98 -> CARET . andExpression
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 258
    arrayCreator                   shift and go to state 116

state 162

    (142) exclusiveOrExpression -> andExpression expr_98 .
    (456) expr_98 -> expr_98 . CARET andExpression

    VERTICAL        reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    OP_LAND         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    OP_LOR          reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    QUES            reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    EQUALS          reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_ADD         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_SUB         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_MUL         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_DIV         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_AND         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_OR          reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_XOR         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    ASS_MOD         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    LESS            reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    MORE            reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    SEMI            reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    RPAREN          reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    COMMA           reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    BRPAREN         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    COLON           reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    FRPAREN         reduce using rule 142 (exclusiveOrExpression -> andExpression expr_98 .)
    CARET           shift and go to state 259



state 163

    (457) expr_98 -> empty .

    CARET           reduce using rule 457 (expr_98 -> empty .)
    VERTICAL        reduce using rule 457 (expr_98 -> empty .)
    OP_LAND         reduce using rule 457 (expr_98 -> empty .)
    OP_LOR          reduce using rule 457 (expr_98 -> empty .)
    QUES            reduce using rule 457 (expr_98 -> empty .)
    RPAREN          reduce using rule 457 (expr_98 -> empty .)
    COMMA           reduce using rule 457 (expr_98 -> empty .)
    BRPAREN         reduce using rule 457 (expr_98 -> empty .)
    EQUALS          reduce using rule 457 (expr_98 -> empty .)
    ASS_ADD         reduce using rule 457 (expr_98 -> empty .)
    ASS_SUB         reduce using rule 457 (expr_98 -> empty .)
    ASS_MUL         reduce using rule 457 (expr_98 -> empty .)
    ASS_DIV         reduce using rule 457 (expr_98 -> empty .)
    ASS_AND         reduce using rule 457 (expr_98 -> empty .)
    ASS_OR          reduce using rule 457 (expr_98 -> empty .)
    ASS_XOR         reduce using rule 457 (expr_98 -> empty .)
    ASS_MOD         reduce using rule 457 (expr_98 -> empty .)
    LESS            reduce using rule 457 (expr_98 -> empty .)
    MORE            reduce using rule 457 (expr_98 -> empty .)
    COLON           reduce using rule 457 (expr_98 -> empty .)
    FRPAREN         reduce using rule 457 (expr_98 -> empty .)
    SEMI            reduce using rule 457 (expr_98 -> empty .)



state 164

    (77) elementValueArrayInitializer -> BLPAREN expr_71 . expr_72 BRPAREN
    (392) expr_72 -> . COMMA
    (393) expr_72 -> . empty
    (547) empty -> .

    COMMA           shift and go to state 261
    BRPAREN         reduce using rule 547 (empty -> .)


    expr_72                        shift and go to state 260
    empty                          shift and go to state 262

state 165

    (391) expr_71 -> empty .

    COMMA           reduce using rule 391 (expr_71 -> empty .)
    BRPAREN         reduce using rule 391 (expr_71 -> empty .)



state 166

    (390) expr_71 -> elementValue . expr_70
    (387) expr_70 -> . COMMA elementValue
    (388) expr_70 -> . expr_70 COMMA elementValue
    (389) expr_70 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 264
    BRPAREN         reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_70                        shift and go to state 263
    empty                          shift and go to state 265

state 167

    (458) expr_99 -> AND . equalityExpression
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 266
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 168

    (143) andExpression -> equalityExpression expr_99 .
    (459) expr_99 -> expr_99 . AND equalityExpression

    CARET           reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    VERTICAL        reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    OP_LAND         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    OP_LOR          reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    QUES            reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    EQUALS          reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_ADD         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_SUB         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_MUL         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_DIV         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_AND         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_OR          reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_XOR         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    ASS_MOD         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    LESS            reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    MORE            reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    COLON           reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    SEMI            reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    COMMA           reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    RPAREN          reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    BRPAREN         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    FRPAREN         reduce using rule 143 (andExpression -> equalityExpression expr_99 .)
    AND             shift and go to state 267



state 169

    (460) expr_99 -> empty .

    AND             reduce using rule 460 (expr_99 -> empty .)
    CARET           reduce using rule 460 (expr_99 -> empty .)
    VERTICAL        reduce using rule 460 (expr_99 -> empty .)
    OP_LAND         reduce using rule 460 (expr_99 -> empty .)
    OP_LOR          reduce using rule 460 (expr_99 -> empty .)
    QUES            reduce using rule 460 (expr_99 -> empty .)
    RPAREN          reduce using rule 460 (expr_99 -> empty .)
    COMMA           reduce using rule 460 (expr_99 -> empty .)
    BRPAREN         reduce using rule 460 (expr_99 -> empty .)
    EQUALS          reduce using rule 460 (expr_99 -> empty .)
    ASS_ADD         reduce using rule 460 (expr_99 -> empty .)
    ASS_SUB         reduce using rule 460 (expr_99 -> empty .)
    ASS_MUL         reduce using rule 460 (expr_99 -> empty .)
    ASS_DIV         reduce using rule 460 (expr_99 -> empty .)
    ASS_AND         reduce using rule 460 (expr_99 -> empty .)
    ASS_OR          reduce using rule 460 (expr_99 -> empty .)
    ASS_XOR         reduce using rule 460 (expr_99 -> empty .)
    ASS_MOD         reduce using rule 460 (expr_99 -> empty .)
    LESS            reduce using rule 460 (expr_99 -> empty .)
    MORE            reduce using rule 460 (expr_99 -> empty .)
    COLON           reduce using rule 460 (expr_99 -> empty .)
    FRPAREN         reduce using rule 460 (expr_99 -> empty .)
    SEMI            reduce using rule 460 (expr_99 -> empty .)



state 170

    (138) conditionalExpression -> conditionalOrExpression expr_94 .

    EQUALS          reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_ADD         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_SUB         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_MUL         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_DIV         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_AND         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_OR          reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_XOR         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    ASS_MOD         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    LESS            reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    MORE            reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    SEMI            reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    RPAREN          reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    FRPAREN         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    COLON           reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    COMMA           reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)
    BRPAREN         reduce using rule 138 (conditionalExpression -> conditionalOrExpression expr_94 .)



state 171

    (444) expr_94 -> QUES . expression COLON conditionalExpression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 268

state 172

    (445) expr_94 -> empty .

    RPAREN          reduce using rule 445 (expr_94 -> empty .)
    COMMA           reduce using rule 445 (expr_94 -> empty .)
    BRPAREN         reduce using rule 445 (expr_94 -> empty .)
    EQUALS          reduce using rule 445 (expr_94 -> empty .)
    ASS_ADD         reduce using rule 445 (expr_94 -> empty .)
    ASS_SUB         reduce using rule 445 (expr_94 -> empty .)
    ASS_MUL         reduce using rule 445 (expr_94 -> empty .)
    ASS_DIV         reduce using rule 445 (expr_94 -> empty .)
    ASS_AND         reduce using rule 445 (expr_94 -> empty .)
    ASS_OR          reduce using rule 445 (expr_94 -> empty .)
    ASS_XOR         reduce using rule 445 (expr_94 -> empty .)
    ASS_MOD         reduce using rule 445 (expr_94 -> empty .)
    LESS            reduce using rule 445 (expr_94 -> empty .)
    MORE            reduce using rule 445 (expr_94 -> empty .)
    COLON           reduce using rule 445 (expr_94 -> empty .)
    FRPAREN         reduce using rule 445 (expr_94 -> empty .)
    SEMI            reduce using rule 445 (expr_94 -> empty .)



state 173

    (141) inclusiveOrExpression -> exclusiveOrExpression expr_97 .
    (453) expr_97 -> expr_97 . VERTICAL exclusiveOrExpression

    OP_LAND         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    OP_LOR          reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    QUES            reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    EQUALS          reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_ADD         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_SUB         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_MUL         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_DIV         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_AND         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_OR          reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_XOR         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    ASS_MOD         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    LESS            reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    MORE            reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    FRPAREN         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    SEMI            reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    RPAREN          reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    COMMA           reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    BRPAREN         reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    COLON           reduce using rule 141 (inclusiveOrExpression -> exclusiveOrExpression expr_97 .)
    VERTICAL        shift and go to state 269



state 174

    (454) expr_97 -> empty .

    VERTICAL        reduce using rule 454 (expr_97 -> empty .)
    OP_LAND         reduce using rule 454 (expr_97 -> empty .)
    OP_LOR          reduce using rule 454 (expr_97 -> empty .)
    QUES            reduce using rule 454 (expr_97 -> empty .)
    RPAREN          reduce using rule 454 (expr_97 -> empty .)
    COMMA           reduce using rule 454 (expr_97 -> empty .)
    BRPAREN         reduce using rule 454 (expr_97 -> empty .)
    EQUALS          reduce using rule 454 (expr_97 -> empty .)
    ASS_ADD         reduce using rule 454 (expr_97 -> empty .)
    ASS_SUB         reduce using rule 454 (expr_97 -> empty .)
    ASS_MUL         reduce using rule 454 (expr_97 -> empty .)
    ASS_DIV         reduce using rule 454 (expr_97 -> empty .)
    ASS_AND         reduce using rule 454 (expr_97 -> empty .)
    ASS_OR          reduce using rule 454 (expr_97 -> empty .)
    ASS_XOR         reduce using rule 454 (expr_97 -> empty .)
    ASS_MOD         reduce using rule 454 (expr_97 -> empty .)
    LESS            reduce using rule 454 (expr_97 -> empty .)
    MORE            reduce using rule 454 (expr_97 -> empty .)
    COLON           reduce using rule 454 (expr_97 -> empty .)
    FRPAREN         reduce using rule 454 (expr_97 -> empty .)
    SEMI            reduce using rule 454 (expr_97 -> empty .)



state 175

    (452) expr_97 -> VERTICAL . exclusiveOrExpression
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 270
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 176

    (165) unaryExpressionNotPlusMinus -> primary expr_109 . expr_110
    (486) expr_109 -> expr_109 . selector
    (488) expr_110 -> . OP_INC
    (489) expr_110 -> . OP_DEC
    (186) selector -> . DOT IDENTIFIER expr_120
    (187) selector -> . DOT THIS
    (188) selector -> . DOT SUPER superSuffix
    (189) selector -> . innerCreator
    (190) selector -> . FLPAREN expression FRPAREN
    (201) innerCreator -> . DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest

    OP_INC          shift and go to state 273
    OP_DEC          shift and go to state 274
    DOT             shift and go to state 181
    FLPAREN         shift and go to state 177


    selector                       shift and go to state 272
    expr_110                       shift and go to state 271
    innerCreator                   shift and go to state 178

state 177

    (190) selector -> FLPAREN . expression FRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 275

state 178

    (189) selector -> innerCreator .

    OP_INC          reduce using rule 189 (selector -> innerCreator .)
    OP_DEC          reduce using rule 189 (selector -> innerCreator .)
    DOT             reduce using rule 189 (selector -> innerCreator .)
    FLPAREN         reduce using rule 189 (selector -> innerCreator .)



state 179

    (485) expr_109 -> selector .

    OP_INC          reduce using rule 485 (expr_109 -> selector .)
    OP_DEC          reduce using rule 485 (expr_109 -> selector .)
    DOT             reduce using rule 485 (expr_109 -> selector .)
    FLPAREN         reduce using rule 485 (expr_109 -> selector .)



state 180

    (487) expr_109 -> empty .

    OP_INC          reduce using rule 487 (expr_109 -> empty .)
    OP_DEC          reduce using rule 487 (expr_109 -> empty .)
    DOT             reduce using rule 487 (expr_109 -> empty .)
    FLPAREN         reduce using rule 487 (expr_109 -> empty .)



state 181

    (186) selector -> DOT . IDENTIFIER expr_120
    (187) selector -> DOT . THIS
    (188) selector -> DOT . SUPER superSuffix
    (201) innerCreator -> DOT . NEW expr_127 IDENTIFIER expr_128 classCreatorRest

    IDENTIFIER      shift and go to state 278
    THIS            shift and go to state 276
    SUPER           shift and go to state 279
    NEW             shift and go to state 277



state 182

    (159) unaryExpression -> OP_INC unaryExpression .

    MULT            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    SLASH           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    PERCENT         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    PLUS            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    DASH            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    LESS            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    MORE            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    INSTANCEOF      reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    OP_EQ           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    OP_NE           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    AND             reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    CARET           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    VERTICAL        reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    OP_LAND         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    OP_LOR          reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    QUES            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    RPAREN          reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    COMMA           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    BRPAREN         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    EQUALS          reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_ADD         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_SUB         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MUL         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_DIV         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_AND         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_OR          reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_XOR         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    ASS_MOD         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    COLON           reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    FRPAREN         reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)
    SEMI            reduce using rule 159 (unaryExpression -> OP_INC unaryExpression .)



state 183

    (160) unaryExpression -> OP_DEC unaryExpression .

    MULT            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    SLASH           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    PERCENT         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    PLUS            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    DASH            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    LESS            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    MORE            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    INSTANCEOF      reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    OP_EQ           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    OP_NE           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    AND             reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    CARET           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    VERTICAL        reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LAND         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    OP_LOR          reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    QUES            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    RPAREN          reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    COMMA           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    BRPAREN         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    EQUALS          reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_ADD         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_SUB         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MUL         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_DIV         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_AND         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_OR          reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_XOR         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    ASS_MOD         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    COLON           reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    FRPAREN         reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)
    SEMI            reduce using rule 160 (unaryExpression -> OP_DEC unaryExpression .)



state 184

    (203) nonWildcardTypeArguments -> LESS . typeList MORE
    (25) typeList -> . type expr_28
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    typeList                       shift and go to state 280
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 281

state 185

    (192) creator -> NEW classOrInterfaceType . classCreatorRest
    (199) createdName -> classOrInterfaceType .
    (202) classCreatorRest -> . arguments expr_129
    (204) arguments -> . LPAREN expr_130 RPAREN

    FLPAREN         reduce using rule 199 (createdName -> classOrInterfaceType .)
    LPAREN          shift and go to state 222


    classCreatorRest               shift and go to state 282
    arguments                      shift and go to state 283

state 186

    (191) creator -> NEW nonWildcardTypeArguments . classOrInterfaceType classCreatorRest
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53

    IDENTIFIER      shift and go to state 187


    classOrInterfaceType           shift and go to state 284

state 187

    (48) classOrInterfaceType -> IDENTIFIER . expr_51 expr_53
    (342) expr_51 -> . typeArguments
    (343) expr_51 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 286
    DOT             reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! LESS            [ reduce using rule 547 (empty -> .) ]

    expr_51                        shift and go to state 285
    typeArguments                  shift and go to state 287
    empty                          shift and go to state 288

state 188

    (194) arrayCreator -> NEW createdName . FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> NEW createdName . FLPAREN expression FRPAREN expr_122 expr_123

    FLPAREN         shift and go to state 289



state 189

    (200) createdName -> primitiveType .

    FLPAREN         reduce using rule 200 (createdName -> primitiveType .)



state 190

    (162) unaryExpressionNotPlusMinus -> TILDE unaryExpression .

    MULT            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SLASH           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PERCENT         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    PLUS            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    DASH            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    LESS            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    MORE            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    INSTANCEOF      reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_EQ           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_NE           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    AND             reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    CARET           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    VERTICAL        reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LAND         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    OP_LOR          reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    QUES            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    RPAREN          reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COMMA           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    BRPAREN         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    EQUALS          reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_ADD         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_SUB         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MUL         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_DIV         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_AND         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_OR          reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_XOR         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    ASS_MOD         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    COLON           reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    FRPAREN         reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)
    SEMI            reduce using rule 162 (unaryExpressionNotPlusMinus -> TILDE unaryExpression .)



state 191

    (73) elementValuePair -> IDENTIFIER EQUALS . elementValue
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 290

state 192

    (497) expr_113 -> empty .

    DOT             reduce using rule 497 (expr_113 -> empty .)
    FLPAREN         reduce using rule 497 (expr_113 -> empty .)
    LPAREN          reduce using rule 497 (expr_113 -> empty .)
    OP_INC          reduce using rule 497 (expr_113 -> empty .)
    OP_DEC          reduce using rule 497 (expr_113 -> empty .)



state 193

    (170) primary -> IDENTIFIER expr_113 . expr_114
    (496) expr_113 -> expr_113 . DOT IDENTIFIER
    (498) expr_114 -> . identifierSuffix
    (499) expr_114 -> . empty
    (178) identifierSuffix -> . expr_118 DOT CLASS
    (179) identifierSuffix -> . expr_119
    (180) identifierSuffix -> . arguments
    (181) identifierSuffix -> . DOT CLASS
    (182) identifierSuffix -> . DOT nonWildcardTypeArguments IDENTIFIER arguments
    (183) identifierSuffix -> . DOT THIS
    (184) identifierSuffix -> . DOT SUPER arguments
    (185) identifierSuffix -> . innerCreator
    (547) empty -> .
    (507) expr_118 -> . FLPAREN FRPAREN
    (508) expr_118 -> . expr_118 FLPAREN FRPAREN
    (509) expr_119 -> . FLPAREN expression FRPAREN
    (510) expr_119 -> . expr_119 FLPAREN expression FRPAREN
    (204) arguments -> . LPAREN expr_130 RPAREN
    (201) innerCreator -> . DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest

  ! shift/reduce conflict for DOT resolved as shift.
  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             shift and go to state 291
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    FLPAREN         shift and go to state 244
    LPAREN          shift and go to state 222

  ! DOT             [ reduce using rule 547 (empty -> .) ]
  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    identifierSuffix               shift and go to state 294
    expr_118                       shift and go to state 251
    arguments                      shift and go to state 246
    expr_114                       shift and go to state 292
    innerCreator                   shift and go to state 250
    empty                          shift and go to state 293
    expr_119                       shift and go to state 248

state 194

    (495) expr_113 -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 295



state 195

    (500) expr_115 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 296



state 196

    (174) primary -> primitiveType expr_115 . DOT CLASS
    (501) expr_115 -> expr_115 . FLPAREN FRPAREN

    DOT             shift and go to state 298
    FLPAREN         shift and go to state 297



state 197

    (502) expr_115 -> empty .

    DOT             reduce using rule 502 (expr_115 -> empty .)
    FLPAREN         reduce using rule 502 (expr_115 -> empty .)



state 198

    (476) expr_106 -> expr_105 . multiplicativeExpression
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 299
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 199

    (155) additiveExpression -> multiplicativeExpression expr_106 .
    (477) expr_106 -> expr_106 . expr_105 multiplicativeExpression
    (474) expr_105 -> . PLUS
    (475) expr_105 -> . DASH

    LESS            reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    MORE            reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    INSTANCEOF      reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    OP_EQ           reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    OP_NE           reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    AND             reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    CARET           reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    VERTICAL        reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    OP_LAND         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    OP_LOR          reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    QUES            reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    EQUALS          reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_ADD         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_SUB         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_MUL         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_DIV         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_AND         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_OR          reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_XOR         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    ASS_MOD         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    SEMI            reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    FRPAREN         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    RPAREN          reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    COMMA           reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    BRPAREN         reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    COLON           reduce using rule 155 (additiveExpression -> multiplicativeExpression expr_106 .)
    PLUS            shift and go to state 201
    DASH            shift and go to state 200


    expr_105                       shift and go to state 300

state 200

    (475) expr_105 -> DASH .

    PLUS            reduce using rule 475 (expr_105 -> DASH .)
    DASH            reduce using rule 475 (expr_105 -> DASH .)
    OP_INC          reduce using rule 475 (expr_105 -> DASH .)
    OP_DEC          reduce using rule 475 (expr_105 -> DASH .)
    TILDE           reduce using rule 475 (expr_105 -> DASH .)
    EXCLAMATION     reduce using rule 475 (expr_105 -> DASH .)
    LPAREN          reduce using rule 475 (expr_105 -> DASH .)
    THIS            reduce using rule 475 (expr_105 -> DASH .)
    IDENTIFIER      reduce using rule 475 (expr_105 -> DASH .)
    SUPER           reduce using rule 475 (expr_105 -> DASH .)
    VOID            reduce using rule 475 (expr_105 -> DASH .)
    CHARLITERAL     reduce using rule 475 (expr_105 -> DASH .)
    STRINGLITERAL   reduce using rule 475 (expr_105 -> DASH .)
    TRUE            reduce using rule 475 (expr_105 -> DASH .)
    FALSE           reduce using rule 475 (expr_105 -> DASH .)
    NULL            reduce using rule 475 (expr_105 -> DASH .)
    NEW             reduce using rule 475 (expr_105 -> DASH .)
    BOOLEAN         reduce using rule 475 (expr_105 -> DASH .)
    CHAR            reduce using rule 475 (expr_105 -> DASH .)
    BYTE            reduce using rule 475 (expr_105 -> DASH .)
    SHORT           reduce using rule 475 (expr_105 -> DASH .)
    INT             reduce using rule 475 (expr_105 -> DASH .)
    LONG            reduce using rule 475 (expr_105 -> DASH .)
    FLOAT           reduce using rule 475 (expr_105 -> DASH .)
    DOUBLE          reduce using rule 475 (expr_105 -> DASH .)
    NUMBER          reduce using rule 475 (expr_105 -> DASH .)
    HEX_NUMBER      reduce using rule 475 (expr_105 -> DASH .)
    LONG_NUMBER     reduce using rule 475 (expr_105 -> DASH .)
    LONG_HEX_NUMBER reduce using rule 475 (expr_105 -> DASH .)
    NON_INTEGER_1   reduce using rule 475 (expr_105 -> DASH .)
    NON_INTEGER_2   reduce using rule 475 (expr_105 -> DASH .)
    NON_INTEGER_3   reduce using rule 475 (expr_105 -> DASH .)



state 201

    (474) expr_105 -> PLUS .

    PLUS            reduce using rule 474 (expr_105 -> PLUS .)
    DASH            reduce using rule 474 (expr_105 -> PLUS .)
    OP_INC          reduce using rule 474 (expr_105 -> PLUS .)
    OP_DEC          reduce using rule 474 (expr_105 -> PLUS .)
    TILDE           reduce using rule 474 (expr_105 -> PLUS .)
    EXCLAMATION     reduce using rule 474 (expr_105 -> PLUS .)
    LPAREN          reduce using rule 474 (expr_105 -> PLUS .)
    THIS            reduce using rule 474 (expr_105 -> PLUS .)
    IDENTIFIER      reduce using rule 474 (expr_105 -> PLUS .)
    SUPER           reduce using rule 474 (expr_105 -> PLUS .)
    VOID            reduce using rule 474 (expr_105 -> PLUS .)
    CHARLITERAL     reduce using rule 474 (expr_105 -> PLUS .)
    STRINGLITERAL   reduce using rule 474 (expr_105 -> PLUS .)
    TRUE            reduce using rule 474 (expr_105 -> PLUS .)
    FALSE           reduce using rule 474 (expr_105 -> PLUS .)
    NULL            reduce using rule 474 (expr_105 -> PLUS .)
    NEW             reduce using rule 474 (expr_105 -> PLUS .)
    BOOLEAN         reduce using rule 474 (expr_105 -> PLUS .)
    CHAR            reduce using rule 474 (expr_105 -> PLUS .)
    BYTE            reduce using rule 474 (expr_105 -> PLUS .)
    SHORT           reduce using rule 474 (expr_105 -> PLUS .)
    INT             reduce using rule 474 (expr_105 -> PLUS .)
    LONG            reduce using rule 474 (expr_105 -> PLUS .)
    FLOAT           reduce using rule 474 (expr_105 -> PLUS .)
    DOUBLE          reduce using rule 474 (expr_105 -> PLUS .)
    NUMBER          reduce using rule 474 (expr_105 -> PLUS .)
    HEX_NUMBER      reduce using rule 474 (expr_105 -> PLUS .)
    LONG_NUMBER     reduce using rule 474 (expr_105 -> PLUS .)
    LONG_HEX_NUMBER reduce using rule 474 (expr_105 -> PLUS .)
    NON_INTEGER_1   reduce using rule 474 (expr_105 -> PLUS .)
    NON_INTEGER_2   reduce using rule 474 (expr_105 -> PLUS .)
    NON_INTEGER_3   reduce using rule 474 (expr_105 -> PLUS .)



state 202

    (478) expr_106 -> empty .

    PLUS            reduce using rule 478 (expr_106 -> empty .)
    DASH            reduce using rule 478 (expr_106 -> empty .)
    LESS            reduce using rule 478 (expr_106 -> empty .)
    MORE            reduce using rule 478 (expr_106 -> empty .)
    INSTANCEOF      reduce using rule 478 (expr_106 -> empty .)
    OP_EQ           reduce using rule 478 (expr_106 -> empty .)
    OP_NE           reduce using rule 478 (expr_106 -> empty .)
    AND             reduce using rule 478 (expr_106 -> empty .)
    CARET           reduce using rule 478 (expr_106 -> empty .)
    VERTICAL        reduce using rule 478 (expr_106 -> empty .)
    OP_LAND         reduce using rule 478 (expr_106 -> empty .)
    OP_LOR          reduce using rule 478 (expr_106 -> empty .)
    QUES            reduce using rule 478 (expr_106 -> empty .)
    RPAREN          reduce using rule 478 (expr_106 -> empty .)
    COMMA           reduce using rule 478 (expr_106 -> empty .)
    BRPAREN         reduce using rule 478 (expr_106 -> empty .)
    EQUALS          reduce using rule 478 (expr_106 -> empty .)
    ASS_ADD         reduce using rule 478 (expr_106 -> empty .)
    ASS_SUB         reduce using rule 478 (expr_106 -> empty .)
    ASS_MUL         reduce using rule 478 (expr_106 -> empty .)
    ASS_DIV         reduce using rule 478 (expr_106 -> empty .)
    ASS_AND         reduce using rule 478 (expr_106 -> empty .)
    ASS_OR          reduce using rule 478 (expr_106 -> empty .)
    ASS_XOR         reduce using rule 478 (expr_106 -> empty .)
    ASS_MOD         reduce using rule 478 (expr_106 -> empty .)
    COLON           reduce using rule 478 (expr_106 -> empty .)
    FRPAREN         reduce using rule 478 (expr_106 -> empty .)
    SEMI            reduce using rule 478 (expr_106 -> empty .)



state 203

    (147) relationalOp -> LESS . EQUALS
    (149) relationalOp -> LESS .

    EQUALS          shift and go to state 301
    PLUS            reduce using rule 149 (relationalOp -> LESS .)
    DASH            reduce using rule 149 (relationalOp -> LESS .)
    OP_INC          reduce using rule 149 (relationalOp -> LESS .)
    OP_DEC          reduce using rule 149 (relationalOp -> LESS .)
    TILDE           reduce using rule 149 (relationalOp -> LESS .)
    EXCLAMATION     reduce using rule 149 (relationalOp -> LESS .)
    LPAREN          reduce using rule 149 (relationalOp -> LESS .)
    THIS            reduce using rule 149 (relationalOp -> LESS .)
    IDENTIFIER      reduce using rule 149 (relationalOp -> LESS .)
    SUPER           reduce using rule 149 (relationalOp -> LESS .)
    VOID            reduce using rule 149 (relationalOp -> LESS .)
    CHARLITERAL     reduce using rule 149 (relationalOp -> LESS .)
    STRINGLITERAL   reduce using rule 149 (relationalOp -> LESS .)
    TRUE            reduce using rule 149 (relationalOp -> LESS .)
    FALSE           reduce using rule 149 (relationalOp -> LESS .)
    NULL            reduce using rule 149 (relationalOp -> LESS .)
    NEW             reduce using rule 149 (relationalOp -> LESS .)
    BOOLEAN         reduce using rule 149 (relationalOp -> LESS .)
    CHAR            reduce using rule 149 (relationalOp -> LESS .)
    BYTE            reduce using rule 149 (relationalOp -> LESS .)
    SHORT           reduce using rule 149 (relationalOp -> LESS .)
    INT             reduce using rule 149 (relationalOp -> LESS .)
    LONG            reduce using rule 149 (relationalOp -> LESS .)
    FLOAT           reduce using rule 149 (relationalOp -> LESS .)
    DOUBLE          reduce using rule 149 (relationalOp -> LESS .)
    NUMBER          reduce using rule 149 (relationalOp -> LESS .)
    HEX_NUMBER      reduce using rule 149 (relationalOp -> LESS .)
    LONG_NUMBER     reduce using rule 149 (relationalOp -> LESS .)
    LONG_HEX_NUMBER reduce using rule 149 (relationalOp -> LESS .)
    NON_INTEGER_1   reduce using rule 149 (relationalOp -> LESS .)
    NON_INTEGER_2   reduce using rule 149 (relationalOp -> LESS .)
    NON_INTEGER_3   reduce using rule 149 (relationalOp -> LESS .)



state 204

    (146) relationalExpression -> shiftExpression expr_103 .
    (469) expr_103 -> expr_103 . relationalOp shiftExpression
    (147) relationalOp -> . LESS EQUALS
    (148) relationalOp -> . MORE EQUALS
    (149) relationalOp -> . LESS
    (150) relationalOp -> . MORE

  ! shift/reduce conflict for LESS resolved as shift.
  ! shift/reduce conflict for MORE resolved as shift.
    INSTANCEOF      reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    OP_EQ           reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    OP_NE           reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    AND             reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    CARET           reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    VERTICAL        reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    OP_LAND         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    OP_LOR          reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    QUES            reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    RPAREN          reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    EQUALS          reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_ADD         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_SUB         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_MUL         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_DIV         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_AND         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_OR          reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_XOR         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    ASS_MOD         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    SEMI            reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    COMMA           reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    FRPAREN         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    COLON           reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    BRPAREN         reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .)
    LESS            shift and go to state 203
    MORE            shift and go to state 207

  ! LESS            [ reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .) ]
  ! MORE            [ reduce using rule 146 (relationalExpression -> shiftExpression expr_103 .) ]

    relationalOp                   shift and go to state 302

state 205

    (468) expr_103 -> relationalOp . shiftExpression
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 303
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 206

    (470) expr_103 -> empty .

    LESS            reduce using rule 470 (expr_103 -> empty .)
    MORE            reduce using rule 470 (expr_103 -> empty .)
    INSTANCEOF      reduce using rule 470 (expr_103 -> empty .)
    OP_EQ           reduce using rule 470 (expr_103 -> empty .)
    OP_NE           reduce using rule 470 (expr_103 -> empty .)
    AND             reduce using rule 470 (expr_103 -> empty .)
    CARET           reduce using rule 470 (expr_103 -> empty .)
    VERTICAL        reduce using rule 470 (expr_103 -> empty .)
    OP_LAND         reduce using rule 470 (expr_103 -> empty .)
    OP_LOR          reduce using rule 470 (expr_103 -> empty .)
    QUES            reduce using rule 470 (expr_103 -> empty .)
    RPAREN          reduce using rule 470 (expr_103 -> empty .)
    COMMA           reduce using rule 470 (expr_103 -> empty .)
    BRPAREN         reduce using rule 470 (expr_103 -> empty .)
    EQUALS          reduce using rule 470 (expr_103 -> empty .)
    ASS_ADD         reduce using rule 470 (expr_103 -> empty .)
    ASS_SUB         reduce using rule 470 (expr_103 -> empty .)
    ASS_MUL         reduce using rule 470 (expr_103 -> empty .)
    ASS_DIV         reduce using rule 470 (expr_103 -> empty .)
    ASS_AND         reduce using rule 470 (expr_103 -> empty .)
    ASS_OR          reduce using rule 470 (expr_103 -> empty .)
    ASS_XOR         reduce using rule 470 (expr_103 -> empty .)
    ASS_MOD         reduce using rule 470 (expr_103 -> empty .)
    COLON           reduce using rule 470 (expr_103 -> empty .)
    FRPAREN         reduce using rule 470 (expr_103 -> empty .)
    SEMI            reduce using rule 470 (expr_103 -> empty .)



state 207

    (148) relationalOp -> MORE . EQUALS
    (150) relationalOp -> MORE .

    EQUALS          shift and go to state 304
    PLUS            reduce using rule 150 (relationalOp -> MORE .)
    DASH            reduce using rule 150 (relationalOp -> MORE .)
    OP_INC          reduce using rule 150 (relationalOp -> MORE .)
    OP_DEC          reduce using rule 150 (relationalOp -> MORE .)
    TILDE           reduce using rule 150 (relationalOp -> MORE .)
    EXCLAMATION     reduce using rule 150 (relationalOp -> MORE .)
    LPAREN          reduce using rule 150 (relationalOp -> MORE .)
    THIS            reduce using rule 150 (relationalOp -> MORE .)
    IDENTIFIER      reduce using rule 150 (relationalOp -> MORE .)
    SUPER           reduce using rule 150 (relationalOp -> MORE .)
    VOID            reduce using rule 150 (relationalOp -> MORE .)
    CHARLITERAL     reduce using rule 150 (relationalOp -> MORE .)
    STRINGLITERAL   reduce using rule 150 (relationalOp -> MORE .)
    TRUE            reduce using rule 150 (relationalOp -> MORE .)
    FALSE           reduce using rule 150 (relationalOp -> MORE .)
    NULL            reduce using rule 150 (relationalOp -> MORE .)
    NEW             reduce using rule 150 (relationalOp -> MORE .)
    BOOLEAN         reduce using rule 150 (relationalOp -> MORE .)
    CHAR            reduce using rule 150 (relationalOp -> MORE .)
    BYTE            reduce using rule 150 (relationalOp -> MORE .)
    SHORT           reduce using rule 150 (relationalOp -> MORE .)
    INT             reduce using rule 150 (relationalOp -> MORE .)
    LONG            reduce using rule 150 (relationalOp -> MORE .)
    FLOAT           reduce using rule 150 (relationalOp -> MORE .)
    DOUBLE          reduce using rule 150 (relationalOp -> MORE .)
    NUMBER          reduce using rule 150 (relationalOp -> MORE .)
    HEX_NUMBER      reduce using rule 150 (relationalOp -> MORE .)
    LONG_NUMBER     reduce using rule 150 (relationalOp -> MORE .)
    LONG_HEX_NUMBER reduce using rule 150 (relationalOp -> MORE .)
    NON_INTEGER_1   reduce using rule 150 (relationalOp -> MORE .)
    NON_INTEGER_2   reduce using rule 150 (relationalOp -> MORE .)
    NON_INTEGER_3   reduce using rule 150 (relationalOp -> MORE .)



state 208

    (156) multiplicativeExpression -> unaryExpression expr_108 .
    (483) expr_108 -> expr_108 . expr_107 unaryExpression
    (479) expr_107 -> . MULT
    (480) expr_107 -> . SLASH
    (481) expr_107 -> . PERCENT

    PLUS            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    DASH            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    LESS            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    MORE            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    INSTANCEOF      reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    OP_EQ           reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    OP_NE           reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    AND             reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    CARET           reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    VERTICAL        reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    OP_LAND         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    OP_LOR          reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    QUES            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    EQUALS          reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_ADD         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_SUB         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_MUL         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_DIV         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_AND         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_OR          reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_XOR         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    ASS_MOD         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    SEMI            reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    COLON           reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    RPAREN          reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    COMMA           reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    BRPAREN         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    FRPAREN         reduce using rule 156 (multiplicativeExpression -> unaryExpression expr_108 .)
    MULT            shift and go to state 213
    SLASH           shift and go to state 212
    PERCENT         shift and go to state 209


    expr_107                       shift and go to state 305

state 209

    (481) expr_107 -> PERCENT .

    PLUS            reduce using rule 481 (expr_107 -> PERCENT .)
    DASH            reduce using rule 481 (expr_107 -> PERCENT .)
    OP_INC          reduce using rule 481 (expr_107 -> PERCENT .)
    OP_DEC          reduce using rule 481 (expr_107 -> PERCENT .)
    TILDE           reduce using rule 481 (expr_107 -> PERCENT .)
    EXCLAMATION     reduce using rule 481 (expr_107 -> PERCENT .)
    LPAREN          reduce using rule 481 (expr_107 -> PERCENT .)
    THIS            reduce using rule 481 (expr_107 -> PERCENT .)
    IDENTIFIER      reduce using rule 481 (expr_107 -> PERCENT .)
    SUPER           reduce using rule 481 (expr_107 -> PERCENT .)
    VOID            reduce using rule 481 (expr_107 -> PERCENT .)
    CHARLITERAL     reduce using rule 481 (expr_107 -> PERCENT .)
    STRINGLITERAL   reduce using rule 481 (expr_107 -> PERCENT .)
    TRUE            reduce using rule 481 (expr_107 -> PERCENT .)
    FALSE           reduce using rule 481 (expr_107 -> PERCENT .)
    NULL            reduce using rule 481 (expr_107 -> PERCENT .)
    NEW             reduce using rule 481 (expr_107 -> PERCENT .)
    BOOLEAN         reduce using rule 481 (expr_107 -> PERCENT .)
    CHAR            reduce using rule 481 (expr_107 -> PERCENT .)
    BYTE            reduce using rule 481 (expr_107 -> PERCENT .)
    SHORT           reduce using rule 481 (expr_107 -> PERCENT .)
    INT             reduce using rule 481 (expr_107 -> PERCENT .)
    LONG            reduce using rule 481 (expr_107 -> PERCENT .)
    FLOAT           reduce using rule 481 (expr_107 -> PERCENT .)
    DOUBLE          reduce using rule 481 (expr_107 -> PERCENT .)
    NUMBER          reduce using rule 481 (expr_107 -> PERCENT .)
    HEX_NUMBER      reduce using rule 481 (expr_107 -> PERCENT .)
    LONG_NUMBER     reduce using rule 481 (expr_107 -> PERCENT .)
    LONG_HEX_NUMBER reduce using rule 481 (expr_107 -> PERCENT .)
    NON_INTEGER_1   reduce using rule 481 (expr_107 -> PERCENT .)
    NON_INTEGER_2   reduce using rule 481 (expr_107 -> PERCENT .)
    NON_INTEGER_3   reduce using rule 481 (expr_107 -> PERCENT .)



state 210

    (482) expr_108 -> expr_107 . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    primitiveType                  shift and go to state 96
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 306
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 211

    (484) expr_108 -> empty .

    MULT            reduce using rule 484 (expr_108 -> empty .)
    SLASH           reduce using rule 484 (expr_108 -> empty .)
    PERCENT         reduce using rule 484 (expr_108 -> empty .)
    PLUS            reduce using rule 484 (expr_108 -> empty .)
    DASH            reduce using rule 484 (expr_108 -> empty .)
    LESS            reduce using rule 484 (expr_108 -> empty .)
    MORE            reduce using rule 484 (expr_108 -> empty .)
    INSTANCEOF      reduce using rule 484 (expr_108 -> empty .)
    OP_EQ           reduce using rule 484 (expr_108 -> empty .)
    OP_NE           reduce using rule 484 (expr_108 -> empty .)
    AND             reduce using rule 484 (expr_108 -> empty .)
    CARET           reduce using rule 484 (expr_108 -> empty .)
    VERTICAL        reduce using rule 484 (expr_108 -> empty .)
    OP_LAND         reduce using rule 484 (expr_108 -> empty .)
    OP_LOR          reduce using rule 484 (expr_108 -> empty .)
    QUES            reduce using rule 484 (expr_108 -> empty .)
    RPAREN          reduce using rule 484 (expr_108 -> empty .)
    COMMA           reduce using rule 484 (expr_108 -> empty .)
    BRPAREN         reduce using rule 484 (expr_108 -> empty .)
    EQUALS          reduce using rule 484 (expr_108 -> empty .)
    ASS_ADD         reduce using rule 484 (expr_108 -> empty .)
    ASS_SUB         reduce using rule 484 (expr_108 -> empty .)
    ASS_MUL         reduce using rule 484 (expr_108 -> empty .)
    ASS_DIV         reduce using rule 484 (expr_108 -> empty .)
    ASS_AND         reduce using rule 484 (expr_108 -> empty .)
    ASS_OR          reduce using rule 484 (expr_108 -> empty .)
    ASS_XOR         reduce using rule 484 (expr_108 -> empty .)
    ASS_MOD         reduce using rule 484 (expr_108 -> empty .)
    COLON           reduce using rule 484 (expr_108 -> empty .)
    FRPAREN         reduce using rule 484 (expr_108 -> empty .)
    SEMI            reduce using rule 484 (expr_108 -> empty .)



state 212

    (480) expr_107 -> SLASH .

    PLUS            reduce using rule 480 (expr_107 -> SLASH .)
    DASH            reduce using rule 480 (expr_107 -> SLASH .)
    OP_INC          reduce using rule 480 (expr_107 -> SLASH .)
    OP_DEC          reduce using rule 480 (expr_107 -> SLASH .)
    TILDE           reduce using rule 480 (expr_107 -> SLASH .)
    EXCLAMATION     reduce using rule 480 (expr_107 -> SLASH .)
    LPAREN          reduce using rule 480 (expr_107 -> SLASH .)
    THIS            reduce using rule 480 (expr_107 -> SLASH .)
    IDENTIFIER      reduce using rule 480 (expr_107 -> SLASH .)
    SUPER           reduce using rule 480 (expr_107 -> SLASH .)
    VOID            reduce using rule 480 (expr_107 -> SLASH .)
    CHARLITERAL     reduce using rule 480 (expr_107 -> SLASH .)
    STRINGLITERAL   reduce using rule 480 (expr_107 -> SLASH .)
    TRUE            reduce using rule 480 (expr_107 -> SLASH .)
    FALSE           reduce using rule 480 (expr_107 -> SLASH .)
    NULL            reduce using rule 480 (expr_107 -> SLASH .)
    NEW             reduce using rule 480 (expr_107 -> SLASH .)
    BOOLEAN         reduce using rule 480 (expr_107 -> SLASH .)
    CHAR            reduce using rule 480 (expr_107 -> SLASH .)
    BYTE            reduce using rule 480 (expr_107 -> SLASH .)
    SHORT           reduce using rule 480 (expr_107 -> SLASH .)
    INT             reduce using rule 480 (expr_107 -> SLASH .)
    LONG            reduce using rule 480 (expr_107 -> SLASH .)
    FLOAT           reduce using rule 480 (expr_107 -> SLASH .)
    DOUBLE          reduce using rule 480 (expr_107 -> SLASH .)
    NUMBER          reduce using rule 480 (expr_107 -> SLASH .)
    HEX_NUMBER      reduce using rule 480 (expr_107 -> SLASH .)
    LONG_NUMBER     reduce using rule 480 (expr_107 -> SLASH .)
    LONG_HEX_NUMBER reduce using rule 480 (expr_107 -> SLASH .)
    NON_INTEGER_1   reduce using rule 480 (expr_107 -> SLASH .)
    NON_INTEGER_2   reduce using rule 480 (expr_107 -> SLASH .)
    NON_INTEGER_3   reduce using rule 480 (expr_107 -> SLASH .)



state 213

    (479) expr_107 -> MULT .

    PLUS            reduce using rule 479 (expr_107 -> MULT .)
    DASH            reduce using rule 479 (expr_107 -> MULT .)
    OP_INC          reduce using rule 479 (expr_107 -> MULT .)
    OP_DEC          reduce using rule 479 (expr_107 -> MULT .)
    TILDE           reduce using rule 479 (expr_107 -> MULT .)
    EXCLAMATION     reduce using rule 479 (expr_107 -> MULT .)
    LPAREN          reduce using rule 479 (expr_107 -> MULT .)
    THIS            reduce using rule 479 (expr_107 -> MULT .)
    IDENTIFIER      reduce using rule 479 (expr_107 -> MULT .)
    SUPER           reduce using rule 479 (expr_107 -> MULT .)
    VOID            reduce using rule 479 (expr_107 -> MULT .)
    CHARLITERAL     reduce using rule 479 (expr_107 -> MULT .)
    STRINGLITERAL   reduce using rule 479 (expr_107 -> MULT .)
    TRUE            reduce using rule 479 (expr_107 -> MULT .)
    FALSE           reduce using rule 479 (expr_107 -> MULT .)
    NULL            reduce using rule 479 (expr_107 -> MULT .)
    NEW             reduce using rule 479 (expr_107 -> MULT .)
    BOOLEAN         reduce using rule 479 (expr_107 -> MULT .)
    CHAR            reduce using rule 479 (expr_107 -> MULT .)
    BYTE            reduce using rule 479 (expr_107 -> MULT .)
    SHORT           reduce using rule 479 (expr_107 -> MULT .)
    INT             reduce using rule 479 (expr_107 -> MULT .)
    LONG            reduce using rule 479 (expr_107 -> MULT .)
    FLOAT           reduce using rule 479 (expr_107 -> MULT .)
    DOUBLE          reduce using rule 479 (expr_107 -> MULT .)
    NUMBER          reduce using rule 479 (expr_107 -> MULT .)
    HEX_NUMBER      reduce using rule 479 (expr_107 -> MULT .)
    LONG_NUMBER     reduce using rule 479 (expr_107 -> MULT .)
    LONG_HEX_NUMBER reduce using rule 479 (expr_107 -> MULT .)
    NON_INTEGER_1   reduce using rule 479 (expr_107 -> MULT .)
    NON_INTEGER_2   reduce using rule 479 (expr_107 -> MULT .)
    NON_INTEGER_3   reduce using rule 479 (expr_107 -> MULT .)



state 214

    (46) type -> classOrInterfaceType . expr_49
    (336) expr_49 -> . FLPAREN FRPAREN
    (337) expr_49 -> . expr_49 FLPAREN FRPAREN
    (338) expr_49 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 307
    RPAREN          reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_49                        shift and go to state 308
    empty                          shift and go to state 309

state 215

    (123) parExpression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 310



state 216

    (48) classOrInterfaceType -> IDENTIFIER . expr_51 expr_53
    (170) primary -> IDENTIFIER . expr_113 expr_114
    (342) expr_51 -> . typeArguments
    (343) expr_51 -> . empty
    (495) expr_113 -> . DOT IDENTIFIER
    (496) expr_113 -> . expr_113 DOT IDENTIFIER
    (497) expr_113 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 194
    LESS            shift and go to state 286
    FLPAREN         reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    expr_51                        shift and go to state 285
    typeArguments                  shift and go to state 287
    expr_113                       shift and go to state 193
    empty                          shift and go to state 311

state 217

    (167) castExpression -> LPAREN type . RPAREN unaryExpressionNotPlusMinus

    RPAREN          shift and go to state 312



state 218

    (125) expression -> conditionalExpression . expr_93
    (442) expr_93 -> . assignmentOperator expression
    (443) expr_93 -> . empty
    (126) assignmentOperator -> . EQUALS
    (127) assignmentOperator -> . ASS_ADD
    (128) assignmentOperator -> . ASS_SUB
    (129) assignmentOperator -> . ASS_MUL
    (130) assignmentOperator -> . ASS_DIV
    (131) assignmentOperator -> . ASS_AND
    (132) assignmentOperator -> . ASS_OR
    (133) assignmentOperator -> . ASS_XOR
    (134) assignmentOperator -> . ASS_MOD
    (135) assignmentOperator -> . LESS LESS EQUALS
    (136) assignmentOperator -> . MORE MORE MORE EQUALS
    (137) assignmentOperator -> . MORE MORE EQUALS
    (547) empty -> .

    EQUALS          shift and go to state 320
    ASS_ADD         shift and go to state 314
    ASS_SUB         shift and go to state 323
    ASS_MUL         shift and go to state 321
    ASS_DIV         shift and go to state 313
    ASS_AND         shift and go to state 322
    ASS_OR          shift and go to state 317
    ASS_XOR         shift and go to state 315
    ASS_MOD         shift and go to state 326
    LESS            shift and go to state 319
    MORE            shift and go to state 324
    RPAREN          reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)


    assignmentOperator             shift and go to state 318
    empty                          shift and go to state 325
    expr_93                        shift and go to state 316

state 219

    (166) castExpression -> LPAREN primitiveType . RPAREN unaryExpression
    (47) type -> primitiveType . expr_50
    (174) primary -> primitiveType . expr_115 DOT CLASS
    (339) expr_50 -> . FLPAREN FRPAREN
    (340) expr_50 -> . expr_50 FLPAREN FRPAREN
    (341) expr_50 -> . empty
    (500) expr_115 -> . FLPAREN FRPAREN
    (501) expr_115 -> . expr_115 FLPAREN FRPAREN
    (502) expr_115 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
  ! shift/reduce conflict for RPAREN resolved as shift.
    RPAREN          shift and go to state 330
    FLPAREN         shift and go to state 328
    DOT             reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]
  ! RPAREN          [ reduce using rule 547 (empty -> .) ]

    expr_50                        shift and go to state 327
    expr_115                       shift and go to state 196
    empty                          shift and go to state 329

state 220

    (171) primary -> SUPER superSuffix .

    DOT             reduce using rule 171 (primary -> SUPER superSuffix .)
    FLPAREN         reduce using rule 171 (primary -> SUPER superSuffix .)
    OP_INC          reduce using rule 171 (primary -> SUPER superSuffix .)
    OP_DEC          reduce using rule 171 (primary -> SUPER superSuffix .)



state 221

    (176) superSuffix -> arguments .

    DOT             reduce using rule 176 (superSuffix -> arguments .)
    FLPAREN         reduce using rule 176 (superSuffix -> arguments .)
    OP_INC          reduce using rule 176 (superSuffix -> arguments .)
    OP_DEC          reduce using rule 176 (superSuffix -> arguments .)



state 222

    (204) arguments -> LPAREN . expr_130 RPAREN
    (535) expr_130 -> . expressionList
    (536) expr_130 -> . empty
    (124) expressionList -> . expression expr_92
    (547) empty -> .
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    RPAREN          reduce using rule 547 (empty -> .)
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    expr_130                       shift and go to state 331
    expressionList                 shift and go to state 333
    empty                          shift and go to state 334
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 332

state 223

    (177) superSuffix -> DOT . expr_116 IDENTIFIER expr_117
    (503) expr_116 -> . typeArguments
    (504) expr_116 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

    LESS            shift and go to state 286
    IDENTIFIER      reduce using rule 547 (empty -> .)


    typeArguments                  shift and go to state 335
    expr_116                       shift and go to state 336
    empty                          shift and go to state 337

state 224

    (376) expr_65 -> expr_65 DOT IDENTIFIER .

    DOT             reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    LPAREN          reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    AT              reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    PACKAGE         reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    CLASS           reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    INTERFACE       reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    ENUM            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    RPAREN          reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    COMMA           reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    BRPAREN         reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    BOOLEAN         reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    CHAR            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    BYTE            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    SHORT           reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    INT             reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    LONG            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    FLOAT           reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    DOUBLE          reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    LESS            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    VOID            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    SEMI            reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)
    BLPAREN         reduce using rule 376 (expr_65 -> expr_65 DOT IDENTIFIER .)



state 225

    (4) importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 . expr_7 SEMI
    (229) expr_6 -> expr_6 . DOT IDENTIFIER
    (230) expr_7 -> . DOT MULT
    (231) expr_7 -> . empty
    (547) empty -> .

    DOT             shift and go to state 340
    SEMI            reduce using rule 547 (empty -> .)


    expr_7                         shift and go to state 339
    empty                          shift and go to state 338

state 226

    (228) expr_6 -> DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 341



state 227

    (3) importDeclaration -> IMPORT expr_4 IDENTIFIER DOT . MULT SEMI

    MULT            shift and go to state 342



state 228

    (78) annotationTypeDeclaration -> modifiers AT INTERFACE . IDENTIFIER annotationTypeBody

    IDENTIFIER      shift and go to state 343



state 229

    (24) normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER . expr_26 expr_27 interfaceBody
    (281) expr_26 -> . typeParameters
    (282) expr_26 -> . empty
    (14) typeParameters -> . LESS typeParameter expr_13 MORE
    (547) empty -> .

    LESS            shift and go to state 344
    EXTENDS         reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)


    typeParameters                 shift and go to state 346
    empty                          shift and go to state 345
    expr_26                        shift and go to state 347

state 230

    (17) enumDeclaration -> modifiers expr_16 IDENTIFIER . expr_17 enumBody
    (261) expr_17 -> . IMPLEMENTS typeList
    (262) expr_17 -> . empty
    (547) empty -> .

    IMPLEMENTS      shift and go to state 348
    BLPAREN         reduce using rule 547 (empty -> .)


    expr_17                        shift and go to state 349
    empty                          shift and go to state 350

state 231

    (13) normalClassDeclaration -> modifiers CLASS IDENTIFIER . expr_10 expr_11 expr_12 classBody
    (246) expr_10 -> . typeParameters
    (247) expr_10 -> . empty
    (14) typeParameters -> . LESS typeParameter expr_13 MORE
    (547) empty -> .

    LESS            shift and go to state 344
    EXTENDS         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)


    empty                          shift and go to state 351
    typeParameters                 shift and go to state 352
    expr_10                        shift and go to state 353

state 232

    (175) primary -> VOID DOT CLASS .

    DOT             reduce using rule 175 (primary -> VOID DOT CLASS .)
    FLPAREN         reduce using rule 175 (primary -> VOID DOT CLASS .)
    OP_INC          reduce using rule 175 (primary -> VOID DOT CLASS .)
    OP_DEC          reduce using rule 175 (primary -> VOID DOT CLASS .)



state 233

    (447) expr_95 -> expr_95 OP_LOR . conditionalAndExpression
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 354
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 234

    (446) expr_95 -> OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 446 (expr_95 -> OP_LOR conditionalAndExpression .)



state 235

    (73) elementValuePair -> IDENTIFIER . EQUALS elementValue

    EQUALS          shift and go to state 191



state 236

    (384) expr_69 -> COMMA elementValuePair .

    COMMA           reduce using rule 384 (expr_69 -> COMMA elementValuePair .)
    RPAREN          reduce using rule 384 (expr_69 -> COMMA elementValuePair .)



state 237

    (385) expr_69 -> expr_69 COMMA . elementValuePair
    (73) elementValuePair -> . IDENTIFIER EQUALS elementValue

    IDENTIFIER      shift and go to state 235


    elementValuePair               shift and go to state 355

state 238

    (47) type -> primitiveType . expr_50
    (339) expr_50 -> . FLPAREN FRPAREN
    (340) expr_50 -> . expr_50 FLPAREN FRPAREN
    (341) expr_50 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 356
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_50                        shift and go to state 327
    empty                          shift and go to state 357

state 239

    (466) expr_102 -> INSTANCEOF type .

    OP_EQ           reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    OP_NE           reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    AND             reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    CARET           reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    VERTICAL        reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    OP_LAND         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    OP_LOR          reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    QUES            reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    RPAREN          reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    COMMA           reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    BRPAREN         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    EQUALS          reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_ADD         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_SUB         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_MUL         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_DIV         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_AND         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_OR          reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_XOR         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    ASS_MOD         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    LESS            reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    MORE            reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    COLON           reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    FRPAREN         reduce using rule 466 (expr_102 -> INSTANCEOF type .)
    SEMI            reduce using rule 466 (expr_102 -> INSTANCEOF type .)



state 240

    (464) expr_101 -> expr_101 expr_100 . instanceOfExpression
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 358
    castExpression                 shift and go to state 114
    primitiveType                  shift and go to state 96
    unaryExpressionNotPlusMinus    shift and go to state 76
    arrayCreator                   shift and go to state 116

state 241

    (463) expr_101 -> expr_100 instanceOfExpression .

    OP_EQ           reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    OP_NE           reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    AND             reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    CARET           reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    VERTICAL        reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    OP_LAND         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    OP_LOR          reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    QUES            reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    RPAREN          reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    COMMA           reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    BRPAREN         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    EQUALS          reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_ADD         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_SUB         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_MUL         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_DIV         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_AND         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_OR          reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_XOR         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    ASS_MOD         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    LESS            reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    MORE            reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    COLON           reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    FRPAREN         reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)
    SEMI            reduce using rule 463 (expr_101 -> expr_100 instanceOfExpression .)



state 242

    (490) expr_111 -> DOT IDENTIFIER .

    DOT             reduce using rule 490 (expr_111 -> DOT IDENTIFIER .)
    FLPAREN         reduce using rule 490 (expr_111 -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 490 (expr_111 -> DOT IDENTIFIER .)
    OP_INC          reduce using rule 490 (expr_111 -> DOT IDENTIFIER .)
    OP_DEC          reduce using rule 490 (expr_111 -> DOT IDENTIFIER .)



state 243

    (491) expr_111 -> expr_111 DOT . IDENTIFIER
    (181) identifierSuffix -> DOT . CLASS
    (182) identifierSuffix -> DOT . nonWildcardTypeArguments IDENTIFIER arguments
    (183) identifierSuffix -> DOT . THIS
    (184) identifierSuffix -> DOT . SUPER arguments
    (201) innerCreator -> DOT . NEW expr_127 IDENTIFIER expr_128 classCreatorRest
    (203) nonWildcardTypeArguments -> . LESS typeList MORE

    IDENTIFIER      shift and go to state 361
    CLASS           shift and go to state 363
    THIS            shift and go to state 359
    SUPER           shift and go to state 362
    NEW             shift and go to state 277
    LESS            shift and go to state 184


    nonWildcardTypeArguments       shift and go to state 360

state 244

    (507) expr_118 -> FLPAREN . FRPAREN
    (509) expr_119 -> FLPAREN . expression FRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    FRPAREN         shift and go to state 364
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 365

state 245

    (169) primary -> THIS expr_111 expr_112 .

    DOT             reduce using rule 169 (primary -> THIS expr_111 expr_112 .)
    FLPAREN         reduce using rule 169 (primary -> THIS expr_111 expr_112 .)
    OP_INC          reduce using rule 169 (primary -> THIS expr_111 expr_112 .)
    OP_DEC          reduce using rule 169 (primary -> THIS expr_111 expr_112 .)



state 246

    (180) identifierSuffix -> arguments .

    DOT             reduce using rule 180 (identifierSuffix -> arguments .)
    FLPAREN         reduce using rule 180 (identifierSuffix -> arguments .)
    OP_INC          reduce using rule 180 (identifierSuffix -> arguments .)
    OP_DEC          reduce using rule 180 (identifierSuffix -> arguments .)



state 247

    (494) expr_112 -> empty .

    DOT             reduce using rule 494 (expr_112 -> empty .)
    FLPAREN         reduce using rule 494 (expr_112 -> empty .)
    OP_INC          reduce using rule 494 (expr_112 -> empty .)
    OP_DEC          reduce using rule 494 (expr_112 -> empty .)



state 248

    (179) identifierSuffix -> expr_119 .
    (510) expr_119 -> expr_119 . FLPAREN expression FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             reduce using rule 179 (identifierSuffix -> expr_119 .)
    OP_INC          reduce using rule 179 (identifierSuffix -> expr_119 .)
    OP_DEC          reduce using rule 179 (identifierSuffix -> expr_119 .)
    FLPAREN         shift and go to state 366

  ! FLPAREN         [ reduce using rule 179 (identifierSuffix -> expr_119 .) ]


state 249

    (493) expr_112 -> identifierSuffix .

    DOT             reduce using rule 493 (expr_112 -> identifierSuffix .)
    FLPAREN         reduce using rule 493 (expr_112 -> identifierSuffix .)
    OP_INC          reduce using rule 493 (expr_112 -> identifierSuffix .)
    OP_DEC          reduce using rule 493 (expr_112 -> identifierSuffix .)



state 250

    (185) identifierSuffix -> innerCreator .

    DOT             reduce using rule 185 (identifierSuffix -> innerCreator .)
    FLPAREN         reduce using rule 185 (identifierSuffix -> innerCreator .)
    OP_INC          reduce using rule 185 (identifierSuffix -> innerCreator .)
    OP_DEC          reduce using rule 185 (identifierSuffix -> innerCreator .)



state 251

    (178) identifierSuffix -> expr_118 . DOT CLASS
    (508) expr_118 -> expr_118 . FLPAREN FRPAREN

    DOT             shift and go to state 368
    FLPAREN         shift and go to state 367



state 252

    (449) expr_96 -> OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 449 (expr_96 -> OP_LAND inclusiveOrExpression .)



state 253

    (450) expr_96 -> expr_96 OP_LAND . inclusiveOrExpression
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 369
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 254

    (152) shiftOp -> LESS LESS .

    PLUS            reduce using rule 152 (shiftOp -> LESS LESS .)
    DASH            reduce using rule 152 (shiftOp -> LESS LESS .)
    OP_INC          reduce using rule 152 (shiftOp -> LESS LESS .)
    OP_DEC          reduce using rule 152 (shiftOp -> LESS LESS .)
    TILDE           reduce using rule 152 (shiftOp -> LESS LESS .)
    EXCLAMATION     reduce using rule 152 (shiftOp -> LESS LESS .)
    LPAREN          reduce using rule 152 (shiftOp -> LESS LESS .)
    THIS            reduce using rule 152 (shiftOp -> LESS LESS .)
    IDENTIFIER      reduce using rule 152 (shiftOp -> LESS LESS .)
    SUPER           reduce using rule 152 (shiftOp -> LESS LESS .)
    VOID            reduce using rule 152 (shiftOp -> LESS LESS .)
    CHARLITERAL     reduce using rule 152 (shiftOp -> LESS LESS .)
    STRINGLITERAL   reduce using rule 152 (shiftOp -> LESS LESS .)
    TRUE            reduce using rule 152 (shiftOp -> LESS LESS .)
    FALSE           reduce using rule 152 (shiftOp -> LESS LESS .)
    NULL            reduce using rule 152 (shiftOp -> LESS LESS .)
    NEW             reduce using rule 152 (shiftOp -> LESS LESS .)
    BOOLEAN         reduce using rule 152 (shiftOp -> LESS LESS .)
    CHAR            reduce using rule 152 (shiftOp -> LESS LESS .)
    BYTE            reduce using rule 152 (shiftOp -> LESS LESS .)
    SHORT           reduce using rule 152 (shiftOp -> LESS LESS .)
    INT             reduce using rule 152 (shiftOp -> LESS LESS .)
    LONG            reduce using rule 152 (shiftOp -> LESS LESS .)
    FLOAT           reduce using rule 152 (shiftOp -> LESS LESS .)
    DOUBLE          reduce using rule 152 (shiftOp -> LESS LESS .)
    NUMBER          reduce using rule 152 (shiftOp -> LESS LESS .)
    HEX_NUMBER      reduce using rule 152 (shiftOp -> LESS LESS .)
    LONG_NUMBER     reduce using rule 152 (shiftOp -> LESS LESS .)
    LONG_HEX_NUMBER reduce using rule 152 (shiftOp -> LESS LESS .)
    NON_INTEGER_1   reduce using rule 152 (shiftOp -> LESS LESS .)
    NON_INTEGER_2   reduce using rule 152 (shiftOp -> LESS LESS .)
    NON_INTEGER_3   reduce using rule 152 (shiftOp -> LESS LESS .)



state 255

    (472) expr_104 -> expr_104 shiftOp . additiveExpression
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 370
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 256

    (471) expr_104 -> shiftOp additiveExpression .

    LESS            reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    MORE            reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    OP_EQ           reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    OP_NE           reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    AND             reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    CARET           reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    VERTICAL        reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    OP_LAND         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    OP_LOR          reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    QUES            reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    RPAREN          reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    COMMA           reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    BRPAREN         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    EQUALS          reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_AND         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_OR          reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    COLON           reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    FRPAREN         reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)
    SEMI            reduce using rule 471 (expr_104 -> shiftOp additiveExpression .)



state 257

    (153) shiftOp -> MORE MORE . MORE
    (154) shiftOp -> MORE MORE .

    MORE            shift and go to state 371
    PLUS            reduce using rule 154 (shiftOp -> MORE MORE .)
    DASH            reduce using rule 154 (shiftOp -> MORE MORE .)
    OP_INC          reduce using rule 154 (shiftOp -> MORE MORE .)
    OP_DEC          reduce using rule 154 (shiftOp -> MORE MORE .)
    TILDE           reduce using rule 154 (shiftOp -> MORE MORE .)
    EXCLAMATION     reduce using rule 154 (shiftOp -> MORE MORE .)
    LPAREN          reduce using rule 154 (shiftOp -> MORE MORE .)
    THIS            reduce using rule 154 (shiftOp -> MORE MORE .)
    IDENTIFIER      reduce using rule 154 (shiftOp -> MORE MORE .)
    SUPER           reduce using rule 154 (shiftOp -> MORE MORE .)
    VOID            reduce using rule 154 (shiftOp -> MORE MORE .)
    CHARLITERAL     reduce using rule 154 (shiftOp -> MORE MORE .)
    STRINGLITERAL   reduce using rule 154 (shiftOp -> MORE MORE .)
    TRUE            reduce using rule 154 (shiftOp -> MORE MORE .)
    FALSE           reduce using rule 154 (shiftOp -> MORE MORE .)
    NULL            reduce using rule 154 (shiftOp -> MORE MORE .)
    NEW             reduce using rule 154 (shiftOp -> MORE MORE .)
    BOOLEAN         reduce using rule 154 (shiftOp -> MORE MORE .)
    CHAR            reduce using rule 154 (shiftOp -> MORE MORE .)
    BYTE            reduce using rule 154 (shiftOp -> MORE MORE .)
    SHORT           reduce using rule 154 (shiftOp -> MORE MORE .)
    INT             reduce using rule 154 (shiftOp -> MORE MORE .)
    LONG            reduce using rule 154 (shiftOp -> MORE MORE .)
    FLOAT           reduce using rule 154 (shiftOp -> MORE MORE .)
    DOUBLE          reduce using rule 154 (shiftOp -> MORE MORE .)
    NUMBER          reduce using rule 154 (shiftOp -> MORE MORE .)
    HEX_NUMBER      reduce using rule 154 (shiftOp -> MORE MORE .)
    LONG_NUMBER     reduce using rule 154 (shiftOp -> MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 154 (shiftOp -> MORE MORE .)
    NON_INTEGER_1   reduce using rule 154 (shiftOp -> MORE MORE .)
    NON_INTEGER_2   reduce using rule 154 (shiftOp -> MORE MORE .)
    NON_INTEGER_3   reduce using rule 154 (shiftOp -> MORE MORE .)



state 258

    (455) expr_98 -> CARET andExpression .

    CARET           reduce using rule 455 (expr_98 -> CARET andExpression .)
    VERTICAL        reduce using rule 455 (expr_98 -> CARET andExpression .)
    OP_LAND         reduce using rule 455 (expr_98 -> CARET andExpression .)
    OP_LOR          reduce using rule 455 (expr_98 -> CARET andExpression .)
    QUES            reduce using rule 455 (expr_98 -> CARET andExpression .)
    RPAREN          reduce using rule 455 (expr_98 -> CARET andExpression .)
    COMMA           reduce using rule 455 (expr_98 -> CARET andExpression .)
    BRPAREN         reduce using rule 455 (expr_98 -> CARET andExpression .)
    EQUALS          reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_ADD         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_SUB         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_MUL         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_DIV         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_AND         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_OR          reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_XOR         reduce using rule 455 (expr_98 -> CARET andExpression .)
    ASS_MOD         reduce using rule 455 (expr_98 -> CARET andExpression .)
    LESS            reduce using rule 455 (expr_98 -> CARET andExpression .)
    MORE            reduce using rule 455 (expr_98 -> CARET andExpression .)
    COLON           reduce using rule 455 (expr_98 -> CARET andExpression .)
    FRPAREN         reduce using rule 455 (expr_98 -> CARET andExpression .)
    SEMI            reduce using rule 455 (expr_98 -> CARET andExpression .)



state 259

    (456) expr_98 -> expr_98 CARET . andExpression
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 372
    arrayCreator                   shift and go to state 116

state 260

    (77) elementValueArrayInitializer -> BLPAREN expr_71 expr_72 . BRPAREN

    BRPAREN         shift and go to state 373



state 261

    (392) expr_72 -> COMMA .

    BRPAREN         reduce using rule 392 (expr_72 -> COMMA .)



state 262

    (393) expr_72 -> empty .

    BRPAREN         reduce using rule 393 (expr_72 -> empty .)



state 263

    (390) expr_71 -> elementValue expr_70 .
    (388) expr_70 -> expr_70 . COMMA elementValue

  ! shift/reduce conflict for COMMA resolved as shift.
    BRPAREN         reduce using rule 390 (expr_71 -> elementValue expr_70 .)
    COMMA           shift and go to state 374

  ! COMMA           [ reduce using rule 390 (expr_71 -> elementValue expr_70 .) ]


state 264

    (387) expr_70 -> COMMA . elementValue
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 375

state 265

    (389) expr_70 -> empty .

    COMMA           reduce using rule 389 (expr_70 -> empty .)
    BRPAREN         reduce using rule 389 (expr_70 -> empty .)



state 266

    (458) expr_99 -> AND equalityExpression .

    AND             reduce using rule 458 (expr_99 -> AND equalityExpression .)
    CARET           reduce using rule 458 (expr_99 -> AND equalityExpression .)
    VERTICAL        reduce using rule 458 (expr_99 -> AND equalityExpression .)
    OP_LAND         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    OP_LOR          reduce using rule 458 (expr_99 -> AND equalityExpression .)
    QUES            reduce using rule 458 (expr_99 -> AND equalityExpression .)
    RPAREN          reduce using rule 458 (expr_99 -> AND equalityExpression .)
    COMMA           reduce using rule 458 (expr_99 -> AND equalityExpression .)
    BRPAREN         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    EQUALS          reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_ADD         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_SUB         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_MUL         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_DIV         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_AND         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_OR          reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_XOR         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    ASS_MOD         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    LESS            reduce using rule 458 (expr_99 -> AND equalityExpression .)
    MORE            reduce using rule 458 (expr_99 -> AND equalityExpression .)
    COLON           reduce using rule 458 (expr_99 -> AND equalityExpression .)
    FRPAREN         reduce using rule 458 (expr_99 -> AND equalityExpression .)
    SEMI            reduce using rule 458 (expr_99 -> AND equalityExpression .)



state 267

    (459) expr_99 -> expr_99 AND . equalityExpression
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 376
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 268

    (444) expr_94 -> QUES expression . COLON conditionalExpression

    COLON           shift and go to state 377



state 269

    (453) expr_97 -> expr_97 VERTICAL . exclusiveOrExpression
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 378
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    relationalExpression           shift and go to state 65
    DOUBLELITERAL                  shift and go to state 112
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 270

    (452) expr_97 -> VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 452 (expr_97 -> VERTICAL exclusiveOrExpression .)



state 271

    (165) unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .

    MULT            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    SLASH           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    PERCENT         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    PLUS            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    DASH            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    LESS            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    MORE            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    INSTANCEOF      reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    OP_EQ           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    OP_NE           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    AND             reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    CARET           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    VERTICAL        reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    OP_LAND         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    OP_LOR          reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    QUES            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    RPAREN          reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    COMMA           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    BRPAREN         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    EQUALS          reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_ADD         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_SUB         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_MUL         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_DIV         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_AND         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_OR          reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_XOR         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    ASS_MOD         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    COLON           reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    FRPAREN         reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)
    SEMI            reduce using rule 165 (unaryExpressionNotPlusMinus -> primary expr_109 expr_110 .)



state 272

    (486) expr_109 -> expr_109 selector .

    OP_INC          reduce using rule 486 (expr_109 -> expr_109 selector .)
    OP_DEC          reduce using rule 486 (expr_109 -> expr_109 selector .)
    DOT             reduce using rule 486 (expr_109 -> expr_109 selector .)
    FLPAREN         reduce using rule 486 (expr_109 -> expr_109 selector .)



state 273

    (488) expr_110 -> OP_INC .

    MULT            reduce using rule 488 (expr_110 -> OP_INC .)
    SLASH           reduce using rule 488 (expr_110 -> OP_INC .)
    PERCENT         reduce using rule 488 (expr_110 -> OP_INC .)
    PLUS            reduce using rule 488 (expr_110 -> OP_INC .)
    DASH            reduce using rule 488 (expr_110 -> OP_INC .)
    LESS            reduce using rule 488 (expr_110 -> OP_INC .)
    MORE            reduce using rule 488 (expr_110 -> OP_INC .)
    INSTANCEOF      reduce using rule 488 (expr_110 -> OP_INC .)
    OP_EQ           reduce using rule 488 (expr_110 -> OP_INC .)
    OP_NE           reduce using rule 488 (expr_110 -> OP_INC .)
    AND             reduce using rule 488 (expr_110 -> OP_INC .)
    CARET           reduce using rule 488 (expr_110 -> OP_INC .)
    VERTICAL        reduce using rule 488 (expr_110 -> OP_INC .)
    OP_LAND         reduce using rule 488 (expr_110 -> OP_INC .)
    OP_LOR          reduce using rule 488 (expr_110 -> OP_INC .)
    QUES            reduce using rule 488 (expr_110 -> OP_INC .)
    RPAREN          reduce using rule 488 (expr_110 -> OP_INC .)
    COMMA           reduce using rule 488 (expr_110 -> OP_INC .)
    BRPAREN         reduce using rule 488 (expr_110 -> OP_INC .)
    EQUALS          reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_ADD         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_SUB         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_MUL         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_DIV         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_AND         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_OR          reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_XOR         reduce using rule 488 (expr_110 -> OP_INC .)
    ASS_MOD         reduce using rule 488 (expr_110 -> OP_INC .)
    COLON           reduce using rule 488 (expr_110 -> OP_INC .)
    FRPAREN         reduce using rule 488 (expr_110 -> OP_INC .)
    SEMI            reduce using rule 488 (expr_110 -> OP_INC .)



state 274

    (489) expr_110 -> OP_DEC .

    MULT            reduce using rule 489 (expr_110 -> OP_DEC .)
    SLASH           reduce using rule 489 (expr_110 -> OP_DEC .)
    PERCENT         reduce using rule 489 (expr_110 -> OP_DEC .)
    PLUS            reduce using rule 489 (expr_110 -> OP_DEC .)
    DASH            reduce using rule 489 (expr_110 -> OP_DEC .)
    LESS            reduce using rule 489 (expr_110 -> OP_DEC .)
    MORE            reduce using rule 489 (expr_110 -> OP_DEC .)
    INSTANCEOF      reduce using rule 489 (expr_110 -> OP_DEC .)
    OP_EQ           reduce using rule 489 (expr_110 -> OP_DEC .)
    OP_NE           reduce using rule 489 (expr_110 -> OP_DEC .)
    AND             reduce using rule 489 (expr_110 -> OP_DEC .)
    CARET           reduce using rule 489 (expr_110 -> OP_DEC .)
    VERTICAL        reduce using rule 489 (expr_110 -> OP_DEC .)
    OP_LAND         reduce using rule 489 (expr_110 -> OP_DEC .)
    OP_LOR          reduce using rule 489 (expr_110 -> OP_DEC .)
    QUES            reduce using rule 489 (expr_110 -> OP_DEC .)
    RPAREN          reduce using rule 489 (expr_110 -> OP_DEC .)
    COMMA           reduce using rule 489 (expr_110 -> OP_DEC .)
    BRPAREN         reduce using rule 489 (expr_110 -> OP_DEC .)
    EQUALS          reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_ADD         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_SUB         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_MUL         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_DIV         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_AND         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_OR          reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_XOR         reduce using rule 489 (expr_110 -> OP_DEC .)
    ASS_MOD         reduce using rule 489 (expr_110 -> OP_DEC .)
    COLON           reduce using rule 489 (expr_110 -> OP_DEC .)
    FRPAREN         reduce using rule 489 (expr_110 -> OP_DEC .)
    SEMI            reduce using rule 489 (expr_110 -> OP_DEC .)



state 275

    (190) selector -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 379



state 276

    (187) selector -> DOT THIS .

    OP_INC          reduce using rule 187 (selector -> DOT THIS .)
    OP_DEC          reduce using rule 187 (selector -> DOT THIS .)
    DOT             reduce using rule 187 (selector -> DOT THIS .)
    FLPAREN         reduce using rule 187 (selector -> DOT THIS .)



state 277

    (201) innerCreator -> DOT NEW . expr_127 IDENTIFIER expr_128 classCreatorRest
    (529) expr_127 -> . nonWildcardTypeArguments
    (530) expr_127 -> . empty
    (203) nonWildcardTypeArguments -> . LESS typeList MORE
    (547) empty -> .

    LESS            shift and go to state 184
    IDENTIFIER      reduce using rule 547 (empty -> .)


    nonWildcardTypeArguments       shift and go to state 380
    expr_127                       shift and go to state 381
    empty                          shift and go to state 382

state 278

    (186) selector -> DOT IDENTIFIER . expr_120
    (511) expr_120 -> . arguments
    (512) expr_120 -> . empty
    (204) arguments -> . LPAREN expr_130 RPAREN
    (547) empty -> .

    LPAREN          shift and go to state 222
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    DOT             reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)


    expr_120                       shift and go to state 383
    arguments                      shift and go to state 384
    empty                          shift and go to state 385

state 279

    (188) selector -> DOT SUPER . superSuffix
    (176) superSuffix -> . arguments
    (177) superSuffix -> . DOT expr_116 IDENTIFIER expr_117
    (204) arguments -> . LPAREN expr_130 RPAREN

    DOT             shift and go to state 223
    LPAREN          shift and go to state 222


    superSuffix                    shift and go to state 386
    arguments                      shift and go to state 221

state 280

    (203) nonWildcardTypeArguments -> LESS typeList . MORE

    MORE            shift and go to state 387



state 281

    (25) typeList -> type . expr_28
    (285) expr_28 -> . COMMA type
    (286) expr_28 -> . expr_28 COMMA type
    (287) expr_28 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 389
    MORE            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_28                        shift and go to state 388
    empty                          shift and go to state 390

state 282

    (192) creator -> NEW classOrInterfaceType classCreatorRest .

    DOT             reduce using rule 192 (creator -> NEW classOrInterfaceType classCreatorRest .)
    FLPAREN         reduce using rule 192 (creator -> NEW classOrInterfaceType classCreatorRest .)
    OP_INC          reduce using rule 192 (creator -> NEW classOrInterfaceType classCreatorRest .)
    OP_DEC          reduce using rule 192 (creator -> NEW classOrInterfaceType classCreatorRest .)



state 283

    (202) classCreatorRest -> arguments . expr_129
    (533) expr_129 -> . classBody
    (534) expr_129 -> . empty
    (26) classBody -> . BLPAREN expr_29 BRPAREN
    (547) empty -> .

    BLPAREN         shift and go to state 392
    DOT             reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)


    expr_129                       shift and go to state 391
    empty                          shift and go to state 393
    classBody                      shift and go to state 394

state 284

    (191) creator -> NEW nonWildcardTypeArguments classOrInterfaceType . classCreatorRest
    (202) classCreatorRest -> . arguments expr_129
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    classCreatorRest               shift and go to state 395
    arguments                      shift and go to state 283

state 285

    (48) classOrInterfaceType -> IDENTIFIER expr_51 . expr_53
    (346) expr_53 -> . DOT IDENTIFIER expr_52
    (347) expr_53 -> . expr_53 DOT IDENTIFIER expr_52
    (348) expr_53 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    DOT             shift and go to state 397
    LPAREN          reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    LESS            reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    expr_53                        shift and go to state 396
    empty                          shift and go to state 398

state 286

    (57) typeArguments -> LESS . typeArgument expr_54 MORE
    (58) typeArgument -> . type
    (59) typeArgument -> . QUES expr_56
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    QUES            shift and go to state 401
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    typeArgument                   shift and go to state 400
    type                           shift and go to state 399

state 287

    (342) expr_51 -> typeArguments .

    DOT             reduce using rule 342 (expr_51 -> typeArguments .)
    LPAREN          reduce using rule 342 (expr_51 -> typeArguments .)
    FLPAREN         reduce using rule 342 (expr_51 -> typeArguments .)
    OP_EQ           reduce using rule 342 (expr_51 -> typeArguments .)
    OP_NE           reduce using rule 342 (expr_51 -> typeArguments .)
    AND             reduce using rule 342 (expr_51 -> typeArguments .)
    CARET           reduce using rule 342 (expr_51 -> typeArguments .)
    VERTICAL        reduce using rule 342 (expr_51 -> typeArguments .)
    OP_LAND         reduce using rule 342 (expr_51 -> typeArguments .)
    OP_LOR          reduce using rule 342 (expr_51 -> typeArguments .)
    QUES            reduce using rule 342 (expr_51 -> typeArguments .)
    RPAREN          reduce using rule 342 (expr_51 -> typeArguments .)
    COMMA           reduce using rule 342 (expr_51 -> typeArguments .)
    BRPAREN         reduce using rule 342 (expr_51 -> typeArguments .)
    EQUALS          reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_ADD         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_SUB         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_MUL         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_DIV         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_AND         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_OR          reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_XOR         reduce using rule 342 (expr_51 -> typeArguments .)
    ASS_MOD         reduce using rule 342 (expr_51 -> typeArguments .)
    LESS            reduce using rule 342 (expr_51 -> typeArguments .)
    MORE            reduce using rule 342 (expr_51 -> typeArguments .)
    COLON           reduce using rule 342 (expr_51 -> typeArguments .)
    FRPAREN         reduce using rule 342 (expr_51 -> typeArguments .)
    SEMI            reduce using rule 342 (expr_51 -> typeArguments .)
    BLPAREN         reduce using rule 342 (expr_51 -> typeArguments .)
    IMPLEMENTS      reduce using rule 342 (expr_51 -> typeArguments .)
    IDENTIFIER      reduce using rule 342 (expr_51 -> typeArguments .)
    OP_ARRAY        reduce using rule 342 (expr_51 -> typeArguments .)



state 288

    (343) expr_51 -> empty .

    DOT             reduce using rule 343 (expr_51 -> empty .)
    LPAREN          reduce using rule 343 (expr_51 -> empty .)
    FLPAREN         reduce using rule 343 (expr_51 -> empty .)
    OP_EQ           reduce using rule 343 (expr_51 -> empty .)
    OP_NE           reduce using rule 343 (expr_51 -> empty .)
    AND             reduce using rule 343 (expr_51 -> empty .)
    CARET           reduce using rule 343 (expr_51 -> empty .)
    VERTICAL        reduce using rule 343 (expr_51 -> empty .)
    OP_LAND         reduce using rule 343 (expr_51 -> empty .)
    OP_LOR          reduce using rule 343 (expr_51 -> empty .)
    QUES            reduce using rule 343 (expr_51 -> empty .)
    RPAREN          reduce using rule 343 (expr_51 -> empty .)
    COMMA           reduce using rule 343 (expr_51 -> empty .)
    BRPAREN         reduce using rule 343 (expr_51 -> empty .)
    EQUALS          reduce using rule 343 (expr_51 -> empty .)
    ASS_ADD         reduce using rule 343 (expr_51 -> empty .)
    ASS_SUB         reduce using rule 343 (expr_51 -> empty .)
    ASS_MUL         reduce using rule 343 (expr_51 -> empty .)
    ASS_DIV         reduce using rule 343 (expr_51 -> empty .)
    ASS_AND         reduce using rule 343 (expr_51 -> empty .)
    ASS_OR          reduce using rule 343 (expr_51 -> empty .)
    ASS_XOR         reduce using rule 343 (expr_51 -> empty .)
    ASS_MOD         reduce using rule 343 (expr_51 -> empty .)
    LESS            reduce using rule 343 (expr_51 -> empty .)
    MORE            reduce using rule 343 (expr_51 -> empty .)
    COLON           reduce using rule 343 (expr_51 -> empty .)
    FRPAREN         reduce using rule 343 (expr_51 -> empty .)
    SEMI            reduce using rule 343 (expr_51 -> empty .)
    BLPAREN         reduce using rule 343 (expr_51 -> empty .)
    IMPLEMENTS      reduce using rule 343 (expr_51 -> empty .)
    IDENTIFIER      reduce using rule 343 (expr_51 -> empty .)
    OP_ARRAY        reduce using rule 343 (expr_51 -> empty .)



state 289

    (194) arrayCreator -> NEW createdName FLPAREN . FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> NEW createdName FLPAREN . expression FRPAREN expr_122 expr_123
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    FRPAREN         shift and go to state 402
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 403

state 290

    (73) elementValuePair -> IDENTIFIER EQUALS elementValue .

    COMMA           reduce using rule 73 (elementValuePair -> IDENTIFIER EQUALS elementValue .)
    RPAREN          reduce using rule 73 (elementValuePair -> IDENTIFIER EQUALS elementValue .)



state 291

    (496) expr_113 -> expr_113 DOT . IDENTIFIER
    (181) identifierSuffix -> DOT . CLASS
    (182) identifierSuffix -> DOT . nonWildcardTypeArguments IDENTIFIER arguments
    (183) identifierSuffix -> DOT . THIS
    (184) identifierSuffix -> DOT . SUPER arguments
    (201) innerCreator -> DOT . NEW expr_127 IDENTIFIER expr_128 classCreatorRest
    (203) nonWildcardTypeArguments -> . LESS typeList MORE

    IDENTIFIER      shift and go to state 404
    CLASS           shift and go to state 363
    THIS            shift and go to state 359
    SUPER           shift and go to state 362
    NEW             shift and go to state 277
    LESS            shift and go to state 184


    nonWildcardTypeArguments       shift and go to state 360

state 292

    (170) primary -> IDENTIFIER expr_113 expr_114 .

    DOT             reduce using rule 170 (primary -> IDENTIFIER expr_113 expr_114 .)
    FLPAREN         reduce using rule 170 (primary -> IDENTIFIER expr_113 expr_114 .)
    OP_INC          reduce using rule 170 (primary -> IDENTIFIER expr_113 expr_114 .)
    OP_DEC          reduce using rule 170 (primary -> IDENTIFIER expr_113 expr_114 .)



state 293

    (499) expr_114 -> empty .

    DOT             reduce using rule 499 (expr_114 -> empty .)
    FLPAREN         reduce using rule 499 (expr_114 -> empty .)
    OP_INC          reduce using rule 499 (expr_114 -> empty .)
    OP_DEC          reduce using rule 499 (expr_114 -> empty .)



state 294

    (498) expr_114 -> identifierSuffix .

    DOT             reduce using rule 498 (expr_114 -> identifierSuffix .)
    FLPAREN         reduce using rule 498 (expr_114 -> identifierSuffix .)
    OP_INC          reduce using rule 498 (expr_114 -> identifierSuffix .)
    OP_DEC          reduce using rule 498 (expr_114 -> identifierSuffix .)



state 295

    (495) expr_113 -> DOT IDENTIFIER .

    DOT             reduce using rule 495 (expr_113 -> DOT IDENTIFIER .)
    FLPAREN         reduce using rule 495 (expr_113 -> DOT IDENTIFIER .)
    LPAREN          reduce using rule 495 (expr_113 -> DOT IDENTIFIER .)
    OP_INC          reduce using rule 495 (expr_113 -> DOT IDENTIFIER .)
    OP_DEC          reduce using rule 495 (expr_113 -> DOT IDENTIFIER .)



state 296

    (500) expr_115 -> FLPAREN FRPAREN .

    DOT             reduce using rule 500 (expr_115 -> FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 500 (expr_115 -> FLPAREN FRPAREN .)



state 297

    (501) expr_115 -> expr_115 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 405



state 298

    (174) primary -> primitiveType expr_115 DOT . CLASS

    CLASS           shift and go to state 406



state 299

    (476) expr_106 -> expr_105 multiplicativeExpression .

    PLUS            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    DASH            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    LESS            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    MORE            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    OP_EQ           reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    OP_NE           reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    AND             reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    CARET           reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    VERTICAL        reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    OP_LAND         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    OP_LOR          reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    QUES            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    RPAREN          reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    COMMA           reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    BRPAREN         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    EQUALS          reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_ADD         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_SUB         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_MUL         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_DIV         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_AND         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_OR          reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_XOR         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    ASS_MOD         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    COLON           reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    FRPAREN         reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)
    SEMI            reduce using rule 476 (expr_106 -> expr_105 multiplicativeExpression .)



state 300

    (477) expr_106 -> expr_106 expr_105 . multiplicativeExpression
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 407
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 301

    (147) relationalOp -> LESS EQUALS .

    PLUS            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    DASH            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    OP_INC          reduce using rule 147 (relationalOp -> LESS EQUALS .)
    OP_DEC          reduce using rule 147 (relationalOp -> LESS EQUALS .)
    TILDE           reduce using rule 147 (relationalOp -> LESS EQUALS .)
    EXCLAMATION     reduce using rule 147 (relationalOp -> LESS EQUALS .)
    LPAREN          reduce using rule 147 (relationalOp -> LESS EQUALS .)
    THIS            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    IDENTIFIER      reduce using rule 147 (relationalOp -> LESS EQUALS .)
    SUPER           reduce using rule 147 (relationalOp -> LESS EQUALS .)
    VOID            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    CHARLITERAL     reduce using rule 147 (relationalOp -> LESS EQUALS .)
    STRINGLITERAL   reduce using rule 147 (relationalOp -> LESS EQUALS .)
    TRUE            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    FALSE           reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NULL            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NEW             reduce using rule 147 (relationalOp -> LESS EQUALS .)
    BOOLEAN         reduce using rule 147 (relationalOp -> LESS EQUALS .)
    CHAR            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    BYTE            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    SHORT           reduce using rule 147 (relationalOp -> LESS EQUALS .)
    INT             reduce using rule 147 (relationalOp -> LESS EQUALS .)
    LONG            reduce using rule 147 (relationalOp -> LESS EQUALS .)
    FLOAT           reduce using rule 147 (relationalOp -> LESS EQUALS .)
    DOUBLE          reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NUMBER          reduce using rule 147 (relationalOp -> LESS EQUALS .)
    HEX_NUMBER      reduce using rule 147 (relationalOp -> LESS EQUALS .)
    LONG_NUMBER     reduce using rule 147 (relationalOp -> LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 147 (relationalOp -> LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 147 (relationalOp -> LESS EQUALS .)



state 302

    (469) expr_103 -> expr_103 relationalOp . shiftExpression
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 408
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    arrayCreator                   shift and go to state 116

state 303

    (468) expr_103 -> relationalOp shiftExpression .

    LESS            reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    MORE            reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    OP_EQ           reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    OP_NE           reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    AND             reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    CARET           reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    VERTICAL        reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    OP_LAND         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    OP_LOR          reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    QUES            reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    RPAREN          reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    COMMA           reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    BRPAREN         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    EQUALS          reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_AND         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_OR          reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    COLON           reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    FRPAREN         reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)
    SEMI            reduce using rule 468 (expr_103 -> relationalOp shiftExpression .)



state 304

    (148) relationalOp -> MORE EQUALS .

    PLUS            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    DASH            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    OP_INC          reduce using rule 148 (relationalOp -> MORE EQUALS .)
    OP_DEC          reduce using rule 148 (relationalOp -> MORE EQUALS .)
    TILDE           reduce using rule 148 (relationalOp -> MORE EQUALS .)
    EXCLAMATION     reduce using rule 148 (relationalOp -> MORE EQUALS .)
    LPAREN          reduce using rule 148 (relationalOp -> MORE EQUALS .)
    THIS            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    IDENTIFIER      reduce using rule 148 (relationalOp -> MORE EQUALS .)
    SUPER           reduce using rule 148 (relationalOp -> MORE EQUALS .)
    VOID            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    CHARLITERAL     reduce using rule 148 (relationalOp -> MORE EQUALS .)
    STRINGLITERAL   reduce using rule 148 (relationalOp -> MORE EQUALS .)
    TRUE            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    FALSE           reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NULL            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NEW             reduce using rule 148 (relationalOp -> MORE EQUALS .)
    BOOLEAN         reduce using rule 148 (relationalOp -> MORE EQUALS .)
    CHAR            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    BYTE            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    SHORT           reduce using rule 148 (relationalOp -> MORE EQUALS .)
    INT             reduce using rule 148 (relationalOp -> MORE EQUALS .)
    LONG            reduce using rule 148 (relationalOp -> MORE EQUALS .)
    FLOAT           reduce using rule 148 (relationalOp -> MORE EQUALS .)
    DOUBLE          reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NUMBER          reduce using rule 148 (relationalOp -> MORE EQUALS .)
    HEX_NUMBER      reduce using rule 148 (relationalOp -> MORE EQUALS .)
    LONG_NUMBER     reduce using rule 148 (relationalOp -> MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 148 (relationalOp -> MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 148 (relationalOp -> MORE EQUALS .)



state 305

    (483) expr_108 -> expr_108 expr_107 . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    primitiveType                  shift and go to state 96
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 409
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 306

    (482) expr_108 -> expr_107 unaryExpression .

    MULT            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    SLASH           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    PERCENT         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    PLUS            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    DASH            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    LESS            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    MORE            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    INSTANCEOF      reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    OP_EQ           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    OP_NE           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    AND             reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    CARET           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    VERTICAL        reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    OP_LAND         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    OP_LOR          reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    QUES            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    RPAREN          reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    COMMA           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    BRPAREN         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    EQUALS          reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_ADD         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_SUB         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_MUL         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_DIV         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_AND         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_OR          reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_XOR         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    ASS_MOD         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    COLON           reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    FRPAREN         reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)
    SEMI            reduce using rule 482 (expr_108 -> expr_107 unaryExpression .)



state 307

    (336) expr_49 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 410



state 308

    (46) type -> classOrInterfaceType expr_49 .
    (337) expr_49 -> expr_49 . FLPAREN FRPAREN

    IDENTIFIER      reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    AND             reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    COMMA           reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    MORE            reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    BLPAREN         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    IMPLEMENTS      reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    OP_EQ           reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    OP_NE           reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    CARET           reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    VERTICAL        reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    OP_LAND         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    OP_LOR          reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    QUES            reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    RPAREN          reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    BRPAREN         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    EQUALS          reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_ADD         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_SUB         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_MUL         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_DIV         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_AND         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_OR          reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_XOR         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    ASS_MOD         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    LESS            reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    COLON           reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    FRPAREN         reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    SEMI            reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    OP_ARRAY        reduce using rule 46 (type -> classOrInterfaceType expr_49 .)
    FLPAREN         shift and go to state 411



state 309

    (338) expr_49 -> empty .

    FLPAREN         reduce using rule 338 (expr_49 -> empty .)
    RPAREN          reduce using rule 338 (expr_49 -> empty .)
    OP_EQ           reduce using rule 338 (expr_49 -> empty .)
    OP_NE           reduce using rule 338 (expr_49 -> empty .)
    AND             reduce using rule 338 (expr_49 -> empty .)
    CARET           reduce using rule 338 (expr_49 -> empty .)
    VERTICAL        reduce using rule 338 (expr_49 -> empty .)
    OP_LAND         reduce using rule 338 (expr_49 -> empty .)
    OP_LOR          reduce using rule 338 (expr_49 -> empty .)
    QUES            reduce using rule 338 (expr_49 -> empty .)
    COMMA           reduce using rule 338 (expr_49 -> empty .)
    BRPAREN         reduce using rule 338 (expr_49 -> empty .)
    EQUALS          reduce using rule 338 (expr_49 -> empty .)
    ASS_ADD         reduce using rule 338 (expr_49 -> empty .)
    ASS_SUB         reduce using rule 338 (expr_49 -> empty .)
    ASS_MUL         reduce using rule 338 (expr_49 -> empty .)
    ASS_DIV         reduce using rule 338 (expr_49 -> empty .)
    ASS_AND         reduce using rule 338 (expr_49 -> empty .)
    ASS_OR          reduce using rule 338 (expr_49 -> empty .)
    ASS_XOR         reduce using rule 338 (expr_49 -> empty .)
    ASS_MOD         reduce using rule 338 (expr_49 -> empty .)
    LESS            reduce using rule 338 (expr_49 -> empty .)
    MORE            reduce using rule 338 (expr_49 -> empty .)
    COLON           reduce using rule 338 (expr_49 -> empty .)
    FRPAREN         reduce using rule 338 (expr_49 -> empty .)
    SEMI            reduce using rule 338 (expr_49 -> empty .)
    BLPAREN         reduce using rule 338 (expr_49 -> empty .)
    IMPLEMENTS      reduce using rule 338 (expr_49 -> empty .)
    IDENTIFIER      reduce using rule 338 (expr_49 -> empty .)
    OP_ARRAY        reduce using rule 338 (expr_49 -> empty .)



state 310

    (123) parExpression -> LPAREN expression RPAREN .

    DOT             reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    FLPAREN         reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    OP_INC          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    OP_DEC          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    ASSERT          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    IF              reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    DO              reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    SWITCH          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    SYNCHRONIZED    reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    THROW           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    CONTINUE        reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    IDENTIFIER      reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    BLPAREN         reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    TRY             reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    DASH            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    TILDE           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    EXCLAMATION     reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    THIS            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    SUPER           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    VOID            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    CHARLITERAL     reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    STRINGLITERAL   reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NULL            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NEW             reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    BOOLEAN         reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    CHAR            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    BYTE            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    SHORT           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    INT             reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    LONG            reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    DOUBLE          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    HEX_NUMBER      reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    LONG_NUMBER     reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    LONG_HEX_NUMBER reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_1   reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_2   reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)
    NON_INTEGER_3   reduce using rule 123 (parExpression -> LPAREN expression RPAREN .)



state 311

    (343) expr_51 -> empty .
    (497) expr_113 -> empty .

  ! reduce/reduce conflict for DOT resolved using rule 343 (expr_51 -> empty .).
  ! reduce/reduce conflict for FLPAREN resolved using rule 343 (expr_51 -> empty .).
    DOT             reduce using rule 343 (expr_51 -> empty .)
    FLPAREN         reduce using rule 343 (expr_51 -> empty .)
    RPAREN          reduce using rule 343 (expr_51 -> empty .)
    LPAREN          reduce using rule 497 (expr_113 -> empty .)
    OP_INC          reduce using rule 497 (expr_113 -> empty .)
    OP_DEC          reduce using rule 497 (expr_113 -> empty .)

  ! DOT             [ reduce using rule 497 (expr_113 -> empty .) ]
  ! FLPAREN         [ reduce using rule 497 (expr_113 -> empty .) ]


state 312

    (167) castExpression -> LPAREN type RPAREN . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 412
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 313

    (130) assignmentOperator -> ASS_DIV .

    PLUS            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    DASH            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    OP_INC          reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    OP_DEC          reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    TILDE           reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    EXCLAMATION     reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    LPAREN          reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    THIS            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    IDENTIFIER      reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    SUPER           reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    VOID            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    CHARLITERAL     reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    STRINGLITERAL   reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    TRUE            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    FALSE           reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NULL            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NEW             reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    BOOLEAN         reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    CHAR            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    BYTE            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    SHORT           reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    INT             reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    LONG            reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    FLOAT           reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    DOUBLE          reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NUMBER          reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    HEX_NUMBER      reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    LONG_NUMBER     reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    LONG_HEX_NUMBER reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_1   reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_2   reduce using rule 130 (assignmentOperator -> ASS_DIV .)
    NON_INTEGER_3   reduce using rule 130 (assignmentOperator -> ASS_DIV .)



state 314

    (127) assignmentOperator -> ASS_ADD .

    PLUS            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    DASH            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    OP_INC          reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    TILDE           reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    EXCLAMATION     reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    LPAREN          reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    IDENTIFIER      reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    CHARLITERAL     reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    STRINGLITERAL   reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    TRUE            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    FALSE           reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    INT             reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NUMBER          reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    HEX_NUMBER      reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    LONG_NUMBER     reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    LONG_HEX_NUMBER reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_1   reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_2   reduce using rule 127 (assignmentOperator -> ASS_ADD .)
    NON_INTEGER_3   reduce using rule 127 (assignmentOperator -> ASS_ADD .)



state 315

    (133) assignmentOperator -> ASS_XOR .

    PLUS            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    DASH            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    OP_INC          reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    OP_DEC          reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    TILDE           reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    EXCLAMATION     reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    LPAREN          reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    THIS            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    IDENTIFIER      reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    SUPER           reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    VOID            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    CHARLITERAL     reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    STRINGLITERAL   reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    TRUE            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    FALSE           reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NULL            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NEW             reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    BOOLEAN         reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    CHAR            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    BYTE            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    SHORT           reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    INT             reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    LONG            reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    FLOAT           reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    DOUBLE          reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NUMBER          reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    HEX_NUMBER      reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    LONG_NUMBER     reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    LONG_HEX_NUMBER reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_1   reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_2   reduce using rule 133 (assignmentOperator -> ASS_XOR .)
    NON_INTEGER_3   reduce using rule 133 (assignmentOperator -> ASS_XOR .)



state 316

    (125) expression -> conditionalExpression expr_93 .

    SEMI            reduce using rule 125 (expression -> conditionalExpression expr_93 .)
    FRPAREN         reduce using rule 125 (expression -> conditionalExpression expr_93 .)
    RPAREN          reduce using rule 125 (expression -> conditionalExpression expr_93 .)
    COMMA           reduce using rule 125 (expression -> conditionalExpression expr_93 .)
    BRPAREN         reduce using rule 125 (expression -> conditionalExpression expr_93 .)
    COLON           reduce using rule 125 (expression -> conditionalExpression expr_93 .)



state 317

    (132) assignmentOperator -> ASS_OR .

    PLUS            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    DASH            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    OP_INC          reduce using rule 132 (assignmentOperator -> ASS_OR .)
    OP_DEC          reduce using rule 132 (assignmentOperator -> ASS_OR .)
    TILDE           reduce using rule 132 (assignmentOperator -> ASS_OR .)
    EXCLAMATION     reduce using rule 132 (assignmentOperator -> ASS_OR .)
    LPAREN          reduce using rule 132 (assignmentOperator -> ASS_OR .)
    THIS            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    IDENTIFIER      reduce using rule 132 (assignmentOperator -> ASS_OR .)
    SUPER           reduce using rule 132 (assignmentOperator -> ASS_OR .)
    VOID            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    CHARLITERAL     reduce using rule 132 (assignmentOperator -> ASS_OR .)
    STRINGLITERAL   reduce using rule 132 (assignmentOperator -> ASS_OR .)
    TRUE            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    FALSE           reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NULL            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NEW             reduce using rule 132 (assignmentOperator -> ASS_OR .)
    BOOLEAN         reduce using rule 132 (assignmentOperator -> ASS_OR .)
    CHAR            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    BYTE            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    SHORT           reduce using rule 132 (assignmentOperator -> ASS_OR .)
    INT             reduce using rule 132 (assignmentOperator -> ASS_OR .)
    LONG            reduce using rule 132 (assignmentOperator -> ASS_OR .)
    FLOAT           reduce using rule 132 (assignmentOperator -> ASS_OR .)
    DOUBLE          reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NUMBER          reduce using rule 132 (assignmentOperator -> ASS_OR .)
    HEX_NUMBER      reduce using rule 132 (assignmentOperator -> ASS_OR .)
    LONG_NUMBER     reduce using rule 132 (assignmentOperator -> ASS_OR .)
    LONG_HEX_NUMBER reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_1   reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_2   reduce using rule 132 (assignmentOperator -> ASS_OR .)
    NON_INTEGER_3   reduce using rule 132 (assignmentOperator -> ASS_OR .)



state 318

    (442) expr_93 -> assignmentOperator . expression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    LONGLITERAL                    shift and go to state 73
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 413

state 319

    (135) assignmentOperator -> LESS . LESS EQUALS

    LESS            shift and go to state 414



state 320

    (126) assignmentOperator -> EQUALS .

    PLUS            reduce using rule 126 (assignmentOperator -> EQUALS .)
    DASH            reduce using rule 126 (assignmentOperator -> EQUALS .)
    OP_INC          reduce using rule 126 (assignmentOperator -> EQUALS .)
    OP_DEC          reduce using rule 126 (assignmentOperator -> EQUALS .)
    TILDE           reduce using rule 126 (assignmentOperator -> EQUALS .)
    EXCLAMATION     reduce using rule 126 (assignmentOperator -> EQUALS .)
    LPAREN          reduce using rule 126 (assignmentOperator -> EQUALS .)
    THIS            reduce using rule 126 (assignmentOperator -> EQUALS .)
    IDENTIFIER      reduce using rule 126 (assignmentOperator -> EQUALS .)
    SUPER           reduce using rule 126 (assignmentOperator -> EQUALS .)
    VOID            reduce using rule 126 (assignmentOperator -> EQUALS .)
    CHARLITERAL     reduce using rule 126 (assignmentOperator -> EQUALS .)
    STRINGLITERAL   reduce using rule 126 (assignmentOperator -> EQUALS .)
    TRUE            reduce using rule 126 (assignmentOperator -> EQUALS .)
    FALSE           reduce using rule 126 (assignmentOperator -> EQUALS .)
    NULL            reduce using rule 126 (assignmentOperator -> EQUALS .)
    NEW             reduce using rule 126 (assignmentOperator -> EQUALS .)
    BOOLEAN         reduce using rule 126 (assignmentOperator -> EQUALS .)
    CHAR            reduce using rule 126 (assignmentOperator -> EQUALS .)
    BYTE            reduce using rule 126 (assignmentOperator -> EQUALS .)
    SHORT           reduce using rule 126 (assignmentOperator -> EQUALS .)
    INT             reduce using rule 126 (assignmentOperator -> EQUALS .)
    LONG            reduce using rule 126 (assignmentOperator -> EQUALS .)
    FLOAT           reduce using rule 126 (assignmentOperator -> EQUALS .)
    DOUBLE          reduce using rule 126 (assignmentOperator -> EQUALS .)
    NUMBER          reduce using rule 126 (assignmentOperator -> EQUALS .)
    HEX_NUMBER      reduce using rule 126 (assignmentOperator -> EQUALS .)
    LONG_NUMBER     reduce using rule 126 (assignmentOperator -> EQUALS .)
    LONG_HEX_NUMBER reduce using rule 126 (assignmentOperator -> EQUALS .)
    NON_INTEGER_1   reduce using rule 126 (assignmentOperator -> EQUALS .)
    NON_INTEGER_2   reduce using rule 126 (assignmentOperator -> EQUALS .)
    NON_INTEGER_3   reduce using rule 126 (assignmentOperator -> EQUALS .)



state 321

    (129) assignmentOperator -> ASS_MUL .

    PLUS            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    DASH            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    OP_INC          reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    TILDE           reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    EXCLAMATION     reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    LPAREN          reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    IDENTIFIER      reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    CHARLITERAL     reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    STRINGLITERAL   reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    TRUE            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    FALSE           reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    INT             reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NUMBER          reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    HEX_NUMBER      reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    LONG_NUMBER     reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    LONG_HEX_NUMBER reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_1   reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_2   reduce using rule 129 (assignmentOperator -> ASS_MUL .)
    NON_INTEGER_3   reduce using rule 129 (assignmentOperator -> ASS_MUL .)



state 322

    (131) assignmentOperator -> ASS_AND .

    PLUS            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    DASH            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    OP_INC          reduce using rule 131 (assignmentOperator -> ASS_AND .)
    OP_DEC          reduce using rule 131 (assignmentOperator -> ASS_AND .)
    TILDE           reduce using rule 131 (assignmentOperator -> ASS_AND .)
    EXCLAMATION     reduce using rule 131 (assignmentOperator -> ASS_AND .)
    LPAREN          reduce using rule 131 (assignmentOperator -> ASS_AND .)
    THIS            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    IDENTIFIER      reduce using rule 131 (assignmentOperator -> ASS_AND .)
    SUPER           reduce using rule 131 (assignmentOperator -> ASS_AND .)
    VOID            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    CHARLITERAL     reduce using rule 131 (assignmentOperator -> ASS_AND .)
    STRINGLITERAL   reduce using rule 131 (assignmentOperator -> ASS_AND .)
    TRUE            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    FALSE           reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NULL            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NEW             reduce using rule 131 (assignmentOperator -> ASS_AND .)
    BOOLEAN         reduce using rule 131 (assignmentOperator -> ASS_AND .)
    CHAR            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    BYTE            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    SHORT           reduce using rule 131 (assignmentOperator -> ASS_AND .)
    INT             reduce using rule 131 (assignmentOperator -> ASS_AND .)
    LONG            reduce using rule 131 (assignmentOperator -> ASS_AND .)
    FLOAT           reduce using rule 131 (assignmentOperator -> ASS_AND .)
    DOUBLE          reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NUMBER          reduce using rule 131 (assignmentOperator -> ASS_AND .)
    HEX_NUMBER      reduce using rule 131 (assignmentOperator -> ASS_AND .)
    LONG_NUMBER     reduce using rule 131 (assignmentOperator -> ASS_AND .)
    LONG_HEX_NUMBER reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_1   reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_2   reduce using rule 131 (assignmentOperator -> ASS_AND .)
    NON_INTEGER_3   reduce using rule 131 (assignmentOperator -> ASS_AND .)



state 323

    (128) assignmentOperator -> ASS_SUB .

    PLUS            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    DASH            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    OP_INC          reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    TILDE           reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    EXCLAMATION     reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    LPAREN          reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    IDENTIFIER      reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    CHARLITERAL     reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    STRINGLITERAL   reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    TRUE            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    FALSE           reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    INT             reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NUMBER          reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    HEX_NUMBER      reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    LONG_NUMBER     reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    LONG_HEX_NUMBER reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_1   reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_2   reduce using rule 128 (assignmentOperator -> ASS_SUB .)
    NON_INTEGER_3   reduce using rule 128 (assignmentOperator -> ASS_SUB .)



state 324

    (136) assignmentOperator -> MORE . MORE MORE EQUALS
    (137) assignmentOperator -> MORE . MORE EQUALS

    MORE            shift and go to state 415



state 325

    (443) expr_93 -> empty .

    RPAREN          reduce using rule 443 (expr_93 -> empty .)
    COLON           reduce using rule 443 (expr_93 -> empty .)
    FRPAREN         reduce using rule 443 (expr_93 -> empty .)
    COMMA           reduce using rule 443 (expr_93 -> empty .)
    SEMI            reduce using rule 443 (expr_93 -> empty .)
    BRPAREN         reduce using rule 443 (expr_93 -> empty .)



state 326

    (134) assignmentOperator -> ASS_MOD .

    PLUS            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    DASH            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    OP_INC          reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    OP_DEC          reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    TILDE           reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    EXCLAMATION     reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    LPAREN          reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    THIS            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    IDENTIFIER      reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    SUPER           reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    VOID            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    CHARLITERAL     reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    STRINGLITERAL   reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    TRUE            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    FALSE           reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NULL            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NEW             reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    BOOLEAN         reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    CHAR            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    BYTE            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    SHORT           reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    INT             reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    LONG            reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    FLOAT           reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    DOUBLE          reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NUMBER          reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    HEX_NUMBER      reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    LONG_NUMBER     reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    LONG_HEX_NUMBER reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_1   reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_2   reduce using rule 134 (assignmentOperator -> ASS_MOD .)
    NON_INTEGER_3   reduce using rule 134 (assignmentOperator -> ASS_MOD .)



state 327

    (47) type -> primitiveType expr_50 .
    (340) expr_50 -> expr_50 . FLPAREN FRPAREN

    IDENTIFIER      reduce using rule 47 (type -> primitiveType expr_50 .)
    AND             reduce using rule 47 (type -> primitiveType expr_50 .)
    COMMA           reduce using rule 47 (type -> primitiveType expr_50 .)
    MORE            reduce using rule 47 (type -> primitiveType expr_50 .)
    BLPAREN         reduce using rule 47 (type -> primitiveType expr_50 .)
    IMPLEMENTS      reduce using rule 47 (type -> primitiveType expr_50 .)
    OP_EQ           reduce using rule 47 (type -> primitiveType expr_50 .)
    OP_NE           reduce using rule 47 (type -> primitiveType expr_50 .)
    CARET           reduce using rule 47 (type -> primitiveType expr_50 .)
    VERTICAL        reduce using rule 47 (type -> primitiveType expr_50 .)
    OP_LAND         reduce using rule 47 (type -> primitiveType expr_50 .)
    OP_LOR          reduce using rule 47 (type -> primitiveType expr_50 .)
    QUES            reduce using rule 47 (type -> primitiveType expr_50 .)
    RPAREN          reduce using rule 47 (type -> primitiveType expr_50 .)
    BRPAREN         reduce using rule 47 (type -> primitiveType expr_50 .)
    EQUALS          reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_ADD         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_SUB         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_MUL         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_DIV         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_AND         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_OR          reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_XOR         reduce using rule 47 (type -> primitiveType expr_50 .)
    ASS_MOD         reduce using rule 47 (type -> primitiveType expr_50 .)
    LESS            reduce using rule 47 (type -> primitiveType expr_50 .)
    COLON           reduce using rule 47 (type -> primitiveType expr_50 .)
    FRPAREN         reduce using rule 47 (type -> primitiveType expr_50 .)
    SEMI            reduce using rule 47 (type -> primitiveType expr_50 .)
    OP_ARRAY        reduce using rule 47 (type -> primitiveType expr_50 .)
    FLPAREN         shift and go to state 416



state 328

    (339) expr_50 -> FLPAREN . FRPAREN
    (500) expr_115 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 417



state 329

    (341) expr_50 -> empty .
    (502) expr_115 -> empty .

  ! reduce/reduce conflict for FLPAREN resolved using rule 341 (expr_50 -> empty .).
    FLPAREN         reduce using rule 341 (expr_50 -> empty .)
    RPAREN          reduce using rule 341 (expr_50 -> empty .)
    DOT             reduce using rule 502 (expr_115 -> empty .)

  ! FLPAREN         [ reduce using rule 502 (expr_115 -> empty .) ]


state 330

    (166) castExpression -> LPAREN primitiveType RPAREN . unaryExpression
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    unaryExpression                shift and go to state 418
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    arrayCreator                   shift and go to state 116

state 331

    (204) arguments -> LPAREN expr_130 . RPAREN

    RPAREN          shift and go to state 419



state 332

    (124) expressionList -> expression . expr_92
    (439) expr_92 -> . COMMA expression
    (440) expr_92 -> . expr_92 COMMA expression
    (441) expr_92 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 420
    RPAREN          reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 421
    expr_92                        shift and go to state 422

state 333

    (535) expr_130 -> expressionList .

    RPAREN          reduce using rule 535 (expr_130 -> expressionList .)



state 334

    (536) expr_130 -> empty .

    RPAREN          reduce using rule 536 (expr_130 -> empty .)



state 335

    (503) expr_116 -> typeArguments .

    IDENTIFIER      reduce using rule 503 (expr_116 -> typeArguments .)



state 336

    (177) superSuffix -> DOT expr_116 . IDENTIFIER expr_117

    IDENTIFIER      shift and go to state 423



state 337

    (504) expr_116 -> empty .

    IDENTIFIER      reduce using rule 504 (expr_116 -> empty .)



state 338

    (231) expr_7 -> empty .

    SEMI            reduce using rule 231 (expr_7 -> empty .)



state 339

    (4) importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 . SEMI

    SEMI            shift and go to state 424



state 340

    (229) expr_6 -> expr_6 DOT . IDENTIFIER
    (230) expr_7 -> DOT . MULT

    IDENTIFIER      shift and go to state 425
    MULT            shift and go to state 426



state 341

    (228) expr_6 -> DOT IDENTIFIER .

    DOT             reduce using rule 228 (expr_6 -> DOT IDENTIFIER .)
    SEMI            reduce using rule 228 (expr_6 -> DOT IDENTIFIER .)



state 342

    (3) importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT . SEMI

    SEMI            shift and go to state 427



state 343

    (78) annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER . annotationTypeBody
    (79) annotationTypeBody -> . BLPAREN expr_73 BRPAREN

    BLPAREN         shift and go to state 429


    annotationTypeBody             shift and go to state 428

state 344

    (14) typeParameters -> LESS . typeParameter expr_13 MORE
    (15) typeParameter -> . IDENTIFIER expr_14

    IDENTIFIER      shift and go to state 431


    typeParameter                  shift and go to state 430

state 345

    (282) expr_26 -> empty .

    EXTENDS         reduce using rule 282 (expr_26 -> empty .)
    BLPAREN         reduce using rule 282 (expr_26 -> empty .)



state 346

    (281) expr_26 -> typeParameters .

    EXTENDS         reduce using rule 281 (expr_26 -> typeParameters .)
    BLPAREN         reduce using rule 281 (expr_26 -> typeParameters .)



state 347

    (24) normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 . expr_27 interfaceBody
    (283) expr_27 -> . EXTENDS typeList
    (284) expr_27 -> . empty
    (547) empty -> .

    EXTENDS         shift and go to state 432
    BLPAREN         reduce using rule 547 (empty -> .)


    expr_27                        shift and go to state 434
    empty                          shift and go to state 433

state 348

    (261) expr_17 -> IMPLEMENTS . typeList
    (25) typeList -> . type expr_28
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    typeList                       shift and go to state 435
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 281

state 349

    (17) enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 . enumBody
    (18) enumBody -> . BLPAREN expr_18 expr_19 expr_20 BRPAREN

    BLPAREN         shift and go to state 437


    enumBody                       shift and go to state 436

state 350

    (262) expr_17 -> empty .

    BLPAREN         reduce using rule 262 (expr_17 -> empty .)



state 351

    (247) expr_10 -> empty .

    EXTENDS         reduce using rule 247 (expr_10 -> empty .)
    IMPLEMENTS      reduce using rule 247 (expr_10 -> empty .)
    BLPAREN         reduce using rule 247 (expr_10 -> empty .)



state 352

    (246) expr_10 -> typeParameters .

    EXTENDS         reduce using rule 246 (expr_10 -> typeParameters .)
    IMPLEMENTS      reduce using rule 246 (expr_10 -> typeParameters .)
    BLPAREN         reduce using rule 246 (expr_10 -> typeParameters .)



state 353

    (13) normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 . expr_11 expr_12 classBody
    (248) expr_11 -> . EXTENDS type
    (249) expr_11 -> . empty
    (547) empty -> .

    EXTENDS         shift and go to state 440
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)


    empty                          shift and go to state 439
    expr_11                        shift and go to state 438

state 354

    (447) expr_95 -> expr_95 OP_LOR conditionalAndExpression .

    OP_LOR          reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    QUES            reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    RPAREN          reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    COMMA           reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    BRPAREN         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    EQUALS          reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_ADD         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_SUB         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_MUL         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_DIV         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_AND         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_OR          reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_XOR         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    ASS_MOD         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    LESS            reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    MORE            reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    COLON           reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    FRPAREN         reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)
    SEMI            reduce using rule 447 (expr_95 -> expr_95 OP_LOR conditionalAndExpression .)



state 355

    (385) expr_69 -> expr_69 COMMA elementValuePair .

    COMMA           reduce using rule 385 (expr_69 -> expr_69 COMMA elementValuePair .)
    RPAREN          reduce using rule 385 (expr_69 -> expr_69 COMMA elementValuePair .)



state 356

    (339) expr_50 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 441



state 357

    (341) expr_50 -> empty .

    FLPAREN         reduce using rule 341 (expr_50 -> empty .)
    OP_EQ           reduce using rule 341 (expr_50 -> empty .)
    OP_NE           reduce using rule 341 (expr_50 -> empty .)
    AND             reduce using rule 341 (expr_50 -> empty .)
    CARET           reduce using rule 341 (expr_50 -> empty .)
    VERTICAL        reduce using rule 341 (expr_50 -> empty .)
    OP_LAND         reduce using rule 341 (expr_50 -> empty .)
    OP_LOR          reduce using rule 341 (expr_50 -> empty .)
    QUES            reduce using rule 341 (expr_50 -> empty .)
    RPAREN          reduce using rule 341 (expr_50 -> empty .)
    COMMA           reduce using rule 341 (expr_50 -> empty .)
    BRPAREN         reduce using rule 341 (expr_50 -> empty .)
    EQUALS          reduce using rule 341 (expr_50 -> empty .)
    ASS_ADD         reduce using rule 341 (expr_50 -> empty .)
    ASS_SUB         reduce using rule 341 (expr_50 -> empty .)
    ASS_MUL         reduce using rule 341 (expr_50 -> empty .)
    ASS_DIV         reduce using rule 341 (expr_50 -> empty .)
    ASS_AND         reduce using rule 341 (expr_50 -> empty .)
    ASS_OR          reduce using rule 341 (expr_50 -> empty .)
    ASS_XOR         reduce using rule 341 (expr_50 -> empty .)
    ASS_MOD         reduce using rule 341 (expr_50 -> empty .)
    LESS            reduce using rule 341 (expr_50 -> empty .)
    MORE            reduce using rule 341 (expr_50 -> empty .)
    COLON           reduce using rule 341 (expr_50 -> empty .)
    FRPAREN         reduce using rule 341 (expr_50 -> empty .)
    SEMI            reduce using rule 341 (expr_50 -> empty .)
    BLPAREN         reduce using rule 341 (expr_50 -> empty .)
    IMPLEMENTS      reduce using rule 341 (expr_50 -> empty .)
    IDENTIFIER      reduce using rule 341 (expr_50 -> empty .)
    OP_ARRAY        reduce using rule 341 (expr_50 -> empty .)



state 358

    (464) expr_101 -> expr_101 expr_100 instanceOfExpression .

    OP_EQ           reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    OP_NE           reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    AND             reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    CARET           reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    VERTICAL        reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    OP_LAND         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    OP_LOR          reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    QUES            reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    RPAREN          reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    COMMA           reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    BRPAREN         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    EQUALS          reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_ADD         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_SUB         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_MUL         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_DIV         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_AND         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_OR          reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_XOR         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    ASS_MOD         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    LESS            reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    MORE            reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    COLON           reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    FRPAREN         reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)
    SEMI            reduce using rule 464 (expr_101 -> expr_101 expr_100 instanceOfExpression .)



state 359

    (183) identifierSuffix -> DOT THIS .

    DOT             reduce using rule 183 (identifierSuffix -> DOT THIS .)
    FLPAREN         reduce using rule 183 (identifierSuffix -> DOT THIS .)
    OP_INC          reduce using rule 183 (identifierSuffix -> DOT THIS .)
    OP_DEC          reduce using rule 183 (identifierSuffix -> DOT THIS .)



state 360

    (182) identifierSuffix -> DOT nonWildcardTypeArguments . IDENTIFIER arguments

    IDENTIFIER      shift and go to state 442



state 361

    (491) expr_111 -> expr_111 DOT IDENTIFIER .

    DOT             reduce using rule 491 (expr_111 -> expr_111 DOT IDENTIFIER .)
    FLPAREN         reduce using rule 491 (expr_111 -> expr_111 DOT IDENTIFIER .)
    LPAREN          reduce using rule 491 (expr_111 -> expr_111 DOT IDENTIFIER .)
    OP_INC          reduce using rule 491 (expr_111 -> expr_111 DOT IDENTIFIER .)
    OP_DEC          reduce using rule 491 (expr_111 -> expr_111 DOT IDENTIFIER .)



state 362

    (184) identifierSuffix -> DOT SUPER . arguments
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    arguments                      shift and go to state 443

state 363

    (181) identifierSuffix -> DOT CLASS .

    DOT             reduce using rule 181 (identifierSuffix -> DOT CLASS .)
    FLPAREN         reduce using rule 181 (identifierSuffix -> DOT CLASS .)
    OP_INC          reduce using rule 181 (identifierSuffix -> DOT CLASS .)
    OP_DEC          reduce using rule 181 (identifierSuffix -> DOT CLASS .)



state 364

    (507) expr_118 -> FLPAREN FRPAREN .

    DOT             reduce using rule 507 (expr_118 -> FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 507 (expr_118 -> FLPAREN FRPAREN .)



state 365

    (509) expr_119 -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 444



state 366

    (510) expr_119 -> expr_119 FLPAREN . expression FRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 445

state 367

    (508) expr_118 -> expr_118 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 446



state 368

    (178) identifierSuffix -> expr_118 DOT . CLASS

    CLASS           shift and go to state 447



state 369

    (450) expr_96 -> expr_96 OP_LAND inclusiveOrExpression .

    OP_LAND         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    OP_LOR          reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    QUES            reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    RPAREN          reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    COMMA           reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    BRPAREN         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    EQUALS          reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_ADD         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_SUB         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_MUL         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_DIV         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_AND         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_OR          reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_XOR         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    ASS_MOD         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    LESS            reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    MORE            reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    COLON           reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    FRPAREN         reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)
    SEMI            reduce using rule 450 (expr_96 -> expr_96 OP_LAND inclusiveOrExpression .)



state 370

    (472) expr_104 -> expr_104 shiftOp additiveExpression .

    LESS            reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    MORE            reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    INSTANCEOF      reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    OP_EQ           reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    OP_NE           reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    AND             reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    CARET           reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    VERTICAL        reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    OP_LAND         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    OP_LOR          reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    QUES            reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    RPAREN          reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    COMMA           reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    BRPAREN         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    EQUALS          reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_ADD         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_SUB         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_MUL         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_DIV         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_AND         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_OR          reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_XOR         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    ASS_MOD         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    COLON           reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    FRPAREN         reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)
    SEMI            reduce using rule 472 (expr_104 -> expr_104 shiftOp additiveExpression .)



state 371

    (153) shiftOp -> MORE MORE MORE .

    PLUS            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    DASH            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    OP_INC          reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    OP_DEC          reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    TILDE           reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    EXCLAMATION     reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    LPAREN          reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    THIS            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    IDENTIFIER      reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    SUPER           reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    VOID            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    CHARLITERAL     reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    STRINGLITERAL   reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    TRUE            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    FALSE           reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NULL            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NEW             reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    BOOLEAN         reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    CHAR            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    BYTE            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    SHORT           reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    INT             reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    LONG            reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    FLOAT           reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    DOUBLE          reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NUMBER          reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    HEX_NUMBER      reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    LONG_NUMBER     reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    LONG_HEX_NUMBER reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_1   reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_2   reduce using rule 153 (shiftOp -> MORE MORE MORE .)
    NON_INTEGER_3   reduce using rule 153 (shiftOp -> MORE MORE MORE .)



state 372

    (456) expr_98 -> expr_98 CARET andExpression .

    CARET           reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    VERTICAL        reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    OP_LAND         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    OP_LOR          reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    QUES            reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    RPAREN          reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    COMMA           reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    BRPAREN         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    EQUALS          reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_ADD         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_SUB         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_MUL         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_DIV         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_AND         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_OR          reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_XOR         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    ASS_MOD         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    LESS            reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    MORE            reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    COLON           reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    FRPAREN         reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)
    SEMI            reduce using rule 456 (expr_98 -> expr_98 CARET andExpression .)



state 373

    (77) elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN .

    COMMA           reduce using rule 77 (elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN .)
    BRPAREN         reduce using rule 77 (elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN .)
    RPAREN          reduce using rule 77 (elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN .)
    SEMI            reduce using rule 77 (elementValueArrayInitializer -> BLPAREN expr_71 expr_72 BRPAREN .)



state 374

    (388) expr_70 -> expr_70 COMMA . elementValue
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    parExpression                  shift and go to state 109
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 448

state 375

    (387) expr_70 -> COMMA elementValue .

    COMMA           reduce using rule 387 (expr_70 -> COMMA elementValue .)
    BRPAREN         reduce using rule 387 (expr_70 -> COMMA elementValue .)



state 376

    (459) expr_99 -> expr_99 AND equalityExpression .

    AND             reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    CARET           reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    VERTICAL        reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    OP_LAND         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    OP_LOR          reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    QUES            reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    RPAREN          reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    COMMA           reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    BRPAREN         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    EQUALS          reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_ADD         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_SUB         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_MUL         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_DIV         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_AND         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_OR          reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_XOR         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    ASS_MOD         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    LESS            reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    MORE            reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    COLON           reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    FRPAREN         reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)
    SEMI            reduce using rule 459 (expr_99 -> expr_99 AND equalityExpression .)



state 377

    (444) expr_94 -> QUES expression COLON . conditionalExpression
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 449
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116

state 378

    (453) expr_97 -> expr_97 VERTICAL exclusiveOrExpression .

    VERTICAL        reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    OP_LAND         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    OP_LOR          reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    QUES            reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    RPAREN          reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    COMMA           reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    BRPAREN         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    EQUALS          reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_ADD         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_SUB         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_MUL         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_DIV         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_AND         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_OR          reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_XOR         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    ASS_MOD         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    LESS            reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    MORE            reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    COLON           reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    FRPAREN         reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)
    SEMI            reduce using rule 453 (expr_97 -> expr_97 VERTICAL exclusiveOrExpression .)



state 379

    (190) selector -> FLPAREN expression FRPAREN .

    OP_INC          reduce using rule 190 (selector -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 190 (selector -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 190 (selector -> FLPAREN expression FRPAREN .)
    FLPAREN         reduce using rule 190 (selector -> FLPAREN expression FRPAREN .)



state 380

    (529) expr_127 -> nonWildcardTypeArguments .

    IDENTIFIER      reduce using rule 529 (expr_127 -> nonWildcardTypeArguments .)



state 381

    (201) innerCreator -> DOT NEW expr_127 . IDENTIFIER expr_128 classCreatorRest

    IDENTIFIER      shift and go to state 450



state 382

    (530) expr_127 -> empty .

    IDENTIFIER      reduce using rule 530 (expr_127 -> empty .)



state 383

    (186) selector -> DOT IDENTIFIER expr_120 .

    OP_INC          reduce using rule 186 (selector -> DOT IDENTIFIER expr_120 .)
    OP_DEC          reduce using rule 186 (selector -> DOT IDENTIFIER expr_120 .)
    DOT             reduce using rule 186 (selector -> DOT IDENTIFIER expr_120 .)
    FLPAREN         reduce using rule 186 (selector -> DOT IDENTIFIER expr_120 .)



state 384

    (511) expr_120 -> arguments .

    OP_INC          reduce using rule 511 (expr_120 -> arguments .)
    OP_DEC          reduce using rule 511 (expr_120 -> arguments .)
    DOT             reduce using rule 511 (expr_120 -> arguments .)
    FLPAREN         reduce using rule 511 (expr_120 -> arguments .)



state 385

    (512) expr_120 -> empty .

    OP_INC          reduce using rule 512 (expr_120 -> empty .)
    OP_DEC          reduce using rule 512 (expr_120 -> empty .)
    DOT             reduce using rule 512 (expr_120 -> empty .)
    FLPAREN         reduce using rule 512 (expr_120 -> empty .)



state 386

    (188) selector -> DOT SUPER superSuffix .

    OP_INC          reduce using rule 188 (selector -> DOT SUPER superSuffix .)
    OP_DEC          reduce using rule 188 (selector -> DOT SUPER superSuffix .)
    DOT             reduce using rule 188 (selector -> DOT SUPER superSuffix .)
    FLPAREN         reduce using rule 188 (selector -> DOT SUPER superSuffix .)



state 387

    (203) nonWildcardTypeArguments -> LESS typeList MORE .

    SUPER           reduce using rule 203 (nonWildcardTypeArguments -> LESS typeList MORE .)
    IDENTIFIER      reduce using rule 203 (nonWildcardTypeArguments -> LESS typeList MORE .)
    THIS            reduce using rule 203 (nonWildcardTypeArguments -> LESS typeList MORE .)



state 388

    (25) typeList -> type expr_28 .
    (286) expr_28 -> expr_28 . COMMA type

    MORE            reduce using rule 25 (typeList -> type expr_28 .)
    BLPAREN         reduce using rule 25 (typeList -> type expr_28 .)
    COMMA           shift and go to state 451



state 389

    (285) expr_28 -> COMMA . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 452

state 390

    (287) expr_28 -> empty .

    COMMA           reduce using rule 287 (expr_28 -> empty .)
    MORE            reduce using rule 287 (expr_28 -> empty .)
    BLPAREN         reduce using rule 287 (expr_28 -> empty .)



state 391

    (202) classCreatorRest -> arguments expr_129 .

    DOT             reduce using rule 202 (classCreatorRest -> arguments expr_129 .)
    FLPAREN         reduce using rule 202 (classCreatorRest -> arguments expr_129 .)
    OP_INC          reduce using rule 202 (classCreatorRest -> arguments expr_129 .)
    OP_DEC          reduce using rule 202 (classCreatorRest -> arguments expr_129 .)



state 392

    (26) classBody -> BLPAREN . expr_29 BRPAREN
    (288) expr_29 -> . classBodyDeclaration
    (289) expr_29 -> . expr_29 classBodyDeclaration
    (290) expr_29 -> . empty
    (28) classBodyDeclaration -> . SEMI
    (29) classBodyDeclaration -> . expr_31 block
    (30) classBodyDeclaration -> . memberDecl
    (547) empty -> .
    (294) expr_31 -> . STATIC
    (295) expr_31 -> . empty
    (31) memberDecl -> . fieldDeclaration
    (32) memberDecl -> . methodDeclaration
    (33) memberDecl -> . classDeclaration
    (34) memberDecl -> . interfaceDeclaration
    (37) fieldDeclaration -> . modifiers type variableDeclarator expr_41 SEMI
    (35) methodDeclaration -> . modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (36) methodDeclaration -> . modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (9) modifiers -> . expr_8
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 456
    BRPAREN         reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    STATIC          shift and go to state 454
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4

  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]

    expr_29                        shift and go to state 453
    memberDecl                     shift and go to state 462
    methodDeclaration              shift and go to state 455
    normalClassDeclaration         shift and go to state 37
    normalInterfaceDeclaration     shift and go to state 34
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 457
    enumDeclaration                shift and go to state 45
    expr_31                        shift and go to state 458
    classDeclaration               shift and go to state 464
    fieldDeclaration               shift and go to state 460
    modifiers                      shift and go to state 461
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 463
    classBodyDeclaration           shift and go to state 459

state 393

    (534) expr_129 -> empty .

    DOT             reduce using rule 534 (expr_129 -> empty .)
    FLPAREN         reduce using rule 534 (expr_129 -> empty .)
    OP_INC          reduce using rule 534 (expr_129 -> empty .)
    OP_DEC          reduce using rule 534 (expr_129 -> empty .)



state 394

    (533) expr_129 -> classBody .

    DOT             reduce using rule 533 (expr_129 -> classBody .)
    FLPAREN         reduce using rule 533 (expr_129 -> classBody .)
    OP_INC          reduce using rule 533 (expr_129 -> classBody .)
    OP_DEC          reduce using rule 533 (expr_129 -> classBody .)



state 395

    (191) creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest .

    DOT             reduce using rule 191 (creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest .)
    FLPAREN         reduce using rule 191 (creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest .)
    OP_INC          reduce using rule 191 (creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest .)
    OP_DEC          reduce using rule 191 (creator -> NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest .)



state 396

    (48) classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .
    (347) expr_53 -> expr_53 . DOT IDENTIFIER expr_52

    FLPAREN         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    COMMA           reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    MORE            reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    BLPAREN         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    AND             reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    OP_EQ           reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    OP_NE           reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    CARET           reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    VERTICAL        reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    OP_LAND         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    OP_LOR          reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    QUES            reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    RPAREN          reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    BRPAREN         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    EQUALS          reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_ADD         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_SUB         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_MUL         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_DIV         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_AND         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_OR          reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_XOR         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    ASS_MOD         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    LESS            reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    COLON           reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    FRPAREN         reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    SEMI            reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    IDENTIFIER      reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    LPAREN          reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    OP_ARRAY        reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    IMPLEMENTS      reduce using rule 48 (classOrInterfaceType -> IDENTIFIER expr_51 expr_53 .)
    DOT             shift and go to state 465



state 397

    (346) expr_53 -> DOT . IDENTIFIER expr_52

    IDENTIFIER      shift and go to state 466



state 398

    (348) expr_53 -> empty .

    DOT             reduce using rule 348 (expr_53 -> empty .)
    LPAREN          reduce using rule 348 (expr_53 -> empty .)
    FLPAREN         reduce using rule 348 (expr_53 -> empty .)
    RPAREN          reduce using rule 348 (expr_53 -> empty .)
    OP_EQ           reduce using rule 348 (expr_53 -> empty .)
    OP_NE           reduce using rule 348 (expr_53 -> empty .)
    AND             reduce using rule 348 (expr_53 -> empty .)
    CARET           reduce using rule 348 (expr_53 -> empty .)
    VERTICAL        reduce using rule 348 (expr_53 -> empty .)
    OP_LAND         reduce using rule 348 (expr_53 -> empty .)
    OP_LOR          reduce using rule 348 (expr_53 -> empty .)
    QUES            reduce using rule 348 (expr_53 -> empty .)
    COMMA           reduce using rule 348 (expr_53 -> empty .)
    BRPAREN         reduce using rule 348 (expr_53 -> empty .)
    EQUALS          reduce using rule 348 (expr_53 -> empty .)
    ASS_ADD         reduce using rule 348 (expr_53 -> empty .)
    ASS_SUB         reduce using rule 348 (expr_53 -> empty .)
    ASS_MUL         reduce using rule 348 (expr_53 -> empty .)
    ASS_DIV         reduce using rule 348 (expr_53 -> empty .)
    ASS_AND         reduce using rule 348 (expr_53 -> empty .)
    ASS_OR          reduce using rule 348 (expr_53 -> empty .)
    ASS_XOR         reduce using rule 348 (expr_53 -> empty .)
    ASS_MOD         reduce using rule 348 (expr_53 -> empty .)
    LESS            reduce using rule 348 (expr_53 -> empty .)
    MORE            reduce using rule 348 (expr_53 -> empty .)
    COLON           reduce using rule 348 (expr_53 -> empty .)
    FRPAREN         reduce using rule 348 (expr_53 -> empty .)
    SEMI            reduce using rule 348 (expr_53 -> empty .)
    BLPAREN         reduce using rule 348 (expr_53 -> empty .)
    IMPLEMENTS      reduce using rule 348 (expr_53 -> empty .)
    IDENTIFIER      reduce using rule 348 (expr_53 -> empty .)
    OP_ARRAY        reduce using rule 348 (expr_53 -> empty .)



state 399

    (58) typeArgument -> type .

    MORE            reduce using rule 58 (typeArgument -> type .)
    COMMA           reduce using rule 58 (typeArgument -> type .)



state 400

    (57) typeArguments -> LESS typeArgument . expr_54 MORE
    (349) expr_54 -> . COMMA typeArgument
    (350) expr_54 -> . expr_54 COMMA typeArgument
    (351) expr_54 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 468
    MORE            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_54                        shift and go to state 467
    empty                          shift and go to state 469

state 401

    (59) typeArgument -> QUES . expr_56
    (354) expr_56 -> . expr_55 type
    (355) expr_56 -> . empty
    (352) expr_55 -> . EXTENDS
    (353) expr_55 -> . SUPER
    (547) empty -> .

    EXTENDS         shift and go to state 473
    SUPER           shift and go to state 472
    COMMA           reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)


    empty                          shift and go to state 474
    expr_55                        shift and go to state 470
    expr_56                        shift and go to state 471

state 402

    (194) arrayCreator -> NEW createdName FLPAREN FRPAREN . expr_121 arrayInitializer
    (513) expr_121 -> . FLPAREN FRPAREN
    (514) expr_121 -> . expr_121 FLPAREN FRPAREN
    (515) expr_121 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 475
    BLPAREN         reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_121                       shift and go to state 476
    empty                          shift and go to state 477

state 403

    (195) arrayCreator -> NEW createdName FLPAREN expression . FRPAREN expr_122 expr_123

    FRPAREN         shift and go to state 478



state 404

    (496) expr_113 -> expr_113 DOT IDENTIFIER .

    DOT             reduce using rule 496 (expr_113 -> expr_113 DOT IDENTIFIER .)
    FLPAREN         reduce using rule 496 (expr_113 -> expr_113 DOT IDENTIFIER .)
    LPAREN          reduce using rule 496 (expr_113 -> expr_113 DOT IDENTIFIER .)
    OP_INC          reduce using rule 496 (expr_113 -> expr_113 DOT IDENTIFIER .)
    OP_DEC          reduce using rule 496 (expr_113 -> expr_113 DOT IDENTIFIER .)



state 405

    (501) expr_115 -> expr_115 FLPAREN FRPAREN .

    DOT             reduce using rule 501 (expr_115 -> expr_115 FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 501 (expr_115 -> expr_115 FLPAREN FRPAREN .)



state 406

    (174) primary -> primitiveType expr_115 DOT CLASS .

    DOT             reduce using rule 174 (primary -> primitiveType expr_115 DOT CLASS .)
    FLPAREN         reduce using rule 174 (primary -> primitiveType expr_115 DOT CLASS .)
    OP_INC          reduce using rule 174 (primary -> primitiveType expr_115 DOT CLASS .)
    OP_DEC          reduce using rule 174 (primary -> primitiveType expr_115 DOT CLASS .)



state 407

    (477) expr_106 -> expr_106 expr_105 multiplicativeExpression .

    PLUS            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    DASH            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    LESS            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    MORE            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    INSTANCEOF      reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    OP_EQ           reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    OP_NE           reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    AND             reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    CARET           reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    VERTICAL        reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    OP_LAND         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    OP_LOR          reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    QUES            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    RPAREN          reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    COMMA           reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    BRPAREN         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    EQUALS          reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_ADD         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_SUB         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_MUL         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_DIV         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_AND         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_OR          reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_XOR         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    ASS_MOD         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    COLON           reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    FRPAREN         reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)
    SEMI            reduce using rule 477 (expr_106 -> expr_106 expr_105 multiplicativeExpression .)



state 408

    (469) expr_103 -> expr_103 relationalOp shiftExpression .

    LESS            reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    MORE            reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    INSTANCEOF      reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    OP_EQ           reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    OP_NE           reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    AND             reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    CARET           reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    VERTICAL        reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    OP_LAND         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    OP_LOR          reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    QUES            reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    RPAREN          reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    COMMA           reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    BRPAREN         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    EQUALS          reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_ADD         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_SUB         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_MUL         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_DIV         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_AND         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_OR          reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_XOR         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    ASS_MOD         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    COLON           reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    FRPAREN         reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)
    SEMI            reduce using rule 469 (expr_103 -> expr_103 relationalOp shiftExpression .)



state 409

    (483) expr_108 -> expr_108 expr_107 unaryExpression .

    MULT            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    SLASH           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    PERCENT         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    PLUS            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    DASH            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    LESS            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    MORE            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    INSTANCEOF      reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    OP_EQ           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    OP_NE           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    AND             reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    CARET           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    VERTICAL        reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    OP_LAND         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    OP_LOR          reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    QUES            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    RPAREN          reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    COMMA           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    BRPAREN         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    EQUALS          reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_ADD         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_SUB         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_MUL         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_DIV         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_AND         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_OR          reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_XOR         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    ASS_MOD         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    COLON           reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    FRPAREN         reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)
    SEMI            reduce using rule 483 (expr_108 -> expr_108 expr_107 unaryExpression .)



state 410

    (336) expr_49 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    OP_NE           reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    AND             reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    CARET           reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    QUES            reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    EQUALS          reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    LESS            reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    MORE            reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    COLON           reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    IDENTIFIER      reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 336 (expr_49 -> FLPAREN FRPAREN .)



state 411

    (337) expr_49 -> expr_49 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 479



state 412

    (167) castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .

    MULT            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    SLASH           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    PERCENT         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    PLUS            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    DASH            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    LESS            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    MORE            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    INSTANCEOF      reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    OP_EQ           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    OP_NE           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    AND             reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    CARET           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    VERTICAL        reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    OP_LAND         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    OP_LOR          reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    QUES            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    EQUALS          reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_ADD         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_SUB         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_MUL         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_DIV         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_AND         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_OR          reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_XOR         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    ASS_MOD         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    FRPAREN         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    COMMA           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    BRPAREN         reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    RPAREN          reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    COLON           reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)
    SEMI            reduce using rule 167 (castExpression -> LPAREN type RPAREN unaryExpressionNotPlusMinus .)



state 413

    (442) expr_93 -> assignmentOperator expression .

    RPAREN          reduce using rule 442 (expr_93 -> assignmentOperator expression .)
    COLON           reduce using rule 442 (expr_93 -> assignmentOperator expression .)
    FRPAREN         reduce using rule 442 (expr_93 -> assignmentOperator expression .)
    COMMA           reduce using rule 442 (expr_93 -> assignmentOperator expression .)
    SEMI            reduce using rule 442 (expr_93 -> assignmentOperator expression .)
    BRPAREN         reduce using rule 442 (expr_93 -> assignmentOperator expression .)



state 414

    (135) assignmentOperator -> LESS LESS . EQUALS

    EQUALS          shift and go to state 480



state 415

    (136) assignmentOperator -> MORE MORE . MORE EQUALS
    (137) assignmentOperator -> MORE MORE . EQUALS

    MORE            shift and go to state 482
    EQUALS          shift and go to state 481



state 416

    (340) expr_50 -> expr_50 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 483



state 417

    (339) expr_50 -> FLPAREN FRPAREN .
    (500) expr_115 -> FLPAREN FRPAREN .

  ! reduce/reduce conflict for FLPAREN resolved using rule 339 (expr_50 -> FLPAREN FRPAREN .).
    FLPAREN         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    DOT             reduce using rule 500 (expr_115 -> FLPAREN FRPAREN .)

  ! FLPAREN         [ reduce using rule 500 (expr_115 -> FLPAREN FRPAREN .) ]


state 418

    (166) castExpression -> LPAREN primitiveType RPAREN unaryExpression .

    MULT            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SLASH           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PERCENT         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    PLUS            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    DASH            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    LESS            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    MORE            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    INSTANCEOF      reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_EQ           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_NE           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    AND             reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    CARET           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    VERTICAL        reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LAND         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    OP_LOR          reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    QUES            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    EQUALS          reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_ADD         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_SUB         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MUL         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_DIV         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_AND         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_OR          reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_XOR         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    ASS_MOD         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    FRPAREN         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COMMA           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    BRPAREN         reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    RPAREN          reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    COLON           reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)
    SEMI            reduce using rule 166 (castExpression -> LPAREN primitiveType RPAREN unaryExpression .)



state 419

    (204) arguments -> LPAREN expr_130 RPAREN .

    BLPAREN         reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    DOT             reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    FLPAREN         reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    OP_INC          reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    OP_DEC          reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    SEMI            reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    COMMA           reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)
    BRPAREN         reduce using rule 204 (arguments -> LPAREN expr_130 RPAREN .)



state 420

    (439) expr_92 -> COMMA . expression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 484

state 421

    (441) expr_92 -> empty .

    COMMA           reduce using rule 441 (expr_92 -> empty .)
    RPAREN          reduce using rule 441 (expr_92 -> empty .)
    SEMI            reduce using rule 441 (expr_92 -> empty .)



state 422

    (124) expressionList -> expression expr_92 .
    (440) expr_92 -> expr_92 . COMMA expression

    RPAREN          reduce using rule 124 (expressionList -> expression expr_92 .)
    SEMI            reduce using rule 124 (expressionList -> expression expr_92 .)
    COMMA           shift and go to state 485



state 423

    (177) superSuffix -> DOT expr_116 IDENTIFIER . expr_117
    (505) expr_117 -> . arguments
    (506) expr_117 -> . empty
    (204) arguments -> . LPAREN expr_130 RPAREN
    (547) empty -> .

    LPAREN          shift and go to state 222
    DOT             reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)


    expr_117                       shift and go to state 486
    arguments                      shift and go to state 487
    empty                          shift and go to state 488

state 424

    (4) importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .

    IMPORT          reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    SEMI            reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    PUBLIC          reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    PROTECTED       reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    PRIVATE         reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    STATIC          reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    ABSTRACT        reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    FINAL           reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    NATIVE          reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    SYNCHRONIZED    reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    TRANSIENT       reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    VOLATILE        reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    STRICTFP        reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    AT              reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)
    $end            reduce using rule 4 (importDeclaration -> IMPORT expr_5 IDENTIFIER expr_6 expr_7 SEMI .)



state 425

    (229) expr_6 -> expr_6 DOT IDENTIFIER .

    DOT             reduce using rule 229 (expr_6 -> expr_6 DOT IDENTIFIER .)
    SEMI            reduce using rule 229 (expr_6 -> expr_6 DOT IDENTIFIER .)



state 426

    (230) expr_7 -> DOT MULT .

    SEMI            reduce using rule 230 (expr_7 -> DOT MULT .)



state 427

    (3) importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .

    IMPORT          reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    SEMI            reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    PUBLIC          reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    PROTECTED       reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    PRIVATE         reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    STATIC          reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    ABSTRACT        reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    FINAL           reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    NATIVE          reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    SYNCHRONIZED    reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    TRANSIENT       reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    VOLATILE        reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    STRICTFP        reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    AT              reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)
    $end            reduce using rule 3 (importDeclaration -> IMPORT expr_4 IDENTIFIER DOT MULT SEMI .)



state 428

    (78) annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .

    SEMI            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    PUBLIC          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    PROTECTED       reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    PRIVATE         reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    STATIC          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    ABSTRACT        reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    FINAL           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NATIVE          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    SYNCHRONIZED    reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    TRANSIENT       reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    VOLATILE        reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    STRICTFP        reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    AT              reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    $end            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    BRPAREN         reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    BLPAREN         reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    ASSERT          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    IF              reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    WHILE           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    DO              reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    SWITCH          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    RETURN          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    THROW           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    BREAK           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    CONTINUE        reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    IDENTIFIER      reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    FOR             reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    TRY             reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    PLUS            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    DASH            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    OP_INC          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    OP_DEC          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    TILDE           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    EXCLAMATION     reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    LPAREN          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    THIS            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    SUPER           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    VOID            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    CHARLITERAL     reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    STRINGLITERAL   reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    TRUE            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    FALSE           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NULL            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NEW             reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    BOOLEAN         reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    CHAR            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    BYTE            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    SHORT           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    INT             reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    LONG            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    FLOAT           reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    DOUBLE          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NUMBER          reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    HEX_NUMBER      reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    LONG_NUMBER     reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    LONG_HEX_NUMBER reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NON_INTEGER_1   reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NON_INTEGER_2   reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    NON_INTEGER_3   reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    CASE            reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)
    DEFAULT         reduce using rule 78 (annotationTypeDeclaration -> modifiers AT INTERFACE IDENTIFIER annotationTypeBody .)



state 429

    (79) annotationTypeBody -> BLPAREN . expr_73 BRPAREN
    (394) expr_73 -> . annotationTypeElementDeclaration
    (395) expr_73 -> . expr_73 annotationTypeElementDeclaration
    (396) expr_73 -> . empty
    (80) annotationTypeElementDeclaration -> . annotationMethodDeclaration
    (81) annotationTypeElementDeclaration -> . interfaceFieldDeclaration
    (82) annotationTypeElementDeclaration -> . normalClassDeclaration
    (83) annotationTypeElementDeclaration -> . normalInterfaceDeclaration
    (84) annotationTypeElementDeclaration -> . enumDeclaration
    (85) annotationTypeElementDeclaration -> . annotationTypeDeclaration
    (86) annotationTypeElementDeclaration -> . SEMI
    (547) empty -> .
    (87) annotationMethodDeclaration -> . modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI
    (45) interfaceFieldDeclaration -> . modifiers type variableDeclarator expr_48 SEMI
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (9) modifiers -> . expr_8
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 492
    BRPAREN         reduce using rule 547 (empty -> .)
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4

  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]

    interfaceFieldDeclaration      shift and go to state 489
    annotationTypeElementDeclaration shift and go to state 490
    normalInterfaceDeclaration     shift and go to state 491
    normalClassDeclaration         shift and go to state 493
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 494
    enumDeclaration                shift and go to state 495
    expr_73                        shift and go to state 496
    modifiers                      shift and go to state 497
    annotationMethodDeclaration    shift and go to state 498
    annotationTypeDeclaration      shift and go to state 499

state 430

    (14) typeParameters -> LESS typeParameter . expr_13 MORE
    (252) expr_13 -> . COMMA typeParameter
    (253) expr_13 -> . expr_13 COMMA typeParameter
    (254) expr_13 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 500
    MORE            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 501
    expr_13                        shift and go to state 502

state 431

    (15) typeParameter -> IDENTIFIER . expr_14
    (255) expr_14 -> . EXTENDS typeBound
    (256) expr_14 -> . empty
    (547) empty -> .

    EXTENDS         shift and go to state 504
    COMMA           reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)


    expr_14                        shift and go to state 503
    empty                          shift and go to state 505

state 432

    (283) expr_27 -> EXTENDS . typeList
    (25) typeList -> . type expr_28
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    typeList                       shift and go to state 506
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 281

state 433

    (284) expr_27 -> empty .

    BLPAREN         reduce using rule 284 (expr_27 -> empty .)



state 434

    (24) normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 . interfaceBody
    (27) interfaceBody -> . BLPAREN expr_30 BRPAREN

    BLPAREN         shift and go to state 508


    interfaceBody                  shift and go to state 507

state 435

    (261) expr_17 -> IMPLEMENTS typeList .

    BLPAREN         reduce using rule 261 (expr_17 -> IMPLEMENTS typeList .)



state 436

    (17) enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .

    BRPAREN         reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    SEMI            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    PUBLIC          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    PROTECTED       reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    PRIVATE         reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    STATIC          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    ABSTRACT        reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    FINAL           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NATIVE          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    SYNCHRONIZED    reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    TRANSIENT       reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    VOLATILE        reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    STRICTFP        reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    AT              reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    ASSERT          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    IF              reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    WHILE           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    DO              reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    SWITCH          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    RETURN          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    THROW           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    BREAK           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    CONTINUE        reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    IDENTIFIER      reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    BLPAREN         reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    FOR             reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    TRY             reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    PLUS            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    DASH            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    OP_INC          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    OP_DEC          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    TILDE           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    EXCLAMATION     reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    LPAREN          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    THIS            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    SUPER           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    VOID            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    CHARLITERAL     reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    STRINGLITERAL   reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    TRUE            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    FALSE           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NULL            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NEW             reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    BOOLEAN         reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    CHAR            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    BYTE            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    SHORT           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    INT             reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    LONG            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    FLOAT           reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    DOUBLE          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NUMBER          reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    HEX_NUMBER      reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    LONG_NUMBER     reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    LONG_HEX_NUMBER reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NON_INTEGER_1   reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NON_INTEGER_2   reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    NON_INTEGER_3   reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    $end            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    CASE            reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)
    DEFAULT         reduce using rule 17 (enumDeclaration -> modifiers expr_16 IDENTIFIER expr_17 enumBody .)



state 437

    (18) enumBody -> BLPAREN . expr_18 expr_19 expr_20 BRPAREN
    (263) expr_18 -> . enumConstants
    (264) expr_18 -> . empty
    (19) enumConstants -> . enumConstant expr_21
    (547) empty -> .
    (20) enumConstant -> . expr_22 IDENTIFIER expr_23 expr_24
    (272) expr_22 -> . annotations
    (273) expr_22 -> . empty
    (70) annotations -> . expr_66
    (378) expr_66 -> . annotation
    (379) expr_66 -> . expr_66 annotation
    (71) annotation -> . AT qualifiedName expr_68

    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    AT              shift and go to state 4


    enumConstant                   shift and go to state 510
    expr_66                        shift and go to state 2
    annotation                     shift and go to state 6
    annotations                    shift and go to state 509
    enumConstants                  shift and go to state 511
    expr_18                        shift and go to state 512
    expr_22                        shift and go to state 513
    empty                          shift and go to state 514

state 438

    (13) normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 . expr_12 classBody
    (250) expr_12 -> . IMPLEMENTS typeList
    (251) expr_12 -> . empty
    (547) empty -> .

    IMPLEMENTS      shift and go to state 515
    BLPAREN         reduce using rule 547 (empty -> .)


    empty                          shift and go to state 516
    expr_12                        shift and go to state 517

state 439

    (249) expr_11 -> empty .

    IMPLEMENTS      reduce using rule 249 (expr_11 -> empty .)
    BLPAREN         reduce using rule 249 (expr_11 -> empty .)



state 440

    (248) expr_11 -> EXTENDS . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 518

state 441

    (339) expr_50 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    OP_NE           reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    AND             reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    CARET           reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    QUES            reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    EQUALS          reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    LESS            reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    MORE            reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    COLON           reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    IDENTIFIER      reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 339 (expr_50 -> FLPAREN FRPAREN .)



state 442

    (182) identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER . arguments
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    arguments                      shift and go to state 519

state 443

    (184) identifierSuffix -> DOT SUPER arguments .

    DOT             reduce using rule 184 (identifierSuffix -> DOT SUPER arguments .)
    FLPAREN         reduce using rule 184 (identifierSuffix -> DOT SUPER arguments .)
    OP_INC          reduce using rule 184 (identifierSuffix -> DOT SUPER arguments .)
    OP_DEC          reduce using rule 184 (identifierSuffix -> DOT SUPER arguments .)



state 444

    (509) expr_119 -> FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 509 (expr_119 -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 509 (expr_119 -> FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 509 (expr_119 -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 509 (expr_119 -> FLPAREN expression FRPAREN .)



state 445

    (510) expr_119 -> expr_119 FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 520



state 446

    (508) expr_118 -> expr_118 FLPAREN FRPAREN .

    DOT             reduce using rule 508 (expr_118 -> expr_118 FLPAREN FRPAREN .)
    FLPAREN         reduce using rule 508 (expr_118 -> expr_118 FLPAREN FRPAREN .)



state 447

    (178) identifierSuffix -> expr_118 DOT CLASS .

    DOT             reduce using rule 178 (identifierSuffix -> expr_118 DOT CLASS .)
    FLPAREN         reduce using rule 178 (identifierSuffix -> expr_118 DOT CLASS .)
    OP_INC          reduce using rule 178 (identifierSuffix -> expr_118 DOT CLASS .)
    OP_DEC          reduce using rule 178 (identifierSuffix -> expr_118 DOT CLASS .)



state 448

    (388) expr_70 -> expr_70 COMMA elementValue .

    COMMA           reduce using rule 388 (expr_70 -> expr_70 COMMA elementValue .)
    BRPAREN         reduce using rule 388 (expr_70 -> expr_70 COMMA elementValue .)



state 449

    (444) expr_94 -> QUES expression COLON conditionalExpression .

    RPAREN          reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    COMMA           reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    BRPAREN         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    EQUALS          reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_ADD         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_SUB         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_MUL         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_DIV         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_AND         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_OR          reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_XOR         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    ASS_MOD         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    LESS            reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    MORE            reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    COLON           reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    FRPAREN         reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)
    SEMI            reduce using rule 444 (expr_94 -> QUES expression COLON conditionalExpression .)



state 450

    (201) innerCreator -> DOT NEW expr_127 IDENTIFIER . expr_128 classCreatorRest
    (531) expr_128 -> . typeArguments
    (532) expr_128 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

    LESS            shift and go to state 286
    LPAREN          reduce using rule 547 (empty -> .)


    typeArguments                  shift and go to state 522
    expr_128                       shift and go to state 521
    empty                          shift and go to state 523

state 451

    (286) expr_28 -> expr_28 COMMA . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 524

state 452

    (285) expr_28 -> COMMA type .

    COMMA           reduce using rule 285 (expr_28 -> COMMA type .)
    MORE            reduce using rule 285 (expr_28 -> COMMA type .)
    BLPAREN         reduce using rule 285 (expr_28 -> COMMA type .)



state 453

    (26) classBody -> BLPAREN expr_29 . BRPAREN
    (289) expr_29 -> expr_29 . classBodyDeclaration
    (28) classBodyDeclaration -> . SEMI
    (29) classBodyDeclaration -> . expr_31 block
    (30) classBodyDeclaration -> . memberDecl
    (294) expr_31 -> . STATIC
    (295) expr_31 -> . empty
    (31) memberDecl -> . fieldDeclaration
    (32) memberDecl -> . methodDeclaration
    (33) memberDecl -> . classDeclaration
    (34) memberDecl -> . interfaceDeclaration
    (547) empty -> .
    (37) fieldDeclaration -> . modifiers type variableDeclarator expr_41 SEMI
    (35) methodDeclaration -> . modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (36) methodDeclaration -> . modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (9) modifiers -> . expr_8
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

    BRPAREN         shift and go to state 526
    SEMI            shift and go to state 456
    STATIC          shift and go to state 454
    BLPAREN         reduce using rule 547 (empty -> .)
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4


    memberDecl                     shift and go to state 462
    methodDeclaration              shift and go to state 455
    normalClassDeclaration         shift and go to state 37
    normalInterfaceDeclaration     shift and go to state 34
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 525
    enumDeclaration                shift and go to state 45
    expr_31                        shift and go to state 458
    classDeclaration               shift and go to state 464
    fieldDeclaration               shift and go to state 460
    modifiers                      shift and go to state 461
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 463
    classBodyDeclaration           shift and go to state 527

state 454

    (294) expr_31 -> STATIC .
    (236) expr_8 -> STATIC .

    BLPAREN         reduce using rule 294 (expr_31 -> STATIC .)
    CLASS           reduce using rule 236 (expr_8 -> STATIC .)
    INTERFACE       reduce using rule 236 (expr_8 -> STATIC .)
    AT              reduce using rule 236 (expr_8 -> STATIC .)
    ENUM            reduce using rule 236 (expr_8 -> STATIC .)
    IDENTIFIER      reduce using rule 236 (expr_8 -> STATIC .)
    BOOLEAN         reduce using rule 236 (expr_8 -> STATIC .)
    CHAR            reduce using rule 236 (expr_8 -> STATIC .)
    BYTE            reduce using rule 236 (expr_8 -> STATIC .)
    SHORT           reduce using rule 236 (expr_8 -> STATIC .)
    INT             reduce using rule 236 (expr_8 -> STATIC .)
    LONG            reduce using rule 236 (expr_8 -> STATIC .)
    FLOAT           reduce using rule 236 (expr_8 -> STATIC .)
    DOUBLE          reduce using rule 236 (expr_8 -> STATIC .)
    LESS            reduce using rule 236 (expr_8 -> STATIC .)
    VOID            reduce using rule 236 (expr_8 -> STATIC .)



state 455

    (32) memberDecl -> methodDeclaration .

    BRPAREN         reduce using rule 32 (memberDecl -> methodDeclaration .)
    SEMI            reduce using rule 32 (memberDecl -> methodDeclaration .)
    STATIC          reduce using rule 32 (memberDecl -> methodDeclaration .)
    PUBLIC          reduce using rule 32 (memberDecl -> methodDeclaration .)
    PROTECTED       reduce using rule 32 (memberDecl -> methodDeclaration .)
    PRIVATE         reduce using rule 32 (memberDecl -> methodDeclaration .)
    ABSTRACT        reduce using rule 32 (memberDecl -> methodDeclaration .)
    FINAL           reduce using rule 32 (memberDecl -> methodDeclaration .)
    NATIVE          reduce using rule 32 (memberDecl -> methodDeclaration .)
    SYNCHRONIZED    reduce using rule 32 (memberDecl -> methodDeclaration .)
    TRANSIENT       reduce using rule 32 (memberDecl -> methodDeclaration .)
    VOLATILE        reduce using rule 32 (memberDecl -> methodDeclaration .)
    STRICTFP        reduce using rule 32 (memberDecl -> methodDeclaration .)
    AT              reduce using rule 32 (memberDecl -> methodDeclaration .)
    BLPAREN         reduce using rule 32 (memberDecl -> methodDeclaration .)



state 456

    (28) classBodyDeclaration -> SEMI .

    BRPAREN         reduce using rule 28 (classBodyDeclaration -> SEMI .)
    SEMI            reduce using rule 28 (classBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 28 (classBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 28 (classBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 28 (classBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 28 (classBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 28 (classBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 28 (classBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 28 (classBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 28 (classBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 28 (classBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 28 (classBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 28 (classBodyDeclaration -> SEMI .)
    AT              reduce using rule 28 (classBodyDeclaration -> SEMI .)
    BLPAREN         reduce using rule 28 (classBodyDeclaration -> SEMI .)



state 457

    (290) expr_29 -> empty .
    (295) expr_31 -> empty .

  ! reduce/reduce conflict for BLPAREN resolved using rule 290 (expr_29 -> empty .).
    BRPAREN         reduce using rule 290 (expr_29 -> empty .)
    SEMI            reduce using rule 290 (expr_29 -> empty .)
    STATIC          reduce using rule 290 (expr_29 -> empty .)
    PUBLIC          reduce using rule 290 (expr_29 -> empty .)
    PROTECTED       reduce using rule 290 (expr_29 -> empty .)
    PRIVATE         reduce using rule 290 (expr_29 -> empty .)
    ABSTRACT        reduce using rule 290 (expr_29 -> empty .)
    FINAL           reduce using rule 290 (expr_29 -> empty .)
    NATIVE          reduce using rule 290 (expr_29 -> empty .)
    SYNCHRONIZED    reduce using rule 290 (expr_29 -> empty .)
    TRANSIENT       reduce using rule 290 (expr_29 -> empty .)
    VOLATILE        reduce using rule 290 (expr_29 -> empty .)
    STRICTFP        reduce using rule 290 (expr_29 -> empty .)
    AT              reduce using rule 290 (expr_29 -> empty .)
    BLPAREN         reduce using rule 290 (expr_29 -> empty .)

  ! BLPAREN         [ reduce using rule 295 (expr_31 -> empty .) ]


state 458

    (29) classBodyDeclaration -> expr_31 . block
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 529

state 459

    (288) expr_29 -> classBodyDeclaration .

    BRPAREN         reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    SEMI            reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    STATIC          reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    PUBLIC          reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    PROTECTED       reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    PRIVATE         reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    ABSTRACT        reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    FINAL           reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    NATIVE          reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    TRANSIENT       reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    VOLATILE        reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    STRICTFP        reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    AT              reduce using rule 288 (expr_29 -> classBodyDeclaration .)
    BLPAREN         reduce using rule 288 (expr_29 -> classBodyDeclaration .)



state 460

    (31) memberDecl -> fieldDeclaration .

    BRPAREN         reduce using rule 31 (memberDecl -> fieldDeclaration .)
    SEMI            reduce using rule 31 (memberDecl -> fieldDeclaration .)
    STATIC          reduce using rule 31 (memberDecl -> fieldDeclaration .)
    PUBLIC          reduce using rule 31 (memberDecl -> fieldDeclaration .)
    PROTECTED       reduce using rule 31 (memberDecl -> fieldDeclaration .)
    PRIVATE         reduce using rule 31 (memberDecl -> fieldDeclaration .)
    ABSTRACT        reduce using rule 31 (memberDecl -> fieldDeclaration .)
    FINAL           reduce using rule 31 (memberDecl -> fieldDeclaration .)
    NATIVE          reduce using rule 31 (memberDecl -> fieldDeclaration .)
    SYNCHRONIZED    reduce using rule 31 (memberDecl -> fieldDeclaration .)
    TRANSIENT       reduce using rule 31 (memberDecl -> fieldDeclaration .)
    VOLATILE        reduce using rule 31 (memberDecl -> fieldDeclaration .)
    STRICTFP        reduce using rule 31 (memberDecl -> fieldDeclaration .)
    AT              reduce using rule 31 (memberDecl -> fieldDeclaration .)
    BLPAREN         reduce using rule 31 (memberDecl -> fieldDeclaration .)



state 461

    (37) fieldDeclaration -> modifiers . type variableDeclarator expr_41 SEMI
    (35) methodDeclaration -> modifiers . expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (36) methodDeclaration -> modifiers . expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (13) normalClassDeclaration -> modifiers . CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> modifiers . expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> modifiers . INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> modifiers . AT INTERFACE IDENTIFIER annotationTypeBody
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (296) expr_32 -> . typeParameters
    (297) expr_32 -> . empty
    (305) expr_36 -> . typeParameters
    (306) expr_36 -> . empty
    (260) expr_16 -> . ENUM
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (14) typeParameters -> . LESS typeParameter expr_13 MORE
    (547) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
    CLASS           shift and go to state 129
    INTERFACE       shift and go to state 127
    AT              shift and go to state 126
    ENUM            shift and go to state 125
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    LESS            shift and go to state 344
    VOID            reduce using rule 547 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]

    typeParameters                 shift and go to state 530
    classOrInterfaceType           shift and go to state 214
    type                           shift and go to state 531
    empty                          shift and go to state 532
    expr_36                        shift and go to state 533
    expr_32                        shift and go to state 534
    expr_16                        shift and go to state 128
    primitiveType                  shift and go to state 238

state 462

    (30) classBodyDeclaration -> memberDecl .

    BRPAREN         reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    SEMI            reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    STATIC          reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    PUBLIC          reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    PROTECTED       reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    PRIVATE         reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    ABSTRACT        reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    FINAL           reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    NATIVE          reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    SYNCHRONIZED    reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    TRANSIENT       reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    VOLATILE        reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    STRICTFP        reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    AT              reduce using rule 30 (classBodyDeclaration -> memberDecl .)
    BLPAREN         reduce using rule 30 (classBodyDeclaration -> memberDecl .)



state 463

    (34) memberDecl -> interfaceDeclaration .

    BRPAREN         reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    SEMI            reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    STATIC          reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    PUBLIC          reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    PROTECTED       reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    PRIVATE         reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    FINAL           reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    NATIVE          reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    VOLATILE        reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    STRICTFP        reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    AT              reduce using rule 34 (memberDecl -> interfaceDeclaration .)
    BLPAREN         reduce using rule 34 (memberDecl -> interfaceDeclaration .)



state 464

    (33) memberDecl -> classDeclaration .

    BRPAREN         reduce using rule 33 (memberDecl -> classDeclaration .)
    SEMI            reduce using rule 33 (memberDecl -> classDeclaration .)
    STATIC          reduce using rule 33 (memberDecl -> classDeclaration .)
    PUBLIC          reduce using rule 33 (memberDecl -> classDeclaration .)
    PROTECTED       reduce using rule 33 (memberDecl -> classDeclaration .)
    PRIVATE         reduce using rule 33 (memberDecl -> classDeclaration .)
    ABSTRACT        reduce using rule 33 (memberDecl -> classDeclaration .)
    FINAL           reduce using rule 33 (memberDecl -> classDeclaration .)
    NATIVE          reduce using rule 33 (memberDecl -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 33 (memberDecl -> classDeclaration .)
    TRANSIENT       reduce using rule 33 (memberDecl -> classDeclaration .)
    VOLATILE        reduce using rule 33 (memberDecl -> classDeclaration .)
    STRICTFP        reduce using rule 33 (memberDecl -> classDeclaration .)
    AT              reduce using rule 33 (memberDecl -> classDeclaration .)
    BLPAREN         reduce using rule 33 (memberDecl -> classDeclaration .)



state 465

    (347) expr_53 -> expr_53 DOT . IDENTIFIER expr_52

    IDENTIFIER      shift and go to state 535



state 466

    (346) expr_53 -> DOT IDENTIFIER . expr_52
    (344) expr_52 -> . typeArguments
    (345) expr_52 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 286
    DOT             reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! LESS            [ reduce using rule 547 (empty -> .) ]

    typeArguments                  shift and go to state 537
    expr_52                        shift and go to state 536
    empty                          shift and go to state 538

state 467

    (57) typeArguments -> LESS typeArgument expr_54 . MORE
    (350) expr_54 -> expr_54 . COMMA typeArgument

    MORE            shift and go to state 539
    COMMA           shift and go to state 540



state 468

    (349) expr_54 -> COMMA . typeArgument
    (58) typeArgument -> . type
    (59) typeArgument -> . QUES expr_56
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    QUES            shift and go to state 401
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    typeArgument                   shift and go to state 541
    type                           shift and go to state 399

state 469

    (351) expr_54 -> empty .

    MORE            reduce using rule 351 (expr_54 -> empty .)
    COMMA           reduce using rule 351 (expr_54 -> empty .)



state 470

    (354) expr_56 -> expr_55 . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 542

state 471

    (59) typeArgument -> QUES expr_56 .

    MORE            reduce using rule 59 (typeArgument -> QUES expr_56 .)
    COMMA           reduce using rule 59 (typeArgument -> QUES expr_56 .)



state 472

    (353) expr_55 -> SUPER .

    IDENTIFIER      reduce using rule 353 (expr_55 -> SUPER .)
    BOOLEAN         reduce using rule 353 (expr_55 -> SUPER .)
    CHAR            reduce using rule 353 (expr_55 -> SUPER .)
    BYTE            reduce using rule 353 (expr_55 -> SUPER .)
    SHORT           reduce using rule 353 (expr_55 -> SUPER .)
    INT             reduce using rule 353 (expr_55 -> SUPER .)
    LONG            reduce using rule 353 (expr_55 -> SUPER .)
    FLOAT           reduce using rule 353 (expr_55 -> SUPER .)
    DOUBLE          reduce using rule 353 (expr_55 -> SUPER .)



state 473

    (352) expr_55 -> EXTENDS .

    IDENTIFIER      reduce using rule 352 (expr_55 -> EXTENDS .)
    BOOLEAN         reduce using rule 352 (expr_55 -> EXTENDS .)
    CHAR            reduce using rule 352 (expr_55 -> EXTENDS .)
    BYTE            reduce using rule 352 (expr_55 -> EXTENDS .)
    SHORT           reduce using rule 352 (expr_55 -> EXTENDS .)
    INT             reduce using rule 352 (expr_55 -> EXTENDS .)
    LONG            reduce using rule 352 (expr_55 -> EXTENDS .)
    FLOAT           reduce using rule 352 (expr_55 -> EXTENDS .)
    DOUBLE          reduce using rule 352 (expr_55 -> EXTENDS .)



state 474

    (355) expr_56 -> empty .

    COMMA           reduce using rule 355 (expr_56 -> empty .)
    MORE            reduce using rule 355 (expr_56 -> empty .)



state 475

    (513) expr_121 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 543



state 476

    (194) arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 . arrayInitializer
    (514) expr_121 -> expr_121 . FLPAREN FRPAREN
    (198) arrayInitializer -> . BLPAREN expr_125 expr_126 BRPAREN

    FLPAREN         shift and go to state 545
    BLPAREN         shift and go to state 546


    arrayInitializer               shift and go to state 544

state 477

    (515) expr_121 -> empty .

    FLPAREN         reduce using rule 515 (expr_121 -> empty .)
    BLPAREN         reduce using rule 515 (expr_121 -> empty .)



state 478

    (195) arrayCreator -> NEW createdName FLPAREN expression FRPAREN . expr_122 expr_123
    (516) expr_122 -> . FLPAREN expression FRPAREN
    (517) expr_122 -> . expr_122 FLPAREN expression FRPAREN
    (518) expr_122 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 547
    DOT             reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_122                       shift and go to state 548
    empty                          shift and go to state 549

state 479

    (337) expr_49 -> expr_49 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    OP_NE           reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    AND             reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    CARET           reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    QUES            reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    COMMA           reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    EQUALS          reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    LESS            reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    MORE            reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    COLON           reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    SEMI            reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    IDENTIFIER      reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 337 (expr_49 -> expr_49 FLPAREN FRPAREN .)



state 480

    (135) assignmentOperator -> LESS LESS EQUALS .

    PLUS            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    DASH            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    OP_INC          reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    OP_DEC          reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    TILDE           reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    EXCLAMATION     reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    LPAREN          reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    THIS            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    IDENTIFIER      reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    SUPER           reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    VOID            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    CHARLITERAL     reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    STRINGLITERAL   reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    TRUE            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    FALSE           reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NULL            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NEW             reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    BOOLEAN         reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    CHAR            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    BYTE            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    SHORT           reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    INT             reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    LONG            reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    FLOAT           reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    DOUBLE          reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NUMBER          reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    HEX_NUMBER      reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_NUMBER     reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    LONG_HEX_NUMBER reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_1   reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_2   reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)
    NON_INTEGER_3   reduce using rule 135 (assignmentOperator -> LESS LESS EQUALS .)



state 481

    (137) assignmentOperator -> MORE MORE EQUALS .

    PLUS            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    DASH            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    OP_INC          reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    OP_DEC          reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    TILDE           reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    LPAREN          reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    THIS            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    IDENTIFIER      reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    SUPER           reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    VOID            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    CHARLITERAL     reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    STRINGLITERAL   reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    TRUE            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    FALSE           reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NULL            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NEW             reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    CHAR            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    BYTE            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    SHORT           reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    INT             reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    LONG            reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    FLOAT           reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    DOUBLE          reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NUMBER          reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 137 (assignmentOperator -> MORE MORE EQUALS .)



state 482

    (136) assignmentOperator -> MORE MORE MORE . EQUALS

    EQUALS          shift and go to state 550



state 483

    (340) expr_50 -> expr_50 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    OP_EQ           reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    OP_NE           reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    AND             reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    CARET           reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    VERTICAL        reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    OP_LAND         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    OP_LOR          reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    QUES            reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    COMMA           reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    BRPAREN         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    EQUALS          reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_ADD         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_SUB         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_MUL         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_DIV         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_AND         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_OR          reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_XOR         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    ASS_MOD         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    LESS            reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    MORE            reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    COLON           reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    FRPAREN         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    SEMI            reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    IMPLEMENTS      reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    IDENTIFIER      reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)
    OP_ARRAY        reduce using rule 340 (expr_50 -> expr_50 FLPAREN FRPAREN .)



state 484

    (439) expr_92 -> COMMA expression .

    COMMA           reduce using rule 439 (expr_92 -> COMMA expression .)
    RPAREN          reduce using rule 439 (expr_92 -> COMMA expression .)
    SEMI            reduce using rule 439 (expr_92 -> COMMA expression .)



state 485

    (440) expr_92 -> expr_92 COMMA . expression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 551

state 486

    (177) superSuffix -> DOT expr_116 IDENTIFIER expr_117 .

    DOT             reduce using rule 177 (superSuffix -> DOT expr_116 IDENTIFIER expr_117 .)
    FLPAREN         reduce using rule 177 (superSuffix -> DOT expr_116 IDENTIFIER expr_117 .)
    OP_INC          reduce using rule 177 (superSuffix -> DOT expr_116 IDENTIFIER expr_117 .)
    OP_DEC          reduce using rule 177 (superSuffix -> DOT expr_116 IDENTIFIER expr_117 .)



state 487

    (505) expr_117 -> arguments .

    DOT             reduce using rule 505 (expr_117 -> arguments .)
    FLPAREN         reduce using rule 505 (expr_117 -> arguments .)
    OP_INC          reduce using rule 505 (expr_117 -> arguments .)
    OP_DEC          reduce using rule 505 (expr_117 -> arguments .)



state 488

    (506) expr_117 -> empty .

    DOT             reduce using rule 506 (expr_117 -> empty .)
    FLPAREN         reduce using rule 506 (expr_117 -> empty .)
    OP_INC          reduce using rule 506 (expr_117 -> empty .)
    OP_DEC          reduce using rule 506 (expr_117 -> empty .)



state 489

    (81) annotationTypeElementDeclaration -> interfaceFieldDeclaration .

    BRPAREN         reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    SEMI            reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    PUBLIC          reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    PROTECTED       reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    PRIVATE         reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    STATIC          reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    ABSTRACT        reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    FINAL           reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    NATIVE          reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    SYNCHRONIZED    reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    TRANSIENT       reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    VOLATILE        reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    STRICTFP        reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)
    AT              reduce using rule 81 (annotationTypeElementDeclaration -> interfaceFieldDeclaration .)



state 490

    (394) expr_73 -> annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    SEMI            reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    STATIC          reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    FINAL           reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)
    AT              reduce using rule 394 (expr_73 -> annotationTypeElementDeclaration .)



state 491

    (83) annotationTypeElementDeclaration -> normalInterfaceDeclaration .

    BRPAREN         reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    SEMI            reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    PUBLIC          reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    PROTECTED       reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    PRIVATE         reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    STATIC          reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    ABSTRACT        reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    FINAL           reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    NATIVE          reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    TRANSIENT       reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    VOLATILE        reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    STRICTFP        reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)
    AT              reduce using rule 83 (annotationTypeElementDeclaration -> normalInterfaceDeclaration .)



state 492

    (86) annotationTypeElementDeclaration -> SEMI .

    BRPAREN         reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    SEMI            reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    PUBLIC          reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    PROTECTED       reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    PRIVATE         reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    STATIC          reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    FINAL           reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    NATIVE          reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    VOLATILE        reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    STRICTFP        reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)
    AT              reduce using rule 86 (annotationTypeElementDeclaration -> SEMI .)



state 493

    (82) annotationTypeElementDeclaration -> normalClassDeclaration .

    BRPAREN         reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    SEMI            reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    PUBLIC          reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    PROTECTED       reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    PRIVATE         reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    STATIC          reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    ABSTRACT        reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    FINAL           reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    NATIVE          reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    SYNCHRONIZED    reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    TRANSIENT       reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    VOLATILE        reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    STRICTFP        reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)
    AT              reduce using rule 82 (annotationTypeElementDeclaration -> normalClassDeclaration .)



state 494

    (396) expr_73 -> empty .

    BRPAREN         reduce using rule 396 (expr_73 -> empty .)
    SEMI            reduce using rule 396 (expr_73 -> empty .)
    PUBLIC          reduce using rule 396 (expr_73 -> empty .)
    PROTECTED       reduce using rule 396 (expr_73 -> empty .)
    PRIVATE         reduce using rule 396 (expr_73 -> empty .)
    STATIC          reduce using rule 396 (expr_73 -> empty .)
    ABSTRACT        reduce using rule 396 (expr_73 -> empty .)
    FINAL           reduce using rule 396 (expr_73 -> empty .)
    NATIVE          reduce using rule 396 (expr_73 -> empty .)
    SYNCHRONIZED    reduce using rule 396 (expr_73 -> empty .)
    TRANSIENT       reduce using rule 396 (expr_73 -> empty .)
    VOLATILE        reduce using rule 396 (expr_73 -> empty .)
    STRICTFP        reduce using rule 396 (expr_73 -> empty .)
    AT              reduce using rule 396 (expr_73 -> empty .)



state 495

    (84) annotationTypeElementDeclaration -> enumDeclaration .

    BRPAREN         reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    SEMI            reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    PUBLIC          reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    PROTECTED       reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    PRIVATE         reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    STATIC          reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    ABSTRACT        reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    FINAL           reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    NATIVE          reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    SYNCHRONIZED    reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    TRANSIENT       reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    VOLATILE        reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    STRICTFP        reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)
    AT              reduce using rule 84 (annotationTypeElementDeclaration -> enumDeclaration .)



state 496

    (79) annotationTypeBody -> BLPAREN expr_73 . BRPAREN
    (395) expr_73 -> expr_73 . annotationTypeElementDeclaration
    (80) annotationTypeElementDeclaration -> . annotationMethodDeclaration
    (81) annotationTypeElementDeclaration -> . interfaceFieldDeclaration
    (82) annotationTypeElementDeclaration -> . normalClassDeclaration
    (83) annotationTypeElementDeclaration -> . normalInterfaceDeclaration
    (84) annotationTypeElementDeclaration -> . enumDeclaration
    (85) annotationTypeElementDeclaration -> . annotationTypeDeclaration
    (86) annotationTypeElementDeclaration -> . SEMI
    (87) annotationMethodDeclaration -> . modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI
    (45) interfaceFieldDeclaration -> . modifiers type variableDeclarator expr_48 SEMI
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (9) modifiers -> . expr_8
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

    BRPAREN         shift and go to state 553
    SEMI            shift and go to state 492
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4


    interfaceFieldDeclaration      shift and go to state 489
    annotationTypeElementDeclaration shift and go to state 552
    normalInterfaceDeclaration     shift and go to state 491
    normalClassDeclaration         shift and go to state 493
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    enumDeclaration                shift and go to state 495
    modifiers                      shift and go to state 497
    annotationMethodDeclaration    shift and go to state 498
    annotationTypeDeclaration      shift and go to state 499

state 497

    (87) annotationMethodDeclaration -> modifiers . type IDENTIFIER LPAREN RPAREN expr_74 SEMI
    (45) interfaceFieldDeclaration -> modifiers . type variableDeclarator expr_48 SEMI
    (13) normalClassDeclaration -> modifiers . CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (24) normalInterfaceDeclaration -> modifiers . INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (17) enumDeclaration -> modifiers . expr_16 IDENTIFIER expr_17 enumBody
    (78) annotationTypeDeclaration -> modifiers . AT INTERFACE IDENTIFIER annotationTypeBody
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (260) expr_16 -> . ENUM
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    CLASS           shift and go to state 129
    INTERFACE       shift and go to state 127
    AT              shift and go to state 126
    ENUM            shift and go to state 125
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    type                           shift and go to state 554
    expr_16                        shift and go to state 128
    primitiveType                  shift and go to state 238

state 498

    (80) annotationTypeElementDeclaration -> annotationMethodDeclaration .

    BRPAREN         reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    SEMI            reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    PUBLIC          reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    PROTECTED       reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    PRIVATE         reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    STATIC          reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    ABSTRACT        reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    FINAL           reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    NATIVE          reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    SYNCHRONIZED    reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    TRANSIENT       reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    VOLATILE        reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    STRICTFP        reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)
    AT              reduce using rule 80 (annotationTypeElementDeclaration -> annotationMethodDeclaration .)



state 499

    (85) annotationTypeElementDeclaration -> annotationTypeDeclaration .

    BRPAREN         reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    SEMI            reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    PUBLIC          reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    PROTECTED       reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    PRIVATE         reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    STATIC          reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    ABSTRACT        reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    FINAL           reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    NATIVE          reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    SYNCHRONIZED    reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    TRANSIENT       reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    VOLATILE        reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    STRICTFP        reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)
    AT              reduce using rule 85 (annotationTypeElementDeclaration -> annotationTypeDeclaration .)



state 500

    (252) expr_13 -> COMMA . typeParameter
    (15) typeParameter -> . IDENTIFIER expr_14

    IDENTIFIER      shift and go to state 431


    typeParameter                  shift and go to state 555

state 501

    (254) expr_13 -> empty .

    MORE            reduce using rule 254 (expr_13 -> empty .)
    COMMA           reduce using rule 254 (expr_13 -> empty .)



state 502

    (14) typeParameters -> LESS typeParameter expr_13 . MORE
    (253) expr_13 -> expr_13 . COMMA typeParameter

    MORE            shift and go to state 557
    COMMA           shift and go to state 556



state 503

    (15) typeParameter -> IDENTIFIER expr_14 .

    COMMA           reduce using rule 15 (typeParameter -> IDENTIFIER expr_14 .)
    MORE            reduce using rule 15 (typeParameter -> IDENTIFIER expr_14 .)



state 504

    (255) expr_14 -> EXTENDS . typeBound
    (16) typeBound -> . type expr_15
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    typeBound                      shift and go to state 558
    type                           shift and go to state 559

state 505

    (256) expr_14 -> empty .

    COMMA           reduce using rule 256 (expr_14 -> empty .)
    MORE            reduce using rule 256 (expr_14 -> empty .)



state 506

    (283) expr_27 -> EXTENDS typeList .

    BLPAREN         reduce using rule 283 (expr_27 -> EXTENDS typeList .)



state 507

    (24) normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .

    SEMI            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    STATIC          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    PUBLIC          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    PROTECTED       reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    PRIVATE         reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    ABSTRACT        reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    FINAL           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NATIVE          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    SYNCHRONIZED    reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    TRANSIENT       reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    VOLATILE        reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    STRICTFP        reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    AT              reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    BLPAREN         reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    BRPAREN         reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    ASSERT          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    IF              reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    WHILE           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    DO              reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    SWITCH          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    RETURN          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    THROW           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    BREAK           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    CONTINUE        reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    IDENTIFIER      reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    FOR             reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    TRY             reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    PLUS            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    DASH            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    OP_INC          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    OP_DEC          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    TILDE           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    EXCLAMATION     reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    LPAREN          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    THIS            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    SUPER           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    VOID            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    CHARLITERAL     reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    STRINGLITERAL   reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    TRUE            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    FALSE           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NULL            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NEW             reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    BOOLEAN         reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    CHAR            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    BYTE            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    SHORT           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    INT             reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    LONG            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    FLOAT           reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    DOUBLE          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NUMBER          reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    HEX_NUMBER      reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    LONG_NUMBER     reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    LONG_HEX_NUMBER reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NON_INTEGER_1   reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NON_INTEGER_2   reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    NON_INTEGER_3   reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    CASE            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    DEFAULT         reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)
    $end            reduce using rule 24 (normalInterfaceDeclaration -> modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody .)



state 508

    (27) interfaceBody -> BLPAREN . expr_30 BRPAREN
    (291) expr_30 -> . interfaceBodyDeclaration
    (292) expr_30 -> . expr_30 interfaceBodyDeclaration
    (293) expr_30 -> . empty
    (39) interfaceBodyDeclaration -> . interfaceFieldDeclaration
    (40) interfaceBodyDeclaration -> . interfaceMethodDeclaration
    (41) interfaceBodyDeclaration -> . interfaceDeclaration
    (42) interfaceBodyDeclaration -> . classDeclaration
    (43) interfaceBodyDeclaration -> . SEMI
    (547) empty -> .
    (45) interfaceFieldDeclaration -> . modifiers type variableDeclarator expr_48 SEMI
    (44) interfaceMethodDeclaration -> . modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (9) modifiers -> . expr_8
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 561
    BRPAREN         reduce using rule 547 (empty -> .)
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4

  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]

    interfaceFieldDeclaration      shift and go to state 560
    normalInterfaceDeclaration     shift and go to state 34
    expr_30                        shift and go to state 564
    normalClassDeclaration         shift and go to state 37
    interfaceMethodDeclaration     shift and go to state 562
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 563
    enumDeclaration                shift and go to state 45
    classDeclaration               shift and go to state 565
    interfaceBodyDeclaration       shift and go to state 566
    modifiers                      shift and go to state 567
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 568

state 509

    (272) expr_22 -> annotations .

    IDENTIFIER      reduce using rule 272 (expr_22 -> annotations .)



state 510

    (19) enumConstants -> enumConstant . expr_21
    (269) expr_21 -> . COMMA enumConstant
    (270) expr_21 -> . expr_21 COMMA enumConstant
    (271) expr_21 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 570
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_21                        shift and go to state 569
    empty                          shift and go to state 571

state 511

    (263) expr_18 -> enumConstants .

    COMMA           reduce using rule 263 (expr_18 -> enumConstants .)
    SEMI            reduce using rule 263 (expr_18 -> enumConstants .)
    BRPAREN         reduce using rule 263 (expr_18 -> enumConstants .)



state 512

    (18) enumBody -> BLPAREN expr_18 . expr_19 expr_20 BRPAREN
    (265) expr_19 -> . COMMA
    (266) expr_19 -> . empty
    (547) empty -> .

    COMMA           shift and go to state 573
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)


    expr_19                        shift and go to state 572
    empty                          shift and go to state 574

state 513

    (20) enumConstant -> expr_22 . IDENTIFIER expr_23 expr_24

    IDENTIFIER      shift and go to state 575



state 514

    (264) expr_18 -> empty .
    (273) expr_22 -> empty .

    COMMA           reduce using rule 264 (expr_18 -> empty .)
    SEMI            reduce using rule 264 (expr_18 -> empty .)
    BRPAREN         reduce using rule 264 (expr_18 -> empty .)
    IDENTIFIER      reduce using rule 273 (expr_22 -> empty .)



state 515

    (250) expr_12 -> IMPLEMENTS . typeList
    (25) typeList -> . type expr_28
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    typeList                       shift and go to state 576
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 281

state 516

    (251) expr_12 -> empty .

    BLPAREN         reduce using rule 251 (expr_12 -> empty .)



state 517

    (13) normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 . classBody
    (26) classBody -> . BLPAREN expr_29 BRPAREN

    BLPAREN         shift and go to state 392


    classBody                      shift and go to state 577

state 518

    (248) expr_11 -> EXTENDS type .

    IMPLEMENTS      reduce using rule 248 (expr_11 -> EXTENDS type .)
    BLPAREN         reduce using rule 248 (expr_11 -> EXTENDS type .)



state 519

    (182) identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments .

    DOT             reduce using rule 182 (identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments .)
    FLPAREN         reduce using rule 182 (identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments .)
    OP_INC          reduce using rule 182 (identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments .)
    OP_DEC          reduce using rule 182 (identifierSuffix -> DOT nonWildcardTypeArguments IDENTIFIER arguments .)



state 520

    (510) expr_119 -> expr_119 FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 510 (expr_119 -> expr_119 FLPAREN expression FRPAREN .)
    DOT             reduce using rule 510 (expr_119 -> expr_119 FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 510 (expr_119 -> expr_119 FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 510 (expr_119 -> expr_119 FLPAREN expression FRPAREN .)



state 521

    (201) innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 . classCreatorRest
    (202) classCreatorRest -> . arguments expr_129
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    classCreatorRest               shift and go to state 578
    arguments                      shift and go to state 283

state 522

    (531) expr_128 -> typeArguments .

    LPAREN          reduce using rule 531 (expr_128 -> typeArguments .)



state 523

    (532) expr_128 -> empty .

    LPAREN          reduce using rule 532 (expr_128 -> empty .)



state 524

    (286) expr_28 -> expr_28 COMMA type .

    COMMA           reduce using rule 286 (expr_28 -> expr_28 COMMA type .)
    MORE            reduce using rule 286 (expr_28 -> expr_28 COMMA type .)
    BLPAREN         reduce using rule 286 (expr_28 -> expr_28 COMMA type .)



state 525

    (295) expr_31 -> empty .

    BLPAREN         reduce using rule 295 (expr_31 -> empty .)



state 526

    (26) classBody -> BLPAREN expr_29 BRPAREN .

    DOT             reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    FLPAREN         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    OP_INC          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    OP_DEC          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    COMMA           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    SEMI            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    BRPAREN         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    PUBLIC          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    PROTECTED       reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    PRIVATE         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    STATIC          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    ABSTRACT        reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    FINAL           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NATIVE          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    SYNCHRONIZED    reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    TRANSIENT       reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    VOLATILE        reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    STRICTFP        reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    AT              reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    $end            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    BLPAREN         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    ASSERT          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    IF              reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    WHILE           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    DO              reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    SWITCH          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    RETURN          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    THROW           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    BREAK           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    CONTINUE        reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    IDENTIFIER      reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    FOR             reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    TRY             reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    PLUS            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    DASH            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    TILDE           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    EXCLAMATION     reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    LPAREN          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    THIS            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    SUPER           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    VOID            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    CHARLITERAL     reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    STRINGLITERAL   reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    TRUE            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    FALSE           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NULL            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NEW             reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    BOOLEAN         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    CHAR            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    BYTE            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    SHORT           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    INT             reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    LONG            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    FLOAT           reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    DOUBLE          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NUMBER          reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    HEX_NUMBER      reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    LONG_NUMBER     reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NON_INTEGER_1   reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NON_INTEGER_2   reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    NON_INTEGER_3   reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    CASE            reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)
    DEFAULT         reduce using rule 26 (classBody -> BLPAREN expr_29 BRPAREN .)



state 527

    (289) expr_29 -> expr_29 classBodyDeclaration .

    BRPAREN         reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    SEMI            reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    STATIC          reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    PUBLIC          reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    PROTECTED       reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    PRIVATE         reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    ABSTRACT        reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    FINAL           reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    NATIVE          reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    TRANSIENT       reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    VOLATILE        reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    STRICTFP        reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    AT              reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)
    BLPAREN         reduce using rule 289 (expr_29 -> expr_29 classBodyDeclaration .)



state 528

    (88) block -> BLPAREN . expr_75 BRPAREN
    (399) expr_75 -> . blockStatement
    (400) expr_75 -> . expr_75 blockStatement
    (401) expr_75 -> . empty
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (547) empty -> .
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CHARLITERAL resolved as shift.
  ! shift/reduce conflict for STRINGLITERAL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
    BRPAREN         reduce using rule 547 (empty -> .)
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102

  ! ASSERT          [ reduce using rule 547 (empty -> .) ]
  ! IF              [ reduce using rule 547 (empty -> .) ]
  ! WHILE           [ reduce using rule 547 (empty -> .) ]
  ! DO              [ reduce using rule 547 (empty -> .) ]
  ! SWITCH          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! RETURN          [ reduce using rule 547 (empty -> .) ]
  ! THROW           [ reduce using rule 547 (empty -> .) ]
  ! BREAK           [ reduce using rule 547 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 547 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 547 (empty -> .) ]
  ! FOR             [ reduce using rule 547 (empty -> .) ]
  ! TRY             [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! PLUS            [ reduce using rule 547 (empty -> .) ]
  ! DASH            [ reduce using rule 547 (empty -> .) ]
  ! OP_INC          [ reduce using rule 547 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 547 (empty -> .) ]
  ! TILDE           [ reduce using rule 547 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 547 (empty -> .) ]
  ! LPAREN          [ reduce using rule 547 (empty -> .) ]
  ! THIS            [ reduce using rule 547 (empty -> .) ]
  ! SUPER           [ reduce using rule 547 (empty -> .) ]
  ! VOID            [ reduce using rule 547 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 547 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 547 (empty -> .) ]
  ! TRUE            [ reduce using rule 547 (empty -> .) ]
  ! FALSE           [ reduce using rule 547 (empty -> .) ]
  ! NULL            [ reduce using rule 547 (empty -> .) ]
  ! NEW             [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]
  ! NUMBER          [ reduce using rule 547 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 547 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 547 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 547 (empty -> .) ]

    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 579
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    expr_75                        shift and go to state 587
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    empty                          shift and go to state 598
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 529

    (29) classBodyDeclaration -> expr_31 block .

    BRPAREN         reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    SEMI            reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    STATIC          reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    PUBLIC          reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    PROTECTED       reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    PRIVATE         reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    ABSTRACT        reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    FINAL           reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    NATIVE          reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    SYNCHRONIZED    reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    TRANSIENT       reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    VOLATILE        reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    STRICTFP        reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    AT              reduce using rule 29 (classBodyDeclaration -> expr_31 block .)
    BLPAREN         reduce using rule 29 (classBodyDeclaration -> expr_31 block .)



state 530

    (296) expr_32 -> typeParameters .
    (305) expr_36 -> typeParameters .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 296 (expr_32 -> typeParameters .).
    IDENTIFIER      reduce using rule 296 (expr_32 -> typeParameters .)
    VOID            reduce using rule 305 (expr_36 -> typeParameters .)
    BOOLEAN         reduce using rule 305 (expr_36 -> typeParameters .)
    CHAR            reduce using rule 305 (expr_36 -> typeParameters .)
    BYTE            reduce using rule 305 (expr_36 -> typeParameters .)
    SHORT           reduce using rule 305 (expr_36 -> typeParameters .)
    INT             reduce using rule 305 (expr_36 -> typeParameters .)
    LONG            reduce using rule 305 (expr_36 -> typeParameters .)
    FLOAT           reduce using rule 305 (expr_36 -> typeParameters .)
    DOUBLE          reduce using rule 305 (expr_36 -> typeParameters .)

  ! IDENTIFIER      [ reduce using rule 305 (expr_36 -> typeParameters .) ]


state 531

    (37) fieldDeclaration -> modifiers type . variableDeclarator expr_41 SEMI
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 610

state 532

    (297) expr_32 -> empty .
    (306) expr_36 -> empty .

  ! reduce/reduce conflict for IDENTIFIER resolved using rule 297 (expr_32 -> empty .).
    IDENTIFIER      reduce using rule 297 (expr_32 -> empty .)
    VOID            reduce using rule 306 (expr_36 -> empty .)
    BOOLEAN         reduce using rule 306 (expr_36 -> empty .)
    CHAR            reduce using rule 306 (expr_36 -> empty .)
    BYTE            reduce using rule 306 (expr_36 -> empty .)
    SHORT           reduce using rule 306 (expr_36 -> empty .)
    INT             reduce using rule 306 (expr_36 -> empty .)
    LONG            reduce using rule 306 (expr_36 -> empty .)
    FLOAT           reduce using rule 306 (expr_36 -> empty .)
    DOUBLE          reduce using rule 306 (expr_36 -> empty .)

  ! IDENTIFIER      [ reduce using rule 306 (expr_36 -> empty .) ]


state 533

    (36) methodDeclaration -> modifiers expr_36 . expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (307) expr_37 -> . type
    (308) expr_37 -> . VOID
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    VOID            shift and go to state 611
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    expr_37                        shift and go to state 613
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 612

state 534

    (35) methodDeclaration -> modifiers expr_32 . IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN

    IDENTIFIER      shift and go to state 614



state 535

    (347) expr_53 -> expr_53 DOT IDENTIFIER . expr_52
    (344) expr_52 -> . typeArguments
    (345) expr_52 -> . empty
    (57) typeArguments -> . LESS typeArgument expr_54 MORE
    (547) empty -> .

  ! shift/reduce conflict for LESS resolved as shift.
    LESS            shift and go to state 286
    DOT             reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    FLPAREN         reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)
    OP_EQ           reduce using rule 547 (empty -> .)
    OP_NE           reduce using rule 547 (empty -> .)
    AND             reduce using rule 547 (empty -> .)
    CARET           reduce using rule 547 (empty -> .)
    VERTICAL        reduce using rule 547 (empty -> .)
    OP_LAND         reduce using rule 547 (empty -> .)
    OP_LOR          reduce using rule 547 (empty -> .)
    QUES            reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    EQUALS          reduce using rule 547 (empty -> .)
    ASS_ADD         reduce using rule 547 (empty -> .)
    ASS_SUB         reduce using rule 547 (empty -> .)
    ASS_MUL         reduce using rule 547 (empty -> .)
    ASS_DIV         reduce using rule 547 (empty -> .)
    ASS_AND         reduce using rule 547 (empty -> .)
    ASS_OR          reduce using rule 547 (empty -> .)
    ASS_XOR         reduce using rule 547 (empty -> .)
    ASS_MOD         reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)
    COLON           reduce using rule 547 (empty -> .)
    FRPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    IMPLEMENTS      reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    OP_ARRAY        reduce using rule 547 (empty -> .)

  ! LESS            [ reduce using rule 547 (empty -> .) ]

    expr_52                        shift and go to state 615
    typeArguments                  shift and go to state 537
    empty                          shift and go to state 538

state 536

    (346) expr_53 -> DOT IDENTIFIER expr_52 .

    DOT             reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    LPAREN          reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    FLPAREN         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    RPAREN          reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    OP_EQ           reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    OP_NE           reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    AND             reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    CARET           reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    VERTICAL        reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    OP_LAND         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    OP_LOR          reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    QUES            reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    COMMA           reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    BRPAREN         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    EQUALS          reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_ADD         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_SUB         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_MUL         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_DIV         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_AND         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_OR          reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_XOR         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    ASS_MOD         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    LESS            reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    MORE            reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    COLON           reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    FRPAREN         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    SEMI            reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    BLPAREN         reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    IMPLEMENTS      reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    IDENTIFIER      reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)
    OP_ARRAY        reduce using rule 346 (expr_53 -> DOT IDENTIFIER expr_52 .)



state 537

    (344) expr_52 -> typeArguments .

    DOT             reduce using rule 344 (expr_52 -> typeArguments .)
    LPAREN          reduce using rule 344 (expr_52 -> typeArguments .)
    FLPAREN         reduce using rule 344 (expr_52 -> typeArguments .)
    RPAREN          reduce using rule 344 (expr_52 -> typeArguments .)
    OP_EQ           reduce using rule 344 (expr_52 -> typeArguments .)
    OP_NE           reduce using rule 344 (expr_52 -> typeArguments .)
    AND             reduce using rule 344 (expr_52 -> typeArguments .)
    CARET           reduce using rule 344 (expr_52 -> typeArguments .)
    VERTICAL        reduce using rule 344 (expr_52 -> typeArguments .)
    OP_LAND         reduce using rule 344 (expr_52 -> typeArguments .)
    OP_LOR          reduce using rule 344 (expr_52 -> typeArguments .)
    QUES            reduce using rule 344 (expr_52 -> typeArguments .)
    COMMA           reduce using rule 344 (expr_52 -> typeArguments .)
    BRPAREN         reduce using rule 344 (expr_52 -> typeArguments .)
    EQUALS          reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_ADD         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_SUB         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_MUL         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_DIV         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_AND         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_OR          reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_XOR         reduce using rule 344 (expr_52 -> typeArguments .)
    ASS_MOD         reduce using rule 344 (expr_52 -> typeArguments .)
    LESS            reduce using rule 344 (expr_52 -> typeArguments .)
    MORE            reduce using rule 344 (expr_52 -> typeArguments .)
    COLON           reduce using rule 344 (expr_52 -> typeArguments .)
    FRPAREN         reduce using rule 344 (expr_52 -> typeArguments .)
    SEMI            reduce using rule 344 (expr_52 -> typeArguments .)
    BLPAREN         reduce using rule 344 (expr_52 -> typeArguments .)
    IMPLEMENTS      reduce using rule 344 (expr_52 -> typeArguments .)
    IDENTIFIER      reduce using rule 344 (expr_52 -> typeArguments .)
    OP_ARRAY        reduce using rule 344 (expr_52 -> typeArguments .)



state 538

    (345) expr_52 -> empty .

    DOT             reduce using rule 345 (expr_52 -> empty .)
    LPAREN          reduce using rule 345 (expr_52 -> empty .)
    FLPAREN         reduce using rule 345 (expr_52 -> empty .)
    RPAREN          reduce using rule 345 (expr_52 -> empty .)
    OP_EQ           reduce using rule 345 (expr_52 -> empty .)
    OP_NE           reduce using rule 345 (expr_52 -> empty .)
    AND             reduce using rule 345 (expr_52 -> empty .)
    CARET           reduce using rule 345 (expr_52 -> empty .)
    VERTICAL        reduce using rule 345 (expr_52 -> empty .)
    OP_LAND         reduce using rule 345 (expr_52 -> empty .)
    OP_LOR          reduce using rule 345 (expr_52 -> empty .)
    QUES            reduce using rule 345 (expr_52 -> empty .)
    COMMA           reduce using rule 345 (expr_52 -> empty .)
    BRPAREN         reduce using rule 345 (expr_52 -> empty .)
    EQUALS          reduce using rule 345 (expr_52 -> empty .)
    ASS_ADD         reduce using rule 345 (expr_52 -> empty .)
    ASS_SUB         reduce using rule 345 (expr_52 -> empty .)
    ASS_MUL         reduce using rule 345 (expr_52 -> empty .)
    ASS_DIV         reduce using rule 345 (expr_52 -> empty .)
    ASS_AND         reduce using rule 345 (expr_52 -> empty .)
    ASS_OR          reduce using rule 345 (expr_52 -> empty .)
    ASS_XOR         reduce using rule 345 (expr_52 -> empty .)
    ASS_MOD         reduce using rule 345 (expr_52 -> empty .)
    LESS            reduce using rule 345 (expr_52 -> empty .)
    MORE            reduce using rule 345 (expr_52 -> empty .)
    COLON           reduce using rule 345 (expr_52 -> empty .)
    FRPAREN         reduce using rule 345 (expr_52 -> empty .)
    SEMI            reduce using rule 345 (expr_52 -> empty .)
    BLPAREN         reduce using rule 345 (expr_52 -> empty .)
    IMPLEMENTS      reduce using rule 345 (expr_52 -> empty .)
    IDENTIFIER      reduce using rule 345 (expr_52 -> empty .)
    OP_ARRAY        reduce using rule 345 (expr_52 -> empty .)



state 539

    (57) typeArguments -> LESS typeArgument expr_54 MORE .

    IDENTIFIER      reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    DOT             reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    LPAREN          reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    FLPAREN         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    OP_EQ           reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    OP_NE           reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    AND             reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    CARET           reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    VERTICAL        reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    OP_LAND         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    OP_LOR          reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    QUES            reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    RPAREN          reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    COMMA           reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    BRPAREN         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    EQUALS          reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_ADD         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_SUB         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_MUL         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_DIV         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_AND         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_OR          reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_XOR         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    ASS_MOD         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    LESS            reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    MORE            reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    COLON           reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    FRPAREN         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    SEMI            reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    BLPAREN         reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    IMPLEMENTS      reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)
    OP_ARRAY        reduce using rule 57 (typeArguments -> LESS typeArgument expr_54 MORE .)



state 540

    (350) expr_54 -> expr_54 COMMA . typeArgument
    (58) typeArgument -> . type
    (59) typeArgument -> . QUES expr_56
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    QUES            shift and go to state 401
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    typeArgument                   shift and go to state 616
    type                           shift and go to state 399

state 541

    (349) expr_54 -> COMMA typeArgument .

    MORE            reduce using rule 349 (expr_54 -> COMMA typeArgument .)
    COMMA           reduce using rule 349 (expr_54 -> COMMA typeArgument .)



state 542

    (354) expr_56 -> expr_55 type .

    COMMA           reduce using rule 354 (expr_56 -> expr_55 type .)
    MORE            reduce using rule 354 (expr_56 -> expr_55 type .)



state 543

    (513) expr_121 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 513 (expr_121 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 513 (expr_121 -> FLPAREN FRPAREN .)



state 544

    (194) arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer .

    DOT             reduce using rule 194 (arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer .)
    FLPAREN         reduce using rule 194 (arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer .)
    OP_INC          reduce using rule 194 (arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer .)
    OP_DEC          reduce using rule 194 (arrayCreator -> NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer .)



state 545

    (514) expr_121 -> expr_121 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 617



state 546

    (198) arrayInitializer -> BLPAREN . expr_125 expr_126 BRPAREN
    (525) expr_125 -> . variableInitializer expr_124
    (526) expr_125 -> . empty
    (196) variableInitializer -> . arrayInitializer
    (197) variableInitializer -> . expression
    (547) empty -> .
    (198) arrayInitializer -> . BLPAREN expr_125 expr_126 BRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    COMMA           reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    BLPAREN         shift and go to state 546
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    arrayInitializer               shift and go to state 621
    literal                        shift and go to state 89
    empty                          shift and go to state 622
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    variableInitializer            shift and go to state 618
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    expr_125                       shift and go to state 619
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 620

state 547

    (516) expr_122 -> FLPAREN . expression FRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 623

state 548

    (195) arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 . expr_123
    (517) expr_122 -> expr_122 . FLPAREN expression FRPAREN
    (519) expr_123 -> . FLPAREN FRPAREN
    (520) expr_123 -> . expr_123 FLPAREN FRPAREN
    (521) expr_123 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 624
    DOT             reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_123                       shift and go to state 625
    empty                          shift and go to state 626

state 549

    (518) expr_122 -> empty .

    FLPAREN         reduce using rule 518 (expr_122 -> empty .)
    DOT             reduce using rule 518 (expr_122 -> empty .)
    OP_INC          reduce using rule 518 (expr_122 -> empty .)
    OP_DEC          reduce using rule 518 (expr_122 -> empty .)



state 550

    (136) assignmentOperator -> MORE MORE MORE EQUALS .

    PLUS            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DASH            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_INC          reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    OP_DEC          reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TILDE           reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    EXCLAMATION     reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LPAREN          reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    THIS            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    IDENTIFIER      reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SUPER           reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    VOID            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CHARLITERAL     reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    STRINGLITERAL   reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    TRUE            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FALSE           reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NULL            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NEW             reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BOOLEAN         reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    CHAR            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    BYTE            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    SHORT           reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    INT             reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG            reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    FLOAT           reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    DOUBLE          reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NUMBER          reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    HEX_NUMBER      reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_NUMBER     reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    LONG_HEX_NUMBER reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_1   reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_2   reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)
    NON_INTEGER_3   reduce using rule 136 (assignmentOperator -> MORE MORE MORE EQUALS .)



state 551

    (440) expr_92 -> expr_92 COMMA expression .

    COMMA           reduce using rule 440 (expr_92 -> expr_92 COMMA expression .)
    RPAREN          reduce using rule 440 (expr_92 -> expr_92 COMMA expression .)
    SEMI            reduce using rule 440 (expr_92 -> expr_92 COMMA expression .)



state 552

    (395) expr_73 -> expr_73 annotationTypeElementDeclaration .

    BRPAREN         reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    SEMI            reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    PUBLIC          reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    PROTECTED       reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    PRIVATE         reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    STATIC          reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    ABSTRACT        reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    FINAL           reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    NATIVE          reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    SYNCHRONIZED    reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    TRANSIENT       reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    VOLATILE        reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    STRICTFP        reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)
    AT              reduce using rule 395 (expr_73 -> expr_73 annotationTypeElementDeclaration .)



state 553

    (79) annotationTypeBody -> BLPAREN expr_73 BRPAREN .

    SEMI            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    PUBLIC          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    PROTECTED       reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    PRIVATE         reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    STATIC          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    ABSTRACT        reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    FINAL           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NATIVE          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    SYNCHRONIZED    reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    TRANSIENT       reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    VOLATILE        reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    STRICTFP        reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    AT              reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    $end            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    BRPAREN         reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    BLPAREN         reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    ASSERT          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    IF              reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    WHILE           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    DO              reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    SWITCH          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    RETURN          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    THROW           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    BREAK           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    CONTINUE        reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    IDENTIFIER      reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    FOR             reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    TRY             reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    PLUS            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    DASH            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    OP_INC          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    OP_DEC          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    TILDE           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    EXCLAMATION     reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    LPAREN          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    THIS            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    SUPER           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    VOID            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    CHARLITERAL     reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    STRINGLITERAL   reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    TRUE            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    FALSE           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NULL            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NEW             reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    BOOLEAN         reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    CHAR            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    BYTE            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    SHORT           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    INT             reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    LONG            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    FLOAT           reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    DOUBLE          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NUMBER          reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    HEX_NUMBER      reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    LONG_NUMBER     reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NON_INTEGER_1   reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NON_INTEGER_2   reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    NON_INTEGER_3   reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    CASE            reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)
    DEFAULT         reduce using rule 79 (annotationTypeBody -> BLPAREN expr_73 BRPAREN .)



state 554

    (87) annotationMethodDeclaration -> modifiers type . IDENTIFIER LPAREN RPAREN expr_74 SEMI
    (45) interfaceFieldDeclaration -> modifiers type . variableDeclarator expr_48 SEMI
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 627


    variableDeclarator             shift and go to state 628

state 555

    (252) expr_13 -> COMMA typeParameter .

    MORE            reduce using rule 252 (expr_13 -> COMMA typeParameter .)
    COMMA           reduce using rule 252 (expr_13 -> COMMA typeParameter .)



state 556

    (253) expr_13 -> expr_13 COMMA . typeParameter
    (15) typeParameter -> . IDENTIFIER expr_14

    IDENTIFIER      shift and go to state 431


    typeParameter                  shift and go to state 629

state 557

    (14) typeParameters -> LESS typeParameter expr_13 MORE .

    EXTENDS         reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    BLPAREN         reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    IDENTIFIER      reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    VOID            reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    BOOLEAN         reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    CHAR            reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    BYTE            reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    SHORT           reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    INT             reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    LONG            reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    FLOAT           reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    DOUBLE          reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)
    IMPLEMENTS      reduce using rule 14 (typeParameters -> LESS typeParameter expr_13 MORE .)



state 558

    (255) expr_14 -> EXTENDS typeBound .

    COMMA           reduce using rule 255 (expr_14 -> EXTENDS typeBound .)
    MORE            reduce using rule 255 (expr_14 -> EXTENDS typeBound .)



state 559

    (16) typeBound -> type . expr_15
    (257) expr_15 -> . AND type
    (258) expr_15 -> . expr_15 AND type
    (259) expr_15 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for AND resolved as shift.
    AND             shift and go to state 630
    COMMA           reduce using rule 547 (empty -> .)
    MORE            reduce using rule 547 (empty -> .)

  ! AND             [ reduce using rule 547 (empty -> .) ]

    expr_15                        shift and go to state 631
    empty                          shift and go to state 632

state 560

    (39) interfaceBodyDeclaration -> interfaceFieldDeclaration .

    BRPAREN         reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    SEMI            reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    PUBLIC          reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    PROTECTED       reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    PRIVATE         reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    STATIC          reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    ABSTRACT        reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    FINAL           reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    NATIVE          reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    SYNCHRONIZED    reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    TRANSIENT       reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    VOLATILE        reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    STRICTFP        reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)
    AT              reduce using rule 39 (interfaceBodyDeclaration -> interfaceFieldDeclaration .)



state 561

    (43) interfaceBodyDeclaration -> SEMI .

    BRPAREN         reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    SEMI            reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    PUBLIC          reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    PROTECTED       reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    PRIVATE         reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    STATIC          reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    ABSTRACT        reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    FINAL           reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    NATIVE          reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    SYNCHRONIZED    reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    TRANSIENT       reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    VOLATILE        reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    STRICTFP        reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)
    AT              reduce using rule 43 (interfaceBodyDeclaration -> SEMI .)



state 562

    (40) interfaceBodyDeclaration -> interfaceMethodDeclaration .

    BRPAREN         reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    SEMI            reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    PUBLIC          reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    PROTECTED       reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    PRIVATE         reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    STATIC          reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    ABSTRACT        reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    FINAL           reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    NATIVE          reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    SYNCHRONIZED    reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    TRANSIENT       reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    VOLATILE        reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    STRICTFP        reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)
    AT              reduce using rule 40 (interfaceBodyDeclaration -> interfaceMethodDeclaration .)



state 563

    (293) expr_30 -> empty .

    BRPAREN         reduce using rule 293 (expr_30 -> empty .)
    SEMI            reduce using rule 293 (expr_30 -> empty .)
    PUBLIC          reduce using rule 293 (expr_30 -> empty .)
    PROTECTED       reduce using rule 293 (expr_30 -> empty .)
    PRIVATE         reduce using rule 293 (expr_30 -> empty .)
    STATIC          reduce using rule 293 (expr_30 -> empty .)
    ABSTRACT        reduce using rule 293 (expr_30 -> empty .)
    FINAL           reduce using rule 293 (expr_30 -> empty .)
    NATIVE          reduce using rule 293 (expr_30 -> empty .)
    SYNCHRONIZED    reduce using rule 293 (expr_30 -> empty .)
    TRANSIENT       reduce using rule 293 (expr_30 -> empty .)
    VOLATILE        reduce using rule 293 (expr_30 -> empty .)
    STRICTFP        reduce using rule 293 (expr_30 -> empty .)
    AT              reduce using rule 293 (expr_30 -> empty .)



state 564

    (27) interfaceBody -> BLPAREN expr_30 . BRPAREN
    (292) expr_30 -> expr_30 . interfaceBodyDeclaration
    (39) interfaceBodyDeclaration -> . interfaceFieldDeclaration
    (40) interfaceBodyDeclaration -> . interfaceMethodDeclaration
    (41) interfaceBodyDeclaration -> . interfaceDeclaration
    (42) interfaceBodyDeclaration -> . classDeclaration
    (43) interfaceBodyDeclaration -> . SEMI
    (45) interfaceFieldDeclaration -> . modifiers type variableDeclarator expr_48 SEMI
    (44) interfaceMethodDeclaration -> . modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (9) modifiers -> . expr_8
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

    BRPAREN         shift and go to state 633
    SEMI            shift and go to state 561
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4


    interfaceFieldDeclaration      shift and go to state 560
    normalInterfaceDeclaration     shift and go to state 34
    normalClassDeclaration         shift and go to state 37
    interfaceMethodDeclaration     shift and go to state 562
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    enumDeclaration                shift and go to state 45
    classDeclaration               shift and go to state 565
    interfaceBodyDeclaration       shift and go to state 634
    modifiers                      shift and go to state 567
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 568

state 565

    (42) interfaceBodyDeclaration -> classDeclaration .

    BRPAREN         reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    SEMI            reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    PUBLIC          reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    PROTECTED       reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    PRIVATE         reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    STATIC          reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    ABSTRACT        reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    FINAL           reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    NATIVE          reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    SYNCHRONIZED    reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    TRANSIENT       reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    VOLATILE        reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    STRICTFP        reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)
    AT              reduce using rule 42 (interfaceBodyDeclaration -> classDeclaration .)



state 566

    (291) expr_30 -> interfaceBodyDeclaration .

    BRPAREN         reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    SEMI            reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    STATIC          reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    FINAL           reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    NATIVE          reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)
    AT              reduce using rule 291 (expr_30 -> interfaceBodyDeclaration .)



state 567

    (45) interfaceFieldDeclaration -> modifiers . type variableDeclarator expr_48 SEMI
    (44) interfaceMethodDeclaration -> modifiers . expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI
    (24) normalInterfaceDeclaration -> modifiers . INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> modifiers . AT INTERFACE IDENTIFIER annotationTypeBody
    (13) normalClassDeclaration -> modifiers . CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> modifiers . expr_16 IDENTIFIER expr_17 enumBody
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (324) expr_44 -> . typeParameters
    (325) expr_44 -> . empty
    (260) expr_16 -> . ENUM
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (14) typeParameters -> . LESS typeParameter expr_13 MORE
    (547) empty -> .

  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
    INTERFACE       shift and go to state 127
    AT              shift and go to state 126
    CLASS           shift and go to state 129
    ENUM            shift and go to state 125
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    LESS            shift and go to state 344
    VOID            reduce using rule 547 (empty -> .)

  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]

    expr_44                        shift and go to state 635
    typeParameters                 shift and go to state 636
    classOrInterfaceType           shift and go to state 214
    type                           shift and go to state 637
    empty                          shift and go to state 638
    expr_16                        shift and go to state 128
    primitiveType                  shift and go to state 238

state 568

    (41) interfaceBodyDeclaration -> interfaceDeclaration .

    BRPAREN         reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    SEMI            reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    PUBLIC          reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    PROTECTED       reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    PRIVATE         reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    STATIC          reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    ABSTRACT        reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    FINAL           reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    NATIVE          reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    TRANSIENT       reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    VOLATILE        reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    STRICTFP        reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)
    AT              reduce using rule 41 (interfaceBodyDeclaration -> interfaceDeclaration .)



state 569

    (19) enumConstants -> enumConstant expr_21 .
    (270) expr_21 -> expr_21 . COMMA enumConstant

  ! shift/reduce conflict for COMMA resolved as shift.
    SEMI            reduce using rule 19 (enumConstants -> enumConstant expr_21 .)
    BRPAREN         reduce using rule 19 (enumConstants -> enumConstant expr_21 .)
    COMMA           shift and go to state 639

  ! COMMA           [ reduce using rule 19 (enumConstants -> enumConstant expr_21 .) ]


state 570

    (269) expr_21 -> COMMA . enumConstant
    (20) enumConstant -> . expr_22 IDENTIFIER expr_23 expr_24
    (272) expr_22 -> . annotations
    (273) expr_22 -> . empty
    (70) annotations -> . expr_66
    (547) empty -> .
    (378) expr_66 -> . annotation
    (379) expr_66 -> . expr_66 annotation
    (71) annotation -> . AT qualifiedName expr_68

    IDENTIFIER      reduce using rule 547 (empty -> .)
    AT              shift and go to state 4


    enumConstant                   shift and go to state 640
    expr_66                        shift and go to state 2
    annotation                     shift and go to state 6
    annotations                    shift and go to state 509
    expr_22                        shift and go to state 513
    empty                          shift and go to state 641

state 571

    (271) expr_21 -> empty .

    COMMA           reduce using rule 271 (expr_21 -> empty .)
    SEMI            reduce using rule 271 (expr_21 -> empty .)
    BRPAREN         reduce using rule 271 (expr_21 -> empty .)



state 572

    (18) enumBody -> BLPAREN expr_18 expr_19 . expr_20 BRPAREN
    (267) expr_20 -> . enumBodyDeclarations
    (268) expr_20 -> . empty
    (21) enumBodyDeclarations -> . SEMI expr_25
    (547) empty -> .

    SEMI            shift and go to state 642
    BRPAREN         reduce using rule 547 (empty -> .)


    enumBodyDeclarations           shift and go to state 643
    expr_20                        shift and go to state 644
    empty                          shift and go to state 645

state 573

    (265) expr_19 -> COMMA .

    SEMI            reduce using rule 265 (expr_19 -> COMMA .)
    BRPAREN         reduce using rule 265 (expr_19 -> COMMA .)



state 574

    (266) expr_19 -> empty .

    SEMI            reduce using rule 266 (expr_19 -> empty .)
    BRPAREN         reduce using rule 266 (expr_19 -> empty .)



state 575

    (20) enumConstant -> expr_22 IDENTIFIER . expr_23 expr_24
    (274) expr_23 -> . arguments
    (275) expr_23 -> . empty
    (204) arguments -> . LPAREN expr_130 RPAREN
    (547) empty -> .

    LPAREN          shift and go to state 222
    BLPAREN         reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)


    arguments                      shift and go to state 646
    expr_23                        shift and go to state 647
    empty                          shift and go to state 648

state 576

    (250) expr_12 -> IMPLEMENTS typeList .

    BLPAREN         reduce using rule 250 (expr_12 -> IMPLEMENTS typeList .)



state 577

    (13) normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .

    BRPAREN         reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    ASSERT          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    IF              reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    WHILE           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    DO              reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    SWITCH          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    SYNCHRONIZED    reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    RETURN          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    THROW           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    BREAK           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    CONTINUE        reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    IDENTIFIER      reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    SEMI            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    BLPAREN         reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    FOR             reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    TRY             reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    FINAL           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    AT              reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    PUBLIC          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    PROTECTED       reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    PRIVATE         reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    STATIC          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    ABSTRACT        reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NATIVE          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    TRANSIENT       reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    VOLATILE        reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    STRICTFP        reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    PLUS            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    DASH            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    OP_INC          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    OP_DEC          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    TILDE           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    EXCLAMATION     reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    LPAREN          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    THIS            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    SUPER           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    VOID            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    CHARLITERAL     reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    STRINGLITERAL   reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    TRUE            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    FALSE           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NULL            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NEW             reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    BOOLEAN         reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    CHAR            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    BYTE            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    SHORT           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    INT             reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    LONG            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    FLOAT           reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    DOUBLE          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NUMBER          reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    HEX_NUMBER      reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    LONG_NUMBER     reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    LONG_HEX_NUMBER reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NON_INTEGER_1   reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NON_INTEGER_2   reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    NON_INTEGER_3   reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    $end            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    CASE            reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)
    DEFAULT         reduce using rule 13 (normalClassDeclaration -> modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody .)



state 578

    (201) innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest .

    DOT             reduce using rule 201 (innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest .)
    FLPAREN         reduce using rule 201 (innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest .)
    OP_INC          reduce using rule 201 (innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest .)
    OP_DEC          reduce using rule 201 (innerCreator -> DOT NEW expr_127 IDENTIFIER expr_128 classCreatorRest .)



state 579

    (399) expr_75 -> blockStatement .

    BRPAREN         reduce using rule 399 (expr_75 -> blockStatement .)
    ASSERT          reduce using rule 399 (expr_75 -> blockStatement .)
    IF              reduce using rule 399 (expr_75 -> blockStatement .)
    WHILE           reduce using rule 399 (expr_75 -> blockStatement .)
    DO              reduce using rule 399 (expr_75 -> blockStatement .)
    SWITCH          reduce using rule 399 (expr_75 -> blockStatement .)
    SYNCHRONIZED    reduce using rule 399 (expr_75 -> blockStatement .)
    RETURN          reduce using rule 399 (expr_75 -> blockStatement .)
    THROW           reduce using rule 399 (expr_75 -> blockStatement .)
    BREAK           reduce using rule 399 (expr_75 -> blockStatement .)
    CONTINUE        reduce using rule 399 (expr_75 -> blockStatement .)
    IDENTIFIER      reduce using rule 399 (expr_75 -> blockStatement .)
    SEMI            reduce using rule 399 (expr_75 -> blockStatement .)
    BLPAREN         reduce using rule 399 (expr_75 -> blockStatement .)
    FOR             reduce using rule 399 (expr_75 -> blockStatement .)
    TRY             reduce using rule 399 (expr_75 -> blockStatement .)
    FINAL           reduce using rule 399 (expr_75 -> blockStatement .)
    AT              reduce using rule 399 (expr_75 -> blockStatement .)
    PUBLIC          reduce using rule 399 (expr_75 -> blockStatement .)
    PROTECTED       reduce using rule 399 (expr_75 -> blockStatement .)
    PRIVATE         reduce using rule 399 (expr_75 -> blockStatement .)
    STATIC          reduce using rule 399 (expr_75 -> blockStatement .)
    ABSTRACT        reduce using rule 399 (expr_75 -> blockStatement .)
    NATIVE          reduce using rule 399 (expr_75 -> blockStatement .)
    TRANSIENT       reduce using rule 399 (expr_75 -> blockStatement .)
    VOLATILE        reduce using rule 399 (expr_75 -> blockStatement .)
    STRICTFP        reduce using rule 399 (expr_75 -> blockStatement .)
    PLUS            reduce using rule 399 (expr_75 -> blockStatement .)
    DASH            reduce using rule 399 (expr_75 -> blockStatement .)
    OP_INC          reduce using rule 399 (expr_75 -> blockStatement .)
    OP_DEC          reduce using rule 399 (expr_75 -> blockStatement .)
    TILDE           reduce using rule 399 (expr_75 -> blockStatement .)
    EXCLAMATION     reduce using rule 399 (expr_75 -> blockStatement .)
    LPAREN          reduce using rule 399 (expr_75 -> blockStatement .)
    THIS            reduce using rule 399 (expr_75 -> blockStatement .)
    SUPER           reduce using rule 399 (expr_75 -> blockStatement .)
    VOID            reduce using rule 399 (expr_75 -> blockStatement .)
    CHARLITERAL     reduce using rule 399 (expr_75 -> blockStatement .)
    STRINGLITERAL   reduce using rule 399 (expr_75 -> blockStatement .)
    TRUE            reduce using rule 399 (expr_75 -> blockStatement .)
    FALSE           reduce using rule 399 (expr_75 -> blockStatement .)
    NULL            reduce using rule 399 (expr_75 -> blockStatement .)
    NEW             reduce using rule 399 (expr_75 -> blockStatement .)
    BOOLEAN         reduce using rule 399 (expr_75 -> blockStatement .)
    CHAR            reduce using rule 399 (expr_75 -> blockStatement .)
    BYTE            reduce using rule 399 (expr_75 -> blockStatement .)
    SHORT           reduce using rule 399 (expr_75 -> blockStatement .)
    INT             reduce using rule 399 (expr_75 -> blockStatement .)
    LONG            reduce using rule 399 (expr_75 -> blockStatement .)
    FLOAT           reduce using rule 399 (expr_75 -> blockStatement .)
    DOUBLE          reduce using rule 399 (expr_75 -> blockStatement .)
    NUMBER          reduce using rule 399 (expr_75 -> blockStatement .)
    HEX_NUMBER      reduce using rule 399 (expr_75 -> blockStatement .)
    LONG_NUMBER     reduce using rule 399 (expr_75 -> blockStatement .)
    LONG_HEX_NUMBER reduce using rule 399 (expr_75 -> blockStatement .)
    NON_INTEGER_1   reduce using rule 399 (expr_75 -> blockStatement .)
    NON_INTEGER_2   reduce using rule 399 (expr_75 -> blockStatement .)
    NON_INTEGER_3   reduce using rule 399 (expr_75 -> blockStatement .)



state 580

    (90) blockStatement -> classOrInterfaceDeclaration .

    ASSERT          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    IF              reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    WHILE           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    DO              reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    SWITCH          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    SYNCHRONIZED    reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    RETURN          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    THROW           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    BREAK           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    CONTINUE        reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    IDENTIFIER      reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    SEMI            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    BLPAREN         reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    FOR             reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    TRY             reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    FINAL           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    AT              reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    PUBLIC          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    PROTECTED       reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    PRIVATE         reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    STATIC          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    ABSTRACT        reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NATIVE          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    TRANSIENT       reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    VOLATILE        reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    STRICTFP        reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    PLUS            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    DASH            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    OP_INC          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    OP_DEC          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    TILDE           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    EXCLAMATION     reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    LPAREN          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    THIS            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    SUPER           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    VOID            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    CHARLITERAL     reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    STRINGLITERAL   reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    TRUE            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    FALSE           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NULL            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NEW             reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    BOOLEAN         reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    CHAR            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    BYTE            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    SHORT           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    INT             reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    LONG            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    FLOAT           reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    DOUBLE          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NUMBER          reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    HEX_NUMBER      reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_NUMBER     reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    LONG_HEX_NUMBER reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_1   reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_2   reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    NON_INTEGER_3   reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    CASE            reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    DEFAULT         reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)
    BRPAREN         reduce using rule 90 (blockStatement -> classOrInterfaceDeclaration .)



state 581

    (89) blockStatement -> localVariableDeclarationStatement .

    ASSERT          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    IF              reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    WHILE           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    DO              reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    SWITCH          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    SYNCHRONIZED    reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    RETURN          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    THROW           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    BREAK           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    CONTINUE        reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    SEMI            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    BLPAREN         reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    FOR             reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    TRY             reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    FINAL           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    AT              reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    PUBLIC          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    PROTECTED       reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    PRIVATE         reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    STATIC          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    ABSTRACT        reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NATIVE          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    TRANSIENT       reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    VOLATILE        reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    STRICTFP        reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    PLUS            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    DASH            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    OP_INC          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    OP_DEC          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    TILDE           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    EXCLAMATION     reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    LPAREN          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    THIS            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    SUPER           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    VOID            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    CHARLITERAL     reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    STRINGLITERAL   reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    TRUE            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    FALSE           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NULL            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NEW             reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    CHAR            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    BYTE            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    SHORT           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    INT             reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    LONG            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    FLOAT           reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    DOUBLE          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NUMBER          reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    HEX_NUMBER      reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    LONG_NUMBER     reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    LONG_HEX_NUMBER reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_1   reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_2   reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    NON_INTEGER_3   reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    CASE            reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    DEFAULT         reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)
    BRPAREN         reduce using rule 89 (blockStatement -> localVariableDeclarationStatement .)



state 582

    (104) statement -> RETURN . expr_81 SEMI
    (412) expr_81 -> . expression
    (413) expr_81 -> . empty
    (125) expression -> . conditionalExpression expr_93
    (547) empty -> .
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    SEMI            reduce using rule 547 (empty -> .)
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    expr_81                        shift and go to state 650
    literal                        shift and go to state 89
    empty                          shift and go to state 651
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 649

state 583

    (103) statement -> SYNCHRONIZED . parExpression block
    (240) expr_8 -> SYNCHRONIZED .
    (123) parExpression -> . LPAREN expression RPAREN

    CLASS           reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    INTERFACE       reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    AT              reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    ENUM            reduce using rule 240 (expr_8 -> SYNCHRONIZED .)
    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 652

state 584

    (244) expr_9 -> FINAL .
    (238) expr_8 -> FINAL .

    IDENTIFIER      reduce using rule 244 (expr_9 -> FINAL .)
    BOOLEAN         reduce using rule 244 (expr_9 -> FINAL .)
    CHAR            reduce using rule 244 (expr_9 -> FINAL .)
    BYTE            reduce using rule 244 (expr_9 -> FINAL .)
    SHORT           reduce using rule 244 (expr_9 -> FINAL .)
    INT             reduce using rule 244 (expr_9 -> FINAL .)
    LONG            reduce using rule 244 (expr_9 -> FINAL .)
    FLOAT           reduce using rule 244 (expr_9 -> FINAL .)
    DOUBLE          reduce using rule 244 (expr_9 -> FINAL .)
    CLASS           reduce using rule 238 (expr_8 -> FINAL .)
    INTERFACE       reduce using rule 238 (expr_8 -> FINAL .)
    AT              reduce using rule 238 (expr_8 -> FINAL .)
    ENUM            reduce using rule 238 (expr_8 -> FINAL .)



state 585

    (119) forstatement -> FOR . LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> FOR . LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement

    LPAREN          shift and go to state 654



state 586

    (95) statement -> expr_77 . expression expr_78 SEMI
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 655

state 587

    (88) block -> BLPAREN expr_75 . BRPAREN
    (400) expr_75 -> expr_75 . blockStatement
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BRPAREN         shift and go to state 657
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 656
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 588

    (115) trystatement -> TRY . block expr_86
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 658

state 589

    (98) statement -> forstatement .

    BRPAREN         reduce using rule 98 (statement -> forstatement .)
    ASSERT          reduce using rule 98 (statement -> forstatement .)
    IF              reduce using rule 98 (statement -> forstatement .)
    WHILE           reduce using rule 98 (statement -> forstatement .)
    DO              reduce using rule 98 (statement -> forstatement .)
    SWITCH          reduce using rule 98 (statement -> forstatement .)
    SYNCHRONIZED    reduce using rule 98 (statement -> forstatement .)
    RETURN          reduce using rule 98 (statement -> forstatement .)
    THROW           reduce using rule 98 (statement -> forstatement .)
    BREAK           reduce using rule 98 (statement -> forstatement .)
    CONTINUE        reduce using rule 98 (statement -> forstatement .)
    IDENTIFIER      reduce using rule 98 (statement -> forstatement .)
    SEMI            reduce using rule 98 (statement -> forstatement .)
    BLPAREN         reduce using rule 98 (statement -> forstatement .)
    FOR             reduce using rule 98 (statement -> forstatement .)
    TRY             reduce using rule 98 (statement -> forstatement .)
    FINAL           reduce using rule 98 (statement -> forstatement .)
    AT              reduce using rule 98 (statement -> forstatement .)
    PUBLIC          reduce using rule 98 (statement -> forstatement .)
    PROTECTED       reduce using rule 98 (statement -> forstatement .)
    PRIVATE         reduce using rule 98 (statement -> forstatement .)
    STATIC          reduce using rule 98 (statement -> forstatement .)
    ABSTRACT        reduce using rule 98 (statement -> forstatement .)
    NATIVE          reduce using rule 98 (statement -> forstatement .)
    TRANSIENT       reduce using rule 98 (statement -> forstatement .)
    VOLATILE        reduce using rule 98 (statement -> forstatement .)
    STRICTFP        reduce using rule 98 (statement -> forstatement .)
    PLUS            reduce using rule 98 (statement -> forstatement .)
    DASH            reduce using rule 98 (statement -> forstatement .)
    OP_INC          reduce using rule 98 (statement -> forstatement .)
    OP_DEC          reduce using rule 98 (statement -> forstatement .)
    TILDE           reduce using rule 98 (statement -> forstatement .)
    EXCLAMATION     reduce using rule 98 (statement -> forstatement .)
    LPAREN          reduce using rule 98 (statement -> forstatement .)
    THIS            reduce using rule 98 (statement -> forstatement .)
    SUPER           reduce using rule 98 (statement -> forstatement .)
    VOID            reduce using rule 98 (statement -> forstatement .)
    CHARLITERAL     reduce using rule 98 (statement -> forstatement .)
    STRINGLITERAL   reduce using rule 98 (statement -> forstatement .)
    TRUE            reduce using rule 98 (statement -> forstatement .)
    FALSE           reduce using rule 98 (statement -> forstatement .)
    NULL            reduce using rule 98 (statement -> forstatement .)
    NEW             reduce using rule 98 (statement -> forstatement .)
    BOOLEAN         reduce using rule 98 (statement -> forstatement .)
    CHAR            reduce using rule 98 (statement -> forstatement .)
    BYTE            reduce using rule 98 (statement -> forstatement .)
    SHORT           reduce using rule 98 (statement -> forstatement .)
    INT             reduce using rule 98 (statement -> forstatement .)
    LONG            reduce using rule 98 (statement -> forstatement .)
    FLOAT           reduce using rule 98 (statement -> forstatement .)
    DOUBLE          reduce using rule 98 (statement -> forstatement .)
    NUMBER          reduce using rule 98 (statement -> forstatement .)
    HEX_NUMBER      reduce using rule 98 (statement -> forstatement .)
    LONG_NUMBER     reduce using rule 98 (statement -> forstatement .)
    LONG_HEX_NUMBER reduce using rule 98 (statement -> forstatement .)
    NON_INTEGER_1   reduce using rule 98 (statement -> forstatement .)
    NON_INTEGER_2   reduce using rule 98 (statement -> forstatement .)
    NON_INTEGER_3   reduce using rule 98 (statement -> forstatement .)
    ELSE            reduce using rule 98 (statement -> forstatement .)
    CASE            reduce using rule 98 (statement -> forstatement .)
    DEFAULT         reduce using rule 98 (statement -> forstatement .)



state 590

    (107) statement -> CONTINUE . expr_83 SEMI
    (416) expr_83 -> . IDENTIFIER
    (417) expr_83 -> . empty
    (547) empty -> .

    IDENTIFIER      shift and go to state 659
    SEMI            reduce using rule 547 (empty -> .)


    expr_83                        shift and go to state 660
    empty                          shift and go to state 661

state 591

    (108) statement -> expression . SEMI

    SEMI            shift and go to state 662



state 592

    (94) statement -> block .

    BRPAREN         reduce using rule 94 (statement -> block .)
    ASSERT          reduce using rule 94 (statement -> block .)
    IF              reduce using rule 94 (statement -> block .)
    WHILE           reduce using rule 94 (statement -> block .)
    DO              reduce using rule 94 (statement -> block .)
    SWITCH          reduce using rule 94 (statement -> block .)
    SYNCHRONIZED    reduce using rule 94 (statement -> block .)
    RETURN          reduce using rule 94 (statement -> block .)
    THROW           reduce using rule 94 (statement -> block .)
    BREAK           reduce using rule 94 (statement -> block .)
    CONTINUE        reduce using rule 94 (statement -> block .)
    IDENTIFIER      reduce using rule 94 (statement -> block .)
    SEMI            reduce using rule 94 (statement -> block .)
    BLPAREN         reduce using rule 94 (statement -> block .)
    FOR             reduce using rule 94 (statement -> block .)
    TRY             reduce using rule 94 (statement -> block .)
    FINAL           reduce using rule 94 (statement -> block .)
    AT              reduce using rule 94 (statement -> block .)
    PUBLIC          reduce using rule 94 (statement -> block .)
    PROTECTED       reduce using rule 94 (statement -> block .)
    PRIVATE         reduce using rule 94 (statement -> block .)
    STATIC          reduce using rule 94 (statement -> block .)
    ABSTRACT        reduce using rule 94 (statement -> block .)
    NATIVE          reduce using rule 94 (statement -> block .)
    TRANSIENT       reduce using rule 94 (statement -> block .)
    VOLATILE        reduce using rule 94 (statement -> block .)
    STRICTFP        reduce using rule 94 (statement -> block .)
    PLUS            reduce using rule 94 (statement -> block .)
    DASH            reduce using rule 94 (statement -> block .)
    OP_INC          reduce using rule 94 (statement -> block .)
    OP_DEC          reduce using rule 94 (statement -> block .)
    TILDE           reduce using rule 94 (statement -> block .)
    EXCLAMATION     reduce using rule 94 (statement -> block .)
    LPAREN          reduce using rule 94 (statement -> block .)
    THIS            reduce using rule 94 (statement -> block .)
    SUPER           reduce using rule 94 (statement -> block .)
    VOID            reduce using rule 94 (statement -> block .)
    CHARLITERAL     reduce using rule 94 (statement -> block .)
    STRINGLITERAL   reduce using rule 94 (statement -> block .)
    TRUE            reduce using rule 94 (statement -> block .)
    FALSE           reduce using rule 94 (statement -> block .)
    NULL            reduce using rule 94 (statement -> block .)
    NEW             reduce using rule 94 (statement -> block .)
    BOOLEAN         reduce using rule 94 (statement -> block .)
    CHAR            reduce using rule 94 (statement -> block .)
    BYTE            reduce using rule 94 (statement -> block .)
    SHORT           reduce using rule 94 (statement -> block .)
    INT             reduce using rule 94 (statement -> block .)
    LONG            reduce using rule 94 (statement -> block .)
    FLOAT           reduce using rule 94 (statement -> block .)
    DOUBLE          reduce using rule 94 (statement -> block .)
    NUMBER          reduce using rule 94 (statement -> block .)
    HEX_NUMBER      reduce using rule 94 (statement -> block .)
    LONG_NUMBER     reduce using rule 94 (statement -> block .)
    LONG_HEX_NUMBER reduce using rule 94 (statement -> block .)
    NON_INTEGER_1   reduce using rule 94 (statement -> block .)
    NON_INTEGER_2   reduce using rule 94 (statement -> block .)
    NON_INTEGER_3   reduce using rule 94 (statement -> block .)
    ELSE            reduce using rule 94 (statement -> block .)
    CASE            reduce using rule 94 (statement -> block .)
    DEFAULT         reduce using rule 94 (statement -> block .)



state 593

    (92) localVariableDeclarationStatement -> localVariableDeclaration . SEMI

    SEMI            shift and go to state 663



state 594

    (99) statement -> WHILE . parExpression statement
    (123) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 664

state 595

    (102) statement -> SWITCH . parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (123) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 665

state 596

    (91) blockStatement -> statement .

    ASSERT          reduce using rule 91 (blockStatement -> statement .)
    IF              reduce using rule 91 (blockStatement -> statement .)
    WHILE           reduce using rule 91 (blockStatement -> statement .)
    DO              reduce using rule 91 (blockStatement -> statement .)
    SWITCH          reduce using rule 91 (blockStatement -> statement .)
    SYNCHRONIZED    reduce using rule 91 (blockStatement -> statement .)
    RETURN          reduce using rule 91 (blockStatement -> statement .)
    THROW           reduce using rule 91 (blockStatement -> statement .)
    BREAK           reduce using rule 91 (blockStatement -> statement .)
    CONTINUE        reduce using rule 91 (blockStatement -> statement .)
    IDENTIFIER      reduce using rule 91 (blockStatement -> statement .)
    SEMI            reduce using rule 91 (blockStatement -> statement .)
    BLPAREN         reduce using rule 91 (blockStatement -> statement .)
    FOR             reduce using rule 91 (blockStatement -> statement .)
    TRY             reduce using rule 91 (blockStatement -> statement .)
    FINAL           reduce using rule 91 (blockStatement -> statement .)
    AT              reduce using rule 91 (blockStatement -> statement .)
    PUBLIC          reduce using rule 91 (blockStatement -> statement .)
    PROTECTED       reduce using rule 91 (blockStatement -> statement .)
    PRIVATE         reduce using rule 91 (blockStatement -> statement .)
    STATIC          reduce using rule 91 (blockStatement -> statement .)
    ABSTRACT        reduce using rule 91 (blockStatement -> statement .)
    NATIVE          reduce using rule 91 (blockStatement -> statement .)
    TRANSIENT       reduce using rule 91 (blockStatement -> statement .)
    VOLATILE        reduce using rule 91 (blockStatement -> statement .)
    STRICTFP        reduce using rule 91 (blockStatement -> statement .)
    PLUS            reduce using rule 91 (blockStatement -> statement .)
    DASH            reduce using rule 91 (blockStatement -> statement .)
    OP_INC          reduce using rule 91 (blockStatement -> statement .)
    OP_DEC          reduce using rule 91 (blockStatement -> statement .)
    TILDE           reduce using rule 91 (blockStatement -> statement .)
    EXCLAMATION     reduce using rule 91 (blockStatement -> statement .)
    LPAREN          reduce using rule 91 (blockStatement -> statement .)
    THIS            reduce using rule 91 (blockStatement -> statement .)
    SUPER           reduce using rule 91 (blockStatement -> statement .)
    VOID            reduce using rule 91 (blockStatement -> statement .)
    CHARLITERAL     reduce using rule 91 (blockStatement -> statement .)
    STRINGLITERAL   reduce using rule 91 (blockStatement -> statement .)
    TRUE            reduce using rule 91 (blockStatement -> statement .)
    FALSE           reduce using rule 91 (blockStatement -> statement .)
    NULL            reduce using rule 91 (blockStatement -> statement .)
    NEW             reduce using rule 91 (blockStatement -> statement .)
    BOOLEAN         reduce using rule 91 (blockStatement -> statement .)
    CHAR            reduce using rule 91 (blockStatement -> statement .)
    BYTE            reduce using rule 91 (blockStatement -> statement .)
    SHORT           reduce using rule 91 (blockStatement -> statement .)
    INT             reduce using rule 91 (blockStatement -> statement .)
    LONG            reduce using rule 91 (blockStatement -> statement .)
    FLOAT           reduce using rule 91 (blockStatement -> statement .)
    DOUBLE          reduce using rule 91 (blockStatement -> statement .)
    NUMBER          reduce using rule 91 (blockStatement -> statement .)
    HEX_NUMBER      reduce using rule 91 (blockStatement -> statement .)
    LONG_NUMBER     reduce using rule 91 (blockStatement -> statement .)
    LONG_HEX_NUMBER reduce using rule 91 (blockStatement -> statement .)
    NON_INTEGER_1   reduce using rule 91 (blockStatement -> statement .)
    NON_INTEGER_2   reduce using rule 91 (blockStatement -> statement .)
    NON_INTEGER_3   reduce using rule 91 (blockStatement -> statement .)
    CASE            reduce using rule 91 (blockStatement -> statement .)
    DEFAULT         reduce using rule 91 (blockStatement -> statement .)
    BRPAREN         reduce using rule 91 (blockStatement -> statement .)



state 597

    (109) statement -> IDENTIFIER . COLON statement
    (170) primary -> IDENTIFIER . expr_113 expr_114
    (495) expr_113 -> . DOT IDENTIFIER
    (496) expr_113 -> . expr_113 DOT IDENTIFIER
    (497) expr_113 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for DOT resolved as shift.
    COLON           shift and go to state 666
    DOT             shift and go to state 194
    FLPAREN         reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)

  ! DOT             [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 192
    expr_113                       shift and go to state 193

state 598

    (401) expr_75 -> empty .

    BRPAREN         reduce using rule 401 (expr_75 -> empty .)
    ASSERT          reduce using rule 401 (expr_75 -> empty .)
    IF              reduce using rule 401 (expr_75 -> empty .)
    WHILE           reduce using rule 401 (expr_75 -> empty .)
    DO              reduce using rule 401 (expr_75 -> empty .)
    SWITCH          reduce using rule 401 (expr_75 -> empty .)
    SYNCHRONIZED    reduce using rule 401 (expr_75 -> empty .)
    RETURN          reduce using rule 401 (expr_75 -> empty .)
    THROW           reduce using rule 401 (expr_75 -> empty .)
    BREAK           reduce using rule 401 (expr_75 -> empty .)
    CONTINUE        reduce using rule 401 (expr_75 -> empty .)
    IDENTIFIER      reduce using rule 401 (expr_75 -> empty .)
    SEMI            reduce using rule 401 (expr_75 -> empty .)
    BLPAREN         reduce using rule 401 (expr_75 -> empty .)
    FOR             reduce using rule 401 (expr_75 -> empty .)
    TRY             reduce using rule 401 (expr_75 -> empty .)
    FINAL           reduce using rule 401 (expr_75 -> empty .)
    AT              reduce using rule 401 (expr_75 -> empty .)
    PUBLIC          reduce using rule 401 (expr_75 -> empty .)
    PROTECTED       reduce using rule 401 (expr_75 -> empty .)
    PRIVATE         reduce using rule 401 (expr_75 -> empty .)
    STATIC          reduce using rule 401 (expr_75 -> empty .)
    ABSTRACT        reduce using rule 401 (expr_75 -> empty .)
    NATIVE          reduce using rule 401 (expr_75 -> empty .)
    TRANSIENT       reduce using rule 401 (expr_75 -> empty .)
    VOLATILE        reduce using rule 401 (expr_75 -> empty .)
    STRICTFP        reduce using rule 401 (expr_75 -> empty .)
    PLUS            reduce using rule 401 (expr_75 -> empty .)
    DASH            reduce using rule 401 (expr_75 -> empty .)
    OP_INC          reduce using rule 401 (expr_75 -> empty .)
    OP_DEC          reduce using rule 401 (expr_75 -> empty .)
    TILDE           reduce using rule 401 (expr_75 -> empty .)
    EXCLAMATION     reduce using rule 401 (expr_75 -> empty .)
    LPAREN          reduce using rule 401 (expr_75 -> empty .)
    THIS            reduce using rule 401 (expr_75 -> empty .)
    SUPER           reduce using rule 401 (expr_75 -> empty .)
    VOID            reduce using rule 401 (expr_75 -> empty .)
    CHARLITERAL     reduce using rule 401 (expr_75 -> empty .)
    STRINGLITERAL   reduce using rule 401 (expr_75 -> empty .)
    TRUE            reduce using rule 401 (expr_75 -> empty .)
    FALSE           reduce using rule 401 (expr_75 -> empty .)
    NULL            reduce using rule 401 (expr_75 -> empty .)
    NEW             reduce using rule 401 (expr_75 -> empty .)
    BOOLEAN         reduce using rule 401 (expr_75 -> empty .)
    CHAR            reduce using rule 401 (expr_75 -> empty .)
    BYTE            reduce using rule 401 (expr_75 -> empty .)
    SHORT           reduce using rule 401 (expr_75 -> empty .)
    INT             reduce using rule 401 (expr_75 -> empty .)
    LONG            reduce using rule 401 (expr_75 -> empty .)
    FLOAT           reduce using rule 401 (expr_75 -> empty .)
    DOUBLE          reduce using rule 401 (expr_75 -> empty .)
    NUMBER          reduce using rule 401 (expr_75 -> empty .)
    HEX_NUMBER      reduce using rule 401 (expr_75 -> empty .)
    LONG_NUMBER     reduce using rule 401 (expr_75 -> empty .)
    LONG_HEX_NUMBER reduce using rule 401 (expr_75 -> empty .)
    NON_INTEGER_1   reduce using rule 401 (expr_75 -> empty .)
    NON_INTEGER_2   reduce using rule 401 (expr_75 -> empty .)
    NON_INTEGER_3   reduce using rule 401 (expr_75 -> empty .)



state 599

    (106) statement -> BREAK . expr_82 SEMI
    (414) expr_82 -> . IDENTIFIER
    (415) expr_82 -> . empty
    (547) empty -> .

    IDENTIFIER      shift and go to state 668
    SEMI            reduce using rule 547 (empty -> .)


    expr_82                        shift and go to state 669
    empty                          shift and go to state 667

state 600

    (100) statement -> DO . statement WHILE parExpression SEMI
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 671
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 601

    (96) statement -> ASSERT . expression expr_79 SEMI
    (405) expr_77 -> ASSERT .
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CHARLITERAL resolved as shift.
  ! shift/reduce conflict for STRINGLITERAL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102

  ! PLUS            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! DASH            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! OP_INC          [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! OP_DEC          [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! TILDE           [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! EXCLAMATION     [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! LPAREN          [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! THIS            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! IDENTIFIER      [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! SUPER           [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! VOID            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! CHARLITERAL     [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! STRINGLITERAL   [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! TRUE            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! FALSE           [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NULL            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NEW             [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! BOOLEAN         [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! CHAR            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! BYTE            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! SHORT           [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! INT             [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! LONG            [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! FLOAT           [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! DOUBLE          [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NUMBER          [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! HEX_NUMBER      [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! LONG_NUMBER     [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NON_INTEGER_1   [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NON_INTEGER_2   [ reduce using rule 405 (expr_77 -> ASSERT .) ]
  ! NON_INTEGER_3   [ reduce using rule 405 (expr_77 -> ASSERT .) ]

    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 672

state 602

    (110) statement -> SEMI .

    BRPAREN         reduce using rule 110 (statement -> SEMI .)
    ASSERT          reduce using rule 110 (statement -> SEMI .)
    IF              reduce using rule 110 (statement -> SEMI .)
    WHILE           reduce using rule 110 (statement -> SEMI .)
    DO              reduce using rule 110 (statement -> SEMI .)
    SWITCH          reduce using rule 110 (statement -> SEMI .)
    SYNCHRONIZED    reduce using rule 110 (statement -> SEMI .)
    RETURN          reduce using rule 110 (statement -> SEMI .)
    THROW           reduce using rule 110 (statement -> SEMI .)
    BREAK           reduce using rule 110 (statement -> SEMI .)
    CONTINUE        reduce using rule 110 (statement -> SEMI .)
    IDENTIFIER      reduce using rule 110 (statement -> SEMI .)
    SEMI            reduce using rule 110 (statement -> SEMI .)
    BLPAREN         reduce using rule 110 (statement -> SEMI .)
    FOR             reduce using rule 110 (statement -> SEMI .)
    TRY             reduce using rule 110 (statement -> SEMI .)
    FINAL           reduce using rule 110 (statement -> SEMI .)
    AT              reduce using rule 110 (statement -> SEMI .)
    PUBLIC          reduce using rule 110 (statement -> SEMI .)
    PROTECTED       reduce using rule 110 (statement -> SEMI .)
    PRIVATE         reduce using rule 110 (statement -> SEMI .)
    STATIC          reduce using rule 110 (statement -> SEMI .)
    ABSTRACT        reduce using rule 110 (statement -> SEMI .)
    NATIVE          reduce using rule 110 (statement -> SEMI .)
    TRANSIENT       reduce using rule 110 (statement -> SEMI .)
    VOLATILE        reduce using rule 110 (statement -> SEMI .)
    STRICTFP        reduce using rule 110 (statement -> SEMI .)
    PLUS            reduce using rule 110 (statement -> SEMI .)
    DASH            reduce using rule 110 (statement -> SEMI .)
    OP_INC          reduce using rule 110 (statement -> SEMI .)
    OP_DEC          reduce using rule 110 (statement -> SEMI .)
    TILDE           reduce using rule 110 (statement -> SEMI .)
    EXCLAMATION     reduce using rule 110 (statement -> SEMI .)
    LPAREN          reduce using rule 110 (statement -> SEMI .)
    THIS            reduce using rule 110 (statement -> SEMI .)
    SUPER           reduce using rule 110 (statement -> SEMI .)
    VOID            reduce using rule 110 (statement -> SEMI .)
    CHARLITERAL     reduce using rule 110 (statement -> SEMI .)
    STRINGLITERAL   reduce using rule 110 (statement -> SEMI .)
    TRUE            reduce using rule 110 (statement -> SEMI .)
    FALSE           reduce using rule 110 (statement -> SEMI .)
    NULL            reduce using rule 110 (statement -> SEMI .)
    NEW             reduce using rule 110 (statement -> SEMI .)
    BOOLEAN         reduce using rule 110 (statement -> SEMI .)
    CHAR            reduce using rule 110 (statement -> SEMI .)
    BYTE            reduce using rule 110 (statement -> SEMI .)
    SHORT           reduce using rule 110 (statement -> SEMI .)
    INT             reduce using rule 110 (statement -> SEMI .)
    LONG            reduce using rule 110 (statement -> SEMI .)
    FLOAT           reduce using rule 110 (statement -> SEMI .)
    DOUBLE          reduce using rule 110 (statement -> SEMI .)
    NUMBER          reduce using rule 110 (statement -> SEMI .)
    HEX_NUMBER      reduce using rule 110 (statement -> SEMI .)
    LONG_NUMBER     reduce using rule 110 (statement -> SEMI .)
    LONG_HEX_NUMBER reduce using rule 110 (statement -> SEMI .)
    NON_INTEGER_1   reduce using rule 110 (statement -> SEMI .)
    NON_INTEGER_2   reduce using rule 110 (statement -> SEMI .)
    NON_INTEGER_3   reduce using rule 110 (statement -> SEMI .)
    ELSE            reduce using rule 110 (statement -> SEMI .)
    CASE            reduce using rule 110 (statement -> SEMI .)
    DEFAULT         reduce using rule 110 (statement -> SEMI .)



state 603

    (10) variableModifiers -> expr_9 .

    IDENTIFIER      reduce using rule 10 (variableModifiers -> expr_9 .)
    BOOLEAN         reduce using rule 10 (variableModifiers -> expr_9 .)
    CHAR            reduce using rule 10 (variableModifiers -> expr_9 .)
    BYTE            reduce using rule 10 (variableModifiers -> expr_9 .)
    SHORT           reduce using rule 10 (variableModifiers -> expr_9 .)
    INT             reduce using rule 10 (variableModifiers -> expr_9 .)
    LONG            reduce using rule 10 (variableModifiers -> expr_9 .)
    FLOAT           reduce using rule 10 (variableModifiers -> expr_9 .)
    DOUBLE          reduce using rule 10 (variableModifiers -> expr_9 .)



state 604

    (101) statement -> trystatement .

    BRPAREN         reduce using rule 101 (statement -> trystatement .)
    ASSERT          reduce using rule 101 (statement -> trystatement .)
    IF              reduce using rule 101 (statement -> trystatement .)
    WHILE           reduce using rule 101 (statement -> trystatement .)
    DO              reduce using rule 101 (statement -> trystatement .)
    SWITCH          reduce using rule 101 (statement -> trystatement .)
    SYNCHRONIZED    reduce using rule 101 (statement -> trystatement .)
    RETURN          reduce using rule 101 (statement -> trystatement .)
    THROW           reduce using rule 101 (statement -> trystatement .)
    BREAK           reduce using rule 101 (statement -> trystatement .)
    CONTINUE        reduce using rule 101 (statement -> trystatement .)
    IDENTIFIER      reduce using rule 101 (statement -> trystatement .)
    SEMI            reduce using rule 101 (statement -> trystatement .)
    BLPAREN         reduce using rule 101 (statement -> trystatement .)
    FOR             reduce using rule 101 (statement -> trystatement .)
    TRY             reduce using rule 101 (statement -> trystatement .)
    FINAL           reduce using rule 101 (statement -> trystatement .)
    AT              reduce using rule 101 (statement -> trystatement .)
    PUBLIC          reduce using rule 101 (statement -> trystatement .)
    PROTECTED       reduce using rule 101 (statement -> trystatement .)
    PRIVATE         reduce using rule 101 (statement -> trystatement .)
    STATIC          reduce using rule 101 (statement -> trystatement .)
    ABSTRACT        reduce using rule 101 (statement -> trystatement .)
    NATIVE          reduce using rule 101 (statement -> trystatement .)
    TRANSIENT       reduce using rule 101 (statement -> trystatement .)
    VOLATILE        reduce using rule 101 (statement -> trystatement .)
    STRICTFP        reduce using rule 101 (statement -> trystatement .)
    PLUS            reduce using rule 101 (statement -> trystatement .)
    DASH            reduce using rule 101 (statement -> trystatement .)
    OP_INC          reduce using rule 101 (statement -> trystatement .)
    OP_DEC          reduce using rule 101 (statement -> trystatement .)
    TILDE           reduce using rule 101 (statement -> trystatement .)
    EXCLAMATION     reduce using rule 101 (statement -> trystatement .)
    LPAREN          reduce using rule 101 (statement -> trystatement .)
    THIS            reduce using rule 101 (statement -> trystatement .)
    SUPER           reduce using rule 101 (statement -> trystatement .)
    VOID            reduce using rule 101 (statement -> trystatement .)
    CHARLITERAL     reduce using rule 101 (statement -> trystatement .)
    STRINGLITERAL   reduce using rule 101 (statement -> trystatement .)
    TRUE            reduce using rule 101 (statement -> trystatement .)
    FALSE           reduce using rule 101 (statement -> trystatement .)
    NULL            reduce using rule 101 (statement -> trystatement .)
    NEW             reduce using rule 101 (statement -> trystatement .)
    BOOLEAN         reduce using rule 101 (statement -> trystatement .)
    CHAR            reduce using rule 101 (statement -> trystatement .)
    BYTE            reduce using rule 101 (statement -> trystatement .)
    SHORT           reduce using rule 101 (statement -> trystatement .)
    INT             reduce using rule 101 (statement -> trystatement .)
    LONG            reduce using rule 101 (statement -> trystatement .)
    FLOAT           reduce using rule 101 (statement -> trystatement .)
    DOUBLE          reduce using rule 101 (statement -> trystatement .)
    NUMBER          reduce using rule 101 (statement -> trystatement .)
    HEX_NUMBER      reduce using rule 101 (statement -> trystatement .)
    LONG_NUMBER     reduce using rule 101 (statement -> trystatement .)
    LONG_HEX_NUMBER reduce using rule 101 (statement -> trystatement .)
    NON_INTEGER_1   reduce using rule 101 (statement -> trystatement .)
    NON_INTEGER_2   reduce using rule 101 (statement -> trystatement .)
    NON_INTEGER_3   reduce using rule 101 (statement -> trystatement .)
    ELSE            reduce using rule 101 (statement -> trystatement .)
    CASE            reduce using rule 101 (statement -> trystatement .)
    DEFAULT         reduce using rule 101 (statement -> trystatement .)



state 605

    (245) expr_9 -> annotation .
    (232) expr_8 -> annotation .

    IDENTIFIER      reduce using rule 245 (expr_9 -> annotation .)
    BOOLEAN         reduce using rule 245 (expr_9 -> annotation .)
    CHAR            reduce using rule 245 (expr_9 -> annotation .)
    BYTE            reduce using rule 245 (expr_9 -> annotation .)
    SHORT           reduce using rule 245 (expr_9 -> annotation .)
    INT             reduce using rule 245 (expr_9 -> annotation .)
    LONG            reduce using rule 245 (expr_9 -> annotation .)
    FLOAT           reduce using rule 245 (expr_9 -> annotation .)
    DOUBLE          reduce using rule 245 (expr_9 -> annotation .)
    CLASS           reduce using rule 232 (expr_8 -> annotation .)
    INTERFACE       reduce using rule 232 (expr_8 -> annotation .)
    AT              reduce using rule 232 (expr_8 -> annotation .)
    ENUM            reduce using rule 232 (expr_8 -> annotation .)



state 606

    (97) statement -> IF . parExpression statement expr_80
    (123) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 673

state 607

    (93) localVariableDeclaration -> variableModifiers . type variableDeclarator expr_76
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 674

state 608

    (105) statement -> THROW . expression SEMI
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 675

state 609

    (38) variableDeclarator -> IDENTIFIER . expr_42 expr_43
    (319) expr_42 -> . FLPAREN FRPAREN
    (320) expr_42 -> . expr_42 FLPAREN FRPAREN
    (321) expr_42 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 677
    EQUALS          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_42                        shift and go to state 676
    empty                          shift and go to state 678

state 610

    (37) fieldDeclaration -> modifiers type variableDeclarator . expr_41 SEMI
    (316) expr_41 -> . COMMA variableDeclarator
    (317) expr_41 -> . expr_41 COMMA variableDeclarator
    (318) expr_41 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 680
    SEMI            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_41                        shift and go to state 679
    empty                          shift and go to state 681

state 611

    (308) expr_37 -> VOID .

    IDENTIFIER      reduce using rule 308 (expr_37 -> VOID .)



state 612

    (307) expr_37 -> type .

    IDENTIFIER      reduce using rule 307 (expr_37 -> type .)



state 613

    (36) methodDeclaration -> modifiers expr_36 expr_37 . IDENTIFIER formalParameters expr_38 expr_39 expr_40

    IDENTIFIER      shift and go to state 682



state 614

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER . formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (61) formalParameters -> . LPAREN expr_58 RPAREN

    LPAREN          shift and go to state 684


    formalParameters               shift and go to state 683

state 615

    (347) expr_53 -> expr_53 DOT IDENTIFIER expr_52 .

    DOT             reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    LPAREN          reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    FLPAREN         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    RPAREN          reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    OP_EQ           reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    OP_NE           reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    AND             reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    CARET           reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    VERTICAL        reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    OP_LAND         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    OP_LOR          reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    QUES            reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    COMMA           reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    BRPAREN         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    EQUALS          reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_ADD         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_SUB         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_MUL         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_DIV         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_AND         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_OR          reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_XOR         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    ASS_MOD         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    LESS            reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    MORE            reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    COLON           reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    FRPAREN         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    SEMI            reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    BLPAREN         reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    IMPLEMENTS      reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    IDENTIFIER      reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)
    OP_ARRAY        reduce using rule 347 (expr_53 -> expr_53 DOT IDENTIFIER expr_52 .)



state 616

    (350) expr_54 -> expr_54 COMMA typeArgument .

    MORE            reduce using rule 350 (expr_54 -> expr_54 COMMA typeArgument .)
    COMMA           reduce using rule 350 (expr_54 -> expr_54 COMMA typeArgument .)



state 617

    (514) expr_121 -> expr_121 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 514 (expr_121 -> expr_121 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 514 (expr_121 -> expr_121 FLPAREN FRPAREN .)



state 618

    (525) expr_125 -> variableInitializer . expr_124
    (522) expr_124 -> . COMMA variableInitializer
    (523) expr_124 -> . expr_124 COMMA variableInitializer
    (524) expr_124 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 686
    BRPAREN         reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_124                       shift and go to state 685
    empty                          shift and go to state 687

state 619

    (198) arrayInitializer -> BLPAREN expr_125 . expr_126 BRPAREN
    (527) expr_126 -> . COMMA
    (528) expr_126 -> . empty
    (547) empty -> .

    COMMA           shift and go to state 688
    BRPAREN         reduce using rule 547 (empty -> .)


    empty                          shift and go to state 690
    expr_126                       shift and go to state 689

state 620

    (197) variableInitializer -> expression .

    COMMA           reduce using rule 197 (variableInitializer -> expression .)
    SEMI            reduce using rule 197 (variableInitializer -> expression .)
    BRPAREN         reduce using rule 197 (variableInitializer -> expression .)



state 621

    (196) variableInitializer -> arrayInitializer .

    COMMA           reduce using rule 196 (variableInitializer -> arrayInitializer .)
    SEMI            reduce using rule 196 (variableInitializer -> arrayInitializer .)
    BRPAREN         reduce using rule 196 (variableInitializer -> arrayInitializer .)



state 622

    (526) expr_125 -> empty .

    COMMA           reduce using rule 526 (expr_125 -> empty .)
    BRPAREN         reduce using rule 526 (expr_125 -> empty .)



state 623

    (516) expr_122 -> FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 691



state 624

    (517) expr_122 -> expr_122 FLPAREN . expression FRPAREN
    (519) expr_123 -> FLPAREN . FRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    FRPAREN         shift and go to state 692
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 693

state 625

    (195) arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123 .
    (520) expr_123 -> expr_123 . FLPAREN FRPAREN

  ! shift/reduce conflict for FLPAREN resolved as shift.
    DOT             reduce using rule 195 (arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123 .)
    OP_INC          reduce using rule 195 (arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123 .)
    OP_DEC          reduce using rule 195 (arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123 .)
    FLPAREN         shift and go to state 694

  ! FLPAREN         [ reduce using rule 195 (arrayCreator -> NEW createdName FLPAREN expression FRPAREN expr_122 expr_123 .) ]


state 626

    (521) expr_123 -> empty .

    FLPAREN         reduce using rule 521 (expr_123 -> empty .)
    DOT             reduce using rule 521 (expr_123 -> empty .)
    OP_INC          reduce using rule 521 (expr_123 -> empty .)
    OP_DEC          reduce using rule 521 (expr_123 -> empty .)



state 627

    (87) annotationMethodDeclaration -> modifiers type IDENTIFIER . LPAREN RPAREN expr_74 SEMI
    (38) variableDeclarator -> IDENTIFIER . expr_42 expr_43
    (319) expr_42 -> . FLPAREN FRPAREN
    (320) expr_42 -> . expr_42 FLPAREN FRPAREN
    (321) expr_42 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    LPAREN          shift and go to state 695
    FLPAREN         shift and go to state 677
    EQUALS          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_42                        shift and go to state 676
    empty                          shift and go to state 678

state 628

    (45) interfaceFieldDeclaration -> modifiers type variableDeclarator . expr_48 SEMI
    (333) expr_48 -> . COMMA variableDeclarator
    (334) expr_48 -> . expr_48 COMMA variableDeclarator
    (335) expr_48 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 697
    SEMI            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_48                        shift and go to state 696
    empty                          shift and go to state 698

state 629

    (253) expr_13 -> expr_13 COMMA typeParameter .

    MORE            reduce using rule 253 (expr_13 -> expr_13 COMMA typeParameter .)
    COMMA           reduce using rule 253 (expr_13 -> expr_13 COMMA typeParameter .)



state 630

    (257) expr_15 -> AND . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 699

state 631

    (16) typeBound -> type expr_15 .
    (258) expr_15 -> expr_15 . AND type

    COMMA           reduce using rule 16 (typeBound -> type expr_15 .)
    MORE            reduce using rule 16 (typeBound -> type expr_15 .)
    AND             shift and go to state 700



state 632

    (259) expr_15 -> empty .

    AND             reduce using rule 259 (expr_15 -> empty .)
    COMMA           reduce using rule 259 (expr_15 -> empty .)
    MORE            reduce using rule 259 (expr_15 -> empty .)



state 633

    (27) interfaceBody -> BLPAREN expr_30 BRPAREN .

    SEMI            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    PUBLIC          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    PROTECTED       reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    PRIVATE         reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    STATIC          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    ABSTRACT        reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    FINAL           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NATIVE          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    SYNCHRONIZED    reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    TRANSIENT       reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    VOLATILE        reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    STRICTFP        reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    AT              reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    $end            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    BRPAREN         reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    BLPAREN         reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    ASSERT          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    IF              reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    WHILE           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    DO              reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    SWITCH          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    RETURN          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    THROW           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    BREAK           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    CONTINUE        reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    IDENTIFIER      reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    FOR             reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    TRY             reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    PLUS            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    DASH            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    OP_INC          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    OP_DEC          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    TILDE           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    EXCLAMATION     reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    LPAREN          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    THIS            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    SUPER           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    VOID            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    CHARLITERAL     reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    STRINGLITERAL   reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    TRUE            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    FALSE           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NULL            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NEW             reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    BOOLEAN         reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    CHAR            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    BYTE            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    SHORT           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    INT             reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    LONG            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    FLOAT           reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    DOUBLE          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NUMBER          reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    HEX_NUMBER      reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    LONG_NUMBER     reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NON_INTEGER_1   reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NON_INTEGER_2   reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    NON_INTEGER_3   reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    CASE            reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)
    DEFAULT         reduce using rule 27 (interfaceBody -> BLPAREN expr_30 BRPAREN .)



state 634

    (292) expr_30 -> expr_30 interfaceBodyDeclaration .

    BRPAREN         reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    SEMI            reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    PUBLIC          reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    PROTECTED       reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    PRIVATE         reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    STATIC          reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    ABSTRACT        reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    FINAL           reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    NATIVE          reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    TRANSIENT       reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    VOLATILE        reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    STRICTFP        reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)
    AT              reduce using rule 292 (expr_30 -> expr_30 interfaceBodyDeclaration .)



state 635

    (44) interfaceMethodDeclaration -> modifiers expr_44 . expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI
    (326) expr_45 -> . type
    (327) expr_45 -> . VOID
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    VOID            shift and go to state 702
    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    expr_45                        shift and go to state 701
    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 703

state 636

    (324) expr_44 -> typeParameters .

    VOID            reduce using rule 324 (expr_44 -> typeParameters .)
    IDENTIFIER      reduce using rule 324 (expr_44 -> typeParameters .)
    BOOLEAN         reduce using rule 324 (expr_44 -> typeParameters .)
    CHAR            reduce using rule 324 (expr_44 -> typeParameters .)
    BYTE            reduce using rule 324 (expr_44 -> typeParameters .)
    SHORT           reduce using rule 324 (expr_44 -> typeParameters .)
    INT             reduce using rule 324 (expr_44 -> typeParameters .)
    LONG            reduce using rule 324 (expr_44 -> typeParameters .)
    FLOAT           reduce using rule 324 (expr_44 -> typeParameters .)
    DOUBLE          reduce using rule 324 (expr_44 -> typeParameters .)



state 637

    (45) interfaceFieldDeclaration -> modifiers type . variableDeclarator expr_48 SEMI
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 628

state 638

    (325) expr_44 -> empty .

    VOID            reduce using rule 325 (expr_44 -> empty .)
    IDENTIFIER      reduce using rule 325 (expr_44 -> empty .)
    BOOLEAN         reduce using rule 325 (expr_44 -> empty .)
    CHAR            reduce using rule 325 (expr_44 -> empty .)
    BYTE            reduce using rule 325 (expr_44 -> empty .)
    SHORT           reduce using rule 325 (expr_44 -> empty .)
    INT             reduce using rule 325 (expr_44 -> empty .)
    LONG            reduce using rule 325 (expr_44 -> empty .)
    FLOAT           reduce using rule 325 (expr_44 -> empty .)
    DOUBLE          reduce using rule 325 (expr_44 -> empty .)



state 639

    (270) expr_21 -> expr_21 COMMA . enumConstant
    (20) enumConstant -> . expr_22 IDENTIFIER expr_23 expr_24
    (272) expr_22 -> . annotations
    (273) expr_22 -> . empty
    (70) annotations -> . expr_66
    (547) empty -> .
    (378) expr_66 -> . annotation
    (379) expr_66 -> . expr_66 annotation
    (71) annotation -> . AT qualifiedName expr_68

    IDENTIFIER      reduce using rule 547 (empty -> .)
    AT              shift and go to state 4


    enumConstant                   shift and go to state 704
    expr_66                        shift and go to state 2
    annotation                     shift and go to state 6
    annotations                    shift and go to state 509
    expr_22                        shift and go to state 513
    empty                          shift and go to state 641

state 640

    (269) expr_21 -> COMMA enumConstant .

    COMMA           reduce using rule 269 (expr_21 -> COMMA enumConstant .)
    SEMI            reduce using rule 269 (expr_21 -> COMMA enumConstant .)
    BRPAREN         reduce using rule 269 (expr_21 -> COMMA enumConstant .)



state 641

    (273) expr_22 -> empty .

    IDENTIFIER      reduce using rule 273 (expr_22 -> empty .)



state 642

    (21) enumBodyDeclarations -> SEMI . expr_25
    (278) expr_25 -> . classBodyDeclaration
    (279) expr_25 -> . expr_25 classBodyDeclaration
    (280) expr_25 -> . empty
    (28) classBodyDeclaration -> . SEMI
    (29) classBodyDeclaration -> . expr_31 block
    (30) classBodyDeclaration -> . memberDecl
    (547) empty -> .
    (294) expr_31 -> . STATIC
    (295) expr_31 -> . empty
    (31) memberDecl -> . fieldDeclaration
    (32) memberDecl -> . methodDeclaration
    (33) memberDecl -> . classDeclaration
    (34) memberDecl -> . interfaceDeclaration
    (37) fieldDeclaration -> . modifiers type variableDeclarator expr_41 SEMI
    (35) methodDeclaration -> . modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (36) methodDeclaration -> . modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (9) modifiers -> . expr_8
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    SEMI            shift and go to state 456
    BLPAREN         reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    STATIC          shift and go to state 454
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4

  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]

    memberDecl                     shift and go to state 462
    methodDeclaration              shift and go to state 455
    normalClassDeclaration         shift and go to state 37
    expr_25                        shift and go to state 705
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 706
    enumDeclaration                shift and go to state 45
    expr_31                        shift and go to state 458
    classBodyDeclaration           shift and go to state 707
    fieldDeclaration               shift and go to state 460
    modifiers                      shift and go to state 461
    normalInterfaceDeclaration     shift and go to state 34
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 463
    classDeclaration               shift and go to state 464

state 643

    (267) expr_20 -> enumBodyDeclarations .

    BRPAREN         reduce using rule 267 (expr_20 -> enumBodyDeclarations .)



state 644

    (18) enumBody -> BLPAREN expr_18 expr_19 expr_20 . BRPAREN

    BRPAREN         shift and go to state 708



state 645

    (268) expr_20 -> empty .

    BRPAREN         reduce using rule 268 (expr_20 -> empty .)



state 646

    (274) expr_23 -> arguments .

    BLPAREN         reduce using rule 274 (expr_23 -> arguments .)
    COMMA           reduce using rule 274 (expr_23 -> arguments .)
    SEMI            reduce using rule 274 (expr_23 -> arguments .)
    BRPAREN         reduce using rule 274 (expr_23 -> arguments .)



state 647

    (20) enumConstant -> expr_22 IDENTIFIER expr_23 . expr_24
    (276) expr_24 -> . classBody
    (277) expr_24 -> . empty
    (26) classBody -> . BLPAREN expr_29 BRPAREN
    (547) empty -> .

    BLPAREN         shift and go to state 392
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)


    classBody                      shift and go to state 709
    expr_24                        shift and go to state 710
    empty                          shift and go to state 711

state 648

    (275) expr_23 -> empty .

    BLPAREN         reduce using rule 275 (expr_23 -> empty .)
    COMMA           reduce using rule 275 (expr_23 -> empty .)
    SEMI            reduce using rule 275 (expr_23 -> empty .)
    BRPAREN         reduce using rule 275 (expr_23 -> empty .)



state 649

    (412) expr_81 -> expression .

    SEMI            reduce using rule 412 (expr_81 -> expression .)



state 650

    (104) statement -> RETURN expr_81 . SEMI

    SEMI            shift and go to state 712



state 651

    (413) expr_81 -> empty .

    SEMI            reduce using rule 413 (expr_81 -> empty .)



state 652

    (103) statement -> SYNCHRONIZED parExpression . block
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 713

state 653

    (123) parExpression -> LPAREN . expression RPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 215

state 654

    (119) forstatement -> FOR LPAREN . variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> FOR LPAREN . expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (10) variableModifiers -> . expr_9
    (433) expr_89 -> . forInit
    (434) expr_89 -> . empty
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (121) forInit -> . localVariableDeclaration
    (122) forInit -> . expressionList
    (547) empty -> .
    (71) annotation -> . AT qualifiedName expr_68
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (124) expressionList -> . expression expr_92
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    FINAL           shift and go to state 715
    SEMI            reduce using rule 547 (empty -> .)
    AT              shift and go to state 4
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 716
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    unaryExpression                shift and go to state 108
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    castExpression                 shift and go to state 114
    literal                        shift and go to state 89
    expr_89                        shift and go to state 717
    expressionList                 shift and go to state 718
    expr_9                         shift and go to state 603
    empty                          shift and go to state 719
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    forInit                        shift and go to state 714
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 720
    unaryExpressionNotPlusMinus    shift and go to state 76
    variableModifiers              shift and go to state 721
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 332

state 655

    (95) statement -> expr_77 expression . expr_78 SEMI
    (406) expr_78 -> . COLON expression
    (407) expr_78 -> . empty
    (547) empty -> .

    COLON           shift and go to state 723
    SEMI            reduce using rule 547 (empty -> .)


    expr_78                        shift and go to state 722
    empty                          shift and go to state 724

state 656

    (400) expr_75 -> expr_75 blockStatement .

    BRPAREN         reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    ASSERT          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    IF              reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    WHILE           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    DO              reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    SWITCH          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    SYNCHRONIZED    reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    RETURN          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    THROW           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    BREAK           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    CONTINUE        reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    IDENTIFIER      reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    SEMI            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    BLPAREN         reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    FOR             reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    TRY             reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    FINAL           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    AT              reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    PUBLIC          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    PROTECTED       reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    PRIVATE         reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    STATIC          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    ABSTRACT        reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NATIVE          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    TRANSIENT       reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    VOLATILE        reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    STRICTFP        reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    PLUS            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    DASH            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    OP_INC          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    OP_DEC          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    TILDE           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    EXCLAMATION     reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    LPAREN          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    THIS            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    SUPER           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    VOID            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    CHARLITERAL     reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    STRINGLITERAL   reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    TRUE            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    FALSE           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NULL            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NEW             reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    BOOLEAN         reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    CHAR            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    BYTE            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    SHORT           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    INT             reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    LONG            reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    FLOAT           reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    DOUBLE          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NUMBER          reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    HEX_NUMBER      reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    LONG_NUMBER     reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    LONG_HEX_NUMBER reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NON_INTEGER_1   reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NON_INTEGER_2   reduce using rule 400 (expr_75 -> expr_75 blockStatement .)
    NON_INTEGER_3   reduce using rule 400 (expr_75 -> expr_75 blockStatement .)



state 657

    (88) block -> BLPAREN expr_75 BRPAREN .

    BRPAREN         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    ASSERT          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    IF              reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    WHILE           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    DO              reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    SWITCH          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    SYNCHRONIZED    reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    RETURN          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    THROW           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    BREAK           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    CONTINUE        reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    IDENTIFIER      reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    SEMI            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    BLPAREN         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    FOR             reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    TRY             reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    FINAL           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    AT              reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    PUBLIC          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    PROTECTED       reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    PRIVATE         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    STATIC          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    ABSTRACT        reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NATIVE          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    TRANSIENT       reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    VOLATILE        reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    STRICTFP        reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    PLUS            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    DASH            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    OP_INC          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    OP_DEC          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    TILDE           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    EXCLAMATION     reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    LPAREN          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    THIS            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    SUPER           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    VOID            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    CHARLITERAL     reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    STRINGLITERAL   reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    TRUE            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    FALSE           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NULL            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NEW             reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    BOOLEAN         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    CHAR            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    BYTE            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    SHORT           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    INT             reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    LONG            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    FLOAT           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    DOUBLE          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NUMBER          reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    HEX_NUMBER      reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    LONG_NUMBER     reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NON_INTEGER_1   reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NON_INTEGER_2   reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    NON_INTEGER_3   reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    ELSE            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    CASE            reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    DEFAULT         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    FINALLY         reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)
    CATCH           reduce using rule 88 (block -> BLPAREN expr_75 BRPAREN .)



state 658

    (115) trystatement -> TRY block . expr_86
    (424) expr_86 -> . catches FINALLY block
    (425) expr_86 -> . catches
    (426) expr_86 -> . FINALLY block
    (116) catches -> . catchClause expr_87
    (117) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         shift and go to state 728
    CATCH           shift and go to state 729


    expr_86                        shift and go to state 725
    catches                        shift and go to state 726
    catchClause                    shift and go to state 727

state 659

    (416) expr_83 -> IDENTIFIER .

    SEMI            reduce using rule 416 (expr_83 -> IDENTIFIER .)



state 660

    (107) statement -> CONTINUE expr_83 . SEMI

    SEMI            shift and go to state 730



state 661

    (417) expr_83 -> empty .

    SEMI            reduce using rule 417 (expr_83 -> empty .)



state 662

    (108) statement -> expression SEMI .

    BRPAREN         reduce using rule 108 (statement -> expression SEMI .)
    ASSERT          reduce using rule 108 (statement -> expression SEMI .)
    IF              reduce using rule 108 (statement -> expression SEMI .)
    WHILE           reduce using rule 108 (statement -> expression SEMI .)
    DO              reduce using rule 108 (statement -> expression SEMI .)
    SWITCH          reduce using rule 108 (statement -> expression SEMI .)
    SYNCHRONIZED    reduce using rule 108 (statement -> expression SEMI .)
    RETURN          reduce using rule 108 (statement -> expression SEMI .)
    THROW           reduce using rule 108 (statement -> expression SEMI .)
    BREAK           reduce using rule 108 (statement -> expression SEMI .)
    CONTINUE        reduce using rule 108 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 108 (statement -> expression SEMI .)
    SEMI            reduce using rule 108 (statement -> expression SEMI .)
    BLPAREN         reduce using rule 108 (statement -> expression SEMI .)
    FOR             reduce using rule 108 (statement -> expression SEMI .)
    TRY             reduce using rule 108 (statement -> expression SEMI .)
    FINAL           reduce using rule 108 (statement -> expression SEMI .)
    AT              reduce using rule 108 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 108 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 108 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 108 (statement -> expression SEMI .)
    STATIC          reduce using rule 108 (statement -> expression SEMI .)
    ABSTRACT        reduce using rule 108 (statement -> expression SEMI .)
    NATIVE          reduce using rule 108 (statement -> expression SEMI .)
    TRANSIENT       reduce using rule 108 (statement -> expression SEMI .)
    VOLATILE        reduce using rule 108 (statement -> expression SEMI .)
    STRICTFP        reduce using rule 108 (statement -> expression SEMI .)
    PLUS            reduce using rule 108 (statement -> expression SEMI .)
    DASH            reduce using rule 108 (statement -> expression SEMI .)
    OP_INC          reduce using rule 108 (statement -> expression SEMI .)
    OP_DEC          reduce using rule 108 (statement -> expression SEMI .)
    TILDE           reduce using rule 108 (statement -> expression SEMI .)
    EXCLAMATION     reduce using rule 108 (statement -> expression SEMI .)
    LPAREN          reduce using rule 108 (statement -> expression SEMI .)
    THIS            reduce using rule 108 (statement -> expression SEMI .)
    SUPER           reduce using rule 108 (statement -> expression SEMI .)
    VOID            reduce using rule 108 (statement -> expression SEMI .)
    CHARLITERAL     reduce using rule 108 (statement -> expression SEMI .)
    STRINGLITERAL   reduce using rule 108 (statement -> expression SEMI .)
    TRUE            reduce using rule 108 (statement -> expression SEMI .)
    FALSE           reduce using rule 108 (statement -> expression SEMI .)
    NULL            reduce using rule 108 (statement -> expression SEMI .)
    NEW             reduce using rule 108 (statement -> expression SEMI .)
    BOOLEAN         reduce using rule 108 (statement -> expression SEMI .)
    CHAR            reduce using rule 108 (statement -> expression SEMI .)
    BYTE            reduce using rule 108 (statement -> expression SEMI .)
    SHORT           reduce using rule 108 (statement -> expression SEMI .)
    INT             reduce using rule 108 (statement -> expression SEMI .)
    LONG            reduce using rule 108 (statement -> expression SEMI .)
    FLOAT           reduce using rule 108 (statement -> expression SEMI .)
    DOUBLE          reduce using rule 108 (statement -> expression SEMI .)
    NUMBER          reduce using rule 108 (statement -> expression SEMI .)
    HEX_NUMBER      reduce using rule 108 (statement -> expression SEMI .)
    LONG_NUMBER     reduce using rule 108 (statement -> expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 108 (statement -> expression SEMI .)
    NON_INTEGER_1   reduce using rule 108 (statement -> expression SEMI .)
    NON_INTEGER_2   reduce using rule 108 (statement -> expression SEMI .)
    NON_INTEGER_3   reduce using rule 108 (statement -> expression SEMI .)
    ELSE            reduce using rule 108 (statement -> expression SEMI .)
    CASE            reduce using rule 108 (statement -> expression SEMI .)
    DEFAULT         reduce using rule 108 (statement -> expression SEMI .)



state 663

    (92) localVariableDeclarationStatement -> localVariableDeclaration SEMI .

    BRPAREN         reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ASSERT          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    IF              reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    WHILE           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DO              reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SWITCH          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SYNCHRONIZED    reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    RETURN          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THROW           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BREAK           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CONTINUE        reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    IDENTIFIER      reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SEMI            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BLPAREN         reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FOR             reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRY             reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FINAL           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    AT              reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PUBLIC          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PROTECTED       reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PRIVATE         reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STATIC          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    ABSTRACT        reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NATIVE          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRANSIENT       reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    VOLATILE        reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STRICTFP        reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    PLUS            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DASH            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_INC          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    OP_DEC          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TILDE           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    EXCLAMATION     reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LPAREN          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    THIS            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SUPER           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    VOID            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CHARLITERAL     reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    STRINGLITERAL   reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    TRUE            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FALSE           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NULL            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NEW             reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BOOLEAN         reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CHAR            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    BYTE            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    SHORT           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    INT             reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    FLOAT           reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DOUBLE          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NUMBER          reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    HEX_NUMBER      reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_NUMBER     reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    LONG_HEX_NUMBER reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_1   reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_2   reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    NON_INTEGER_3   reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    CASE            reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)
    DEFAULT         reduce using rule 92 (localVariableDeclarationStatement -> localVariableDeclaration SEMI .)



state 664

    (99) statement -> WHILE parExpression . statement
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 731
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 665

    (102) statement -> SWITCH parExpression . BLPAREN switchBlockStatementGroups BRPAREN

    BLPAREN         shift and go to state 732



state 666

    (109) statement -> IDENTIFIER COLON . statement
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 733
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 667

    (415) expr_82 -> empty .

    SEMI            reduce using rule 415 (expr_82 -> empty .)



state 668

    (414) expr_82 -> IDENTIFIER .

    SEMI            reduce using rule 414 (expr_82 -> IDENTIFIER .)



state 669

    (106) statement -> BREAK expr_82 . SEMI

    SEMI            shift and go to state 734



state 670

    (103) statement -> SYNCHRONIZED . parExpression block
    (123) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 652

state 671

    (100) statement -> DO statement . WHILE parExpression SEMI

    WHILE           shift and go to state 735



state 672

    (96) statement -> ASSERT expression . expr_79 SEMI
    (408) expr_79 -> . COLON expression
    (409) expr_79 -> . empty
    (547) empty -> .

    COLON           shift and go to state 737
    SEMI            reduce using rule 547 (empty -> .)


    expr_79                        shift and go to state 736
    empty                          shift and go to state 738

state 673

    (97) statement -> IF parExpression . statement expr_80
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 739
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 674

    (93) localVariableDeclaration -> variableModifiers type . variableDeclarator expr_76
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 740

state 675

    (105) statement -> THROW expression . SEMI

    SEMI            shift and go to state 741



state 676

    (38) variableDeclarator -> IDENTIFIER expr_42 . expr_43
    (320) expr_42 -> expr_42 . FLPAREN FRPAREN
    (322) expr_43 -> . EQUALS variableInitializer
    (323) expr_43 -> . empty
    (547) empty -> .

    FLPAREN         shift and go to state 744
    EQUALS          shift and go to state 743
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)


    expr_43                        shift and go to state 742
    empty                          shift and go to state 745

state 677

    (319) expr_42 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 746



state 678

    (321) expr_42 -> empty .

    FLPAREN         reduce using rule 321 (expr_42 -> empty .)
    EQUALS          reduce using rule 321 (expr_42 -> empty .)
    COMMA           reduce using rule 321 (expr_42 -> empty .)
    SEMI            reduce using rule 321 (expr_42 -> empty .)



state 679

    (37) fieldDeclaration -> modifiers type variableDeclarator expr_41 . SEMI
    (317) expr_41 -> expr_41 . COMMA variableDeclarator

    SEMI            shift and go to state 747
    COMMA           shift and go to state 748



state 680

    (316) expr_41 -> COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 749

state 681

    (318) expr_41 -> empty .

    SEMI            reduce using rule 318 (expr_41 -> empty .)
    COMMA           reduce using rule 318 (expr_41 -> empty .)



state 682

    (36) methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER . formalParameters expr_38 expr_39 expr_40
    (61) formalParameters -> . LPAREN expr_58 RPAREN

    LPAREN          shift and go to state 684


    formalParameters               shift and go to state 750

state 683

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters . expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (298) expr_33 -> . THROWS qualifiedNameList
    (299) expr_33 -> . empty
    (547) empty -> .

    THROWS          shift and go to state 752
    BLPAREN         reduce using rule 547 (empty -> .)


    expr_33                        shift and go to state 751
    empty                          shift and go to state 753

state 684

    (61) formalParameters -> LPAREN . expr_58 RPAREN
    (359) expr_58 -> . formalParameterDecls
    (360) expr_58 -> . empty
    (62) formalParameterDecls -> . ellipsisParameterDecl
    (63) formalParameterDecls -> . normalParameterDecl expr_59
    (64) formalParameterDecls -> . expr_60 ellipsisParameterDecl
    (547) empty -> .
    (66) ellipsisParameterDecl -> . variableModifiers type OP_ARRAY IDENTIFIER
    (65) normalParameterDecl -> . variableModifiers type IDENTIFIER expr_61
    (364) expr_60 -> . normalParameterDecl COMMA
    (365) expr_60 -> . expr_60 normalParameterDecl COMMA
    (10) variableModifiers -> . expr_9
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (71) annotation -> . AT qualifiedName expr_68

    RPAREN          reduce using rule 547 (empty -> .)
    FINAL           shift and go to state 715
    AT              shift and go to state 4


    ellipsisParameterDecl          shift and go to state 754
    expr_58                        shift and go to state 755
    variableModifiers              shift and go to state 756
    formalParameterDecls           shift and go to state 757
    expr_60                        shift and go to state 758
    normalParameterDecl            shift and go to state 759
    expr_9                         shift and go to state 603
    annotation                     shift and go to state 720
    empty                          shift and go to state 760

state 685

    (525) expr_125 -> variableInitializer expr_124 .
    (523) expr_124 -> expr_124 . COMMA variableInitializer

  ! shift/reduce conflict for COMMA resolved as shift.
    BRPAREN         reduce using rule 525 (expr_125 -> variableInitializer expr_124 .)
    COMMA           shift and go to state 761

  ! COMMA           [ reduce using rule 525 (expr_125 -> variableInitializer expr_124 .) ]


state 686

    (522) expr_124 -> COMMA . variableInitializer
    (196) variableInitializer -> . arrayInitializer
    (197) variableInitializer -> . expression
    (198) arrayInitializer -> . BLPAREN expr_125 expr_126 BRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BLPAREN         shift and go to state 546
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    arrayInitializer               shift and go to state 621
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    variableInitializer            shift and go to state 762
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 620

state 687

    (524) expr_124 -> empty .

    COMMA           reduce using rule 524 (expr_124 -> empty .)
    BRPAREN         reduce using rule 524 (expr_124 -> empty .)



state 688

    (527) expr_126 -> COMMA .

    BRPAREN         reduce using rule 527 (expr_126 -> COMMA .)



state 689

    (198) arrayInitializer -> BLPAREN expr_125 expr_126 . BRPAREN

    BRPAREN         shift and go to state 763



state 690

    (528) expr_126 -> empty .

    BRPAREN         reduce using rule 528 (expr_126 -> empty .)



state 691

    (516) expr_122 -> FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 516 (expr_122 -> FLPAREN expression FRPAREN .)
    DOT             reduce using rule 516 (expr_122 -> FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 516 (expr_122 -> FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 516 (expr_122 -> FLPAREN expression FRPAREN .)



state 692

    (519) expr_123 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 519 (expr_123 -> FLPAREN FRPAREN .)
    DOT             reduce using rule 519 (expr_123 -> FLPAREN FRPAREN .)
    OP_INC          reduce using rule 519 (expr_123 -> FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 519 (expr_123 -> FLPAREN FRPAREN .)



state 693

    (517) expr_122 -> expr_122 FLPAREN expression . FRPAREN

    FRPAREN         shift and go to state 764



state 694

    (520) expr_123 -> expr_123 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 765



state 695

    (87) annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN . RPAREN expr_74 SEMI

    RPAREN          shift and go to state 766



state 696

    (45) interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 . SEMI
    (334) expr_48 -> expr_48 . COMMA variableDeclarator

    SEMI            shift and go to state 767
    COMMA           shift and go to state 768



state 697

    (333) expr_48 -> COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 769

state 698

    (335) expr_48 -> empty .

    SEMI            reduce using rule 335 (expr_48 -> empty .)
    COMMA           reduce using rule 335 (expr_48 -> empty .)



state 699

    (257) expr_15 -> AND type .

    AND             reduce using rule 257 (expr_15 -> AND type .)
    COMMA           reduce using rule 257 (expr_15 -> AND type .)
    MORE            reduce using rule 257 (expr_15 -> AND type .)



state 700

    (258) expr_15 -> expr_15 AND . type
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 770

state 701

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 . IDENTIFIER formalParameters expr_46 expr_47 SEMI

    IDENTIFIER      shift and go to state 771



state 702

    (327) expr_45 -> VOID .

    IDENTIFIER      reduce using rule 327 (expr_45 -> VOID .)



state 703

    (326) expr_45 -> type .

    IDENTIFIER      reduce using rule 326 (expr_45 -> type .)



state 704

    (270) expr_21 -> expr_21 COMMA enumConstant .

    COMMA           reduce using rule 270 (expr_21 -> expr_21 COMMA enumConstant .)
    SEMI            reduce using rule 270 (expr_21 -> expr_21 COMMA enumConstant .)
    BRPAREN         reduce using rule 270 (expr_21 -> expr_21 COMMA enumConstant .)



state 705

    (21) enumBodyDeclarations -> SEMI expr_25 .
    (279) expr_25 -> expr_25 . classBodyDeclaration
    (28) classBodyDeclaration -> . SEMI
    (29) classBodyDeclaration -> . expr_31 block
    (30) classBodyDeclaration -> . memberDecl
    (294) expr_31 -> . STATIC
    (295) expr_31 -> . empty
    (31) memberDecl -> . fieldDeclaration
    (32) memberDecl -> . methodDeclaration
    (33) memberDecl -> . classDeclaration
    (34) memberDecl -> . interfaceDeclaration
    (547) empty -> .
    (37) fieldDeclaration -> . modifiers type variableDeclarator expr_41 SEMI
    (35) methodDeclaration -> . modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN
    (36) methodDeclaration -> . modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (9) modifiers -> . expr_8
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (71) annotation -> . AT qualifiedName expr_68

    BRPAREN         reduce using rule 21 (enumBodyDeclarations -> SEMI expr_25 .)
    SEMI            shift and go to state 456
    STATIC          shift and go to state 454
    BLPAREN         reduce using rule 547 (empty -> .)
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    ABSTRACT        shift and go to state 31
    FINAL           shift and go to state 35
    NATIVE          shift and go to state 47
    SYNCHRONIZED    shift and go to state 29
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    AT              shift and go to state 4


    memberDecl                     shift and go to state 462
    methodDeclaration              shift and go to state 455
    normalClassDeclaration         shift and go to state 37
    annotation                     shift and go to state 39
    expr_8                         shift and go to state 42
    empty                          shift and go to state 525
    enumDeclaration                shift and go to state 45
    expr_31                        shift and go to state 458
    classBodyDeclaration           shift and go to state 772
    fieldDeclaration               shift and go to state 460
    modifiers                      shift and go to state 461
    normalInterfaceDeclaration     shift and go to state 34
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 463
    classDeclaration               shift and go to state 464

state 706

    (280) expr_25 -> empty .
    (295) expr_31 -> empty .

  ! reduce/reduce conflict for BLPAREN resolved using rule 280 (expr_25 -> empty .).
    SEMI            reduce using rule 280 (expr_25 -> empty .)
    STATIC          reduce using rule 280 (expr_25 -> empty .)
    PUBLIC          reduce using rule 280 (expr_25 -> empty .)
    PROTECTED       reduce using rule 280 (expr_25 -> empty .)
    PRIVATE         reduce using rule 280 (expr_25 -> empty .)
    ABSTRACT        reduce using rule 280 (expr_25 -> empty .)
    FINAL           reduce using rule 280 (expr_25 -> empty .)
    NATIVE          reduce using rule 280 (expr_25 -> empty .)
    SYNCHRONIZED    reduce using rule 280 (expr_25 -> empty .)
    TRANSIENT       reduce using rule 280 (expr_25 -> empty .)
    VOLATILE        reduce using rule 280 (expr_25 -> empty .)
    STRICTFP        reduce using rule 280 (expr_25 -> empty .)
    AT              reduce using rule 280 (expr_25 -> empty .)
    BLPAREN         reduce using rule 280 (expr_25 -> empty .)
    BRPAREN         reduce using rule 280 (expr_25 -> empty .)

  ! BLPAREN         [ reduce using rule 295 (expr_31 -> empty .) ]


state 707

    (278) expr_25 -> classBodyDeclaration .

    SEMI            reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    STATIC          reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    PUBLIC          reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    PROTECTED       reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    PRIVATE         reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    ABSTRACT        reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    FINAL           reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    NATIVE          reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    TRANSIENT       reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    VOLATILE        reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    STRICTFP        reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    AT              reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    BLPAREN         reduce using rule 278 (expr_25 -> classBodyDeclaration .)
    BRPAREN         reduce using rule 278 (expr_25 -> classBodyDeclaration .)



state 708

    (18) enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .

    SEMI            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    PUBLIC          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    PROTECTED       reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    PRIVATE         reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    STATIC          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    ABSTRACT        reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    FINAL           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NATIVE          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    SYNCHRONIZED    reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    TRANSIENT       reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    VOLATILE        reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    STRICTFP        reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    AT              reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    $end            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    BRPAREN         reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    BLPAREN         reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    ASSERT          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    IF              reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    WHILE           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    DO              reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    SWITCH          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    RETURN          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    THROW           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    BREAK           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    CONTINUE        reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    IDENTIFIER      reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    FOR             reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    TRY             reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    PLUS            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    DASH            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    OP_INC          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    OP_DEC          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    TILDE           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    EXCLAMATION     reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    LPAREN          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    THIS            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    SUPER           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    VOID            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    CHARLITERAL     reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    STRINGLITERAL   reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    TRUE            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    FALSE           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NULL            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NEW             reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    BOOLEAN         reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    CHAR            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    BYTE            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    SHORT           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    INT             reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    LONG            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    FLOAT           reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    DOUBLE          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NUMBER          reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    HEX_NUMBER      reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    LONG_NUMBER     reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NON_INTEGER_1   reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NON_INTEGER_2   reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    NON_INTEGER_3   reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    CASE            reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)
    DEFAULT         reduce using rule 18 (enumBody -> BLPAREN expr_18 expr_19 expr_20 BRPAREN .)



state 709

    (276) expr_24 -> classBody .

    COMMA           reduce using rule 276 (expr_24 -> classBody .)
    SEMI            reduce using rule 276 (expr_24 -> classBody .)
    BRPAREN         reduce using rule 276 (expr_24 -> classBody .)



state 710

    (20) enumConstant -> expr_22 IDENTIFIER expr_23 expr_24 .

    COMMA           reduce using rule 20 (enumConstant -> expr_22 IDENTIFIER expr_23 expr_24 .)
    SEMI            reduce using rule 20 (enumConstant -> expr_22 IDENTIFIER expr_23 expr_24 .)
    BRPAREN         reduce using rule 20 (enumConstant -> expr_22 IDENTIFIER expr_23 expr_24 .)



state 711

    (277) expr_24 -> empty .

    COMMA           reduce using rule 277 (expr_24 -> empty .)
    SEMI            reduce using rule 277 (expr_24 -> empty .)
    BRPAREN         reduce using rule 277 (expr_24 -> empty .)



state 712

    (104) statement -> RETURN expr_81 SEMI .

    BRPAREN         reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    ASSERT          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    IF              reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    WHILE           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    DO              reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    SWITCH          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    SYNCHRONIZED    reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    RETURN          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    THROW           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    BREAK           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    CONTINUE        reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    IDENTIFIER      reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    SEMI            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    BLPAREN         reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    FOR             reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    TRY             reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    FINAL           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    AT              reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    PUBLIC          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    PROTECTED       reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    PRIVATE         reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    STATIC          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    ABSTRACT        reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NATIVE          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    TRANSIENT       reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    VOLATILE        reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    STRICTFP        reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    PLUS            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    DASH            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    OP_INC          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    OP_DEC          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    TILDE           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    EXCLAMATION     reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    LPAREN          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    THIS            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    SUPER           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    VOID            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    CHARLITERAL     reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    STRINGLITERAL   reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    TRUE            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    FALSE           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NULL            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NEW             reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    BOOLEAN         reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    CHAR            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    BYTE            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    SHORT           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    INT             reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    LONG            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    FLOAT           reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    DOUBLE          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NUMBER          reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    HEX_NUMBER      reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    LONG_NUMBER     reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    LONG_HEX_NUMBER reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NON_INTEGER_1   reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NON_INTEGER_2   reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    NON_INTEGER_3   reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    ELSE            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    CASE            reduce using rule 104 (statement -> RETURN expr_81 SEMI .)
    DEFAULT         reduce using rule 104 (statement -> RETURN expr_81 SEMI .)



state 713

    (103) statement -> SYNCHRONIZED parExpression block .

    BRPAREN         reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    ASSERT          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    IF              reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    WHILE           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    DO              reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    SWITCH          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    SYNCHRONIZED    reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    RETURN          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    THROW           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    BREAK           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    CONTINUE        reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    IDENTIFIER      reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    SEMI            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    BLPAREN         reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    FOR             reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    TRY             reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    FINAL           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    AT              reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    PUBLIC          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    PROTECTED       reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    PRIVATE         reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    STATIC          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    ABSTRACT        reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NATIVE          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    TRANSIENT       reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    VOLATILE        reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    STRICTFP        reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    PLUS            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    DASH            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    OP_INC          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    OP_DEC          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    TILDE           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    EXCLAMATION     reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    LPAREN          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    THIS            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    SUPER           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    VOID            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    CHARLITERAL     reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    STRINGLITERAL   reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    TRUE            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    FALSE           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NULL            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NEW             reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    BOOLEAN         reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    CHAR            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    BYTE            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    SHORT           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    INT             reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    LONG            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    FLOAT           reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    DOUBLE          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NUMBER          reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    HEX_NUMBER      reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    LONG_NUMBER     reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    LONG_HEX_NUMBER reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_1   reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_2   reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    NON_INTEGER_3   reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    ELSE            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    CASE            reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)
    DEFAULT         reduce using rule 103 (statement -> SYNCHRONIZED parExpression block .)



state 714

    (433) expr_89 -> forInit .

    SEMI            reduce using rule 433 (expr_89 -> forInit .)



state 715

    (244) expr_9 -> FINAL .

    IDENTIFIER      reduce using rule 244 (expr_9 -> FINAL .)
    BOOLEAN         reduce using rule 244 (expr_9 -> FINAL .)
    CHAR            reduce using rule 244 (expr_9 -> FINAL .)
    BYTE            reduce using rule 244 (expr_9 -> FINAL .)
    SHORT           reduce using rule 244 (expr_9 -> FINAL .)
    INT             reduce using rule 244 (expr_9 -> FINAL .)
    LONG            reduce using rule 244 (expr_9 -> FINAL .)
    FLOAT           reduce using rule 244 (expr_9 -> FINAL .)
    DOUBLE          reduce using rule 244 (expr_9 -> FINAL .)



state 716

    (121) forInit -> localVariableDeclaration .

    SEMI            reduce using rule 121 (forInit -> localVariableDeclaration .)



state 717

    (120) forstatement -> FOR LPAREN expr_89 . SEMI expr_90 SEMI expr_91 RPAREN statement

    SEMI            shift and go to state 773



state 718

    (122) forInit -> expressionList .

    SEMI            reduce using rule 122 (forInit -> expressionList .)



state 719

    (434) expr_89 -> empty .

    SEMI            reduce using rule 434 (expr_89 -> empty .)



state 720

    (245) expr_9 -> annotation .

    IDENTIFIER      reduce using rule 245 (expr_9 -> annotation .)
    BOOLEAN         reduce using rule 245 (expr_9 -> annotation .)
    CHAR            reduce using rule 245 (expr_9 -> annotation .)
    BYTE            reduce using rule 245 (expr_9 -> annotation .)
    SHORT           reduce using rule 245 (expr_9 -> annotation .)
    INT             reduce using rule 245 (expr_9 -> annotation .)
    LONG            reduce using rule 245 (expr_9 -> annotation .)
    FLOAT           reduce using rule 245 (expr_9 -> annotation .)
    DOUBLE          reduce using rule 245 (expr_9 -> annotation .)



state 721

    (119) forstatement -> FOR LPAREN variableModifiers . type IDENTIFIER COLON expression RPAREN statement
    (93) localVariableDeclaration -> variableModifiers . type variableDeclarator expr_76
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    type                           shift and go to state 774
    primitiveType                  shift and go to state 238
    classOrInterfaceType           shift and go to state 214

state 722

    (95) statement -> expr_77 expression expr_78 . SEMI

    SEMI            shift and go to state 775



state 723

    (406) expr_78 -> COLON . expression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 776

state 724

    (407) expr_78 -> empty .

    SEMI            reduce using rule 407 (expr_78 -> empty .)



state 725

    (115) trystatement -> TRY block expr_86 .

    ASSERT          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    IF              reduce using rule 115 (trystatement -> TRY block expr_86 .)
    WHILE           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    DO              reduce using rule 115 (trystatement -> TRY block expr_86 .)
    SWITCH          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    SYNCHRONIZED    reduce using rule 115 (trystatement -> TRY block expr_86 .)
    RETURN          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    THROW           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    BREAK           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    CONTINUE        reduce using rule 115 (trystatement -> TRY block expr_86 .)
    IDENTIFIER      reduce using rule 115 (trystatement -> TRY block expr_86 .)
    SEMI            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    BLPAREN         reduce using rule 115 (trystatement -> TRY block expr_86 .)
    FOR             reduce using rule 115 (trystatement -> TRY block expr_86 .)
    TRY             reduce using rule 115 (trystatement -> TRY block expr_86 .)
    FINAL           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    AT              reduce using rule 115 (trystatement -> TRY block expr_86 .)
    PUBLIC          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    PROTECTED       reduce using rule 115 (trystatement -> TRY block expr_86 .)
    PRIVATE         reduce using rule 115 (trystatement -> TRY block expr_86 .)
    STATIC          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    ABSTRACT        reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NATIVE          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    TRANSIENT       reduce using rule 115 (trystatement -> TRY block expr_86 .)
    VOLATILE        reduce using rule 115 (trystatement -> TRY block expr_86 .)
    STRICTFP        reduce using rule 115 (trystatement -> TRY block expr_86 .)
    PLUS            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    DASH            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    OP_INC          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    OP_DEC          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    TILDE           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    EXCLAMATION     reduce using rule 115 (trystatement -> TRY block expr_86 .)
    LPAREN          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    THIS            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    SUPER           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    VOID            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    CHARLITERAL     reduce using rule 115 (trystatement -> TRY block expr_86 .)
    STRINGLITERAL   reduce using rule 115 (trystatement -> TRY block expr_86 .)
    TRUE            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    FALSE           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NULL            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NEW             reduce using rule 115 (trystatement -> TRY block expr_86 .)
    BOOLEAN         reduce using rule 115 (trystatement -> TRY block expr_86 .)
    CHAR            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    BYTE            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    SHORT           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    INT             reduce using rule 115 (trystatement -> TRY block expr_86 .)
    LONG            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    FLOAT           reduce using rule 115 (trystatement -> TRY block expr_86 .)
    DOUBLE          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NUMBER          reduce using rule 115 (trystatement -> TRY block expr_86 .)
    HEX_NUMBER      reduce using rule 115 (trystatement -> TRY block expr_86 .)
    LONG_NUMBER     reduce using rule 115 (trystatement -> TRY block expr_86 .)
    LONG_HEX_NUMBER reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NON_INTEGER_1   reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NON_INTEGER_2   reduce using rule 115 (trystatement -> TRY block expr_86 .)
    NON_INTEGER_3   reduce using rule 115 (trystatement -> TRY block expr_86 .)
    CASE            reduce using rule 115 (trystatement -> TRY block expr_86 .)
    DEFAULT         reduce using rule 115 (trystatement -> TRY block expr_86 .)
    BRPAREN         reduce using rule 115 (trystatement -> TRY block expr_86 .)
    ELSE            reduce using rule 115 (trystatement -> TRY block expr_86 .)



state 726

    (424) expr_86 -> catches . FINALLY block
    (425) expr_86 -> catches .

    FINALLY         shift and go to state 777
    BRPAREN         reduce using rule 425 (expr_86 -> catches .)
    ASSERT          reduce using rule 425 (expr_86 -> catches .)
    IF              reduce using rule 425 (expr_86 -> catches .)
    WHILE           reduce using rule 425 (expr_86 -> catches .)
    DO              reduce using rule 425 (expr_86 -> catches .)
    SWITCH          reduce using rule 425 (expr_86 -> catches .)
    SYNCHRONIZED    reduce using rule 425 (expr_86 -> catches .)
    RETURN          reduce using rule 425 (expr_86 -> catches .)
    THROW           reduce using rule 425 (expr_86 -> catches .)
    BREAK           reduce using rule 425 (expr_86 -> catches .)
    CONTINUE        reduce using rule 425 (expr_86 -> catches .)
    IDENTIFIER      reduce using rule 425 (expr_86 -> catches .)
    SEMI            reduce using rule 425 (expr_86 -> catches .)
    BLPAREN         reduce using rule 425 (expr_86 -> catches .)
    FOR             reduce using rule 425 (expr_86 -> catches .)
    TRY             reduce using rule 425 (expr_86 -> catches .)
    FINAL           reduce using rule 425 (expr_86 -> catches .)
    AT              reduce using rule 425 (expr_86 -> catches .)
    PUBLIC          reduce using rule 425 (expr_86 -> catches .)
    PROTECTED       reduce using rule 425 (expr_86 -> catches .)
    PRIVATE         reduce using rule 425 (expr_86 -> catches .)
    STATIC          reduce using rule 425 (expr_86 -> catches .)
    ABSTRACT        reduce using rule 425 (expr_86 -> catches .)
    NATIVE          reduce using rule 425 (expr_86 -> catches .)
    TRANSIENT       reduce using rule 425 (expr_86 -> catches .)
    VOLATILE        reduce using rule 425 (expr_86 -> catches .)
    STRICTFP        reduce using rule 425 (expr_86 -> catches .)
    PLUS            reduce using rule 425 (expr_86 -> catches .)
    DASH            reduce using rule 425 (expr_86 -> catches .)
    OP_INC          reduce using rule 425 (expr_86 -> catches .)
    OP_DEC          reduce using rule 425 (expr_86 -> catches .)
    TILDE           reduce using rule 425 (expr_86 -> catches .)
    EXCLAMATION     reduce using rule 425 (expr_86 -> catches .)
    LPAREN          reduce using rule 425 (expr_86 -> catches .)
    THIS            reduce using rule 425 (expr_86 -> catches .)
    SUPER           reduce using rule 425 (expr_86 -> catches .)
    VOID            reduce using rule 425 (expr_86 -> catches .)
    CHARLITERAL     reduce using rule 425 (expr_86 -> catches .)
    STRINGLITERAL   reduce using rule 425 (expr_86 -> catches .)
    TRUE            reduce using rule 425 (expr_86 -> catches .)
    FALSE           reduce using rule 425 (expr_86 -> catches .)
    NULL            reduce using rule 425 (expr_86 -> catches .)
    NEW             reduce using rule 425 (expr_86 -> catches .)
    BOOLEAN         reduce using rule 425 (expr_86 -> catches .)
    CHAR            reduce using rule 425 (expr_86 -> catches .)
    BYTE            reduce using rule 425 (expr_86 -> catches .)
    SHORT           reduce using rule 425 (expr_86 -> catches .)
    INT             reduce using rule 425 (expr_86 -> catches .)
    LONG            reduce using rule 425 (expr_86 -> catches .)
    FLOAT           reduce using rule 425 (expr_86 -> catches .)
    DOUBLE          reduce using rule 425 (expr_86 -> catches .)
    NUMBER          reduce using rule 425 (expr_86 -> catches .)
    HEX_NUMBER      reduce using rule 425 (expr_86 -> catches .)
    LONG_NUMBER     reduce using rule 425 (expr_86 -> catches .)
    LONG_HEX_NUMBER reduce using rule 425 (expr_86 -> catches .)
    NON_INTEGER_1   reduce using rule 425 (expr_86 -> catches .)
    NON_INTEGER_2   reduce using rule 425 (expr_86 -> catches .)
    NON_INTEGER_3   reduce using rule 425 (expr_86 -> catches .)
    ELSE            reduce using rule 425 (expr_86 -> catches .)
    CASE            reduce using rule 425 (expr_86 -> catches .)
    DEFAULT         reduce using rule 425 (expr_86 -> catches .)



state 727

    (116) catches -> catchClause . expr_87
    (427) expr_87 -> . catchClause
    (428) expr_87 -> . expr_87 catchClause
    (429) expr_87 -> . empty
    (117) catchClause -> . CATCH LPAREN formalParameter RPAREN block
    (547) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift.
    CATCH           shift and go to state 729
    FINALLY         reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    ASSERT          reduce using rule 547 (empty -> .)
    IF              reduce using rule 547 (empty -> .)
    WHILE           reduce using rule 547 (empty -> .)
    DO              reduce using rule 547 (empty -> .)
    SWITCH          reduce using rule 547 (empty -> .)
    SYNCHRONIZED    reduce using rule 547 (empty -> .)
    RETURN          reduce using rule 547 (empty -> .)
    THROW           reduce using rule 547 (empty -> .)
    BREAK           reduce using rule 547 (empty -> .)
    CONTINUE        reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    FOR             reduce using rule 547 (empty -> .)
    TRY             reduce using rule 547 (empty -> .)
    FINAL           reduce using rule 547 (empty -> .)
    AT              reduce using rule 547 (empty -> .)
    PUBLIC          reduce using rule 547 (empty -> .)
    PROTECTED       reduce using rule 547 (empty -> .)
    PRIVATE         reduce using rule 547 (empty -> .)
    STATIC          reduce using rule 547 (empty -> .)
    ABSTRACT        reduce using rule 547 (empty -> .)
    NATIVE          reduce using rule 547 (empty -> .)
    TRANSIENT       reduce using rule 547 (empty -> .)
    VOLATILE        reduce using rule 547 (empty -> .)
    STRICTFP        reduce using rule 547 (empty -> .)
    PLUS            reduce using rule 547 (empty -> .)
    DASH            reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    TILDE           reduce using rule 547 (empty -> .)
    EXCLAMATION     reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    THIS            reduce using rule 547 (empty -> .)
    SUPER           reduce using rule 547 (empty -> .)
    VOID            reduce using rule 547 (empty -> .)
    CHARLITERAL     reduce using rule 547 (empty -> .)
    STRINGLITERAL   reduce using rule 547 (empty -> .)
    TRUE            reduce using rule 547 (empty -> .)
    FALSE           reduce using rule 547 (empty -> .)
    NULL            reduce using rule 547 (empty -> .)
    NEW             reduce using rule 547 (empty -> .)
    BOOLEAN         reduce using rule 547 (empty -> .)
    CHAR            reduce using rule 547 (empty -> .)
    BYTE            reduce using rule 547 (empty -> .)
    SHORT           reduce using rule 547 (empty -> .)
    INT             reduce using rule 547 (empty -> .)
    LONG            reduce using rule 547 (empty -> .)
    FLOAT           reduce using rule 547 (empty -> .)
    DOUBLE          reduce using rule 547 (empty -> .)
    NUMBER          reduce using rule 547 (empty -> .)
    HEX_NUMBER      reduce using rule 547 (empty -> .)
    LONG_NUMBER     reduce using rule 547 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 547 (empty -> .)
    NON_INTEGER_1   reduce using rule 547 (empty -> .)
    NON_INTEGER_2   reduce using rule 547 (empty -> .)
    NON_INTEGER_3   reduce using rule 547 (empty -> .)
    ELSE            reduce using rule 547 (empty -> .)
    CASE            reduce using rule 547 (empty -> .)
    DEFAULT         reduce using rule 547 (empty -> .)

  ! CATCH           [ reduce using rule 547 (empty -> .) ]

    expr_87                        shift and go to state 778
    catchClause                    shift and go to state 779
    empty                          shift and go to state 780

state 728

    (426) expr_86 -> FINALLY . block
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 781

state 729

    (117) catchClause -> CATCH . LPAREN formalParameter RPAREN block

    LPAREN          shift and go to state 782



state 730

    (107) statement -> CONTINUE expr_83 SEMI .

    BRPAREN         reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    ASSERT          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    IF              reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    WHILE           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    DO              reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    SWITCH          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    SYNCHRONIZED    reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    RETURN          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    THROW           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    BREAK           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    CONTINUE        reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    IDENTIFIER      reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    SEMI            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    BLPAREN         reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    FOR             reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    TRY             reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    FINAL           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    AT              reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    PUBLIC          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    PROTECTED       reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    PRIVATE         reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    STATIC          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    ABSTRACT        reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NATIVE          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    TRANSIENT       reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    VOLATILE        reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    STRICTFP        reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    PLUS            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    DASH            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    OP_INC          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    OP_DEC          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    TILDE           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    EXCLAMATION     reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    LPAREN          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    THIS            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    SUPER           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    VOID            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    CHARLITERAL     reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    STRINGLITERAL   reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    TRUE            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    FALSE           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NULL            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NEW             reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    BOOLEAN         reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    CHAR            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    BYTE            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    SHORT           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    INT             reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    LONG            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    FLOAT           reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    DOUBLE          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NUMBER          reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    HEX_NUMBER      reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    LONG_NUMBER     reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    LONG_HEX_NUMBER reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NON_INTEGER_1   reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NON_INTEGER_2   reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    NON_INTEGER_3   reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    ELSE            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    CASE            reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)
    DEFAULT         reduce using rule 107 (statement -> CONTINUE expr_83 SEMI .)



state 731

    (99) statement -> WHILE parExpression statement .

    BRPAREN         reduce using rule 99 (statement -> WHILE parExpression statement .)
    ASSERT          reduce using rule 99 (statement -> WHILE parExpression statement .)
    IF              reduce using rule 99 (statement -> WHILE parExpression statement .)
    WHILE           reduce using rule 99 (statement -> WHILE parExpression statement .)
    DO              reduce using rule 99 (statement -> WHILE parExpression statement .)
    SWITCH          reduce using rule 99 (statement -> WHILE parExpression statement .)
    SYNCHRONIZED    reduce using rule 99 (statement -> WHILE parExpression statement .)
    RETURN          reduce using rule 99 (statement -> WHILE parExpression statement .)
    THROW           reduce using rule 99 (statement -> WHILE parExpression statement .)
    BREAK           reduce using rule 99 (statement -> WHILE parExpression statement .)
    CONTINUE        reduce using rule 99 (statement -> WHILE parExpression statement .)
    IDENTIFIER      reduce using rule 99 (statement -> WHILE parExpression statement .)
    SEMI            reduce using rule 99 (statement -> WHILE parExpression statement .)
    BLPAREN         reduce using rule 99 (statement -> WHILE parExpression statement .)
    FOR             reduce using rule 99 (statement -> WHILE parExpression statement .)
    TRY             reduce using rule 99 (statement -> WHILE parExpression statement .)
    FINAL           reduce using rule 99 (statement -> WHILE parExpression statement .)
    AT              reduce using rule 99 (statement -> WHILE parExpression statement .)
    PUBLIC          reduce using rule 99 (statement -> WHILE parExpression statement .)
    PROTECTED       reduce using rule 99 (statement -> WHILE parExpression statement .)
    PRIVATE         reduce using rule 99 (statement -> WHILE parExpression statement .)
    STATIC          reduce using rule 99 (statement -> WHILE parExpression statement .)
    ABSTRACT        reduce using rule 99 (statement -> WHILE parExpression statement .)
    NATIVE          reduce using rule 99 (statement -> WHILE parExpression statement .)
    TRANSIENT       reduce using rule 99 (statement -> WHILE parExpression statement .)
    VOLATILE        reduce using rule 99 (statement -> WHILE parExpression statement .)
    STRICTFP        reduce using rule 99 (statement -> WHILE parExpression statement .)
    PLUS            reduce using rule 99 (statement -> WHILE parExpression statement .)
    DASH            reduce using rule 99 (statement -> WHILE parExpression statement .)
    OP_INC          reduce using rule 99 (statement -> WHILE parExpression statement .)
    OP_DEC          reduce using rule 99 (statement -> WHILE parExpression statement .)
    TILDE           reduce using rule 99 (statement -> WHILE parExpression statement .)
    EXCLAMATION     reduce using rule 99 (statement -> WHILE parExpression statement .)
    LPAREN          reduce using rule 99 (statement -> WHILE parExpression statement .)
    THIS            reduce using rule 99 (statement -> WHILE parExpression statement .)
    SUPER           reduce using rule 99 (statement -> WHILE parExpression statement .)
    VOID            reduce using rule 99 (statement -> WHILE parExpression statement .)
    CHARLITERAL     reduce using rule 99 (statement -> WHILE parExpression statement .)
    STRINGLITERAL   reduce using rule 99 (statement -> WHILE parExpression statement .)
    TRUE            reduce using rule 99 (statement -> WHILE parExpression statement .)
    FALSE           reduce using rule 99 (statement -> WHILE parExpression statement .)
    NULL            reduce using rule 99 (statement -> WHILE parExpression statement .)
    NEW             reduce using rule 99 (statement -> WHILE parExpression statement .)
    BOOLEAN         reduce using rule 99 (statement -> WHILE parExpression statement .)
    CHAR            reduce using rule 99 (statement -> WHILE parExpression statement .)
    BYTE            reduce using rule 99 (statement -> WHILE parExpression statement .)
    SHORT           reduce using rule 99 (statement -> WHILE parExpression statement .)
    INT             reduce using rule 99 (statement -> WHILE parExpression statement .)
    LONG            reduce using rule 99 (statement -> WHILE parExpression statement .)
    FLOAT           reduce using rule 99 (statement -> WHILE parExpression statement .)
    DOUBLE          reduce using rule 99 (statement -> WHILE parExpression statement .)
    NUMBER          reduce using rule 99 (statement -> WHILE parExpression statement .)
    HEX_NUMBER      reduce using rule 99 (statement -> WHILE parExpression statement .)
    LONG_NUMBER     reduce using rule 99 (statement -> WHILE parExpression statement .)
    LONG_HEX_NUMBER reduce using rule 99 (statement -> WHILE parExpression statement .)
    NON_INTEGER_1   reduce using rule 99 (statement -> WHILE parExpression statement .)
    NON_INTEGER_2   reduce using rule 99 (statement -> WHILE parExpression statement .)
    NON_INTEGER_3   reduce using rule 99 (statement -> WHILE parExpression statement .)
    ELSE            reduce using rule 99 (statement -> WHILE parExpression statement .)
    CASE            reduce using rule 99 (statement -> WHILE parExpression statement .)
    DEFAULT         reduce using rule 99 (statement -> WHILE parExpression statement .)



state 732

    (102) statement -> SWITCH parExpression BLPAREN . switchBlockStatementGroups BRPAREN
    (111) switchBlockStatementGroups -> . expr_84
    (418) expr_84 -> . switchBlockStatementGroup
    (419) expr_84 -> . expr_84 switchBlockStatementGroup
    (420) expr_84 -> . empty
    (112) switchBlockStatementGroup -> . switchLabel expr_85
    (547) empty -> .
    (113) switchLabel -> . CASE expression COLON
    (114) switchLabel -> . DEFAULT COLON

  ! shift/reduce conflict for CASE resolved as shift.
  ! shift/reduce conflict for DEFAULT resolved as shift.
    BRPAREN         reduce using rule 547 (empty -> .)
    CASE            shift and go to state 784
    DEFAULT         shift and go to state 787

  ! CASE            [ reduce using rule 547 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 547 (empty -> .) ]

    switchBlockStatementGroups     shift and go to state 783
    expr_84                        shift and go to state 785
    switchLabel                    shift and go to state 786
    switchBlockStatementGroup      shift and go to state 788
    empty                          shift and go to state 789

state 733

    (109) statement -> IDENTIFIER COLON statement .

    BRPAREN         reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    ASSERT          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    SYNCHRONIZED    reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    THROW           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    SEMI            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    BLPAREN         reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    TRY             reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    FINAL           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    AT              reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    PUBLIC          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    PROTECTED       reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    PRIVATE         reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    STATIC          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    ABSTRACT        reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NATIVE          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    TRANSIENT       reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    VOLATILE        reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    STRICTFP        reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    PLUS            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    DASH            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    OP_INC          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    OP_DEC          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    TILDE           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    EXCLAMATION     reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    LPAREN          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    THIS            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    SUPER           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    VOID            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    CHARLITERAL     reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    STRINGLITERAL   reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    TRUE            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    FALSE           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NULL            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NEW             reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    BOOLEAN         reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    CHAR            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    BYTE            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    SHORT           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    INT             reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    LONG            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    FLOAT           reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    DOUBLE          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NUMBER          reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    HEX_NUMBER      reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    LONG_NUMBER     reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    LONG_HEX_NUMBER reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NON_INTEGER_1   reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NON_INTEGER_2   reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    NON_INTEGER_3   reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 109 (statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 109 (statement -> IDENTIFIER COLON statement .)



state 734

    (106) statement -> BREAK expr_82 SEMI .

    BRPAREN         reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    ASSERT          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    IF              reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    WHILE           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    DO              reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    SWITCH          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    SYNCHRONIZED    reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    RETURN          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    THROW           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    BREAK           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    CONTINUE        reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    IDENTIFIER      reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    SEMI            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    BLPAREN         reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    FOR             reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    TRY             reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    FINAL           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    AT              reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    PUBLIC          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    PROTECTED       reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    PRIVATE         reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    STATIC          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    ABSTRACT        reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NATIVE          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    TRANSIENT       reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    VOLATILE        reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    STRICTFP        reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    PLUS            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    DASH            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    OP_INC          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    OP_DEC          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    TILDE           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    EXCLAMATION     reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    LPAREN          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    THIS            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    SUPER           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    VOID            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    CHARLITERAL     reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    STRINGLITERAL   reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    TRUE            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    FALSE           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NULL            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NEW             reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    BOOLEAN         reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    CHAR            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    BYTE            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    SHORT           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    INT             reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    LONG            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    FLOAT           reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    DOUBLE          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NUMBER          reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    HEX_NUMBER      reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    LONG_NUMBER     reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    LONG_HEX_NUMBER reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NON_INTEGER_1   reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NON_INTEGER_2   reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    NON_INTEGER_3   reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    ELSE            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    CASE            reduce using rule 106 (statement -> BREAK expr_82 SEMI .)
    DEFAULT         reduce using rule 106 (statement -> BREAK expr_82 SEMI .)



state 735

    (100) statement -> DO statement WHILE . parExpression SEMI
    (123) parExpression -> . LPAREN expression RPAREN

    LPAREN          shift and go to state 653


    parExpression                  shift and go to state 790

state 736

    (96) statement -> ASSERT expression expr_79 . SEMI

    SEMI            shift and go to state 791



state 737

    (408) expr_79 -> COLON . expression
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 792

state 738

    (409) expr_79 -> empty .

    SEMI            reduce using rule 409 (expr_79 -> empty .)



state 739

    (97) statement -> IF parExpression statement . expr_80
    (410) expr_80 -> . ELSE statement
    (411) expr_80 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift.
    ELSE            shift and go to state 794
    BRPAREN         reduce using rule 547 (empty -> .)
    ASSERT          reduce using rule 547 (empty -> .)
    IF              reduce using rule 547 (empty -> .)
    WHILE           reduce using rule 547 (empty -> .)
    DO              reduce using rule 547 (empty -> .)
    SWITCH          reduce using rule 547 (empty -> .)
    SYNCHRONIZED    reduce using rule 547 (empty -> .)
    RETURN          reduce using rule 547 (empty -> .)
    THROW           reduce using rule 547 (empty -> .)
    BREAK           reduce using rule 547 (empty -> .)
    CONTINUE        reduce using rule 547 (empty -> .)
    IDENTIFIER      reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    FOR             reduce using rule 547 (empty -> .)
    TRY             reduce using rule 547 (empty -> .)
    FINAL           reduce using rule 547 (empty -> .)
    AT              reduce using rule 547 (empty -> .)
    PUBLIC          reduce using rule 547 (empty -> .)
    PROTECTED       reduce using rule 547 (empty -> .)
    PRIVATE         reduce using rule 547 (empty -> .)
    STATIC          reduce using rule 547 (empty -> .)
    ABSTRACT        reduce using rule 547 (empty -> .)
    NATIVE          reduce using rule 547 (empty -> .)
    TRANSIENT       reduce using rule 547 (empty -> .)
    VOLATILE        reduce using rule 547 (empty -> .)
    STRICTFP        reduce using rule 547 (empty -> .)
    PLUS            reduce using rule 547 (empty -> .)
    DASH            reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    TILDE           reduce using rule 547 (empty -> .)
    EXCLAMATION     reduce using rule 547 (empty -> .)
    LPAREN          reduce using rule 547 (empty -> .)
    THIS            reduce using rule 547 (empty -> .)
    SUPER           reduce using rule 547 (empty -> .)
    VOID            reduce using rule 547 (empty -> .)
    CHARLITERAL     reduce using rule 547 (empty -> .)
    STRINGLITERAL   reduce using rule 547 (empty -> .)
    TRUE            reduce using rule 547 (empty -> .)
    FALSE           reduce using rule 547 (empty -> .)
    NULL            reduce using rule 547 (empty -> .)
    NEW             reduce using rule 547 (empty -> .)
    BOOLEAN         reduce using rule 547 (empty -> .)
    CHAR            reduce using rule 547 (empty -> .)
    BYTE            reduce using rule 547 (empty -> .)
    SHORT           reduce using rule 547 (empty -> .)
    INT             reduce using rule 547 (empty -> .)
    LONG            reduce using rule 547 (empty -> .)
    FLOAT           reduce using rule 547 (empty -> .)
    DOUBLE          reduce using rule 547 (empty -> .)
    NUMBER          reduce using rule 547 (empty -> .)
    HEX_NUMBER      reduce using rule 547 (empty -> .)
    LONG_NUMBER     reduce using rule 547 (empty -> .)
    LONG_HEX_NUMBER reduce using rule 547 (empty -> .)
    NON_INTEGER_1   reduce using rule 547 (empty -> .)
    NON_INTEGER_2   reduce using rule 547 (empty -> .)
    NON_INTEGER_3   reduce using rule 547 (empty -> .)
    CASE            reduce using rule 547 (empty -> .)
    DEFAULT         reduce using rule 547 (empty -> .)

  ! ELSE            [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 795
    expr_80                        shift and go to state 793

state 740

    (93) localVariableDeclaration -> variableModifiers type variableDeclarator . expr_76
    (402) expr_76 -> . COMMA variableDeclarator
    (403) expr_76 -> . expr_76 COMMA variableDeclarator
    (404) expr_76 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 797
    SEMI            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_76                        shift and go to state 796
    empty                          shift and go to state 798

state 741

    (105) statement -> THROW expression SEMI .

    BRPAREN         reduce using rule 105 (statement -> THROW expression SEMI .)
    ASSERT          reduce using rule 105 (statement -> THROW expression SEMI .)
    IF              reduce using rule 105 (statement -> THROW expression SEMI .)
    WHILE           reduce using rule 105 (statement -> THROW expression SEMI .)
    DO              reduce using rule 105 (statement -> THROW expression SEMI .)
    SWITCH          reduce using rule 105 (statement -> THROW expression SEMI .)
    SYNCHRONIZED    reduce using rule 105 (statement -> THROW expression SEMI .)
    RETURN          reduce using rule 105 (statement -> THROW expression SEMI .)
    THROW           reduce using rule 105 (statement -> THROW expression SEMI .)
    BREAK           reduce using rule 105 (statement -> THROW expression SEMI .)
    CONTINUE        reduce using rule 105 (statement -> THROW expression SEMI .)
    IDENTIFIER      reduce using rule 105 (statement -> THROW expression SEMI .)
    SEMI            reduce using rule 105 (statement -> THROW expression SEMI .)
    BLPAREN         reduce using rule 105 (statement -> THROW expression SEMI .)
    FOR             reduce using rule 105 (statement -> THROW expression SEMI .)
    TRY             reduce using rule 105 (statement -> THROW expression SEMI .)
    FINAL           reduce using rule 105 (statement -> THROW expression SEMI .)
    AT              reduce using rule 105 (statement -> THROW expression SEMI .)
    PUBLIC          reduce using rule 105 (statement -> THROW expression SEMI .)
    PROTECTED       reduce using rule 105 (statement -> THROW expression SEMI .)
    PRIVATE         reduce using rule 105 (statement -> THROW expression SEMI .)
    STATIC          reduce using rule 105 (statement -> THROW expression SEMI .)
    ABSTRACT        reduce using rule 105 (statement -> THROW expression SEMI .)
    NATIVE          reduce using rule 105 (statement -> THROW expression SEMI .)
    TRANSIENT       reduce using rule 105 (statement -> THROW expression SEMI .)
    VOLATILE        reduce using rule 105 (statement -> THROW expression SEMI .)
    STRICTFP        reduce using rule 105 (statement -> THROW expression SEMI .)
    PLUS            reduce using rule 105 (statement -> THROW expression SEMI .)
    DASH            reduce using rule 105 (statement -> THROW expression SEMI .)
    OP_INC          reduce using rule 105 (statement -> THROW expression SEMI .)
    OP_DEC          reduce using rule 105 (statement -> THROW expression SEMI .)
    TILDE           reduce using rule 105 (statement -> THROW expression SEMI .)
    EXCLAMATION     reduce using rule 105 (statement -> THROW expression SEMI .)
    LPAREN          reduce using rule 105 (statement -> THROW expression SEMI .)
    THIS            reduce using rule 105 (statement -> THROW expression SEMI .)
    SUPER           reduce using rule 105 (statement -> THROW expression SEMI .)
    VOID            reduce using rule 105 (statement -> THROW expression SEMI .)
    CHARLITERAL     reduce using rule 105 (statement -> THROW expression SEMI .)
    STRINGLITERAL   reduce using rule 105 (statement -> THROW expression SEMI .)
    TRUE            reduce using rule 105 (statement -> THROW expression SEMI .)
    FALSE           reduce using rule 105 (statement -> THROW expression SEMI .)
    NULL            reduce using rule 105 (statement -> THROW expression SEMI .)
    NEW             reduce using rule 105 (statement -> THROW expression SEMI .)
    BOOLEAN         reduce using rule 105 (statement -> THROW expression SEMI .)
    CHAR            reduce using rule 105 (statement -> THROW expression SEMI .)
    BYTE            reduce using rule 105 (statement -> THROW expression SEMI .)
    SHORT           reduce using rule 105 (statement -> THROW expression SEMI .)
    INT             reduce using rule 105 (statement -> THROW expression SEMI .)
    LONG            reduce using rule 105 (statement -> THROW expression SEMI .)
    FLOAT           reduce using rule 105 (statement -> THROW expression SEMI .)
    DOUBLE          reduce using rule 105 (statement -> THROW expression SEMI .)
    NUMBER          reduce using rule 105 (statement -> THROW expression SEMI .)
    HEX_NUMBER      reduce using rule 105 (statement -> THROW expression SEMI .)
    LONG_NUMBER     reduce using rule 105 (statement -> THROW expression SEMI .)
    LONG_HEX_NUMBER reduce using rule 105 (statement -> THROW expression SEMI .)
    NON_INTEGER_1   reduce using rule 105 (statement -> THROW expression SEMI .)
    NON_INTEGER_2   reduce using rule 105 (statement -> THROW expression SEMI .)
    NON_INTEGER_3   reduce using rule 105 (statement -> THROW expression SEMI .)
    ELSE            reduce using rule 105 (statement -> THROW expression SEMI .)
    CASE            reduce using rule 105 (statement -> THROW expression SEMI .)
    DEFAULT         reduce using rule 105 (statement -> THROW expression SEMI .)



state 742

    (38) variableDeclarator -> IDENTIFIER expr_42 expr_43 .

    COMMA           reduce using rule 38 (variableDeclarator -> IDENTIFIER expr_42 expr_43 .)
    SEMI            reduce using rule 38 (variableDeclarator -> IDENTIFIER expr_42 expr_43 .)



state 743

    (322) expr_43 -> EQUALS . variableInitializer
    (196) variableInitializer -> . arrayInitializer
    (197) variableInitializer -> . expression
    (198) arrayInitializer -> . BLPAREN expr_125 expr_126 BRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BLPAREN         shift and go to state 546
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    arrayInitializer               shift and go to state 621
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    variableInitializer            shift and go to state 799
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 620

state 744

    (320) expr_42 -> expr_42 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 800



state 745

    (323) expr_43 -> empty .

    COMMA           reduce using rule 323 (expr_43 -> empty .)
    SEMI            reduce using rule 323 (expr_43 -> empty .)



state 746

    (319) expr_42 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 319 (expr_42 -> FLPAREN FRPAREN .)
    EQUALS          reduce using rule 319 (expr_42 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 319 (expr_42 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 319 (expr_42 -> FLPAREN FRPAREN .)



state 747

    (37) fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .

    BRPAREN         reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    SEMI            reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    STATIC          reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    PUBLIC          reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    PROTECTED       reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    PRIVATE         reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    ABSTRACT        reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    FINAL           reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    NATIVE          reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    SYNCHRONIZED    reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    TRANSIENT       reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    VOLATILE        reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    STRICTFP        reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    AT              reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)
    BLPAREN         reduce using rule 37 (fieldDeclaration -> modifiers type variableDeclarator expr_41 SEMI .)



state 748

    (317) expr_41 -> expr_41 COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 801

state 749

    (316) expr_41 -> COMMA variableDeclarator .

    SEMI            reduce using rule 316 (expr_41 -> COMMA variableDeclarator .)
    COMMA           reduce using rule 316 (expr_41 -> COMMA variableDeclarator .)



state 750

    (36) methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters . expr_38 expr_39 expr_40
    (309) expr_38 -> . FLPAREN FRPAREN
    (310) expr_38 -> . expr_38 FLPAREN FRPAREN
    (311) expr_38 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 802
    THROWS          reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_38                        shift and go to state 803
    empty                          shift and go to state 804

state 751

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 . BLPAREN expr_34 expr_35 BRPAREN

    BLPAREN         shift and go to state 805



state 752

    (298) expr_33 -> THROWS . qualifiedNameList
    (60) qualifiedNameList -> . qualifiedName expr_57
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedNameList              shift and go to state 806
    qualifiedName                  shift and go to state 807

state 753

    (299) expr_33 -> empty .

    BLPAREN         reduce using rule 299 (expr_33 -> empty .)



state 754

    (62) formalParameterDecls -> ellipsisParameterDecl .

    RPAREN          reduce using rule 62 (formalParameterDecls -> ellipsisParameterDecl .)



state 755

    (61) formalParameters -> LPAREN expr_58 . RPAREN

    RPAREN          shift and go to state 808



state 756

    (66) ellipsisParameterDecl -> variableModifiers . type OP_ARRAY IDENTIFIER
    (65) normalParameterDecl -> variableModifiers . type IDENTIFIER expr_61
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 809

state 757

    (359) expr_58 -> formalParameterDecls .

    RPAREN          reduce using rule 359 (expr_58 -> formalParameterDecls .)



state 758

    (64) formalParameterDecls -> expr_60 . ellipsisParameterDecl
    (365) expr_60 -> expr_60 . normalParameterDecl COMMA
    (66) ellipsisParameterDecl -> . variableModifiers type OP_ARRAY IDENTIFIER
    (65) normalParameterDecl -> . variableModifiers type IDENTIFIER expr_61
    (10) variableModifiers -> . expr_9
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (71) annotation -> . AT qualifiedName expr_68

    FINAL           shift and go to state 715
    AT              shift and go to state 4


    ellipsisParameterDecl          shift and go to state 810
    variableModifiers              shift and go to state 756
    normalParameterDecl            shift and go to state 811
    expr_9                         shift and go to state 603
    annotation                     shift and go to state 720

state 759

    (63) formalParameterDecls -> normalParameterDecl . expr_59
    (364) expr_60 -> normalParameterDecl . COMMA
    (361) expr_59 -> . COMMA normalParameterDecl
    (362) expr_59 -> . expr_59 COMMA normalParameterDecl
    (363) expr_59 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 813
    RPAREN          reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    expr_59                        shift and go to state 812
    empty                          shift and go to state 814

state 760

    (360) expr_58 -> empty .

    RPAREN          reduce using rule 360 (expr_58 -> empty .)



state 761

    (523) expr_124 -> expr_124 COMMA . variableInitializer
    (196) variableInitializer -> . arrayInitializer
    (197) variableInitializer -> . expression
    (198) arrayInitializer -> . BLPAREN expr_125 expr_126 BRPAREN
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BLPAREN         shift and go to state 546
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    arrayInitializer               shift and go to state 621
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    variableInitializer            shift and go to state 815
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 620

state 762

    (522) expr_124 -> COMMA variableInitializer .

    COMMA           reduce using rule 522 (expr_124 -> COMMA variableInitializer .)
    BRPAREN         reduce using rule 522 (expr_124 -> COMMA variableInitializer .)



state 763

    (198) arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .

    COMMA           reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    BRPAREN         reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    SEMI            reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    DOT             reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    FLPAREN         reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    OP_INC          reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)
    OP_DEC          reduce using rule 198 (arrayInitializer -> BLPAREN expr_125 expr_126 BRPAREN .)



state 764

    (517) expr_122 -> expr_122 FLPAREN expression FRPAREN .

    FLPAREN         reduce using rule 517 (expr_122 -> expr_122 FLPAREN expression FRPAREN .)
    DOT             reduce using rule 517 (expr_122 -> expr_122 FLPAREN expression FRPAREN .)
    OP_INC          reduce using rule 517 (expr_122 -> expr_122 FLPAREN expression FRPAREN .)
    OP_DEC          reduce using rule 517 (expr_122 -> expr_122 FLPAREN expression FRPAREN .)



state 765

    (520) expr_123 -> expr_123 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 520 (expr_123 -> expr_123 FLPAREN FRPAREN .)
    DOT             reduce using rule 520 (expr_123 -> expr_123 FLPAREN FRPAREN .)
    OP_INC          reduce using rule 520 (expr_123 -> expr_123 FLPAREN FRPAREN .)
    OP_DEC          reduce using rule 520 (expr_123 -> expr_123 FLPAREN FRPAREN .)



state 766

    (87) annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN . expr_74 SEMI
    (397) expr_74 -> . DEFAULT elementValue
    (398) expr_74 -> . empty
    (547) empty -> .

    DEFAULT         shift and go to state 816
    SEMI            reduce using rule 547 (empty -> .)


    empty                          shift and go to state 818
    expr_74                        shift and go to state 817

state 767

    (45) interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .

    BRPAREN         reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    SEMI            reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    PUBLIC          reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    PROTECTED       reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    PRIVATE         reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    STATIC          reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    ABSTRACT        reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    FINAL           reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    NATIVE          reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    SYNCHRONIZED    reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    TRANSIENT       reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    VOLATILE        reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    STRICTFP        reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)
    AT              reduce using rule 45 (interfaceFieldDeclaration -> modifiers type variableDeclarator expr_48 SEMI .)



state 768

    (334) expr_48 -> expr_48 COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 819

state 769

    (333) expr_48 -> COMMA variableDeclarator .

    SEMI            reduce using rule 333 (expr_48 -> COMMA variableDeclarator .)
    COMMA           reduce using rule 333 (expr_48 -> COMMA variableDeclarator .)



state 770

    (258) expr_15 -> expr_15 AND type .

    AND             reduce using rule 258 (expr_15 -> expr_15 AND type .)
    COMMA           reduce using rule 258 (expr_15 -> expr_15 AND type .)
    MORE            reduce using rule 258 (expr_15 -> expr_15 AND type .)



state 771

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER . formalParameters expr_46 expr_47 SEMI
    (61) formalParameters -> . LPAREN expr_58 RPAREN

    LPAREN          shift and go to state 684


    formalParameters               shift and go to state 820

state 772

    (279) expr_25 -> expr_25 classBodyDeclaration .

    SEMI            reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    STATIC          reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    PUBLIC          reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    PROTECTED       reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    PRIVATE         reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    ABSTRACT        reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    FINAL           reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    NATIVE          reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    SYNCHRONIZED    reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    TRANSIENT       reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    VOLATILE        reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    STRICTFP        reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    AT              reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    BLPAREN         reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)
    BRPAREN         reduce using rule 279 (expr_25 -> expr_25 classBodyDeclaration .)



state 773

    (120) forstatement -> FOR LPAREN expr_89 SEMI . expr_90 SEMI expr_91 RPAREN statement
    (435) expr_90 -> . expression
    (436) expr_90 -> . empty
    (125) expression -> . conditionalExpression expr_93
    (547) empty -> .
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    SEMI            reduce using rule 547 (empty -> .)
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    empty                          shift and go to state 822
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    expr_90                        shift and go to state 823
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 821

state 774

    (119) forstatement -> FOR LPAREN variableModifiers type . IDENTIFIER COLON expression RPAREN statement
    (93) localVariableDeclaration -> variableModifiers type . variableDeclarator expr_76
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 824


    variableDeclarator             shift and go to state 740

state 775

    (95) statement -> expr_77 expression expr_78 SEMI .

    BRPAREN         reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    ASSERT          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    IF              reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    WHILE           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    DO              reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    SWITCH          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    SYNCHRONIZED    reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    RETURN          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    THROW           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    BREAK           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    CONTINUE        reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    IDENTIFIER      reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    SEMI            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    BLPAREN         reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    FOR             reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    TRY             reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    FINAL           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    AT              reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    PUBLIC          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    PROTECTED       reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    PRIVATE         reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    STATIC          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    ABSTRACT        reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NATIVE          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    TRANSIENT       reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    VOLATILE        reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    STRICTFP        reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    PLUS            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    DASH            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    OP_INC          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    OP_DEC          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    TILDE           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    EXCLAMATION     reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    LPAREN          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    THIS            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    SUPER           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    VOID            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    CHARLITERAL     reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    STRINGLITERAL   reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    TRUE            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    FALSE           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NULL            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NEW             reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    BOOLEAN         reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    CHAR            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    BYTE            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    SHORT           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    INT             reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    LONG            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    FLOAT           reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    DOUBLE          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NUMBER          reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    HEX_NUMBER      reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    LONG_NUMBER     reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    LONG_HEX_NUMBER reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NON_INTEGER_1   reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NON_INTEGER_2   reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    NON_INTEGER_3   reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    ELSE            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    CASE            reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)
    DEFAULT         reduce using rule 95 (statement -> expr_77 expression expr_78 SEMI .)



state 776

    (406) expr_78 -> COLON expression .

    SEMI            reduce using rule 406 (expr_78 -> COLON expression .)



state 777

    (424) expr_86 -> catches FINALLY . block
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 825

state 778

    (116) catches -> catchClause expr_87 .
    (428) expr_87 -> expr_87 . catchClause
    (117) catchClause -> . CATCH LPAREN formalParameter RPAREN block

    FINALLY         reduce using rule 116 (catches -> catchClause expr_87 .)
    BRPAREN         reduce using rule 116 (catches -> catchClause expr_87 .)
    ASSERT          reduce using rule 116 (catches -> catchClause expr_87 .)
    IF              reduce using rule 116 (catches -> catchClause expr_87 .)
    WHILE           reduce using rule 116 (catches -> catchClause expr_87 .)
    DO              reduce using rule 116 (catches -> catchClause expr_87 .)
    SWITCH          reduce using rule 116 (catches -> catchClause expr_87 .)
    SYNCHRONIZED    reduce using rule 116 (catches -> catchClause expr_87 .)
    RETURN          reduce using rule 116 (catches -> catchClause expr_87 .)
    THROW           reduce using rule 116 (catches -> catchClause expr_87 .)
    BREAK           reduce using rule 116 (catches -> catchClause expr_87 .)
    CONTINUE        reduce using rule 116 (catches -> catchClause expr_87 .)
    IDENTIFIER      reduce using rule 116 (catches -> catchClause expr_87 .)
    SEMI            reduce using rule 116 (catches -> catchClause expr_87 .)
    BLPAREN         reduce using rule 116 (catches -> catchClause expr_87 .)
    FOR             reduce using rule 116 (catches -> catchClause expr_87 .)
    TRY             reduce using rule 116 (catches -> catchClause expr_87 .)
    FINAL           reduce using rule 116 (catches -> catchClause expr_87 .)
    AT              reduce using rule 116 (catches -> catchClause expr_87 .)
    PUBLIC          reduce using rule 116 (catches -> catchClause expr_87 .)
    PROTECTED       reduce using rule 116 (catches -> catchClause expr_87 .)
    PRIVATE         reduce using rule 116 (catches -> catchClause expr_87 .)
    STATIC          reduce using rule 116 (catches -> catchClause expr_87 .)
    ABSTRACT        reduce using rule 116 (catches -> catchClause expr_87 .)
    NATIVE          reduce using rule 116 (catches -> catchClause expr_87 .)
    TRANSIENT       reduce using rule 116 (catches -> catchClause expr_87 .)
    VOLATILE        reduce using rule 116 (catches -> catchClause expr_87 .)
    STRICTFP        reduce using rule 116 (catches -> catchClause expr_87 .)
    PLUS            reduce using rule 116 (catches -> catchClause expr_87 .)
    DASH            reduce using rule 116 (catches -> catchClause expr_87 .)
    OP_INC          reduce using rule 116 (catches -> catchClause expr_87 .)
    OP_DEC          reduce using rule 116 (catches -> catchClause expr_87 .)
    TILDE           reduce using rule 116 (catches -> catchClause expr_87 .)
    EXCLAMATION     reduce using rule 116 (catches -> catchClause expr_87 .)
    LPAREN          reduce using rule 116 (catches -> catchClause expr_87 .)
    THIS            reduce using rule 116 (catches -> catchClause expr_87 .)
    SUPER           reduce using rule 116 (catches -> catchClause expr_87 .)
    VOID            reduce using rule 116 (catches -> catchClause expr_87 .)
    CHARLITERAL     reduce using rule 116 (catches -> catchClause expr_87 .)
    STRINGLITERAL   reduce using rule 116 (catches -> catchClause expr_87 .)
    TRUE            reduce using rule 116 (catches -> catchClause expr_87 .)
    FALSE           reduce using rule 116 (catches -> catchClause expr_87 .)
    NULL            reduce using rule 116 (catches -> catchClause expr_87 .)
    NEW             reduce using rule 116 (catches -> catchClause expr_87 .)
    BOOLEAN         reduce using rule 116 (catches -> catchClause expr_87 .)
    CHAR            reduce using rule 116 (catches -> catchClause expr_87 .)
    BYTE            reduce using rule 116 (catches -> catchClause expr_87 .)
    SHORT           reduce using rule 116 (catches -> catchClause expr_87 .)
    INT             reduce using rule 116 (catches -> catchClause expr_87 .)
    LONG            reduce using rule 116 (catches -> catchClause expr_87 .)
    FLOAT           reduce using rule 116 (catches -> catchClause expr_87 .)
    DOUBLE          reduce using rule 116 (catches -> catchClause expr_87 .)
    NUMBER          reduce using rule 116 (catches -> catchClause expr_87 .)
    HEX_NUMBER      reduce using rule 116 (catches -> catchClause expr_87 .)
    LONG_NUMBER     reduce using rule 116 (catches -> catchClause expr_87 .)
    LONG_HEX_NUMBER reduce using rule 116 (catches -> catchClause expr_87 .)
    NON_INTEGER_1   reduce using rule 116 (catches -> catchClause expr_87 .)
    NON_INTEGER_2   reduce using rule 116 (catches -> catchClause expr_87 .)
    NON_INTEGER_3   reduce using rule 116 (catches -> catchClause expr_87 .)
    ELSE            reduce using rule 116 (catches -> catchClause expr_87 .)
    CASE            reduce using rule 116 (catches -> catchClause expr_87 .)
    DEFAULT         reduce using rule 116 (catches -> catchClause expr_87 .)
    CATCH           shift and go to state 729


    catchClause                    shift and go to state 826

state 779

    (427) expr_87 -> catchClause .

    CATCH           reduce using rule 427 (expr_87 -> catchClause .)
    FINALLY         reduce using rule 427 (expr_87 -> catchClause .)
    BRPAREN         reduce using rule 427 (expr_87 -> catchClause .)
    ASSERT          reduce using rule 427 (expr_87 -> catchClause .)
    IF              reduce using rule 427 (expr_87 -> catchClause .)
    WHILE           reduce using rule 427 (expr_87 -> catchClause .)
    DO              reduce using rule 427 (expr_87 -> catchClause .)
    SWITCH          reduce using rule 427 (expr_87 -> catchClause .)
    SYNCHRONIZED    reduce using rule 427 (expr_87 -> catchClause .)
    RETURN          reduce using rule 427 (expr_87 -> catchClause .)
    THROW           reduce using rule 427 (expr_87 -> catchClause .)
    BREAK           reduce using rule 427 (expr_87 -> catchClause .)
    CONTINUE        reduce using rule 427 (expr_87 -> catchClause .)
    IDENTIFIER      reduce using rule 427 (expr_87 -> catchClause .)
    SEMI            reduce using rule 427 (expr_87 -> catchClause .)
    BLPAREN         reduce using rule 427 (expr_87 -> catchClause .)
    FOR             reduce using rule 427 (expr_87 -> catchClause .)
    TRY             reduce using rule 427 (expr_87 -> catchClause .)
    FINAL           reduce using rule 427 (expr_87 -> catchClause .)
    AT              reduce using rule 427 (expr_87 -> catchClause .)
    PUBLIC          reduce using rule 427 (expr_87 -> catchClause .)
    PROTECTED       reduce using rule 427 (expr_87 -> catchClause .)
    PRIVATE         reduce using rule 427 (expr_87 -> catchClause .)
    STATIC          reduce using rule 427 (expr_87 -> catchClause .)
    ABSTRACT        reduce using rule 427 (expr_87 -> catchClause .)
    NATIVE          reduce using rule 427 (expr_87 -> catchClause .)
    TRANSIENT       reduce using rule 427 (expr_87 -> catchClause .)
    VOLATILE        reduce using rule 427 (expr_87 -> catchClause .)
    STRICTFP        reduce using rule 427 (expr_87 -> catchClause .)
    PLUS            reduce using rule 427 (expr_87 -> catchClause .)
    DASH            reduce using rule 427 (expr_87 -> catchClause .)
    OP_INC          reduce using rule 427 (expr_87 -> catchClause .)
    OP_DEC          reduce using rule 427 (expr_87 -> catchClause .)
    TILDE           reduce using rule 427 (expr_87 -> catchClause .)
    EXCLAMATION     reduce using rule 427 (expr_87 -> catchClause .)
    LPAREN          reduce using rule 427 (expr_87 -> catchClause .)
    THIS            reduce using rule 427 (expr_87 -> catchClause .)
    SUPER           reduce using rule 427 (expr_87 -> catchClause .)
    VOID            reduce using rule 427 (expr_87 -> catchClause .)
    CHARLITERAL     reduce using rule 427 (expr_87 -> catchClause .)
    STRINGLITERAL   reduce using rule 427 (expr_87 -> catchClause .)
    TRUE            reduce using rule 427 (expr_87 -> catchClause .)
    FALSE           reduce using rule 427 (expr_87 -> catchClause .)
    NULL            reduce using rule 427 (expr_87 -> catchClause .)
    NEW             reduce using rule 427 (expr_87 -> catchClause .)
    BOOLEAN         reduce using rule 427 (expr_87 -> catchClause .)
    CHAR            reduce using rule 427 (expr_87 -> catchClause .)
    BYTE            reduce using rule 427 (expr_87 -> catchClause .)
    SHORT           reduce using rule 427 (expr_87 -> catchClause .)
    INT             reduce using rule 427 (expr_87 -> catchClause .)
    LONG            reduce using rule 427 (expr_87 -> catchClause .)
    FLOAT           reduce using rule 427 (expr_87 -> catchClause .)
    DOUBLE          reduce using rule 427 (expr_87 -> catchClause .)
    NUMBER          reduce using rule 427 (expr_87 -> catchClause .)
    HEX_NUMBER      reduce using rule 427 (expr_87 -> catchClause .)
    LONG_NUMBER     reduce using rule 427 (expr_87 -> catchClause .)
    LONG_HEX_NUMBER reduce using rule 427 (expr_87 -> catchClause .)
    NON_INTEGER_1   reduce using rule 427 (expr_87 -> catchClause .)
    NON_INTEGER_2   reduce using rule 427 (expr_87 -> catchClause .)
    NON_INTEGER_3   reduce using rule 427 (expr_87 -> catchClause .)
    ELSE            reduce using rule 427 (expr_87 -> catchClause .)
    CASE            reduce using rule 427 (expr_87 -> catchClause .)
    DEFAULT         reduce using rule 427 (expr_87 -> catchClause .)



state 780

    (429) expr_87 -> empty .

    CATCH           reduce using rule 429 (expr_87 -> empty .)
    FINALLY         reduce using rule 429 (expr_87 -> empty .)
    BRPAREN         reduce using rule 429 (expr_87 -> empty .)
    ASSERT          reduce using rule 429 (expr_87 -> empty .)
    IF              reduce using rule 429 (expr_87 -> empty .)
    WHILE           reduce using rule 429 (expr_87 -> empty .)
    DO              reduce using rule 429 (expr_87 -> empty .)
    SWITCH          reduce using rule 429 (expr_87 -> empty .)
    SYNCHRONIZED    reduce using rule 429 (expr_87 -> empty .)
    RETURN          reduce using rule 429 (expr_87 -> empty .)
    THROW           reduce using rule 429 (expr_87 -> empty .)
    BREAK           reduce using rule 429 (expr_87 -> empty .)
    CONTINUE        reduce using rule 429 (expr_87 -> empty .)
    IDENTIFIER      reduce using rule 429 (expr_87 -> empty .)
    SEMI            reduce using rule 429 (expr_87 -> empty .)
    BLPAREN         reduce using rule 429 (expr_87 -> empty .)
    FOR             reduce using rule 429 (expr_87 -> empty .)
    TRY             reduce using rule 429 (expr_87 -> empty .)
    FINAL           reduce using rule 429 (expr_87 -> empty .)
    AT              reduce using rule 429 (expr_87 -> empty .)
    PUBLIC          reduce using rule 429 (expr_87 -> empty .)
    PROTECTED       reduce using rule 429 (expr_87 -> empty .)
    PRIVATE         reduce using rule 429 (expr_87 -> empty .)
    STATIC          reduce using rule 429 (expr_87 -> empty .)
    ABSTRACT        reduce using rule 429 (expr_87 -> empty .)
    NATIVE          reduce using rule 429 (expr_87 -> empty .)
    TRANSIENT       reduce using rule 429 (expr_87 -> empty .)
    VOLATILE        reduce using rule 429 (expr_87 -> empty .)
    STRICTFP        reduce using rule 429 (expr_87 -> empty .)
    PLUS            reduce using rule 429 (expr_87 -> empty .)
    DASH            reduce using rule 429 (expr_87 -> empty .)
    OP_INC          reduce using rule 429 (expr_87 -> empty .)
    OP_DEC          reduce using rule 429 (expr_87 -> empty .)
    TILDE           reduce using rule 429 (expr_87 -> empty .)
    EXCLAMATION     reduce using rule 429 (expr_87 -> empty .)
    LPAREN          reduce using rule 429 (expr_87 -> empty .)
    THIS            reduce using rule 429 (expr_87 -> empty .)
    SUPER           reduce using rule 429 (expr_87 -> empty .)
    VOID            reduce using rule 429 (expr_87 -> empty .)
    CHARLITERAL     reduce using rule 429 (expr_87 -> empty .)
    STRINGLITERAL   reduce using rule 429 (expr_87 -> empty .)
    TRUE            reduce using rule 429 (expr_87 -> empty .)
    FALSE           reduce using rule 429 (expr_87 -> empty .)
    NULL            reduce using rule 429 (expr_87 -> empty .)
    NEW             reduce using rule 429 (expr_87 -> empty .)
    BOOLEAN         reduce using rule 429 (expr_87 -> empty .)
    CHAR            reduce using rule 429 (expr_87 -> empty .)
    BYTE            reduce using rule 429 (expr_87 -> empty .)
    SHORT           reduce using rule 429 (expr_87 -> empty .)
    INT             reduce using rule 429 (expr_87 -> empty .)
    LONG            reduce using rule 429 (expr_87 -> empty .)
    FLOAT           reduce using rule 429 (expr_87 -> empty .)
    DOUBLE          reduce using rule 429 (expr_87 -> empty .)
    NUMBER          reduce using rule 429 (expr_87 -> empty .)
    HEX_NUMBER      reduce using rule 429 (expr_87 -> empty .)
    LONG_NUMBER     reduce using rule 429 (expr_87 -> empty .)
    LONG_HEX_NUMBER reduce using rule 429 (expr_87 -> empty .)
    NON_INTEGER_1   reduce using rule 429 (expr_87 -> empty .)
    NON_INTEGER_2   reduce using rule 429 (expr_87 -> empty .)
    NON_INTEGER_3   reduce using rule 429 (expr_87 -> empty .)
    ELSE            reduce using rule 429 (expr_87 -> empty .)
    CASE            reduce using rule 429 (expr_87 -> empty .)
    DEFAULT         reduce using rule 429 (expr_87 -> empty .)



state 781

    (426) expr_86 -> FINALLY block .

    BRPAREN         reduce using rule 426 (expr_86 -> FINALLY block .)
    ASSERT          reduce using rule 426 (expr_86 -> FINALLY block .)
    IF              reduce using rule 426 (expr_86 -> FINALLY block .)
    WHILE           reduce using rule 426 (expr_86 -> FINALLY block .)
    DO              reduce using rule 426 (expr_86 -> FINALLY block .)
    SWITCH          reduce using rule 426 (expr_86 -> FINALLY block .)
    SYNCHRONIZED    reduce using rule 426 (expr_86 -> FINALLY block .)
    RETURN          reduce using rule 426 (expr_86 -> FINALLY block .)
    THROW           reduce using rule 426 (expr_86 -> FINALLY block .)
    BREAK           reduce using rule 426 (expr_86 -> FINALLY block .)
    CONTINUE        reduce using rule 426 (expr_86 -> FINALLY block .)
    IDENTIFIER      reduce using rule 426 (expr_86 -> FINALLY block .)
    SEMI            reduce using rule 426 (expr_86 -> FINALLY block .)
    BLPAREN         reduce using rule 426 (expr_86 -> FINALLY block .)
    FOR             reduce using rule 426 (expr_86 -> FINALLY block .)
    TRY             reduce using rule 426 (expr_86 -> FINALLY block .)
    FINAL           reduce using rule 426 (expr_86 -> FINALLY block .)
    AT              reduce using rule 426 (expr_86 -> FINALLY block .)
    PUBLIC          reduce using rule 426 (expr_86 -> FINALLY block .)
    PROTECTED       reduce using rule 426 (expr_86 -> FINALLY block .)
    PRIVATE         reduce using rule 426 (expr_86 -> FINALLY block .)
    STATIC          reduce using rule 426 (expr_86 -> FINALLY block .)
    ABSTRACT        reduce using rule 426 (expr_86 -> FINALLY block .)
    NATIVE          reduce using rule 426 (expr_86 -> FINALLY block .)
    TRANSIENT       reduce using rule 426 (expr_86 -> FINALLY block .)
    VOLATILE        reduce using rule 426 (expr_86 -> FINALLY block .)
    STRICTFP        reduce using rule 426 (expr_86 -> FINALLY block .)
    PLUS            reduce using rule 426 (expr_86 -> FINALLY block .)
    DASH            reduce using rule 426 (expr_86 -> FINALLY block .)
    OP_INC          reduce using rule 426 (expr_86 -> FINALLY block .)
    OP_DEC          reduce using rule 426 (expr_86 -> FINALLY block .)
    TILDE           reduce using rule 426 (expr_86 -> FINALLY block .)
    EXCLAMATION     reduce using rule 426 (expr_86 -> FINALLY block .)
    LPAREN          reduce using rule 426 (expr_86 -> FINALLY block .)
    THIS            reduce using rule 426 (expr_86 -> FINALLY block .)
    SUPER           reduce using rule 426 (expr_86 -> FINALLY block .)
    VOID            reduce using rule 426 (expr_86 -> FINALLY block .)
    CHARLITERAL     reduce using rule 426 (expr_86 -> FINALLY block .)
    STRINGLITERAL   reduce using rule 426 (expr_86 -> FINALLY block .)
    TRUE            reduce using rule 426 (expr_86 -> FINALLY block .)
    FALSE           reduce using rule 426 (expr_86 -> FINALLY block .)
    NULL            reduce using rule 426 (expr_86 -> FINALLY block .)
    NEW             reduce using rule 426 (expr_86 -> FINALLY block .)
    BOOLEAN         reduce using rule 426 (expr_86 -> FINALLY block .)
    CHAR            reduce using rule 426 (expr_86 -> FINALLY block .)
    BYTE            reduce using rule 426 (expr_86 -> FINALLY block .)
    SHORT           reduce using rule 426 (expr_86 -> FINALLY block .)
    INT             reduce using rule 426 (expr_86 -> FINALLY block .)
    LONG            reduce using rule 426 (expr_86 -> FINALLY block .)
    FLOAT           reduce using rule 426 (expr_86 -> FINALLY block .)
    DOUBLE          reduce using rule 426 (expr_86 -> FINALLY block .)
    NUMBER          reduce using rule 426 (expr_86 -> FINALLY block .)
    HEX_NUMBER      reduce using rule 426 (expr_86 -> FINALLY block .)
    LONG_NUMBER     reduce using rule 426 (expr_86 -> FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 426 (expr_86 -> FINALLY block .)
    NON_INTEGER_1   reduce using rule 426 (expr_86 -> FINALLY block .)
    NON_INTEGER_2   reduce using rule 426 (expr_86 -> FINALLY block .)
    NON_INTEGER_3   reduce using rule 426 (expr_86 -> FINALLY block .)
    ELSE            reduce using rule 426 (expr_86 -> FINALLY block .)
    CASE            reduce using rule 426 (expr_86 -> FINALLY block .)
    DEFAULT         reduce using rule 426 (expr_86 -> FINALLY block .)



state 782

    (117) catchClause -> CATCH LPAREN . formalParameter RPAREN block
    (118) formalParameter -> . variableModifiers type IDENTIFIER expr_88
    (10) variableModifiers -> . expr_9
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (71) annotation -> . AT qualifiedName expr_68

    FINAL           shift and go to state 715
    AT              shift and go to state 4


    formalParameter                shift and go to state 827
    variableModifiers              shift and go to state 828
    expr_9                         shift and go to state 603
    annotation                     shift and go to state 720

state 783

    (102) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups . BRPAREN

    BRPAREN         shift and go to state 829



state 784

    (113) switchLabel -> CASE . expression COLON
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 830

state 785

    (111) switchBlockStatementGroups -> expr_84 .
    (419) expr_84 -> expr_84 . switchBlockStatementGroup
    (112) switchBlockStatementGroup -> . switchLabel expr_85
    (113) switchLabel -> . CASE expression COLON
    (114) switchLabel -> . DEFAULT COLON

    BRPAREN         reduce using rule 111 (switchBlockStatementGroups -> expr_84 .)
    CASE            shift and go to state 784
    DEFAULT         shift and go to state 787


    switchBlockStatementGroup      shift and go to state 831
    switchLabel                    shift and go to state 786

state 786

    (112) switchBlockStatementGroup -> switchLabel . expr_85
    (421) expr_85 -> . blockStatement
    (422) expr_85 -> . expr_85 blockStatement
    (423) expr_85 -> . empty
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (547) empty -> .
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CHARLITERAL resolved as shift.
  ! shift/reduce conflict for STRINGLITERAL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
    CASE            reduce using rule 547 (empty -> .)
    DEFAULT         reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102

  ! ASSERT          [ reduce using rule 547 (empty -> .) ]
  ! IF              [ reduce using rule 547 (empty -> .) ]
  ! WHILE           [ reduce using rule 547 (empty -> .) ]
  ! DO              [ reduce using rule 547 (empty -> .) ]
  ! SWITCH          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! RETURN          [ reduce using rule 547 (empty -> .) ]
  ! THROW           [ reduce using rule 547 (empty -> .) ]
  ! BREAK           [ reduce using rule 547 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 547 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 547 (empty -> .) ]
  ! FOR             [ reduce using rule 547 (empty -> .) ]
  ! TRY             [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! PLUS            [ reduce using rule 547 (empty -> .) ]
  ! DASH            [ reduce using rule 547 (empty -> .) ]
  ! OP_INC          [ reduce using rule 547 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 547 (empty -> .) ]
  ! TILDE           [ reduce using rule 547 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 547 (empty -> .) ]
  ! LPAREN          [ reduce using rule 547 (empty -> .) ]
  ! THIS            [ reduce using rule 547 (empty -> .) ]
  ! SUPER           [ reduce using rule 547 (empty -> .) ]
  ! VOID            [ reduce using rule 547 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 547 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 547 (empty -> .) ]
  ! TRUE            [ reduce using rule 547 (empty -> .) ]
  ! FALSE           [ reduce using rule 547 (empty -> .) ]
  ! NULL            [ reduce using rule 547 (empty -> .) ]
  ! NEW             [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]
  ! NUMBER          [ reduce using rule 547 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 547 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 547 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 547 (empty -> .) ]

    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 832
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    expr_85                        shift and go to state 833
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    empty                          shift and go to state 834
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 787

    (114) switchLabel -> DEFAULT . COLON

    COLON           shift and go to state 835



state 788

    (418) expr_84 -> switchBlockStatementGroup .

    CASE            reduce using rule 418 (expr_84 -> switchBlockStatementGroup .)
    DEFAULT         reduce using rule 418 (expr_84 -> switchBlockStatementGroup .)
    BRPAREN         reduce using rule 418 (expr_84 -> switchBlockStatementGroup .)



state 789

    (420) expr_84 -> empty .

    CASE            reduce using rule 420 (expr_84 -> empty .)
    DEFAULT         reduce using rule 420 (expr_84 -> empty .)
    BRPAREN         reduce using rule 420 (expr_84 -> empty .)



state 790

    (100) statement -> DO statement WHILE parExpression . SEMI

    SEMI            shift and go to state 836



state 791

    (96) statement -> ASSERT expression expr_79 SEMI .

    BRPAREN         reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    ASSERT          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    IF              reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    WHILE           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    DO              reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    SWITCH          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    SYNCHRONIZED    reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    RETURN          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    THROW           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    BREAK           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    CONTINUE        reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    IDENTIFIER      reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    SEMI            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    BLPAREN         reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    FOR             reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    TRY             reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    FINAL           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    AT              reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    PUBLIC          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    PROTECTED       reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    PRIVATE         reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    STATIC          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    ABSTRACT        reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NATIVE          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    TRANSIENT       reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    VOLATILE        reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    STRICTFP        reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    PLUS            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    DASH            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    OP_INC          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    OP_DEC          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    TILDE           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    EXCLAMATION     reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    LPAREN          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    THIS            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    SUPER           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    VOID            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    CHARLITERAL     reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    STRINGLITERAL   reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    TRUE            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    FALSE           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NULL            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NEW             reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    BOOLEAN         reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    CHAR            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    BYTE            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    SHORT           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    INT             reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    LONG            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    FLOAT           reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    DOUBLE          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NUMBER          reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    HEX_NUMBER      reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    LONG_NUMBER     reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    LONG_HEX_NUMBER reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NON_INTEGER_1   reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NON_INTEGER_2   reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    NON_INTEGER_3   reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    ELSE            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    CASE            reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)
    DEFAULT         reduce using rule 96 (statement -> ASSERT expression expr_79 SEMI .)



state 792

    (408) expr_79 -> COLON expression .

    SEMI            reduce using rule 408 (expr_79 -> COLON expression .)



state 793

    (97) statement -> IF parExpression statement expr_80 .

    BRPAREN         reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    ASSERT          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    IF              reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    WHILE           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    DO              reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    SWITCH          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    SYNCHRONIZED    reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    RETURN          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    THROW           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    BREAK           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    CONTINUE        reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    IDENTIFIER      reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    SEMI            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    BLPAREN         reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    FOR             reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    TRY             reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    FINAL           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    AT              reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    PUBLIC          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    PROTECTED       reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    PRIVATE         reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    STATIC          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    ABSTRACT        reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NATIVE          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    TRANSIENT       reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    VOLATILE        reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    STRICTFP        reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    PLUS            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    DASH            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    OP_INC          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    OP_DEC          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    TILDE           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    EXCLAMATION     reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    LPAREN          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    THIS            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    SUPER           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    VOID            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    CHARLITERAL     reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    STRINGLITERAL   reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    TRUE            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    FALSE           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NULL            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NEW             reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    BOOLEAN         reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    CHAR            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    BYTE            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    SHORT           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    INT             reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    LONG            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    FLOAT           reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    DOUBLE          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NUMBER          reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    HEX_NUMBER      reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    LONG_NUMBER     reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    LONG_HEX_NUMBER reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NON_INTEGER_1   reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NON_INTEGER_2   reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    NON_INTEGER_3   reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    ELSE            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    CASE            reduce using rule 97 (statement -> IF parExpression statement expr_80 .)
    DEFAULT         reduce using rule 97 (statement -> IF parExpression statement expr_80 .)



state 794

    (410) expr_80 -> ELSE . statement
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 837
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 795

    (411) expr_80 -> empty .

    BRPAREN         reduce using rule 411 (expr_80 -> empty .)
    ASSERT          reduce using rule 411 (expr_80 -> empty .)
    IF              reduce using rule 411 (expr_80 -> empty .)
    WHILE           reduce using rule 411 (expr_80 -> empty .)
    DO              reduce using rule 411 (expr_80 -> empty .)
    SWITCH          reduce using rule 411 (expr_80 -> empty .)
    SYNCHRONIZED    reduce using rule 411 (expr_80 -> empty .)
    RETURN          reduce using rule 411 (expr_80 -> empty .)
    THROW           reduce using rule 411 (expr_80 -> empty .)
    BREAK           reduce using rule 411 (expr_80 -> empty .)
    CONTINUE        reduce using rule 411 (expr_80 -> empty .)
    IDENTIFIER      reduce using rule 411 (expr_80 -> empty .)
    SEMI            reduce using rule 411 (expr_80 -> empty .)
    BLPAREN         reduce using rule 411 (expr_80 -> empty .)
    FOR             reduce using rule 411 (expr_80 -> empty .)
    TRY             reduce using rule 411 (expr_80 -> empty .)
    FINAL           reduce using rule 411 (expr_80 -> empty .)
    AT              reduce using rule 411 (expr_80 -> empty .)
    PUBLIC          reduce using rule 411 (expr_80 -> empty .)
    PROTECTED       reduce using rule 411 (expr_80 -> empty .)
    PRIVATE         reduce using rule 411 (expr_80 -> empty .)
    STATIC          reduce using rule 411 (expr_80 -> empty .)
    ABSTRACT        reduce using rule 411 (expr_80 -> empty .)
    NATIVE          reduce using rule 411 (expr_80 -> empty .)
    TRANSIENT       reduce using rule 411 (expr_80 -> empty .)
    VOLATILE        reduce using rule 411 (expr_80 -> empty .)
    STRICTFP        reduce using rule 411 (expr_80 -> empty .)
    PLUS            reduce using rule 411 (expr_80 -> empty .)
    DASH            reduce using rule 411 (expr_80 -> empty .)
    OP_INC          reduce using rule 411 (expr_80 -> empty .)
    OP_DEC          reduce using rule 411 (expr_80 -> empty .)
    TILDE           reduce using rule 411 (expr_80 -> empty .)
    EXCLAMATION     reduce using rule 411 (expr_80 -> empty .)
    LPAREN          reduce using rule 411 (expr_80 -> empty .)
    THIS            reduce using rule 411 (expr_80 -> empty .)
    SUPER           reduce using rule 411 (expr_80 -> empty .)
    VOID            reduce using rule 411 (expr_80 -> empty .)
    CHARLITERAL     reduce using rule 411 (expr_80 -> empty .)
    STRINGLITERAL   reduce using rule 411 (expr_80 -> empty .)
    TRUE            reduce using rule 411 (expr_80 -> empty .)
    FALSE           reduce using rule 411 (expr_80 -> empty .)
    NULL            reduce using rule 411 (expr_80 -> empty .)
    NEW             reduce using rule 411 (expr_80 -> empty .)
    BOOLEAN         reduce using rule 411 (expr_80 -> empty .)
    CHAR            reduce using rule 411 (expr_80 -> empty .)
    BYTE            reduce using rule 411 (expr_80 -> empty .)
    SHORT           reduce using rule 411 (expr_80 -> empty .)
    INT             reduce using rule 411 (expr_80 -> empty .)
    LONG            reduce using rule 411 (expr_80 -> empty .)
    FLOAT           reduce using rule 411 (expr_80 -> empty .)
    DOUBLE          reduce using rule 411 (expr_80 -> empty .)
    NUMBER          reduce using rule 411 (expr_80 -> empty .)
    HEX_NUMBER      reduce using rule 411 (expr_80 -> empty .)
    LONG_NUMBER     reduce using rule 411 (expr_80 -> empty .)
    LONG_HEX_NUMBER reduce using rule 411 (expr_80 -> empty .)
    NON_INTEGER_1   reduce using rule 411 (expr_80 -> empty .)
    NON_INTEGER_2   reduce using rule 411 (expr_80 -> empty .)
    NON_INTEGER_3   reduce using rule 411 (expr_80 -> empty .)
    ELSE            reduce using rule 411 (expr_80 -> empty .)
    CASE            reduce using rule 411 (expr_80 -> empty .)
    DEFAULT         reduce using rule 411 (expr_80 -> empty .)



state 796

    (93) localVariableDeclaration -> variableModifiers type variableDeclarator expr_76 .
    (403) expr_76 -> expr_76 . COMMA variableDeclarator

    SEMI            reduce using rule 93 (localVariableDeclaration -> variableModifiers type variableDeclarator expr_76 .)
    COMMA           shift and go to state 838



state 797

    (402) expr_76 -> COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 839

state 798

    (404) expr_76 -> empty .

    COMMA           reduce using rule 404 (expr_76 -> empty .)
    SEMI            reduce using rule 404 (expr_76 -> empty .)



state 799

    (322) expr_43 -> EQUALS variableInitializer .

    COMMA           reduce using rule 322 (expr_43 -> EQUALS variableInitializer .)
    SEMI            reduce using rule 322 (expr_43 -> EQUALS variableInitializer .)



state 800

    (320) expr_42 -> expr_42 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 320 (expr_42 -> expr_42 FLPAREN FRPAREN .)
    EQUALS          reduce using rule 320 (expr_42 -> expr_42 FLPAREN FRPAREN .)
    COMMA           reduce using rule 320 (expr_42 -> expr_42 FLPAREN FRPAREN .)
    SEMI            reduce using rule 320 (expr_42 -> expr_42 FLPAREN FRPAREN .)



state 801

    (317) expr_41 -> expr_41 COMMA variableDeclarator .

    SEMI            reduce using rule 317 (expr_41 -> expr_41 COMMA variableDeclarator .)
    COMMA           reduce using rule 317 (expr_41 -> expr_41 COMMA variableDeclarator .)



state 802

    (309) expr_38 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 840



state 803

    (36) methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 . expr_39 expr_40
    (310) expr_38 -> expr_38 . FLPAREN FRPAREN
    (312) expr_39 -> . THROWS qualifiedNameList
    (313) expr_39 -> . empty
    (547) empty -> .

    FLPAREN         shift and go to state 841
    THROWS          shift and go to state 843
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)


    expr_39                        shift and go to state 842
    empty                          shift and go to state 844

state 804

    (311) expr_38 -> empty .

    FLPAREN         reduce using rule 311 (expr_38 -> empty .)
    THROWS          reduce using rule 311 (expr_38 -> empty .)
    SEMI            reduce using rule 311 (expr_38 -> empty .)
    BLPAREN         reduce using rule 311 (expr_38 -> empty .)



state 805

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN . expr_34 expr_35 BRPAREN
    (300) expr_34 -> . explicitConstructorInvocation
    (301) expr_34 -> . empty
    (67) explicitConstructorInvocation -> . expr_62 expr_63 arguments SEMI
    (68) explicitConstructorInvocation -> . primary DOT expr_64 SUPER arguments SEMI
    (547) empty -> .
    (369) expr_62 -> . nonWildcardTypeArguments
    (370) expr_62 -> . empty
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (203) nonWildcardTypeArguments -> . LESS typeList MORE
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for CHARLITERAL resolved as shift.
  ! shift/reduce conflict for STRINGLITERAL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
    ASSERT          reduce using rule 547 (empty -> .)
    IF              reduce using rule 547 (empty -> .)
    WHILE           reduce using rule 547 (empty -> .)
    DO              reduce using rule 547 (empty -> .)
    SWITCH          reduce using rule 547 (empty -> .)
    SYNCHRONIZED    reduce using rule 547 (empty -> .)
    RETURN          reduce using rule 547 (empty -> .)
    THROW           reduce using rule 547 (empty -> .)
    BREAK           reduce using rule 547 (empty -> .)
    CONTINUE        reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)
    BLPAREN         reduce using rule 547 (empty -> .)
    FOR             reduce using rule 547 (empty -> .)
    TRY             reduce using rule 547 (empty -> .)
    FINAL           reduce using rule 547 (empty -> .)
    AT              reduce using rule 547 (empty -> .)
    PUBLIC          reduce using rule 547 (empty -> .)
    PROTECTED       reduce using rule 547 (empty -> .)
    PRIVATE         reduce using rule 547 (empty -> .)
    STATIC          reduce using rule 547 (empty -> .)
    ABSTRACT        reduce using rule 547 (empty -> .)
    NATIVE          reduce using rule 547 (empty -> .)
    TRANSIENT       reduce using rule 547 (empty -> .)
    VOLATILE        reduce using rule 547 (empty -> .)
    STRICTFP        reduce using rule 547 (empty -> .)
    PLUS            reduce using rule 547 (empty -> .)
    DASH            reduce using rule 547 (empty -> .)
    OP_INC          reduce using rule 547 (empty -> .)
    OP_DEC          reduce using rule 547 (empty -> .)
    TILDE           reduce using rule 547 (empty -> .)
    EXCLAMATION     reduce using rule 547 (empty -> .)
    BRPAREN         reduce using rule 547 (empty -> .)
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    LESS            shift and go to state 184
    LPAREN          shift and go to state 653
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102

  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! LPAREN          [ reduce using rule 547 (empty -> .) ]
  ! THIS            [ reduce using rule 547 (empty -> .) ]
  ! SUPER           [ reduce using rule 547 (empty -> .) ]
  ! VOID            [ reduce using rule 547 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 547 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 547 (empty -> .) ]
  ! TRUE            [ reduce using rule 547 (empty -> .) ]
  ! FALSE           [ reduce using rule 547 (empty -> .) ]
  ! NULL            [ reduce using rule 547 (empty -> .) ]
  ! NEW             [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]
  ! NUMBER          [ reduce using rule 547 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 547 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 547 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 547 (empty -> .) ]

    INTLITERAL                     shift and go to state 56
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    primary                        shift and go to state 845
    expr_62                        shift and go to state 846
    literal                        shift and go to state 89
    nonWildcardTypeArguments       shift and go to state 847
    empty                          shift and go to state 848
    expr_34                        shift and go to state 849
    parExpression                  shift and go to state 109
    DOUBLELITERAL                  shift and go to state 112
    primitiveType                  shift and go to state 96
    FLOATLITERAL                   shift and go to state 77
    explicitConstructorInvocation  shift and go to state 850
    arrayCreator                   shift and go to state 116

state 806

    (298) expr_33 -> THROWS qualifiedNameList .

    BLPAREN         reduce using rule 298 (expr_33 -> THROWS qualifiedNameList .)



state 807

    (60) qualifiedNameList -> qualifiedName . expr_57
    (356) expr_57 -> . COMMA qualifiedName
    (357) expr_57 -> . expr_57 COMMA qualifiedName
    (358) expr_57 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift.
    COMMA           shift and go to state 851
    BLPAREN         reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! COMMA           [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 852
    expr_57                        shift and go to state 853

state 808

    (61) formalParameters -> LPAREN expr_58 RPAREN .

    THROWS          reduce using rule 61 (formalParameters -> LPAREN expr_58 RPAREN .)
    BLPAREN         reduce using rule 61 (formalParameters -> LPAREN expr_58 RPAREN .)
    FLPAREN         reduce using rule 61 (formalParameters -> LPAREN expr_58 RPAREN .)
    SEMI            reduce using rule 61 (formalParameters -> LPAREN expr_58 RPAREN .)



state 809

    (66) ellipsisParameterDecl -> variableModifiers type . OP_ARRAY IDENTIFIER
    (65) normalParameterDecl -> variableModifiers type . IDENTIFIER expr_61

    OP_ARRAY        shift and go to state 855
    IDENTIFIER      shift and go to state 854



state 810

    (64) formalParameterDecls -> expr_60 ellipsisParameterDecl .

    RPAREN          reduce using rule 64 (formalParameterDecls -> expr_60 ellipsisParameterDecl .)



state 811

    (365) expr_60 -> expr_60 normalParameterDecl . COMMA

    COMMA           shift and go to state 856



state 812

    (63) formalParameterDecls -> normalParameterDecl expr_59 .
    (362) expr_59 -> expr_59 . COMMA normalParameterDecl

    RPAREN          reduce using rule 63 (formalParameterDecls -> normalParameterDecl expr_59 .)
    COMMA           shift and go to state 857



state 813

    (364) expr_60 -> normalParameterDecl COMMA .
    (361) expr_59 -> COMMA . normalParameterDecl
    (65) normalParameterDecl -> . variableModifiers type IDENTIFIER expr_61
    (10) variableModifiers -> . expr_9
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (71) annotation -> . AT qualifiedName expr_68

  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
    FINAL           shift and go to state 715
    AT              shift and go to state 4

  ! FINAL           [ reduce using rule 364 (expr_60 -> normalParameterDecl COMMA .) ]
  ! AT              [ reduce using rule 364 (expr_60 -> normalParameterDecl COMMA .) ]

    variableModifiers              shift and go to state 858
    normalParameterDecl            shift and go to state 859
    expr_9                         shift and go to state 603
    annotation                     shift and go to state 720

state 814

    (363) expr_59 -> empty .

    COMMA           reduce using rule 363 (expr_59 -> empty .)
    RPAREN          reduce using rule 363 (expr_59 -> empty .)



state 815

    (523) expr_124 -> expr_124 COMMA variableInitializer .

    COMMA           reduce using rule 523 (expr_124 -> expr_124 COMMA variableInitializer .)
    BRPAREN         reduce using rule 523 (expr_124 -> expr_124 COMMA variableInitializer .)



state 816

    (397) expr_74 -> DEFAULT . elementValue
    (74) elementValue -> . conditionalExpression
    (75) elementValue -> . annotation
    (76) elementValue -> . elementValueArrayInitializer
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (71) annotation -> . AT qualifiedName expr_68
    (77) elementValueArrayInitializer -> . BLPAREN expr_71 expr_72 BRPAREN
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    AT              shift and go to state 4
    BLPAREN         shift and go to state 79
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    INTLITERAL                     shift and go to state 56
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 92
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 113
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    elementValueArrayInitializer   shift and go to state 99
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    elementValue                   shift and go to state 860

state 817

    (87) annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 . SEMI

    SEMI            shift and go to state 861



state 818

    (398) expr_74 -> empty .

    SEMI            reduce using rule 398 (expr_74 -> empty .)



state 819

    (334) expr_48 -> expr_48 COMMA variableDeclarator .

    SEMI            reduce using rule 334 (expr_48 -> expr_48 COMMA variableDeclarator .)
    COMMA           reduce using rule 334 (expr_48 -> expr_48 COMMA variableDeclarator .)



state 820

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters . expr_46 expr_47 SEMI
    (328) expr_46 -> . FLPAREN FRPAREN
    (329) expr_46 -> . expr_46 FLPAREN FRPAREN
    (330) expr_46 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 863
    THROWS          reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_46                        shift and go to state 862
    empty                          shift and go to state 864

state 821

    (435) expr_90 -> expression .

    SEMI            reduce using rule 435 (expr_90 -> expression .)



state 822

    (436) expr_90 -> empty .

    SEMI            reduce using rule 436 (expr_90 -> empty .)



state 823

    (120) forstatement -> FOR LPAREN expr_89 SEMI expr_90 . SEMI expr_91 RPAREN statement

    SEMI            shift and go to state 865



state 824

    (119) forstatement -> FOR LPAREN variableModifiers type IDENTIFIER . COLON expression RPAREN statement
    (38) variableDeclarator -> IDENTIFIER . expr_42 expr_43
    (319) expr_42 -> . FLPAREN FRPAREN
    (320) expr_42 -> . expr_42 FLPAREN FRPAREN
    (321) expr_42 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    COLON           shift and go to state 866
    FLPAREN         shift and go to state 677
    EQUALS          reduce using rule 547 (empty -> .)
    COMMA           reduce using rule 547 (empty -> .)
    SEMI            reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_42                        shift and go to state 676
    empty                          shift and go to state 678

state 825

    (424) expr_86 -> catches FINALLY block .

    BRPAREN         reduce using rule 424 (expr_86 -> catches FINALLY block .)
    ASSERT          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    IF              reduce using rule 424 (expr_86 -> catches FINALLY block .)
    WHILE           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    DO              reduce using rule 424 (expr_86 -> catches FINALLY block .)
    SWITCH          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    SYNCHRONIZED    reduce using rule 424 (expr_86 -> catches FINALLY block .)
    RETURN          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    THROW           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    BREAK           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    CONTINUE        reduce using rule 424 (expr_86 -> catches FINALLY block .)
    IDENTIFIER      reduce using rule 424 (expr_86 -> catches FINALLY block .)
    SEMI            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    BLPAREN         reduce using rule 424 (expr_86 -> catches FINALLY block .)
    FOR             reduce using rule 424 (expr_86 -> catches FINALLY block .)
    TRY             reduce using rule 424 (expr_86 -> catches FINALLY block .)
    FINAL           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    AT              reduce using rule 424 (expr_86 -> catches FINALLY block .)
    PUBLIC          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    PROTECTED       reduce using rule 424 (expr_86 -> catches FINALLY block .)
    PRIVATE         reduce using rule 424 (expr_86 -> catches FINALLY block .)
    STATIC          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    ABSTRACT        reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NATIVE          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    TRANSIENT       reduce using rule 424 (expr_86 -> catches FINALLY block .)
    VOLATILE        reduce using rule 424 (expr_86 -> catches FINALLY block .)
    STRICTFP        reduce using rule 424 (expr_86 -> catches FINALLY block .)
    PLUS            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    DASH            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    OP_INC          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    OP_DEC          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    TILDE           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    EXCLAMATION     reduce using rule 424 (expr_86 -> catches FINALLY block .)
    LPAREN          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    THIS            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    SUPER           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    VOID            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    CHARLITERAL     reduce using rule 424 (expr_86 -> catches FINALLY block .)
    STRINGLITERAL   reduce using rule 424 (expr_86 -> catches FINALLY block .)
    TRUE            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    FALSE           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NULL            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NEW             reduce using rule 424 (expr_86 -> catches FINALLY block .)
    BOOLEAN         reduce using rule 424 (expr_86 -> catches FINALLY block .)
    CHAR            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    BYTE            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    SHORT           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    INT             reduce using rule 424 (expr_86 -> catches FINALLY block .)
    LONG            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    FLOAT           reduce using rule 424 (expr_86 -> catches FINALLY block .)
    DOUBLE          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NUMBER          reduce using rule 424 (expr_86 -> catches FINALLY block .)
    HEX_NUMBER      reduce using rule 424 (expr_86 -> catches FINALLY block .)
    LONG_NUMBER     reduce using rule 424 (expr_86 -> catches FINALLY block .)
    LONG_HEX_NUMBER reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NON_INTEGER_1   reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NON_INTEGER_2   reduce using rule 424 (expr_86 -> catches FINALLY block .)
    NON_INTEGER_3   reduce using rule 424 (expr_86 -> catches FINALLY block .)
    ELSE            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    CASE            reduce using rule 424 (expr_86 -> catches FINALLY block .)
    DEFAULT         reduce using rule 424 (expr_86 -> catches FINALLY block .)



state 826

    (428) expr_87 -> expr_87 catchClause .

    CATCH           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    FINALLY         reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    BRPAREN         reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    ASSERT          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    IF              reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    WHILE           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    DO              reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    SWITCH          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    SYNCHRONIZED    reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    RETURN          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    THROW           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    BREAK           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    CONTINUE        reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    IDENTIFIER      reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    SEMI            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    BLPAREN         reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    FOR             reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    TRY             reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    FINAL           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    AT              reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    PUBLIC          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    PROTECTED       reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    PRIVATE         reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    STATIC          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    ABSTRACT        reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NATIVE          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    TRANSIENT       reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    VOLATILE        reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    STRICTFP        reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    PLUS            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    DASH            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    OP_INC          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    OP_DEC          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    TILDE           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    EXCLAMATION     reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    LPAREN          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    THIS            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    SUPER           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    VOID            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    CHARLITERAL     reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    STRINGLITERAL   reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    TRUE            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    FALSE           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NULL            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NEW             reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    BOOLEAN         reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    CHAR            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    BYTE            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    SHORT           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    INT             reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    LONG            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    FLOAT           reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    DOUBLE          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NUMBER          reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    HEX_NUMBER      reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    LONG_NUMBER     reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    LONG_HEX_NUMBER reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NON_INTEGER_1   reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NON_INTEGER_2   reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    NON_INTEGER_3   reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    ELSE            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    CASE            reduce using rule 428 (expr_87 -> expr_87 catchClause .)
    DEFAULT         reduce using rule 428 (expr_87 -> expr_87 catchClause .)



state 827

    (117) catchClause -> CATCH LPAREN formalParameter . RPAREN block

    RPAREN          shift and go to state 867



state 828

    (118) formalParameter -> variableModifiers . type IDENTIFIER expr_88
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 868

state 829

    (102) statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .

    BRPAREN         reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ASSERT          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    IF              reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    WHILE           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DO              reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SWITCH          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SYNCHRONIZED    reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    RETURN          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THROW           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BREAK           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CONTINUE        reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    IDENTIFIER      reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SEMI            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BLPAREN         reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FOR             reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRY             reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FINAL           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    AT              reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PUBLIC          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PROTECTED       reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PRIVATE         reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STATIC          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ABSTRACT        reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NATIVE          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRANSIENT       reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    VOLATILE        reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STRICTFP        reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    PLUS            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DASH            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_INC          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    OP_DEC          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TILDE           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    EXCLAMATION     reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LPAREN          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    THIS            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SUPER           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    VOID            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CHARLITERAL     reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    STRINGLITERAL   reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    TRUE            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FALSE           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NULL            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NEW             reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BOOLEAN         reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CHAR            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    BYTE            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    SHORT           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    INT             reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    FLOAT           reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DOUBLE          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NUMBER          reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    HEX_NUMBER      reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_NUMBER     reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    LONG_HEX_NUMBER reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_1   reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_2   reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    NON_INTEGER_3   reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    ELSE            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    CASE            reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)
    DEFAULT         reduce using rule 102 (statement -> SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN .)



state 830

    (113) switchLabel -> CASE expression . COLON

    COLON           shift and go to state 869



state 831

    (419) expr_84 -> expr_84 switchBlockStatementGroup .

    CASE            reduce using rule 419 (expr_84 -> expr_84 switchBlockStatementGroup .)
    DEFAULT         reduce using rule 419 (expr_84 -> expr_84 switchBlockStatementGroup .)
    BRPAREN         reduce using rule 419 (expr_84 -> expr_84 switchBlockStatementGroup .)



state 832

    (421) expr_85 -> blockStatement .

    ASSERT          reduce using rule 421 (expr_85 -> blockStatement .)
    IF              reduce using rule 421 (expr_85 -> blockStatement .)
    WHILE           reduce using rule 421 (expr_85 -> blockStatement .)
    DO              reduce using rule 421 (expr_85 -> blockStatement .)
    SWITCH          reduce using rule 421 (expr_85 -> blockStatement .)
    SYNCHRONIZED    reduce using rule 421 (expr_85 -> blockStatement .)
    RETURN          reduce using rule 421 (expr_85 -> blockStatement .)
    THROW           reduce using rule 421 (expr_85 -> blockStatement .)
    BREAK           reduce using rule 421 (expr_85 -> blockStatement .)
    CONTINUE        reduce using rule 421 (expr_85 -> blockStatement .)
    IDENTIFIER      reduce using rule 421 (expr_85 -> blockStatement .)
    SEMI            reduce using rule 421 (expr_85 -> blockStatement .)
    BLPAREN         reduce using rule 421 (expr_85 -> blockStatement .)
    FOR             reduce using rule 421 (expr_85 -> blockStatement .)
    TRY             reduce using rule 421 (expr_85 -> blockStatement .)
    FINAL           reduce using rule 421 (expr_85 -> blockStatement .)
    AT              reduce using rule 421 (expr_85 -> blockStatement .)
    PUBLIC          reduce using rule 421 (expr_85 -> blockStatement .)
    PROTECTED       reduce using rule 421 (expr_85 -> blockStatement .)
    PRIVATE         reduce using rule 421 (expr_85 -> blockStatement .)
    STATIC          reduce using rule 421 (expr_85 -> blockStatement .)
    ABSTRACT        reduce using rule 421 (expr_85 -> blockStatement .)
    NATIVE          reduce using rule 421 (expr_85 -> blockStatement .)
    TRANSIENT       reduce using rule 421 (expr_85 -> blockStatement .)
    VOLATILE        reduce using rule 421 (expr_85 -> blockStatement .)
    STRICTFP        reduce using rule 421 (expr_85 -> blockStatement .)
    PLUS            reduce using rule 421 (expr_85 -> blockStatement .)
    DASH            reduce using rule 421 (expr_85 -> blockStatement .)
    OP_INC          reduce using rule 421 (expr_85 -> blockStatement .)
    OP_DEC          reduce using rule 421 (expr_85 -> blockStatement .)
    TILDE           reduce using rule 421 (expr_85 -> blockStatement .)
    EXCLAMATION     reduce using rule 421 (expr_85 -> blockStatement .)
    LPAREN          reduce using rule 421 (expr_85 -> blockStatement .)
    THIS            reduce using rule 421 (expr_85 -> blockStatement .)
    SUPER           reduce using rule 421 (expr_85 -> blockStatement .)
    VOID            reduce using rule 421 (expr_85 -> blockStatement .)
    CHARLITERAL     reduce using rule 421 (expr_85 -> blockStatement .)
    STRINGLITERAL   reduce using rule 421 (expr_85 -> blockStatement .)
    TRUE            reduce using rule 421 (expr_85 -> blockStatement .)
    FALSE           reduce using rule 421 (expr_85 -> blockStatement .)
    NULL            reduce using rule 421 (expr_85 -> blockStatement .)
    NEW             reduce using rule 421 (expr_85 -> blockStatement .)
    BOOLEAN         reduce using rule 421 (expr_85 -> blockStatement .)
    CHAR            reduce using rule 421 (expr_85 -> blockStatement .)
    BYTE            reduce using rule 421 (expr_85 -> blockStatement .)
    SHORT           reduce using rule 421 (expr_85 -> blockStatement .)
    INT             reduce using rule 421 (expr_85 -> blockStatement .)
    LONG            reduce using rule 421 (expr_85 -> blockStatement .)
    FLOAT           reduce using rule 421 (expr_85 -> blockStatement .)
    DOUBLE          reduce using rule 421 (expr_85 -> blockStatement .)
    NUMBER          reduce using rule 421 (expr_85 -> blockStatement .)
    HEX_NUMBER      reduce using rule 421 (expr_85 -> blockStatement .)
    LONG_NUMBER     reduce using rule 421 (expr_85 -> blockStatement .)
    LONG_HEX_NUMBER reduce using rule 421 (expr_85 -> blockStatement .)
    NON_INTEGER_1   reduce using rule 421 (expr_85 -> blockStatement .)
    NON_INTEGER_2   reduce using rule 421 (expr_85 -> blockStatement .)
    NON_INTEGER_3   reduce using rule 421 (expr_85 -> blockStatement .)
    CASE            reduce using rule 421 (expr_85 -> blockStatement .)
    DEFAULT         reduce using rule 421 (expr_85 -> blockStatement .)
    BRPAREN         reduce using rule 421 (expr_85 -> blockStatement .)



state 833

    (112) switchBlockStatementGroup -> switchLabel expr_85 .
    (422) expr_85 -> expr_85 . blockStatement
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    CASE            reduce using rule 112 (switchBlockStatementGroup -> switchLabel expr_85 .)
    DEFAULT         reduce using rule 112 (switchBlockStatementGroup -> switchLabel expr_85 .)
    BRPAREN         reduce using rule 112 (switchBlockStatementGroup -> switchLabel expr_85 .)
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 870
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 834

    (423) expr_85 -> empty .

    ASSERT          reduce using rule 423 (expr_85 -> empty .)
    IF              reduce using rule 423 (expr_85 -> empty .)
    WHILE           reduce using rule 423 (expr_85 -> empty .)
    DO              reduce using rule 423 (expr_85 -> empty .)
    SWITCH          reduce using rule 423 (expr_85 -> empty .)
    SYNCHRONIZED    reduce using rule 423 (expr_85 -> empty .)
    RETURN          reduce using rule 423 (expr_85 -> empty .)
    THROW           reduce using rule 423 (expr_85 -> empty .)
    BREAK           reduce using rule 423 (expr_85 -> empty .)
    CONTINUE        reduce using rule 423 (expr_85 -> empty .)
    IDENTIFIER      reduce using rule 423 (expr_85 -> empty .)
    SEMI            reduce using rule 423 (expr_85 -> empty .)
    BLPAREN         reduce using rule 423 (expr_85 -> empty .)
    FOR             reduce using rule 423 (expr_85 -> empty .)
    TRY             reduce using rule 423 (expr_85 -> empty .)
    FINAL           reduce using rule 423 (expr_85 -> empty .)
    AT              reduce using rule 423 (expr_85 -> empty .)
    PUBLIC          reduce using rule 423 (expr_85 -> empty .)
    PROTECTED       reduce using rule 423 (expr_85 -> empty .)
    PRIVATE         reduce using rule 423 (expr_85 -> empty .)
    STATIC          reduce using rule 423 (expr_85 -> empty .)
    ABSTRACT        reduce using rule 423 (expr_85 -> empty .)
    NATIVE          reduce using rule 423 (expr_85 -> empty .)
    TRANSIENT       reduce using rule 423 (expr_85 -> empty .)
    VOLATILE        reduce using rule 423 (expr_85 -> empty .)
    STRICTFP        reduce using rule 423 (expr_85 -> empty .)
    PLUS            reduce using rule 423 (expr_85 -> empty .)
    DASH            reduce using rule 423 (expr_85 -> empty .)
    OP_INC          reduce using rule 423 (expr_85 -> empty .)
    OP_DEC          reduce using rule 423 (expr_85 -> empty .)
    TILDE           reduce using rule 423 (expr_85 -> empty .)
    EXCLAMATION     reduce using rule 423 (expr_85 -> empty .)
    LPAREN          reduce using rule 423 (expr_85 -> empty .)
    THIS            reduce using rule 423 (expr_85 -> empty .)
    SUPER           reduce using rule 423 (expr_85 -> empty .)
    VOID            reduce using rule 423 (expr_85 -> empty .)
    CHARLITERAL     reduce using rule 423 (expr_85 -> empty .)
    STRINGLITERAL   reduce using rule 423 (expr_85 -> empty .)
    TRUE            reduce using rule 423 (expr_85 -> empty .)
    FALSE           reduce using rule 423 (expr_85 -> empty .)
    NULL            reduce using rule 423 (expr_85 -> empty .)
    NEW             reduce using rule 423 (expr_85 -> empty .)
    BOOLEAN         reduce using rule 423 (expr_85 -> empty .)
    CHAR            reduce using rule 423 (expr_85 -> empty .)
    BYTE            reduce using rule 423 (expr_85 -> empty .)
    SHORT           reduce using rule 423 (expr_85 -> empty .)
    INT             reduce using rule 423 (expr_85 -> empty .)
    LONG            reduce using rule 423 (expr_85 -> empty .)
    FLOAT           reduce using rule 423 (expr_85 -> empty .)
    DOUBLE          reduce using rule 423 (expr_85 -> empty .)
    NUMBER          reduce using rule 423 (expr_85 -> empty .)
    HEX_NUMBER      reduce using rule 423 (expr_85 -> empty .)
    LONG_NUMBER     reduce using rule 423 (expr_85 -> empty .)
    LONG_HEX_NUMBER reduce using rule 423 (expr_85 -> empty .)
    NON_INTEGER_1   reduce using rule 423 (expr_85 -> empty .)
    NON_INTEGER_2   reduce using rule 423 (expr_85 -> empty .)
    NON_INTEGER_3   reduce using rule 423 (expr_85 -> empty .)
    CASE            reduce using rule 423 (expr_85 -> empty .)
    DEFAULT         reduce using rule 423 (expr_85 -> empty .)
    BRPAREN         reduce using rule 423 (expr_85 -> empty .)



state 835

    (114) switchLabel -> DEFAULT COLON .

    ASSERT          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    IF              reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    WHILE           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    DO              reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    SWITCH          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    SYNCHRONIZED    reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    RETURN          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    THROW           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    BREAK           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    CONTINUE        reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    SEMI            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    BLPAREN         reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    FOR             reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    TRY             reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    FINAL           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    AT              reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    PUBLIC          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    PROTECTED       reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    PRIVATE         reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    STATIC          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    ABSTRACT        reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NATIVE          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    TRANSIENT       reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    VOLATILE        reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    STRICTFP        reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    PLUS            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    DASH            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    OP_INC          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    OP_DEC          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    TILDE           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    EXCLAMATION     reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    LPAREN          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    THIS            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    SUPER           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    VOID            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    CHARLITERAL     reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    STRINGLITERAL   reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    TRUE            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    FALSE           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NULL            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NEW             reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    CHAR            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    BYTE            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    SHORT           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    INT             reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    LONG            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    FLOAT           reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    DOUBLE          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NUMBER          reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    HEX_NUMBER      reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    LONG_NUMBER     reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    LONG_HEX_NUMBER reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_1   reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_2   reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    NON_INTEGER_3   reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    CASE            reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    DEFAULT         reduce using rule 114 (switchLabel -> DEFAULT COLON .)
    BRPAREN         reduce using rule 114 (switchLabel -> DEFAULT COLON .)



state 836

    (100) statement -> DO statement WHILE parExpression SEMI .

    BRPAREN         reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    ASSERT          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    IF              reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    WHILE           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    DO              reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    SWITCH          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    SYNCHRONIZED    reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    RETURN          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    THROW           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    BREAK           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    CONTINUE        reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    IDENTIFIER      reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    SEMI            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    BLPAREN         reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    FOR             reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    TRY             reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    FINAL           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    AT              reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    PUBLIC          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    PROTECTED       reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    PRIVATE         reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    STATIC          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    ABSTRACT        reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NATIVE          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    TRANSIENT       reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    VOLATILE        reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    STRICTFP        reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    PLUS            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    DASH            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    OP_INC          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    OP_DEC          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    TILDE           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    EXCLAMATION     reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    LPAREN          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    THIS            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    SUPER           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    VOID            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    CHARLITERAL     reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    STRINGLITERAL   reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    TRUE            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    FALSE           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NULL            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NEW             reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    BOOLEAN         reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    CHAR            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    BYTE            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    SHORT           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    INT             reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    LONG            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    FLOAT           reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    DOUBLE          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NUMBER          reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    HEX_NUMBER      reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_NUMBER     reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    LONG_HEX_NUMBER reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_1   reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_2   reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    NON_INTEGER_3   reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    ELSE            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    CASE            reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)
    DEFAULT         reduce using rule 100 (statement -> DO statement WHILE parExpression SEMI .)



state 837

    (410) expr_80 -> ELSE statement .

    BRPAREN         reduce using rule 410 (expr_80 -> ELSE statement .)
    ASSERT          reduce using rule 410 (expr_80 -> ELSE statement .)
    IF              reduce using rule 410 (expr_80 -> ELSE statement .)
    WHILE           reduce using rule 410 (expr_80 -> ELSE statement .)
    DO              reduce using rule 410 (expr_80 -> ELSE statement .)
    SWITCH          reduce using rule 410 (expr_80 -> ELSE statement .)
    SYNCHRONIZED    reduce using rule 410 (expr_80 -> ELSE statement .)
    RETURN          reduce using rule 410 (expr_80 -> ELSE statement .)
    THROW           reduce using rule 410 (expr_80 -> ELSE statement .)
    BREAK           reduce using rule 410 (expr_80 -> ELSE statement .)
    CONTINUE        reduce using rule 410 (expr_80 -> ELSE statement .)
    IDENTIFIER      reduce using rule 410 (expr_80 -> ELSE statement .)
    SEMI            reduce using rule 410 (expr_80 -> ELSE statement .)
    BLPAREN         reduce using rule 410 (expr_80 -> ELSE statement .)
    FOR             reduce using rule 410 (expr_80 -> ELSE statement .)
    TRY             reduce using rule 410 (expr_80 -> ELSE statement .)
    FINAL           reduce using rule 410 (expr_80 -> ELSE statement .)
    AT              reduce using rule 410 (expr_80 -> ELSE statement .)
    PUBLIC          reduce using rule 410 (expr_80 -> ELSE statement .)
    PROTECTED       reduce using rule 410 (expr_80 -> ELSE statement .)
    PRIVATE         reduce using rule 410 (expr_80 -> ELSE statement .)
    STATIC          reduce using rule 410 (expr_80 -> ELSE statement .)
    ABSTRACT        reduce using rule 410 (expr_80 -> ELSE statement .)
    NATIVE          reduce using rule 410 (expr_80 -> ELSE statement .)
    TRANSIENT       reduce using rule 410 (expr_80 -> ELSE statement .)
    VOLATILE        reduce using rule 410 (expr_80 -> ELSE statement .)
    STRICTFP        reduce using rule 410 (expr_80 -> ELSE statement .)
    PLUS            reduce using rule 410 (expr_80 -> ELSE statement .)
    DASH            reduce using rule 410 (expr_80 -> ELSE statement .)
    OP_INC          reduce using rule 410 (expr_80 -> ELSE statement .)
    OP_DEC          reduce using rule 410 (expr_80 -> ELSE statement .)
    TILDE           reduce using rule 410 (expr_80 -> ELSE statement .)
    EXCLAMATION     reduce using rule 410 (expr_80 -> ELSE statement .)
    LPAREN          reduce using rule 410 (expr_80 -> ELSE statement .)
    THIS            reduce using rule 410 (expr_80 -> ELSE statement .)
    SUPER           reduce using rule 410 (expr_80 -> ELSE statement .)
    VOID            reduce using rule 410 (expr_80 -> ELSE statement .)
    CHARLITERAL     reduce using rule 410 (expr_80 -> ELSE statement .)
    STRINGLITERAL   reduce using rule 410 (expr_80 -> ELSE statement .)
    TRUE            reduce using rule 410 (expr_80 -> ELSE statement .)
    FALSE           reduce using rule 410 (expr_80 -> ELSE statement .)
    NULL            reduce using rule 410 (expr_80 -> ELSE statement .)
    NEW             reduce using rule 410 (expr_80 -> ELSE statement .)
    BOOLEAN         reduce using rule 410 (expr_80 -> ELSE statement .)
    CHAR            reduce using rule 410 (expr_80 -> ELSE statement .)
    BYTE            reduce using rule 410 (expr_80 -> ELSE statement .)
    SHORT           reduce using rule 410 (expr_80 -> ELSE statement .)
    INT             reduce using rule 410 (expr_80 -> ELSE statement .)
    LONG            reduce using rule 410 (expr_80 -> ELSE statement .)
    FLOAT           reduce using rule 410 (expr_80 -> ELSE statement .)
    DOUBLE          reduce using rule 410 (expr_80 -> ELSE statement .)
    NUMBER          reduce using rule 410 (expr_80 -> ELSE statement .)
    HEX_NUMBER      reduce using rule 410 (expr_80 -> ELSE statement .)
    LONG_NUMBER     reduce using rule 410 (expr_80 -> ELSE statement .)
    LONG_HEX_NUMBER reduce using rule 410 (expr_80 -> ELSE statement .)
    NON_INTEGER_1   reduce using rule 410 (expr_80 -> ELSE statement .)
    NON_INTEGER_2   reduce using rule 410 (expr_80 -> ELSE statement .)
    NON_INTEGER_3   reduce using rule 410 (expr_80 -> ELSE statement .)
    ELSE            reduce using rule 410 (expr_80 -> ELSE statement .)
    CASE            reduce using rule 410 (expr_80 -> ELSE statement .)
    DEFAULT         reduce using rule 410 (expr_80 -> ELSE statement .)



state 838

    (403) expr_76 -> expr_76 COMMA . variableDeclarator
    (38) variableDeclarator -> . IDENTIFIER expr_42 expr_43

    IDENTIFIER      shift and go to state 609


    variableDeclarator             shift and go to state 871

state 839

    (402) expr_76 -> COMMA variableDeclarator .

    COMMA           reduce using rule 402 (expr_76 -> COMMA variableDeclarator .)
    SEMI            reduce using rule 402 (expr_76 -> COMMA variableDeclarator .)



state 840

    (309) expr_38 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 309 (expr_38 -> FLPAREN FRPAREN .)
    THROWS          reduce using rule 309 (expr_38 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 309 (expr_38 -> FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 309 (expr_38 -> FLPAREN FRPAREN .)



state 841

    (310) expr_38 -> expr_38 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 872



state 842

    (36) methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 . expr_40
    (314) expr_40 -> . block
    (315) expr_40 -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN

    SEMI            shift and go to state 873
    BLPAREN         shift and go to state 528


    expr_40                        shift and go to state 874
    block                          shift and go to state 875

state 843

    (312) expr_39 -> THROWS . qualifiedNameList
    (60) qualifiedNameList -> . qualifiedName expr_57
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedNameList              shift and go to state 876
    qualifiedName                  shift and go to state 807

state 844

    (313) expr_39 -> empty .

    SEMI            reduce using rule 313 (expr_39 -> empty .)
    BLPAREN         reduce using rule 313 (expr_39 -> empty .)



state 845

    (68) explicitConstructorInvocation -> primary . DOT expr_64 SUPER arguments SEMI

    DOT             shift and go to state 877



state 846

    (67) explicitConstructorInvocation -> expr_62 . expr_63 arguments SEMI
    (371) expr_63 -> . THIS
    (372) expr_63 -> . SUPER

    THIS            shift and go to state 878
    SUPER           shift and go to state 880


    expr_63                        shift and go to state 879

state 847

    (369) expr_62 -> nonWildcardTypeArguments .

    THIS            reduce using rule 369 (expr_62 -> nonWildcardTypeArguments .)
    SUPER           reduce using rule 369 (expr_62 -> nonWildcardTypeArguments .)



state 848

    (301) expr_34 -> empty .
    (370) expr_62 -> empty .

  ! reduce/reduce conflict for THIS resolved using rule 301 (expr_34 -> empty .).
  ! reduce/reduce conflict for SUPER resolved using rule 301 (expr_34 -> empty .).
    ASSERT          reduce using rule 301 (expr_34 -> empty .)
    IF              reduce using rule 301 (expr_34 -> empty .)
    WHILE           reduce using rule 301 (expr_34 -> empty .)
    DO              reduce using rule 301 (expr_34 -> empty .)
    SWITCH          reduce using rule 301 (expr_34 -> empty .)
    SYNCHRONIZED    reduce using rule 301 (expr_34 -> empty .)
    RETURN          reduce using rule 301 (expr_34 -> empty .)
    THROW           reduce using rule 301 (expr_34 -> empty .)
    BREAK           reduce using rule 301 (expr_34 -> empty .)
    CONTINUE        reduce using rule 301 (expr_34 -> empty .)
    IDENTIFIER      reduce using rule 301 (expr_34 -> empty .)
    SEMI            reduce using rule 301 (expr_34 -> empty .)
    BLPAREN         reduce using rule 301 (expr_34 -> empty .)
    FOR             reduce using rule 301 (expr_34 -> empty .)
    TRY             reduce using rule 301 (expr_34 -> empty .)
    FINAL           reduce using rule 301 (expr_34 -> empty .)
    AT              reduce using rule 301 (expr_34 -> empty .)
    PUBLIC          reduce using rule 301 (expr_34 -> empty .)
    PROTECTED       reduce using rule 301 (expr_34 -> empty .)
    PRIVATE         reduce using rule 301 (expr_34 -> empty .)
    STATIC          reduce using rule 301 (expr_34 -> empty .)
    ABSTRACT        reduce using rule 301 (expr_34 -> empty .)
    NATIVE          reduce using rule 301 (expr_34 -> empty .)
    TRANSIENT       reduce using rule 301 (expr_34 -> empty .)
    VOLATILE        reduce using rule 301 (expr_34 -> empty .)
    STRICTFP        reduce using rule 301 (expr_34 -> empty .)
    PLUS            reduce using rule 301 (expr_34 -> empty .)
    DASH            reduce using rule 301 (expr_34 -> empty .)
    OP_INC          reduce using rule 301 (expr_34 -> empty .)
    OP_DEC          reduce using rule 301 (expr_34 -> empty .)
    TILDE           reduce using rule 301 (expr_34 -> empty .)
    EXCLAMATION     reduce using rule 301 (expr_34 -> empty .)
    LPAREN          reduce using rule 301 (expr_34 -> empty .)
    THIS            reduce using rule 301 (expr_34 -> empty .)
    SUPER           reduce using rule 301 (expr_34 -> empty .)
    VOID            reduce using rule 301 (expr_34 -> empty .)
    CHARLITERAL     reduce using rule 301 (expr_34 -> empty .)
    STRINGLITERAL   reduce using rule 301 (expr_34 -> empty .)
    TRUE            reduce using rule 301 (expr_34 -> empty .)
    FALSE           reduce using rule 301 (expr_34 -> empty .)
    NULL            reduce using rule 301 (expr_34 -> empty .)
    NEW             reduce using rule 301 (expr_34 -> empty .)
    BOOLEAN         reduce using rule 301 (expr_34 -> empty .)
    CHAR            reduce using rule 301 (expr_34 -> empty .)
    BYTE            reduce using rule 301 (expr_34 -> empty .)
    SHORT           reduce using rule 301 (expr_34 -> empty .)
    INT             reduce using rule 301 (expr_34 -> empty .)
    LONG            reduce using rule 301 (expr_34 -> empty .)
    FLOAT           reduce using rule 301 (expr_34 -> empty .)
    DOUBLE          reduce using rule 301 (expr_34 -> empty .)
    NUMBER          reduce using rule 301 (expr_34 -> empty .)
    HEX_NUMBER      reduce using rule 301 (expr_34 -> empty .)
    LONG_NUMBER     reduce using rule 301 (expr_34 -> empty .)
    LONG_HEX_NUMBER reduce using rule 301 (expr_34 -> empty .)
    NON_INTEGER_1   reduce using rule 301 (expr_34 -> empty .)
    NON_INTEGER_2   reduce using rule 301 (expr_34 -> empty .)
    NON_INTEGER_3   reduce using rule 301 (expr_34 -> empty .)
    BRPAREN         reduce using rule 301 (expr_34 -> empty .)

  ! THIS            [ reduce using rule 370 (expr_62 -> empty .) ]
  ! SUPER           [ reduce using rule 370 (expr_62 -> empty .) ]


state 849

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 . expr_35 BRPAREN
    (302) expr_35 -> . blockStatement
    (303) expr_35 -> . expr_35 blockStatement
    (304) expr_35 -> . empty
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (547) empty -> .
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

  ! shift/reduce conflict for ASSERT resolved as shift.
  ! shift/reduce conflict for IF resolved as shift.
  ! shift/reduce conflict for WHILE resolved as shift.
  ! shift/reduce conflict for DO resolved as shift.
  ! shift/reduce conflict for SWITCH resolved as shift.
  ! shift/reduce conflict for SYNCHRONIZED resolved as shift.
  ! shift/reduce conflict for RETURN resolved as shift.
  ! shift/reduce conflict for THROW resolved as shift.
  ! shift/reduce conflict for BREAK resolved as shift.
  ! shift/reduce conflict for CONTINUE resolved as shift.
  ! shift/reduce conflict for IDENTIFIER resolved as shift.
  ! shift/reduce conflict for SEMI resolved as shift.
  ! shift/reduce conflict for BLPAREN resolved as shift.
  ! shift/reduce conflict for FOR resolved as shift.
  ! shift/reduce conflict for TRY resolved as shift.
  ! shift/reduce conflict for FINAL resolved as shift.
  ! shift/reduce conflict for AT resolved as shift.
  ! shift/reduce conflict for PUBLIC resolved as shift.
  ! shift/reduce conflict for PROTECTED resolved as shift.
  ! shift/reduce conflict for PRIVATE resolved as shift.
  ! shift/reduce conflict for STATIC resolved as shift.
  ! shift/reduce conflict for ABSTRACT resolved as shift.
  ! shift/reduce conflict for NATIVE resolved as shift.
  ! shift/reduce conflict for TRANSIENT resolved as shift.
  ! shift/reduce conflict for VOLATILE resolved as shift.
  ! shift/reduce conflict for STRICTFP resolved as shift.
  ! shift/reduce conflict for PLUS resolved as shift.
  ! shift/reduce conflict for DASH resolved as shift.
  ! shift/reduce conflict for OP_INC resolved as shift.
  ! shift/reduce conflict for OP_DEC resolved as shift.
  ! shift/reduce conflict for TILDE resolved as shift.
  ! shift/reduce conflict for EXCLAMATION resolved as shift.
  ! shift/reduce conflict for LPAREN resolved as shift.
  ! shift/reduce conflict for THIS resolved as shift.
  ! shift/reduce conflict for SUPER resolved as shift.
  ! shift/reduce conflict for VOID resolved as shift.
  ! shift/reduce conflict for CHARLITERAL resolved as shift.
  ! shift/reduce conflict for STRINGLITERAL resolved as shift.
  ! shift/reduce conflict for TRUE resolved as shift.
  ! shift/reduce conflict for FALSE resolved as shift.
  ! shift/reduce conflict for NULL resolved as shift.
  ! shift/reduce conflict for NEW resolved as shift.
  ! shift/reduce conflict for BOOLEAN resolved as shift.
  ! shift/reduce conflict for CHAR resolved as shift.
  ! shift/reduce conflict for BYTE resolved as shift.
  ! shift/reduce conflict for SHORT resolved as shift.
  ! shift/reduce conflict for INT resolved as shift.
  ! shift/reduce conflict for LONG resolved as shift.
  ! shift/reduce conflict for FLOAT resolved as shift.
  ! shift/reduce conflict for DOUBLE resolved as shift.
  ! shift/reduce conflict for NUMBER resolved as shift.
  ! shift/reduce conflict for HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_NUMBER resolved as shift.
  ! shift/reduce conflict for LONG_HEX_NUMBER resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_1 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_2 resolved as shift.
  ! shift/reduce conflict for NON_INTEGER_3 resolved as shift.
    BRPAREN         reduce using rule 547 (empty -> .)
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102

  ! ASSERT          [ reduce using rule 547 (empty -> .) ]
  ! IF              [ reduce using rule 547 (empty -> .) ]
  ! WHILE           [ reduce using rule 547 (empty -> .) ]
  ! DO              [ reduce using rule 547 (empty -> .) ]
  ! SWITCH          [ reduce using rule 547 (empty -> .) ]
  ! SYNCHRONIZED    [ reduce using rule 547 (empty -> .) ]
  ! RETURN          [ reduce using rule 547 (empty -> .) ]
  ! THROW           [ reduce using rule 547 (empty -> .) ]
  ! BREAK           [ reduce using rule 547 (empty -> .) ]
  ! CONTINUE        [ reduce using rule 547 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 547 (empty -> .) ]
  ! SEMI            [ reduce using rule 547 (empty -> .) ]
  ! BLPAREN         [ reduce using rule 547 (empty -> .) ]
  ! FOR             [ reduce using rule 547 (empty -> .) ]
  ! TRY             [ reduce using rule 547 (empty -> .) ]
  ! FINAL           [ reduce using rule 547 (empty -> .) ]
  ! AT              [ reduce using rule 547 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 547 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 547 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 547 (empty -> .) ]
  ! STATIC          [ reduce using rule 547 (empty -> .) ]
  ! ABSTRACT        [ reduce using rule 547 (empty -> .) ]
  ! NATIVE          [ reduce using rule 547 (empty -> .) ]
  ! TRANSIENT       [ reduce using rule 547 (empty -> .) ]
  ! VOLATILE        [ reduce using rule 547 (empty -> .) ]
  ! STRICTFP        [ reduce using rule 547 (empty -> .) ]
  ! PLUS            [ reduce using rule 547 (empty -> .) ]
  ! DASH            [ reduce using rule 547 (empty -> .) ]
  ! OP_INC          [ reduce using rule 547 (empty -> .) ]
  ! OP_DEC          [ reduce using rule 547 (empty -> .) ]
  ! TILDE           [ reduce using rule 547 (empty -> .) ]
  ! EXCLAMATION     [ reduce using rule 547 (empty -> .) ]
  ! LPAREN          [ reduce using rule 547 (empty -> .) ]
  ! THIS            [ reduce using rule 547 (empty -> .) ]
  ! SUPER           [ reduce using rule 547 (empty -> .) ]
  ! VOID            [ reduce using rule 547 (empty -> .) ]
  ! CHARLITERAL     [ reduce using rule 547 (empty -> .) ]
  ! STRINGLITERAL   [ reduce using rule 547 (empty -> .) ]
  ! TRUE            [ reduce using rule 547 (empty -> .) ]
  ! FALSE           [ reduce using rule 547 (empty -> .) ]
  ! NULL            [ reduce using rule 547 (empty -> .) ]
  ! NEW             [ reduce using rule 547 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 547 (empty -> .) ]
  ! CHAR            [ reduce using rule 547 (empty -> .) ]
  ! BYTE            [ reduce using rule 547 (empty -> .) ]
  ! SHORT           [ reduce using rule 547 (empty -> .) ]
  ! INT             [ reduce using rule 547 (empty -> .) ]
  ! LONG            [ reduce using rule 547 (empty -> .) ]
  ! FLOAT           [ reduce using rule 547 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 547 (empty -> .) ]
  ! NUMBER          [ reduce using rule 547 (empty -> .) ]
  ! HEX_NUMBER      [ reduce using rule 547 (empty -> .) ]
  ! LONG_NUMBER     [ reduce using rule 547 (empty -> .) ]
  ! LONG_HEX_NUMBER [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_1   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_2   [ reduce using rule 547 (empty -> .) ]
  ! NON_INTEGER_3   [ reduce using rule 547 (empty -> .) ]

    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 881
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    empty                          shift and go to state 882
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    expr_35                        shift and go to state 883
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 850

    (300) expr_34 -> explicitConstructorInvocation .

    ASSERT          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    IF              reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    WHILE           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    DO              reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    SWITCH          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    SYNCHRONIZED    reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    RETURN          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    THROW           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    BREAK           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    CONTINUE        reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    IDENTIFIER      reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    SEMI            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    BLPAREN         reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    FOR             reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    TRY             reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    FINAL           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    AT              reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    PUBLIC          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    PROTECTED       reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    PRIVATE         reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    STATIC          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    ABSTRACT        reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NATIVE          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    TRANSIENT       reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    VOLATILE        reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    STRICTFP        reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    PLUS            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    DASH            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    OP_INC          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    OP_DEC          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    TILDE           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    EXCLAMATION     reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    LPAREN          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    THIS            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    SUPER           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    VOID            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    CHARLITERAL     reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    STRINGLITERAL   reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    TRUE            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    FALSE           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NULL            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NEW             reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    BOOLEAN         reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    CHAR            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    BYTE            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    SHORT           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    INT             reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    LONG            reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    FLOAT           reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    DOUBLE          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NUMBER          reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    HEX_NUMBER      reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    LONG_NUMBER     reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    LONG_HEX_NUMBER reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NON_INTEGER_1   reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NON_INTEGER_2   reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    NON_INTEGER_3   reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)
    BRPAREN         reduce using rule 300 (expr_34 -> explicitConstructorInvocation .)



state 851

    (356) expr_57 -> COMMA . qualifiedName
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedName                  shift and go to state 884

state 852

    (358) expr_57 -> empty .

    COMMA           reduce using rule 358 (expr_57 -> empty .)
    BLPAREN         reduce using rule 358 (expr_57 -> empty .)
    SEMI            reduce using rule 358 (expr_57 -> empty .)



state 853

    (60) qualifiedNameList -> qualifiedName expr_57 .
    (357) expr_57 -> expr_57 . COMMA qualifiedName

    SEMI            reduce using rule 60 (qualifiedNameList -> qualifiedName expr_57 .)
    BLPAREN         reduce using rule 60 (qualifiedNameList -> qualifiedName expr_57 .)
    COMMA           shift and go to state 885



state 854

    (65) normalParameterDecl -> variableModifiers type IDENTIFIER . expr_61
    (366) expr_61 -> . FLPAREN FRPAREN
    (367) expr_61 -> . expr_61 FLPAREN FRPAREN
    (368) expr_61 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 887
    COMMA           reduce using rule 547 (empty -> .)
    RPAREN          reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    expr_61                        shift and go to state 886
    empty                          shift and go to state 888

state 855

    (66) ellipsisParameterDecl -> variableModifiers type OP_ARRAY . IDENTIFIER

    IDENTIFIER      shift and go to state 889



state 856

    (365) expr_60 -> expr_60 normalParameterDecl COMMA .

    FINAL           reduce using rule 365 (expr_60 -> expr_60 normalParameterDecl COMMA .)
    AT              reduce using rule 365 (expr_60 -> expr_60 normalParameterDecl COMMA .)



state 857

    (362) expr_59 -> expr_59 COMMA . normalParameterDecl
    (65) normalParameterDecl -> . variableModifiers type IDENTIFIER expr_61
    (10) variableModifiers -> . expr_9
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (71) annotation -> . AT qualifiedName expr_68

    FINAL           shift and go to state 715
    AT              shift and go to state 4


    variableModifiers              shift and go to state 858
    normalParameterDecl            shift and go to state 890
    expr_9                         shift and go to state 603
    annotation                     shift and go to state 720

state 858

    (65) normalParameterDecl -> variableModifiers . type IDENTIFIER expr_61
    (46) type -> . classOrInterfaceType expr_49
    (47) type -> . primitiveType expr_50
    (48) classOrInterfaceType -> . IDENTIFIER expr_51 expr_53
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE

    IDENTIFIER      shift and go to state 187
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68


    classOrInterfaceType           shift and go to state 214
    primitiveType                  shift and go to state 238
    type                           shift and go to state 891

state 859

    (361) expr_59 -> COMMA normalParameterDecl .

    COMMA           reduce using rule 361 (expr_59 -> COMMA normalParameterDecl .)
    RPAREN          reduce using rule 361 (expr_59 -> COMMA normalParameterDecl .)



state 860

    (397) expr_74 -> DEFAULT elementValue .

    SEMI            reduce using rule 397 (expr_74 -> DEFAULT elementValue .)



state 861

    (87) annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .

    BRPAREN         reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    SEMI            reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    PUBLIC          reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    PROTECTED       reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    PRIVATE         reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    STATIC          reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    ABSTRACT        reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    FINAL           reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    NATIVE          reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    SYNCHRONIZED    reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    TRANSIENT       reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    VOLATILE        reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    STRICTFP        reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)
    AT              reduce using rule 87 (annotationMethodDeclaration -> modifiers type IDENTIFIER LPAREN RPAREN expr_74 SEMI .)



state 862

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 . expr_47 SEMI
    (329) expr_46 -> expr_46 . FLPAREN FRPAREN
    (331) expr_47 -> . THROWS qualifiedNameList
    (332) expr_47 -> . empty
    (547) empty -> .

    FLPAREN         shift and go to state 894
    THROWS          shift and go to state 893
    SEMI            reduce using rule 547 (empty -> .)


    expr_47                        shift and go to state 892
    empty                          shift and go to state 895

state 863

    (328) expr_46 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 896



state 864

    (330) expr_46 -> empty .

    FLPAREN         reduce using rule 330 (expr_46 -> empty .)
    THROWS          reduce using rule 330 (expr_46 -> empty .)
    SEMI            reduce using rule 330 (expr_46 -> empty .)



state 865

    (120) forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI . expr_91 RPAREN statement
    (437) expr_91 -> . expressionList
    (438) expr_91 -> . empty
    (124) expressionList -> . expression expr_92
    (547) empty -> .
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    RPAREN          reduce using rule 547 (empty -> .)
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    expressionList                 shift and go to state 897
    empty                          shift and go to state 898
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    expr_91                        shift and go to state 899
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 332

state 866

    (119) forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON . expression RPAREN statement
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    IDENTIFIER      shift and go to state 130
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    additiveExpression             shift and go to state 75
    instanceOfExpression           shift and go to state 66
    conditionalExpression          shift and go to state 218
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    primary                        shift and go to state 83
    relationalExpression           shift and go to state 65
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    castExpression                 shift and go to state 114
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 900

state 867

    (117) catchClause -> CATCH LPAREN formalParameter RPAREN . block
    (88) block -> . BLPAREN expr_75 BRPAREN

    BLPAREN         shift and go to state 528


    block                          shift and go to state 901

state 868

    (118) formalParameter -> variableModifiers type . IDENTIFIER expr_88

    IDENTIFIER      shift and go to state 902



state 869

    (113) switchLabel -> CASE expression COLON .

    ASSERT          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    IF              reduce using rule 113 (switchLabel -> CASE expression COLON .)
    WHILE           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    DO              reduce using rule 113 (switchLabel -> CASE expression COLON .)
    SWITCH          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    SYNCHRONIZED    reduce using rule 113 (switchLabel -> CASE expression COLON .)
    RETURN          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    THROW           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    BREAK           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    CONTINUE        reduce using rule 113 (switchLabel -> CASE expression COLON .)
    IDENTIFIER      reduce using rule 113 (switchLabel -> CASE expression COLON .)
    SEMI            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    BLPAREN         reduce using rule 113 (switchLabel -> CASE expression COLON .)
    FOR             reduce using rule 113 (switchLabel -> CASE expression COLON .)
    TRY             reduce using rule 113 (switchLabel -> CASE expression COLON .)
    FINAL           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    AT              reduce using rule 113 (switchLabel -> CASE expression COLON .)
    PUBLIC          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    PROTECTED       reduce using rule 113 (switchLabel -> CASE expression COLON .)
    PRIVATE         reduce using rule 113 (switchLabel -> CASE expression COLON .)
    STATIC          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    ABSTRACT        reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NATIVE          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    TRANSIENT       reduce using rule 113 (switchLabel -> CASE expression COLON .)
    VOLATILE        reduce using rule 113 (switchLabel -> CASE expression COLON .)
    STRICTFP        reduce using rule 113 (switchLabel -> CASE expression COLON .)
    PLUS            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    DASH            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    OP_INC          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    OP_DEC          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    TILDE           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    EXCLAMATION     reduce using rule 113 (switchLabel -> CASE expression COLON .)
    LPAREN          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    THIS            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    SUPER           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    VOID            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    CHARLITERAL     reduce using rule 113 (switchLabel -> CASE expression COLON .)
    STRINGLITERAL   reduce using rule 113 (switchLabel -> CASE expression COLON .)
    TRUE            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    FALSE           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NULL            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NEW             reduce using rule 113 (switchLabel -> CASE expression COLON .)
    BOOLEAN         reduce using rule 113 (switchLabel -> CASE expression COLON .)
    CHAR            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    BYTE            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    SHORT           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    INT             reduce using rule 113 (switchLabel -> CASE expression COLON .)
    LONG            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    FLOAT           reduce using rule 113 (switchLabel -> CASE expression COLON .)
    DOUBLE          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NUMBER          reduce using rule 113 (switchLabel -> CASE expression COLON .)
    HEX_NUMBER      reduce using rule 113 (switchLabel -> CASE expression COLON .)
    LONG_NUMBER     reduce using rule 113 (switchLabel -> CASE expression COLON .)
    LONG_HEX_NUMBER reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NON_INTEGER_1   reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NON_INTEGER_2   reduce using rule 113 (switchLabel -> CASE expression COLON .)
    NON_INTEGER_3   reduce using rule 113 (switchLabel -> CASE expression COLON .)
    CASE            reduce using rule 113 (switchLabel -> CASE expression COLON .)
    DEFAULT         reduce using rule 113 (switchLabel -> CASE expression COLON .)
    BRPAREN         reduce using rule 113 (switchLabel -> CASE expression COLON .)



state 870

    (422) expr_85 -> expr_85 blockStatement .

    ASSERT          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    IF              reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    WHILE           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    DO              reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    SWITCH          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    SYNCHRONIZED    reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    RETURN          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    THROW           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    BREAK           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    CONTINUE        reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    IDENTIFIER      reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    SEMI            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    BLPAREN         reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    FOR             reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    TRY             reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    FINAL           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    AT              reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    PUBLIC          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    PROTECTED       reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    PRIVATE         reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    STATIC          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    ABSTRACT        reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NATIVE          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    TRANSIENT       reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    VOLATILE        reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    STRICTFP        reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    PLUS            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    DASH            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    OP_INC          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    OP_DEC          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    TILDE           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    EXCLAMATION     reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    LPAREN          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    THIS            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    SUPER           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    VOID            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    CHARLITERAL     reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    STRINGLITERAL   reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    TRUE            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    FALSE           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NULL            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NEW             reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    BOOLEAN         reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    CHAR            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    BYTE            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    SHORT           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    INT             reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    LONG            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    FLOAT           reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    DOUBLE          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NUMBER          reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    HEX_NUMBER      reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    LONG_NUMBER     reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    LONG_HEX_NUMBER reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NON_INTEGER_1   reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NON_INTEGER_2   reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    NON_INTEGER_3   reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    CASE            reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    DEFAULT         reduce using rule 422 (expr_85 -> expr_85 blockStatement .)
    BRPAREN         reduce using rule 422 (expr_85 -> expr_85 blockStatement .)



state 871

    (403) expr_76 -> expr_76 COMMA variableDeclarator .

    COMMA           reduce using rule 403 (expr_76 -> expr_76 COMMA variableDeclarator .)
    SEMI            reduce using rule 403 (expr_76 -> expr_76 COMMA variableDeclarator .)



state 872

    (310) expr_38 -> expr_38 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 310 (expr_38 -> expr_38 FLPAREN FRPAREN .)
    THROWS          reduce using rule 310 (expr_38 -> expr_38 FLPAREN FRPAREN .)
    SEMI            reduce using rule 310 (expr_38 -> expr_38 FLPAREN FRPAREN .)
    BLPAREN         reduce using rule 310 (expr_38 -> expr_38 FLPAREN FRPAREN .)



state 873

    (315) expr_40 -> SEMI .

    BRPAREN         reduce using rule 315 (expr_40 -> SEMI .)
    SEMI            reduce using rule 315 (expr_40 -> SEMI .)
    STATIC          reduce using rule 315 (expr_40 -> SEMI .)
    PUBLIC          reduce using rule 315 (expr_40 -> SEMI .)
    PROTECTED       reduce using rule 315 (expr_40 -> SEMI .)
    PRIVATE         reduce using rule 315 (expr_40 -> SEMI .)
    ABSTRACT        reduce using rule 315 (expr_40 -> SEMI .)
    FINAL           reduce using rule 315 (expr_40 -> SEMI .)
    NATIVE          reduce using rule 315 (expr_40 -> SEMI .)
    SYNCHRONIZED    reduce using rule 315 (expr_40 -> SEMI .)
    TRANSIENT       reduce using rule 315 (expr_40 -> SEMI .)
    VOLATILE        reduce using rule 315 (expr_40 -> SEMI .)
    STRICTFP        reduce using rule 315 (expr_40 -> SEMI .)
    AT              reduce using rule 315 (expr_40 -> SEMI .)
    BLPAREN         reduce using rule 315 (expr_40 -> SEMI .)



state 874

    (36) methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .

    SEMI            reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    STATIC          reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    PUBLIC          reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    PROTECTED       reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    PRIVATE         reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    ABSTRACT        reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    FINAL           reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    NATIVE          reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    SYNCHRONIZED    reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    TRANSIENT       reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    VOLATILE        reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    STRICTFP        reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    AT              reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    BLPAREN         reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)
    BRPAREN         reduce using rule 36 (methodDeclaration -> modifiers expr_36 expr_37 IDENTIFIER formalParameters expr_38 expr_39 expr_40 .)



state 875

    (314) expr_40 -> block .

    BRPAREN         reduce using rule 314 (expr_40 -> block .)
    SEMI            reduce using rule 314 (expr_40 -> block .)
    STATIC          reduce using rule 314 (expr_40 -> block .)
    PUBLIC          reduce using rule 314 (expr_40 -> block .)
    PROTECTED       reduce using rule 314 (expr_40 -> block .)
    PRIVATE         reduce using rule 314 (expr_40 -> block .)
    ABSTRACT        reduce using rule 314 (expr_40 -> block .)
    FINAL           reduce using rule 314 (expr_40 -> block .)
    NATIVE          reduce using rule 314 (expr_40 -> block .)
    SYNCHRONIZED    reduce using rule 314 (expr_40 -> block .)
    TRANSIENT       reduce using rule 314 (expr_40 -> block .)
    VOLATILE        reduce using rule 314 (expr_40 -> block .)
    STRICTFP        reduce using rule 314 (expr_40 -> block .)
    AT              reduce using rule 314 (expr_40 -> block .)
    BLPAREN         reduce using rule 314 (expr_40 -> block .)



state 876

    (312) expr_39 -> THROWS qualifiedNameList .

    SEMI            reduce using rule 312 (expr_39 -> THROWS qualifiedNameList .)
    BLPAREN         reduce using rule 312 (expr_39 -> THROWS qualifiedNameList .)



state 877

    (68) explicitConstructorInvocation -> primary DOT . expr_64 SUPER arguments SEMI
    (373) expr_64 -> . nonWildcardTypeArguments
    (374) expr_64 -> . empty
    (203) nonWildcardTypeArguments -> . LESS typeList MORE
    (547) empty -> .

    LESS            shift and go to state 184
    SUPER           reduce using rule 547 (empty -> .)


    expr_64                        shift and go to state 903
    nonWildcardTypeArguments       shift and go to state 904
    empty                          shift and go to state 905

state 878

    (371) expr_63 -> THIS .

    LPAREN          reduce using rule 371 (expr_63 -> THIS .)



state 879

    (67) explicitConstructorInvocation -> expr_62 expr_63 . arguments SEMI
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    arguments                      shift and go to state 906

state 880

    (372) expr_63 -> SUPER .

    LPAREN          reduce using rule 372 (expr_63 -> SUPER .)



state 881

    (302) expr_35 -> blockStatement .

    BRPAREN         reduce using rule 302 (expr_35 -> blockStatement .)
    ASSERT          reduce using rule 302 (expr_35 -> blockStatement .)
    IF              reduce using rule 302 (expr_35 -> blockStatement .)
    WHILE           reduce using rule 302 (expr_35 -> blockStatement .)
    DO              reduce using rule 302 (expr_35 -> blockStatement .)
    SWITCH          reduce using rule 302 (expr_35 -> blockStatement .)
    SYNCHRONIZED    reduce using rule 302 (expr_35 -> blockStatement .)
    RETURN          reduce using rule 302 (expr_35 -> blockStatement .)
    THROW           reduce using rule 302 (expr_35 -> blockStatement .)
    BREAK           reduce using rule 302 (expr_35 -> blockStatement .)
    CONTINUE        reduce using rule 302 (expr_35 -> blockStatement .)
    IDENTIFIER      reduce using rule 302 (expr_35 -> blockStatement .)
    SEMI            reduce using rule 302 (expr_35 -> blockStatement .)
    BLPAREN         reduce using rule 302 (expr_35 -> blockStatement .)
    FOR             reduce using rule 302 (expr_35 -> blockStatement .)
    TRY             reduce using rule 302 (expr_35 -> blockStatement .)
    FINAL           reduce using rule 302 (expr_35 -> blockStatement .)
    AT              reduce using rule 302 (expr_35 -> blockStatement .)
    PUBLIC          reduce using rule 302 (expr_35 -> blockStatement .)
    PROTECTED       reduce using rule 302 (expr_35 -> blockStatement .)
    PRIVATE         reduce using rule 302 (expr_35 -> blockStatement .)
    STATIC          reduce using rule 302 (expr_35 -> blockStatement .)
    ABSTRACT        reduce using rule 302 (expr_35 -> blockStatement .)
    NATIVE          reduce using rule 302 (expr_35 -> blockStatement .)
    TRANSIENT       reduce using rule 302 (expr_35 -> blockStatement .)
    VOLATILE        reduce using rule 302 (expr_35 -> blockStatement .)
    STRICTFP        reduce using rule 302 (expr_35 -> blockStatement .)
    PLUS            reduce using rule 302 (expr_35 -> blockStatement .)
    DASH            reduce using rule 302 (expr_35 -> blockStatement .)
    OP_INC          reduce using rule 302 (expr_35 -> blockStatement .)
    OP_DEC          reduce using rule 302 (expr_35 -> blockStatement .)
    TILDE           reduce using rule 302 (expr_35 -> blockStatement .)
    EXCLAMATION     reduce using rule 302 (expr_35 -> blockStatement .)
    LPAREN          reduce using rule 302 (expr_35 -> blockStatement .)
    THIS            reduce using rule 302 (expr_35 -> blockStatement .)
    SUPER           reduce using rule 302 (expr_35 -> blockStatement .)
    VOID            reduce using rule 302 (expr_35 -> blockStatement .)
    CHARLITERAL     reduce using rule 302 (expr_35 -> blockStatement .)
    STRINGLITERAL   reduce using rule 302 (expr_35 -> blockStatement .)
    TRUE            reduce using rule 302 (expr_35 -> blockStatement .)
    FALSE           reduce using rule 302 (expr_35 -> blockStatement .)
    NULL            reduce using rule 302 (expr_35 -> blockStatement .)
    NEW             reduce using rule 302 (expr_35 -> blockStatement .)
    BOOLEAN         reduce using rule 302 (expr_35 -> blockStatement .)
    CHAR            reduce using rule 302 (expr_35 -> blockStatement .)
    BYTE            reduce using rule 302 (expr_35 -> blockStatement .)
    SHORT           reduce using rule 302 (expr_35 -> blockStatement .)
    INT             reduce using rule 302 (expr_35 -> blockStatement .)
    LONG            reduce using rule 302 (expr_35 -> blockStatement .)
    FLOAT           reduce using rule 302 (expr_35 -> blockStatement .)
    DOUBLE          reduce using rule 302 (expr_35 -> blockStatement .)
    NUMBER          reduce using rule 302 (expr_35 -> blockStatement .)
    HEX_NUMBER      reduce using rule 302 (expr_35 -> blockStatement .)
    LONG_NUMBER     reduce using rule 302 (expr_35 -> blockStatement .)
    LONG_HEX_NUMBER reduce using rule 302 (expr_35 -> blockStatement .)
    NON_INTEGER_1   reduce using rule 302 (expr_35 -> blockStatement .)
    NON_INTEGER_2   reduce using rule 302 (expr_35 -> blockStatement .)
    NON_INTEGER_3   reduce using rule 302 (expr_35 -> blockStatement .)



state 882

    (304) expr_35 -> empty .

    BRPAREN         reduce using rule 304 (expr_35 -> empty .)
    ASSERT          reduce using rule 304 (expr_35 -> empty .)
    IF              reduce using rule 304 (expr_35 -> empty .)
    WHILE           reduce using rule 304 (expr_35 -> empty .)
    DO              reduce using rule 304 (expr_35 -> empty .)
    SWITCH          reduce using rule 304 (expr_35 -> empty .)
    SYNCHRONIZED    reduce using rule 304 (expr_35 -> empty .)
    RETURN          reduce using rule 304 (expr_35 -> empty .)
    THROW           reduce using rule 304 (expr_35 -> empty .)
    BREAK           reduce using rule 304 (expr_35 -> empty .)
    CONTINUE        reduce using rule 304 (expr_35 -> empty .)
    IDENTIFIER      reduce using rule 304 (expr_35 -> empty .)
    SEMI            reduce using rule 304 (expr_35 -> empty .)
    BLPAREN         reduce using rule 304 (expr_35 -> empty .)
    FOR             reduce using rule 304 (expr_35 -> empty .)
    TRY             reduce using rule 304 (expr_35 -> empty .)
    FINAL           reduce using rule 304 (expr_35 -> empty .)
    AT              reduce using rule 304 (expr_35 -> empty .)
    PUBLIC          reduce using rule 304 (expr_35 -> empty .)
    PROTECTED       reduce using rule 304 (expr_35 -> empty .)
    PRIVATE         reduce using rule 304 (expr_35 -> empty .)
    STATIC          reduce using rule 304 (expr_35 -> empty .)
    ABSTRACT        reduce using rule 304 (expr_35 -> empty .)
    NATIVE          reduce using rule 304 (expr_35 -> empty .)
    TRANSIENT       reduce using rule 304 (expr_35 -> empty .)
    VOLATILE        reduce using rule 304 (expr_35 -> empty .)
    STRICTFP        reduce using rule 304 (expr_35 -> empty .)
    PLUS            reduce using rule 304 (expr_35 -> empty .)
    DASH            reduce using rule 304 (expr_35 -> empty .)
    OP_INC          reduce using rule 304 (expr_35 -> empty .)
    OP_DEC          reduce using rule 304 (expr_35 -> empty .)
    TILDE           reduce using rule 304 (expr_35 -> empty .)
    EXCLAMATION     reduce using rule 304 (expr_35 -> empty .)
    LPAREN          reduce using rule 304 (expr_35 -> empty .)
    THIS            reduce using rule 304 (expr_35 -> empty .)
    SUPER           reduce using rule 304 (expr_35 -> empty .)
    VOID            reduce using rule 304 (expr_35 -> empty .)
    CHARLITERAL     reduce using rule 304 (expr_35 -> empty .)
    STRINGLITERAL   reduce using rule 304 (expr_35 -> empty .)
    TRUE            reduce using rule 304 (expr_35 -> empty .)
    FALSE           reduce using rule 304 (expr_35 -> empty .)
    NULL            reduce using rule 304 (expr_35 -> empty .)
    NEW             reduce using rule 304 (expr_35 -> empty .)
    BOOLEAN         reduce using rule 304 (expr_35 -> empty .)
    CHAR            reduce using rule 304 (expr_35 -> empty .)
    BYTE            reduce using rule 304 (expr_35 -> empty .)
    SHORT           reduce using rule 304 (expr_35 -> empty .)
    INT             reduce using rule 304 (expr_35 -> empty .)
    LONG            reduce using rule 304 (expr_35 -> empty .)
    FLOAT           reduce using rule 304 (expr_35 -> empty .)
    DOUBLE          reduce using rule 304 (expr_35 -> empty .)
    NUMBER          reduce using rule 304 (expr_35 -> empty .)
    HEX_NUMBER      reduce using rule 304 (expr_35 -> empty .)
    LONG_NUMBER     reduce using rule 304 (expr_35 -> empty .)
    LONG_HEX_NUMBER reduce using rule 304 (expr_35 -> empty .)
    NON_INTEGER_1   reduce using rule 304 (expr_35 -> empty .)
    NON_INTEGER_2   reduce using rule 304 (expr_35 -> empty .)
    NON_INTEGER_3   reduce using rule 304 (expr_35 -> empty .)



state 883

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 . BRPAREN
    (303) expr_35 -> expr_35 . blockStatement
    (89) blockStatement -> . localVariableDeclarationStatement
    (90) blockStatement -> . classOrInterfaceDeclaration
    (91) blockStatement -> . statement
    (92) localVariableDeclarationStatement -> . localVariableDeclaration SEMI
    (7) classOrInterfaceDeclaration -> . classDeclaration
    (8) classOrInterfaceDeclaration -> . interfaceDeclaration
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (93) localVariableDeclaration -> . variableModifiers type variableDeclarator expr_76
    (11) classDeclaration -> . normalClassDeclaration
    (12) classDeclaration -> . enumDeclaration
    (22) interfaceDeclaration -> . normalInterfaceDeclaration
    (23) interfaceDeclaration -> . annotationTypeDeclaration
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (10) variableModifiers -> . expr_9
    (13) normalClassDeclaration -> . modifiers CLASS IDENTIFIER expr_10 expr_11 expr_12 classBody
    (17) enumDeclaration -> . modifiers expr_16 IDENTIFIER expr_17 enumBody
    (24) normalInterfaceDeclaration -> . modifiers INTERFACE IDENTIFIER expr_26 expr_27 interfaceBody
    (78) annotationTypeDeclaration -> . modifiers AT INTERFACE IDENTIFIER annotationTypeBody
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (244) expr_9 -> . FINAL
    (245) expr_9 -> . annotation
    (9) modifiers -> . expr_8
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (71) annotation -> . AT qualifiedName expr_68
    (232) expr_8 -> . annotation
    (233) expr_8 -> . PUBLIC
    (234) expr_8 -> . PROTECTED
    (235) expr_8 -> . PRIVATE
    (236) expr_8 -> . STATIC
    (237) expr_8 -> . ABSTRACT
    (238) expr_8 -> . FINAL
    (239) expr_8 -> . NATIVE
    (240) expr_8 -> . SYNCHRONIZED
    (241) expr_8 -> . TRANSIENT
    (242) expr_8 -> . VOLATILE
    (243) expr_8 -> . STRICTFP
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    BRPAREN         shift and go to state 908
    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 583
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    FINAL           shift and go to state 584
    AT              shift and go to state 4
    PUBLIC          shift and go to state 54
    PROTECTED       shift and go to state 32
    PRIVATE         shift and go to state 38
    STATIC          shift and go to state 33
    ABSTRACT        shift and go to state 31
    NATIVE          shift and go to state 47
    TRANSIENT       shift and go to state 41
    VOLATILE        shift and go to state 53
    STRICTFP        shift and go to state 40
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    INTLITERAL                     shift and go to state 56
    conditionalAndExpression       shift and go to state 58
    blockStatement                 shift and go to state 907
    classOrInterfaceDeclaration    shift and go to state 580
    relationalExpression           shift and go to state 65
    modifiers                      shift and go to state 48
    localVariableDeclarationStatement shift and go to state 581
    instanceOfExpression           shift and go to state 66
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    LONGLITERAL                    shift and go to state 73
    additiveExpression             shift and go to state 75
    expr_77                        shift and go to state 586
    classDeclaration               shift and go to state 49
    unaryExpressionNotPlusMinus    shift and go to state 76
    annotationTypeDeclaration      shift and go to state 51
    interfaceDeclaration           shift and go to state 52
    andExpression                  shift and go to state 78
    expression                     shift and go to state 591
    block                          shift and go to state 592
    equalityExpression             shift and go to state 80
    localVariableDeclaration       shift and go to state 593
    exclusiveOrExpression          shift and go to state 82
    primary                        shift and go to state 83
    literal                        shift and go to state 89
    statement                      shift and go to state 596
    forstatement                   shift and go to state 589
    conditionalExpression          shift and go to state 218
    enumDeclaration                shift and go to state 45
    primitiveType                  shift and go to state 96
    multiplicativeExpression       shift and go to state 104
    FLOATLITERAL                   shift and go to state 77
    normalInterfaceDeclaration     shift and go to state 34
    shiftExpression                shift and go to state 107
    normalClassDeclaration         shift and go to state 37
    expr_8                         shift and go to state 42
    expr_9                         shift and go to state 603
    unaryExpression                shift and go to state 108
    parExpression                  shift and go to state 109
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    DOUBLELITERAL                  shift and go to state 112
    annotation                     shift and go to state 605
    castExpression                 shift and go to state 114
    variableModifiers              shift and go to state 607
    arrayCreator                   shift and go to state 116

state 884

    (356) expr_57 -> COMMA qualifiedName .

    COMMA           reduce using rule 356 (expr_57 -> COMMA qualifiedName .)
    BLPAREN         reduce using rule 356 (expr_57 -> COMMA qualifiedName .)
    SEMI            reduce using rule 356 (expr_57 -> COMMA qualifiedName .)



state 885

    (357) expr_57 -> expr_57 COMMA . qualifiedName
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedName                  shift and go to state 909

state 886

    (65) normalParameterDecl -> variableModifiers type IDENTIFIER expr_61 .
    (367) expr_61 -> expr_61 . FLPAREN FRPAREN

    COMMA           reduce using rule 65 (normalParameterDecl -> variableModifiers type IDENTIFIER expr_61 .)
    RPAREN          reduce using rule 65 (normalParameterDecl -> variableModifiers type IDENTIFIER expr_61 .)
    FLPAREN         shift and go to state 910



state 887

    (366) expr_61 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 911



state 888

    (368) expr_61 -> empty .

    FLPAREN         reduce using rule 368 (expr_61 -> empty .)
    COMMA           reduce using rule 368 (expr_61 -> empty .)
    RPAREN          reduce using rule 368 (expr_61 -> empty .)



state 889

    (66) ellipsisParameterDecl -> variableModifiers type OP_ARRAY IDENTIFIER .

    RPAREN          reduce using rule 66 (ellipsisParameterDecl -> variableModifiers type OP_ARRAY IDENTIFIER .)



state 890

    (362) expr_59 -> expr_59 COMMA normalParameterDecl .

    COMMA           reduce using rule 362 (expr_59 -> expr_59 COMMA normalParameterDecl .)
    RPAREN          reduce using rule 362 (expr_59 -> expr_59 COMMA normalParameterDecl .)



state 891

    (65) normalParameterDecl -> variableModifiers type . IDENTIFIER expr_61

    IDENTIFIER      shift and go to state 854



state 892

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 . SEMI

    SEMI            shift and go to state 912



state 893

    (331) expr_47 -> THROWS . qualifiedNameList
    (60) qualifiedNameList -> . qualifiedName expr_57
    (69) qualifiedName -> . IDENTIFIER expr_65

    IDENTIFIER      shift and go to state 11


    qualifiedNameList              shift and go to state 913
    qualifiedName                  shift and go to state 807

state 894

    (329) expr_46 -> expr_46 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 914



state 895

    (332) expr_47 -> empty .

    SEMI            reduce using rule 332 (expr_47 -> empty .)



state 896

    (328) expr_46 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 328 (expr_46 -> FLPAREN FRPAREN .)
    THROWS          reduce using rule 328 (expr_46 -> FLPAREN FRPAREN .)
    SEMI            reduce using rule 328 (expr_46 -> FLPAREN FRPAREN .)



state 897

    (437) expr_91 -> expressionList .

    RPAREN          reduce using rule 437 (expr_91 -> expressionList .)



state 898

    (438) expr_91 -> empty .

    RPAREN          reduce using rule 438 (expr_91 -> empty .)



state 899

    (120) forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 . RPAREN statement

    RPAREN          shift and go to state 915



state 900

    (119) forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression . RPAREN statement

    RPAREN          shift and go to state 916



state 901

    (117) catchClause -> CATCH LPAREN formalParameter RPAREN block .

    CATCH           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINALLY         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BRPAREN         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ASSERT          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    IF              reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    WHILE           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DO              reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SWITCH          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SYNCHRONIZED    reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    RETURN          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THROW           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BREAK           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CONTINUE        reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    IDENTIFIER      reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SEMI            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BLPAREN         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FOR             reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRY             reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FINAL           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    AT              reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PUBLIC          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PROTECTED       reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PRIVATE         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STATIC          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ABSTRACT        reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NATIVE          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRANSIENT       reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    VOLATILE        reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STRICTFP        reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    PLUS            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DASH            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_INC          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    OP_DEC          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TILDE           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    EXCLAMATION     reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LPAREN          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    THIS            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SUPER           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    VOID            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CHARLITERAL     reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    STRINGLITERAL   reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    TRUE            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FALSE           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NULL            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NEW             reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BOOLEAN         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CHAR            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    BYTE            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    SHORT           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    INT             reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    FLOAT           reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DOUBLE          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NUMBER          reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    HEX_NUMBER      reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_NUMBER     reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    LONG_HEX_NUMBER reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_1   reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_2   reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    NON_INTEGER_3   reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    ELSE            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    CASE            reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)
    DEFAULT         reduce using rule 117 (catchClause -> CATCH LPAREN formalParameter RPAREN block .)



state 902

    (118) formalParameter -> variableModifiers type IDENTIFIER . expr_88
    (430) expr_88 -> . FLPAREN FRPAREN
    (431) expr_88 -> . expr_88 FLPAREN FRPAREN
    (432) expr_88 -> . empty
    (547) empty -> .

  ! shift/reduce conflict for FLPAREN resolved as shift.
    FLPAREN         shift and go to state 918
    RPAREN          reduce using rule 547 (empty -> .)

  ! FLPAREN         [ reduce using rule 547 (empty -> .) ]

    empty                          shift and go to state 919
    expr_88                        shift and go to state 917

state 903

    (68) explicitConstructorInvocation -> primary DOT expr_64 . SUPER arguments SEMI

    SUPER           shift and go to state 920



state 904

    (373) expr_64 -> nonWildcardTypeArguments .

    SUPER           reduce using rule 373 (expr_64 -> nonWildcardTypeArguments .)



state 905

    (374) expr_64 -> empty .

    SUPER           reduce using rule 374 (expr_64 -> empty .)



state 906

    (67) explicitConstructorInvocation -> expr_62 expr_63 arguments . SEMI

    SEMI            shift and go to state 921



state 907

    (303) expr_35 -> expr_35 blockStatement .

    BRPAREN         reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    ASSERT          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    IF              reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    WHILE           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    DO              reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    SWITCH          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    SYNCHRONIZED    reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    RETURN          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    THROW           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    BREAK           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    CONTINUE        reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    IDENTIFIER      reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    SEMI            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    BLPAREN         reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    FOR             reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    TRY             reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    FINAL           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    AT              reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    PUBLIC          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    PROTECTED       reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    PRIVATE         reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    STATIC          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    ABSTRACT        reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NATIVE          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    TRANSIENT       reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    VOLATILE        reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    STRICTFP        reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    PLUS            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    DASH            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    OP_INC          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    OP_DEC          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    TILDE           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    EXCLAMATION     reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    LPAREN          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    THIS            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    SUPER           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    VOID            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    CHARLITERAL     reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    STRINGLITERAL   reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    TRUE            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    FALSE           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NULL            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NEW             reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    BOOLEAN         reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    CHAR            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    BYTE            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    SHORT           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    INT             reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    LONG            reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    FLOAT           reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    DOUBLE          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NUMBER          reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    HEX_NUMBER      reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    LONG_NUMBER     reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    LONG_HEX_NUMBER reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NON_INTEGER_1   reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NON_INTEGER_2   reduce using rule 303 (expr_35 -> expr_35 blockStatement .)
    NON_INTEGER_3   reduce using rule 303 (expr_35 -> expr_35 blockStatement .)



state 908

    (35) methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .

    SEMI            reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    STATIC          reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    PUBLIC          reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    PROTECTED       reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    PRIVATE         reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    ABSTRACT        reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    FINAL           reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    NATIVE          reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    SYNCHRONIZED    reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    TRANSIENT       reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    VOLATILE        reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    STRICTFP        reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    AT              reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    BLPAREN         reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)
    BRPAREN         reduce using rule 35 (methodDeclaration -> modifiers expr_32 IDENTIFIER formalParameters expr_33 BLPAREN expr_34 expr_35 BRPAREN .)



state 909

    (357) expr_57 -> expr_57 COMMA qualifiedName .

    COMMA           reduce using rule 357 (expr_57 -> expr_57 COMMA qualifiedName .)
    BLPAREN         reduce using rule 357 (expr_57 -> expr_57 COMMA qualifiedName .)
    SEMI            reduce using rule 357 (expr_57 -> expr_57 COMMA qualifiedName .)



state 910

    (367) expr_61 -> expr_61 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 922



state 911

    (366) expr_61 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 366 (expr_61 -> FLPAREN FRPAREN .)
    COMMA           reduce using rule 366 (expr_61 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 366 (expr_61 -> FLPAREN FRPAREN .)



state 912

    (44) interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .

    BRPAREN         reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    SEMI            reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    PUBLIC          reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    PROTECTED       reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    PRIVATE         reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    STATIC          reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    ABSTRACT        reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    FINAL           reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    NATIVE          reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    SYNCHRONIZED    reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    TRANSIENT       reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    VOLATILE        reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    STRICTFP        reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)
    AT              reduce using rule 44 (interfaceMethodDeclaration -> modifiers expr_44 expr_45 IDENTIFIER formalParameters expr_46 expr_47 SEMI .)



state 913

    (331) expr_47 -> THROWS qualifiedNameList .

    SEMI            reduce using rule 331 (expr_47 -> THROWS qualifiedNameList .)



state 914

    (329) expr_46 -> expr_46 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 329 (expr_46 -> expr_46 FLPAREN FRPAREN .)
    THROWS          reduce using rule 329 (expr_46 -> expr_46 FLPAREN FRPAREN .)
    SEMI            reduce using rule 329 (expr_46 -> expr_46 FLPAREN FRPAREN .)



state 915

    (120) forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN . statement
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 923
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 916

    (119) forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN . statement
    (94) statement -> . block
    (95) statement -> . expr_77 expression expr_78 SEMI
    (96) statement -> . ASSERT expression expr_79 SEMI
    (97) statement -> . IF parExpression statement expr_80
    (98) statement -> . forstatement
    (99) statement -> . WHILE parExpression statement
    (100) statement -> . DO statement WHILE parExpression SEMI
    (101) statement -> . trystatement
    (102) statement -> . SWITCH parExpression BLPAREN switchBlockStatementGroups BRPAREN
    (103) statement -> . SYNCHRONIZED parExpression block
    (104) statement -> . RETURN expr_81 SEMI
    (105) statement -> . THROW expression SEMI
    (106) statement -> . BREAK expr_82 SEMI
    (107) statement -> . CONTINUE expr_83 SEMI
    (108) statement -> . expression SEMI
    (109) statement -> . IDENTIFIER COLON statement
    (110) statement -> . SEMI
    (88) block -> . BLPAREN expr_75 BRPAREN
    (405) expr_77 -> . ASSERT
    (119) forstatement -> . FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement
    (120) forstatement -> . FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement
    (115) trystatement -> . TRY block expr_86
    (125) expression -> . conditionalExpression expr_93
    (138) conditionalExpression -> . conditionalOrExpression expr_94
    (139) conditionalOrExpression -> . conditionalAndExpression expr_95
    (140) conditionalAndExpression -> . inclusiveOrExpression expr_96
    (141) inclusiveOrExpression -> . exclusiveOrExpression expr_97
    (142) exclusiveOrExpression -> . andExpression expr_98
    (143) andExpression -> . equalityExpression expr_99
    (144) equalityExpression -> . instanceOfExpression expr_101
    (145) instanceOfExpression -> . relationalExpression expr_102
    (146) relationalExpression -> . shiftExpression expr_103
    (151) shiftExpression -> . additiveExpression expr_104
    (155) additiveExpression -> . multiplicativeExpression expr_106
    (156) multiplicativeExpression -> . unaryExpression expr_108
    (157) unaryExpression -> . PLUS unaryExpression
    (158) unaryExpression -> . DASH unaryExpression
    (159) unaryExpression -> . OP_INC unaryExpression
    (160) unaryExpression -> . OP_DEC unaryExpression
    (161) unaryExpression -> . unaryExpressionNotPlusMinus
    (162) unaryExpressionNotPlusMinus -> . TILDE unaryExpression
    (163) unaryExpressionNotPlusMinus -> . EXCLAMATION unaryExpression
    (164) unaryExpressionNotPlusMinus -> . castExpression
    (165) unaryExpressionNotPlusMinus -> . primary expr_109 expr_110
    (166) castExpression -> . LPAREN primitiveType RPAREN unaryExpression
    (167) castExpression -> . LPAREN type RPAREN unaryExpressionNotPlusMinus
    (168) primary -> . parExpression
    (169) primary -> . THIS expr_111 expr_112
    (170) primary -> . IDENTIFIER expr_113 expr_114
    (171) primary -> . SUPER superSuffix
    (172) primary -> . literal
    (173) primary -> . creator
    (174) primary -> . primitiveType expr_115 DOT CLASS
    (175) primary -> . VOID DOT CLASS
    (123) parExpression -> . LPAREN expression RPAREN
    (205) literal -> . INTLITERAL
    (206) literal -> . LONGLITERAL
    (207) literal -> . FLOATLITERAL
    (208) literal -> . DOUBLELITERAL
    (209) literal -> . CHARLITERAL
    (210) literal -> . STRINGLITERAL
    (211) literal -> . TRUE
    (212) literal -> . FALSE
    (213) literal -> . NULL
    (191) creator -> . NEW nonWildcardTypeArguments classOrInterfaceType classCreatorRest
    (192) creator -> . NEW classOrInterfaceType classCreatorRest
    (193) creator -> . arrayCreator
    (49) primitiveType -> . BOOLEAN
    (50) primitiveType -> . CHAR
    (51) primitiveType -> . BYTE
    (52) primitiveType -> . SHORT
    (53) primitiveType -> . INT
    (54) primitiveType -> . LONG
    (55) primitiveType -> . FLOAT
    (56) primitiveType -> . DOUBLE
    (537) INTLITERAL -> . NUMBER
    (538) INTLITERAL -> . HEX_NUMBER
    (539) LONGLITERAL -> . LONG_NUMBER
    (540) LONGLITERAL -> . LONG_HEX_NUMBER
    (541) FLOATLITERAL -> . NON_INTEGER_1
    (542) FLOATLITERAL -> . NON_INTEGER_2
    (543) FLOATLITERAL -> . NON_INTEGER_3
    (544) DOUBLELITERAL -> . NON_INTEGER_1
    (545) DOUBLELITERAL -> . NON_INTEGER_2
    (546) DOUBLELITERAL -> . NON_INTEGER_3
    (194) arrayCreator -> . NEW createdName FLPAREN FRPAREN expr_121 arrayInitializer
    (195) arrayCreator -> . NEW createdName FLPAREN expression FRPAREN expr_122 expr_123

    ASSERT          shift and go to state 601
    IF              shift and go to state 606
    WHILE           shift and go to state 594
    DO              shift and go to state 600
    SWITCH          shift and go to state 595
    SYNCHRONIZED    shift and go to state 670
    RETURN          shift and go to state 582
    THROW           shift and go to state 608
    BREAK           shift and go to state 599
    CONTINUE        shift and go to state 590
    IDENTIFIER      shift and go to state 597
    SEMI            shift and go to state 602
    BLPAREN         shift and go to state 528
    FOR             shift and go to state 585
    TRY             shift and go to state 588
    PLUS            shift and go to state 62
    DASH            shift and go to state 64
    OP_INC          shift and go to state 85
    OP_DEC          shift and go to state 87
    TILDE           shift and go to state 90
    EXCLAMATION     shift and go to state 55
    LPAREN          shift and go to state 110
    THIS            shift and go to state 67
    SUPER           shift and go to state 117
    VOID            shift and go to state 57
    CHARLITERAL     shift and go to state 60
    STRINGLITERAL   shift and go to state 74
    TRUE            shift and go to state 59
    FALSE           shift and go to state 95
    NULL            shift and go to state 106
    NEW             shift and go to state 88
    BOOLEAN         shift and go to state 98
    CHAR            shift and go to state 84
    BYTE            shift and go to state 94
    SHORT           shift and go to state 69
    INT             shift and go to state 97
    LONG            shift and go to state 61
    FLOAT           shift and go to state 115
    DOUBLE          shift and go to state 68
    NUMBER          shift and go to state 105
    HEX_NUMBER      shift and go to state 100
    LONG_NUMBER     shift and go to state 93
    LONG_HEX_NUMBER shift and go to state 86
    NON_INTEGER_1   shift and go to state 103
    NON_INTEGER_2   shift and go to state 101
    NON_INTEGER_3   shift and go to state 102


    equalityExpression             shift and go to state 80
    INTLITERAL                     shift and go to state 56
    primary                        shift and go to state 83
    inclusiveOrExpression          shift and go to state 70
    creator                        shift and go to state 71
    multiplicativeExpression       shift and go to state 104
    exclusiveOrExpression          shift and go to state 82
    conditionalAndExpression       shift and go to state 58
    conditionalExpression          shift and go to state 218
    DOUBLELITERAL                  shift and go to state 112
    FLOATLITERAL                   shift and go to state 77
    shiftExpression                shift and go to state 107
    literal                        shift and go to state 89
    statement                      shift and go to state 924
    additiveExpression             shift and go to state 75
    unaryExpression                shift and go to state 108
    LONGLITERAL                    shift and go to state 73
    parExpression                  shift and go to state 109
    expr_77                        shift and go to state 586
    relationalExpression           shift and go to state 65
    trystatement                   shift and go to state 604
    conditionalOrExpression        shift and go to state 81
    instanceOfExpression           shift and go to state 66
    castExpression                 shift and go to state 114
    forstatement                   shift and go to state 589
    unaryExpressionNotPlusMinus    shift and go to state 76
    primitiveType                  shift and go to state 96
    andExpression                  shift and go to state 78
    arrayCreator                   shift and go to state 116
    expression                     shift and go to state 591
    block                          shift and go to state 592

state 917

    (118) formalParameter -> variableModifiers type IDENTIFIER expr_88 .
    (431) expr_88 -> expr_88 . FLPAREN FRPAREN

    RPAREN          reduce using rule 118 (formalParameter -> variableModifiers type IDENTIFIER expr_88 .)
    FLPAREN         shift and go to state 925



state 918

    (430) expr_88 -> FLPAREN . FRPAREN

    FRPAREN         shift and go to state 926



state 919

    (432) expr_88 -> empty .

    FLPAREN         reduce using rule 432 (expr_88 -> empty .)
    RPAREN          reduce using rule 432 (expr_88 -> empty .)



state 920

    (68) explicitConstructorInvocation -> primary DOT expr_64 SUPER . arguments SEMI
    (204) arguments -> . LPAREN expr_130 RPAREN

    LPAREN          shift and go to state 222


    arguments                      shift and go to state 927

state 921

    (67) explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .

    ASSERT          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    IF              reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    WHILE           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    DO              reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    SWITCH          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    SYNCHRONIZED    reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    RETURN          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    THROW           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    BREAK           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    CONTINUE        reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    IDENTIFIER      reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    SEMI            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    BLPAREN         reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    FOR             reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    TRY             reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    FINAL           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    AT              reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    PUBLIC          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    PROTECTED       reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    PRIVATE         reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    STATIC          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    ABSTRACT        reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NATIVE          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    TRANSIENT       reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    VOLATILE        reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    STRICTFP        reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    PLUS            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    DASH            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    OP_INC          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    OP_DEC          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    TILDE           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    EXCLAMATION     reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    LPAREN          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    THIS            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    SUPER           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    VOID            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    CHARLITERAL     reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    STRINGLITERAL   reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    TRUE            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    FALSE           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NULL            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NEW             reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    BOOLEAN         reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    CHAR            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    BYTE            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    SHORT           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    INT             reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    LONG            reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    FLOAT           reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    DOUBLE          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NUMBER          reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    HEX_NUMBER      reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    LONG_NUMBER     reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NON_INTEGER_1   reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NON_INTEGER_2   reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    NON_INTEGER_3   reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)
    BRPAREN         reduce using rule 67 (explicitConstructorInvocation -> expr_62 expr_63 arguments SEMI .)



state 922

    (367) expr_61 -> expr_61 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 367 (expr_61 -> expr_61 FLPAREN FRPAREN .)
    COMMA           reduce using rule 367 (expr_61 -> expr_61 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 367 (expr_61 -> expr_61 FLPAREN FRPAREN .)



state 923

    (120) forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .

    ASSERT          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    IF              reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    WHILE           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    DO              reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    SWITCH          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    SYNCHRONIZED    reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    RETURN          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    THROW           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    BREAK           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    CONTINUE        reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    IDENTIFIER      reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    SEMI            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    BLPAREN         reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    FOR             reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    TRY             reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    FINAL           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    AT              reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    PUBLIC          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    PROTECTED       reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    PRIVATE         reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    STATIC          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    ABSTRACT        reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NATIVE          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    TRANSIENT       reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    VOLATILE        reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    STRICTFP        reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    PLUS            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    DASH            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    OP_INC          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    OP_DEC          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    TILDE           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    EXCLAMATION     reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    LPAREN          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    THIS            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    SUPER           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    VOID            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    CHARLITERAL     reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    STRINGLITERAL   reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    TRUE            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    FALSE           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NULL            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NEW             reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    BOOLEAN         reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    CHAR            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    BYTE            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    SHORT           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    INT             reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    LONG            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    FLOAT           reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    DOUBLE          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NUMBER          reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    HEX_NUMBER      reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    LONG_NUMBER     reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    LONG_HEX_NUMBER reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NON_INTEGER_1   reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NON_INTEGER_2   reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    NON_INTEGER_3   reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    CASE            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    DEFAULT         reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    BRPAREN         reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)
    ELSE            reduce using rule 120 (forstatement -> FOR LPAREN expr_89 SEMI expr_90 SEMI expr_91 RPAREN statement .)



state 924

    (119) forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .

    ASSERT          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    IF              reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    WHILE           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    DO              reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    SWITCH          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    SYNCHRONIZED    reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    RETURN          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    THROW           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    BREAK           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    CONTINUE        reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    IDENTIFIER      reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    SEMI            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    BLPAREN         reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    FOR             reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    TRY             reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    FINAL           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    AT              reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    PUBLIC          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    PROTECTED       reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    PRIVATE         reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    STATIC          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    ABSTRACT        reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NATIVE          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    TRANSIENT       reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    VOLATILE        reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    STRICTFP        reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    PLUS            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    DASH            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    OP_INC          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    OP_DEC          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    TILDE           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    EXCLAMATION     reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    LPAREN          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    THIS            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    SUPER           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    VOID            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    CHARLITERAL     reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    STRINGLITERAL   reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    TRUE            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    FALSE           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NULL            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NEW             reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    BOOLEAN         reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    CHAR            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    BYTE            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    SHORT           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    INT             reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    LONG            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    FLOAT           reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    DOUBLE          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NUMBER          reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    HEX_NUMBER      reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    LONG_NUMBER     reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    LONG_HEX_NUMBER reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NON_INTEGER_1   reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NON_INTEGER_2   reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    NON_INTEGER_3   reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    CASE            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    DEFAULT         reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    BRPAREN         reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)
    ELSE            reduce using rule 119 (forstatement -> FOR LPAREN variableModifiers type IDENTIFIER COLON expression RPAREN statement .)



state 925

    (431) expr_88 -> expr_88 FLPAREN . FRPAREN

    FRPAREN         shift and go to state 928



state 926

    (430) expr_88 -> FLPAREN FRPAREN .

    FLPAREN         reduce using rule 430 (expr_88 -> FLPAREN FRPAREN .)
    RPAREN          reduce using rule 430 (expr_88 -> FLPAREN FRPAREN .)



state 927

    (68) explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments . SEMI

    SEMI            shift and go to state 929



state 928

    (431) expr_88 -> expr_88 FLPAREN FRPAREN .

    FLPAREN         reduce using rule 431 (expr_88 -> expr_88 FLPAREN FRPAREN .)
    RPAREN          reduce using rule 431 (expr_88 -> expr_88 FLPAREN FRPAREN .)



state 929

    (68) explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .

    ASSERT          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    IF              reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    WHILE           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    DO              reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    SWITCH          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    SYNCHRONIZED    reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    RETURN          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    THROW           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    BREAK           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    CONTINUE        reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    IDENTIFIER      reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    SEMI            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    BLPAREN         reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    FOR             reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    TRY             reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    FINAL           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    AT              reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    PUBLIC          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    PROTECTED       reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    PRIVATE         reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    STATIC          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    ABSTRACT        reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NATIVE          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    TRANSIENT       reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    VOLATILE        reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    STRICTFP        reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    PLUS            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    DASH            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    OP_INC          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    OP_DEC          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    TILDE           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    EXCLAMATION     reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    LPAREN          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    THIS            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    SUPER           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    VOID            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    CHARLITERAL     reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    STRINGLITERAL   reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    TRUE            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    FALSE           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NULL            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NEW             reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    BOOLEAN         reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    CHAR            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    BYTE            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    SHORT           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    INT             reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    LONG            reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    FLOAT           reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    DOUBLE          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NUMBER          reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    HEX_NUMBER      reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    LONG_NUMBER     reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    LONG_HEX_NUMBER reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NON_INTEGER_1   reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NON_INTEGER_2   reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    NON_INTEGER_3   reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)
    BRPAREN         reduce using rule 68 (explicitConstructorInvocation -> primary DOT expr_64 SUPER arguments SEMI .)


