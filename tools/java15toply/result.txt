def p_compilationUnit(p):
	'''
	compilationUnit   :   A3 A2 A1 ;
	'''
	pass

def p_packageDeclaration(p):
	'''
	packageDeclaration   :   'package' qualifiedName ';' ;
	'''
	pass

def p_importDeclaration(p):
	'''
	importDeclaration   :   A4 'import' IDENTIFIER '.' '*' ';' | A5 'import' A7 A6 IDENTIFIER ';' ;
	'''
	pass

def p_qualifiedImportName(p):
	'''
	qualifiedImportName   :   A8 IDENTIFIER ;
	'''
	pass

def p_typeDeclaration(p):
	'''
	typeDeclaration   :   classOrInterfaceDeclaration | ';' ;
	'''
	pass

def p_classOrInterfaceDeclaration(p):
	'''
	classOrInterfaceDeclaration   :   classDeclaration | interfaceDeclaration ;
	'''
	pass

def p_modifiers(p):
	'''
	modifiers   :   A9 ;
	'''
	pass

def p_variableModifiers(p):
	'''
	variableModifiers   :   A10 ;
	'''
	pass

def p_classDeclaration(p):
	'''
	classDeclaration   :   normalClassDeclaration | enumDeclaration ;
	'''
	pass

def p_normalClassDeclaration(p):
	'''
	normalClassDeclaration   :   modifiers 'class' A13 A12 A11 IDENTIFIER classBody ;
	'''
	pass

def p_typeParameters(p):
	'''
	typeParameters   :   '&lt;' A14 typeParameter '&gt;' ;
	'''
	pass

def p_typeParameter(p):
	'''
	typeParameter   :   A15 IDENTIFIER ;
	'''
	pass

def p_typeBound(p):
	'''
	typeBound   :   A16 type ;
	'''
	pass

def p_enumDeclaration(p):
	'''
	enumDeclaration   :   ( 'enum' ) modifiers A17 IDENTIFIER enumBody ;
	'''
	pass

def p_enumBody(p):
	'''
	enumBody   :   A18 '{' A19 ',' ? '}' ;
	'''
	pass

def p_enumConstants(p):
	'''
	enumConstants   :   A20 enumConstant ;
	'''
	pass

def p_enumConstant(p):
	'''
	enumConstant   :   A21 A23 A22 IDENTIFIER ;
	'''
	pass

def p_enumBodyDeclarations(p):
	'''
	enumBodyDeclarations   :   A24 ';' ;
	'''
	pass

def p_interfaceDeclaration(p):
	'''
	interfaceDeclaration   :   normalInterfaceDeclaration | annotationTypeDeclaration ;
	'''
	pass

def p_normalInterfaceDeclaration(p):
	'''
	normalInterfaceDeclaration   :   modifiers 'interface' A26 A25 IDENTIFIER interfaceBody ;
	'''
	pass

def p_typeList(p):
	'''
	typeList   :   A27 type ;
	'''
	pass

def p_classBody(p):
	'''
	classBody   :   A28 '{' '}' ;
	'''
	pass

def p_interfaceBody(p):
	'''
	interfaceBody   :   A29 '{' '}' ;
	'''
	pass

def p_classBodyDeclaration(p):
	'''
	classBodyDeclaration   :   ';' | A30 block | memberDecl ;
	'''
	pass

def p_memberDecl(p):
	'''
	memberDecl   :   fieldDeclaration | methodDeclaration | classDeclaration | interfaceDeclaration ;
	'''
	pass

def p_methodDeclaration(p):
	'''
	methodDeclaration   :   A31 modifiers IDENTIFIER A32 formalParameters A34 A33 '{' '}' | ( type | 'void' ) A35 modifiers IDENTIFIER ( block | ';' ) A37 A36 formalParameters ;
	'''
	pass

def p_fieldDeclaration(p):
	'''
	fieldDeclaration   :   modifiers type A38 variableDeclarator ';' ;
	'''
	pass

def p_variableDeclarator(p):
	'''
	variableDeclarator   :   A40 A39 IDENTIFIER ;
	'''
	pass

def p_interfaceBodyDeclaration(p):
	'''
	interfaceBodyDeclaration   :   interfaceFieldDeclaration | interfaceMethodDeclaration | interfaceDeclaration | classDeclaration | ';' ;
	'''
	pass

def p_interfaceMethodDeclaration(p):
	'''
	interfaceMethodDeclaration   :   ( type | 'void' ) A41 modifiers IDENTIFIER A43 A42 formalParameters ';' ;
	'''
	pass

def p_interfaceFieldDeclaration(p):
	'''
	interfaceFieldDeclaration   :   modifiers type A44 variableDeclarator ';' ;
	'''
	pass

def p_type(p):
	'''
	type   :   A45 classOrInterfaceType | A46 primitiveType ;
	'''
	pass

def p_classOrInterfaceType(p):
	'''
	classOrInterfaceType   :   A49 A47 IDENTIFIER ;
	'''
	pass

def p_primitiveType(p):
	'''
	primitiveType   :   'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' ;
	'''
	pass

def p_typeArguments(p):
	'''
	typeArguments   :   '&lt;' A50 typeArgument '&gt;' ;
	'''
	pass

def p_typeArgument(p):
	'''
	typeArgument   :   type | A51 '?' ;
	'''
	pass

def p_qualifiedNameList(p):
	'''
	qualifiedNameList   :   A52 qualifiedName ;
	'''
	pass

def p_formalParameters(p):
	'''
	formalParameters   :   A53 '(' ')' ;
	'''
	pass

def p_formalParameterDecls(p):
	'''
	formalParameterDecls   :   ellipsisParameterDecl | A54 normalParameterDecl | A55 ellipsisParameterDecl ;
	'''
	pass

def p_normalParameterDecl(p):
	'''
	normalParameterDecl   :   variableModifiers type A56 IDENTIFIER ;
	'''
	pass

def p_ellipsisParameterDecl(p):
	'''
	ellipsisParameterDecl   :   variableModifiers type '...' IDENTIFIER ;
	'''
	pass

def p_explicitConstructorInvocation(p):
	'''
	explicitConstructorInvocation   :   ( 'this' | 'super' ) A57 arguments ';' | primary A58 '.' 'super' arguments ';' ;
	'''
	pass

def p_qualifiedName(p):
	'''
	qualifiedName   :   A59 IDENTIFIER ;
	'''
	pass

def p_annotations(p):
	'''
	annotations   :   A60 ;
	'''
	pass

def p_annotation(p):
	'''
	annotation   :   '@' A62 qualifiedName ;
	'''
	pass

def p_elementValuePairs(p):
	'''
	elementValuePairs   :   A63 elementValuePair ;
	'''
	pass

def p_elementValuePair(p):
	'''
	elementValuePair   :   IDENTIFIER '=' elementValue ;
	'''
	pass

def p_elementValue(p):
	'''
	elementValue   :   conditionalExpression | annotation | elementValueArrayInitializer ;
	'''
	pass

def p_elementValueArrayInitializer(p):
	'''
	elementValueArrayInitializer   :   A66 A65 '{' '}' ;
	'''
	pass

def p_annotationTypeDeclaration(p):
	'''
	annotationTypeDeclaration   :   modifiers '@' 'interface' IDENTIFIER annotationTypeBody ;
	'''
	pass

def p_annotationTypeBody(p):
	'''
	annotationTypeBody   :   A67 '{' '}' ;
	'''
	pass

def p_annotationTypeElementDeclaration(p):
	'''
	annotationTypeElementDeclaration   :   annotationMethodDeclaration | interfaceFieldDeclaration | normalClassDeclaration | normalInterfaceDeclaration | enumDeclaration | annotationTypeDeclaration | ';' ;
	'''
	pass

def p_annotationMethodDeclaration(p):
	'''
	annotationMethodDeclaration   :   modifiers type IDENTIFIER '(' A68 ')' ';' ;
	'''
	pass

def p_block(p):
	'''
	block   :   A69 '{' '}' ;
	'''
	pass

def p_blockStatement(p):
	'''
	blockStatement   :   localVariableDeclarationStatement | classOrInterfaceDeclaration | statement ;
	'''
	pass

def p_localVariableDeclarationStatement(p):
	'''
	localVariableDeclarationStatement   :   localVariableDeclaration ';' ;
	'''
	pass

def p_localVariableDeclaration(p):
	'''
	localVariableDeclaration   :   variableModifiers type A70 variableDeclarator ;
	'''
	pass

def p_statement(p):
	'''
	statement   :   block | ( 'assert' ) A71 expression ';' | 'assert' A72 expression ';' | 'if' parExpression A73 statement | forstatement | 'while' parExpression statement | 'do' statement 'while' parExpression ';' | trystatement | 'switch' parExpression '{' switchBlockStatementGroups '}' | 'synchronized' parExpression block | A74 'return' ';' | 'throw' expression ';' | A75 'break' ';' | A76 'continue' ';' | expression ';' | IDENTIFIER ':' statement | ';' ;
	'''
	pass

def p_switchBlockStatementGroups(p):
	'''
	switchBlockStatementGroups   :   A77 ;
	'''
	pass

def p_switchBlockStatementGroup(p):
	'''
	switchBlockStatementGroup   :   A78 switchLabel ;
	'''
	pass

def p_switchLabel(p):
	'''
	switchLabel   :   'case' expression ':' | 'default' ':' ;
	'''
	pass

def p_trystatement(p):
	'''
	trystatement   :   'try' ( catches 'finally' block | catches | 'finally' block ) block ;
	'''
	pass

def p_catches(p):
	'''
	catches   :   A79 catchClause ;
	'''
	pass

def p_catchClause(p):
	'''
	catchClause   :   'catch' '(' formalParameter ')' block ;
	'''
	pass

def p_formalParameter(p):
	'''
	formalParameter   :   variableModifiers type A80 IDENTIFIER ;
	'''
	pass

def p_forstatement(p):
	'''
	forstatement   :   'for' '(' variableModifiers type IDENTIFIER ':' expression ')' statement | 'for' A81 '(' A82 ';' A83 ';' ')' statement ;
	'''
	pass

def p_forInit(p):
	'''
	forInit   :   localVariableDeclaration | expressionList ;
	'''
	pass

def p_parExpression(p):
	'''
	parExpression   :   '(' expression ')' ;
	'''
	pass

def p_expressionList(p):
	'''
	expressionList   :   A84 expression ;
	'''
	pass

def p_expression(p):
	'''
	expression   :   A85 conditionalExpression ;
	'''
	pass

def p_assignmentOperator(p):
	'''
	assignmentOperator   :   '=' | '+=' | '-=' | '*=' | '/=' | '&amp;=' | '|=' | '^=' | '%=' | '&lt;' '&lt;' '=' | '&gt;' '&gt;' '&gt;' '=' | '&gt;' '&gt;' '=' ;
	'''
	pass

def p_conditionalExpression(p):
	'''
	conditionalExpression   :   A86 conditionalOrExpression ;
	'''
	pass

def p_conditionalOrExpression(p):
	'''
	conditionalOrExpression   :   A87 conditionalAndExpression ;
	'''
	pass

def p_conditionalAndExpression(p):
	'''
	conditionalAndExpression   :   A88 inclusiveOrExpression ;
	'''
	pass

def p_inclusiveOrExpression(p):
	'''
	inclusiveOrExpression   :   A89 exclusiveOrExpression ;
	'''
	pass

def p_exclusiveOrExpression(p):
	'''
	exclusiveOrExpression   :   A90 andExpression ;
	'''
	pass

def p_andExpression(p):
	'''
	andExpression   :   A91 equalityExpression ;
	'''
	pass

def p_equalityExpression(p):
	'''
	equalityExpression   :   A92 instanceOfExpression ;
	'''
	pass

def p_instanceOfExpression(p):
	'''
	instanceOfExpression   :   A93 relationalExpression ;
	'''
	pass

def p_relationalExpression(p):
	'''
	relationalExpression   :   A94 shiftExpression ;
	'''
	pass

def p_relationalOp(p):
	'''
	relationalOp   :   '&lt;' '=' | '&gt;' '=' | '&lt;' | '&gt;' ;
	'''
	pass

def p_shiftExpression(p):
	'''
	shiftExpression   :   A95 additiveExpression ;
	'''
	pass

def p_shiftOp(p):
	'''
	shiftOp   :   '&lt;' '&lt;' | '&gt;' '&gt;' '&gt;' | '&gt;' '&gt;' ;
	'''
	pass

def p_additiveExpression(p):
	'''
	additiveExpression   :   A96 multiplicativeExpression ;
	'''
	pass

def p_multiplicativeExpression(p):
	'''
	multiplicativeExpression   :   A97 unaryExpression ;
	'''
	pass

def p_unaryExpression(p):
	'''
	unaryExpression   :   '+' unaryExpression | '-' unaryExpression | '++' unaryExpression | '--' unaryExpression | unaryExpressionNotPlusMinus ;
	'''
	pass

def p_unaryExpressionNotPlusMinus(p):
	'''
	unaryExpressionNotPlusMinus   :   '~' unaryExpression | '!' unaryExpression | castExpression | A99 A98 primary ;
	'''
	pass

def p_castExpression(p):
	'''
	castExpression   :   '(' primitiveType ')' unaryExpression | '(' type ')' unaryExpressionNotPlusMinus ;
	'''
	pass

def p_primary(p):
	'''
	primary   :   parExpression | A101 A100 'this' | A103 A102 IDENTIFIER | 'super' superSuffix | literal | creator | A104 primitiveType '.' 'class' | 'void' '.' 'class' ;
	'''
	pass

def p_superSuffix(p):
	'''
	superSuffix   :   arguments | A105 '.' A106 IDENTIFIER ;
	'''
	pass

def p_identifierSuffix(p):
	'''
	identifierSuffix   :   A107 '.' 'class' | A108 | arguments | '.' 'class' | '.' nonWildcardTypeArguments IDENTIFIER arguments | '.' 'this' | '.' 'super' arguments | innerCreator ;
	'''
	pass

def p_selector(p):
	'''
	selector   :   '.' A109 IDENTIFIER | '.' 'this' | '.' 'super' superSuffix | innerCreator | '[' expression ']' ;
	'''
	pass

def p_creator(p):
	'''
	creator   :   'new' nonWildcardTypeArguments classOrInterfaceType classCreatorRest | 'new' classOrInterfaceType classCreatorRest | arrayCreator ;
	'''
	pass

def p_arrayCreator(p):
	'''
	arrayCreator   :   'new' createdName '[' A110 ']' arrayInitializer | 'new' createdName '[' expression A112 A111 ']' ;
	'''
	pass

def p_variableInitializer(p):
	'''
	variableInitializer   :   arrayInitializer | expression ;
	'''
	pass

def p_arrayInitializer(p):
	'''
	arrayInitializer   :   A115 A114 '{' '}' ;
	'''
	pass

def p_createdName(p):
	'''
	createdName   :   classOrInterfaceType | primitiveType ;
	'''
	pass

def p_innerCreator(p):
	'''
	innerCreator   :   '.' A116 'new' A117 IDENTIFIER classCreatorRest ;
	'''
	pass

def p_classCreatorRest(p):
	'''
	classCreatorRest   :   A118 arguments ;
	'''
	pass

def p_nonWildcardTypeArguments(p):
	'''
	nonWildcardTypeArguments   :   '&lt;' typeList '&gt;' ;
	'''
	pass

def p_arguments(p):
	'''
	arguments   :   A119 '(' ')' ;
	'''
	pass

def p_literal(p):
	'''
	literal   :   INTLITERAL | LONGLITERAL | FLOATLITERAL | DOUBLELITERAL | CHARLITERAL | STRINGLITERAL | TRUE | FALSE | NULL ;
	'''
	pass

def p_classHeader(p):
	'''
	classHeader   :   modifiers 'class' IDENTIFIER ;
	'''
	pass

def p_enumHeader(p):
	'''
	enumHeader   :   ( 'enum' | IDENTIFIER ) modifiers IDENTIFIER ;
	'''
	pass

def p_interfaceHeader(p):
	'''
	interfaceHeader   :   modifiers 'interface' IDENTIFIER ;
	'''
	pass

def p_annotationHeader(p):
	'''
	annotationHeader   :   modifiers '@' 'interface' IDENTIFIER ;
	'''
	pass

def p_typeHeader(p):
	'''
	typeHeader   :   ( 'class' | 'enum' | ( '@' ? 'interface' ) ) modifiers IDENTIFIER ;
	'''
	pass

def p_methodHeader(p):
	'''
	methodHeader   :   modifiers A120 typeParameters ? IDENTIFIER '(' ;
	'''
	pass

def p_fieldHeader(p):
	'''
	fieldHeader   :   modifiers type ( '=' | ',' | ';' ) A121 IDENTIFIER ;
	'''
	pass

def p_localVariableHeader(p):
	'''
	localVariableHeader   :   variableModifiers type ( '=' | ',' | ';' ) A122 IDENTIFIER ;
	'''
	pass

def p_A0(p):
	'''
	A0   :   annotations | empty
['annotations', '|']
['A0', ':', 'annotations', '|', 'empty']

	;
	'''
	pass

def p_A1(p):
	'''
	A1   :   A0 packageDeclaration | empty
['A0', 'packageDeclaration', '|']
['A1', ':', 'A0', 'packageDeclaration', '|', 'empty']

	;
	'''
	pass

def p_A2(p):
	'''
	A2   :   importDeclaration | A2 importDeclaration
['importDeclaration', '|', 'A2']
['A2', ':', 'importDeclaration', '|', 'A2', 'importDeclaration']

	;
	'''
	pass

def p_A3(p):
	'''
	A3   :   typeDeclaration | A3 typeDeclaration
['typeDeclaration', '|', 'A3']
['A3', ':', 'typeDeclaration', '|', 'A3', 'typeDeclaration']

	;
	'''
	pass

def p_A4(p):
	'''
	A4   :   'static' | empty
["'static'", '|']
['A4', ':', "'static'", '|', 'empty']

	;
	'''
	pass

def p_A5(p):
	'''
	A5   :   'static' | empty
["'static'", '|']
['A5', ':', "'static'", '|', 'empty']

	;
	'''
	pass

def p_A6(p):
	'''
	A6   :   '.' IDENTIFIER | A6 '.' IDENTIFIER empty
["'.'", 'IDENTIFIER', '|', 'A6', "'.'", 'IDENTIFIER']
['A6', ':', "'.'", 'IDENTIFIER', '|', 'A6', "'.'", 'IDENTIFIER', 'empty']

	;
	'''
	pass

def p_A7(p):
	'''
	A7   :   '.' '*' | empty
["'.'", "'*'", '|']
['A7', ':', "'.'", "'*'", '|', 'empty']

	;
	'''
	pass

def p_A8(p):
	'''
	A8   :   '.' IDENTIFIER | A8 '.' IDENTIFIER
["'.'", 'IDENTIFIER', '|', 'A8', "'.'"]
['A8', ':', "'.'", 'IDENTIFIER', '|', 'A8', "'.'", 'IDENTIFIER']

	;
	'''
	pass

def p_A9(p):
	'''
	A9   :   annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' | A9 annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp'
['annotation', '|', "'public'", '|', "'protected'", '|', "'private'", '|', "'static'", '|', "'abstract'", '|', "'final'", '|', "'native'", '|', "'synchronized'", '|', "'transient'", '|', "'volatile'", '|', "'strictfp'", '|', 'A9', 'annotation', '|', "'public'", '|', "'protected'", '|', "'private'", '|', "'static'", '|', "'abstract'", '|', "'final'", '|', "'native'", '|', "'synchronized'", '|', "'transient'", '|', "'volatile'", '|']
['A9', ':', 'annotation', '|', "'public'", '|', "'protected'", '|', "'private'", '|', "'static'", '|', "'abstract'", '|', "'final'", '|', "'native'", '|', "'synchronized'", '|', "'transient'", '|', "'volatile'", '|', "'strictfp'", '|', 'A9', 'annotation', '|', "'public'", '|', "'protected'", '|', "'private'", '|', "'static'", '|', "'abstract'", '|', "'final'", '|', "'native'", '|', "'synchronized'", '|', "'transient'", '|', "'volatile'", '|', "'strictfp'"]

	;
	'''
	pass

def p_A10(p):
	'''
	A10   :   'final' | annotation | A10 'final' | annotation
["'final'", '|', 'annotation', '|', 'A10', "'final'", '|']
['A10', ':', "'final'", '|', 'annotation', '|', 'A10', "'final'", '|', 'annotation']

	;
	'''
	pass

def p_A11(p):
	'''
	A11   :   typeParameters | empty
['typeParameters', '|']
['A11', ':', 'typeParameters', '|', 'empty']

	;
	'''
	pass

def p_A12(p):
	'''
	A12   :   'extends' type | empty
["'extends'", 'type', '|']
['A12', ':', "'extends'", 'type', '|', 'empty']

	;
	'''
	pass

def p_A13(p):
	'''
	A13   :   'implements' typeList | empty
["'implements'", 'typeList', '|']
['A13', ':', "'implements'", 'typeList', '|', 'empty']

	;
	'''
	pass

def p_A14(p):
	'''
	A14   :   ',' typeParameter | A14 ',' typeParameter
["','", 'typeParameter', '|', 'A14', "','"]
['A14', ':', "','", 'typeParameter', '|', 'A14', "','", 'typeParameter']

	;
	'''
	pass

def p_A15(p):
	'''
	A15   :   'extends' typeBound | empty
["'extends'", 'typeBound', '|']
['A15', ':', "'extends'", 'typeBound', '|', 'empty']

	;
	'''
	pass

def p_A16(p):
	'''
	A16   :   '&amp;' type | A16 '&amp;' type
["'&amp;'", 'type', '|', 'A16', "'&amp;'"]
['A16', ':', "'&amp;'", 'type', '|', 'A16', "'&amp;'", 'type']

	;
	'''
	pass

def p_A17(p):
	'''
	A17   :   'implements' typeList | empty
["'implements'", 'typeList', '|']
['A17', ':', "'implements'", 'typeList', '|', 'empty']

	;
	'''
	pass

def p_A18(p):
	'''
	A18   :   enumConstants | empty
['enumConstants', '|']
['A18', ':', 'enumConstants', '|', 'empty']

	;
	'''
	pass

def p_A19(p):
	'''
	A19   :   enumBodyDeclarations | empty
['enumBodyDeclarations', '|']
['A19', ':', 'enumBodyDeclarations', '|', 'empty']

	;
	'''
	pass

def p_A20(p):
	'''
	A20   :   ',' enumConstant | A20 ',' enumConstant
["','", 'enumConstant', '|', 'A20', "','"]
['A20', ':', "','", 'enumConstant', '|', 'A20', "','", 'enumConstant']

	;
	'''
	pass

def p_A21(p):
	'''
	A21   :   annotations | empty
['annotations', '|']
['A21', ':', 'annotations', '|', 'empty']

	;
	'''
	pass

def p_A22(p):
	'''
	A22   :   arguments | empty
['arguments', '|']
['A22', ':', 'arguments', '|', 'empty']

	;
	'''
	pass

def p_A23(p):
	'''
	A23   :   classBody | empty
['classBody', '|']
['A23', ':', 'classBody', '|', 'empty']

	;
	'''
	pass

def p_A24(p):
	'''
	A24   :   classBodyDeclaration | A24 classBodyDeclaration
['classBodyDeclaration', '|', 'A24']
['A24', ':', 'classBodyDeclaration', '|', 'A24', 'classBodyDeclaration']

	;
	'''
	pass

def p_A25(p):
	'''
	A25   :   typeParameters | empty
['typeParameters', '|']
['A25', ':', 'typeParameters', '|', 'empty']

	;
	'''
	pass

def p_A26(p):
	'''
	A26   :   'extends' typeList | empty
["'extends'", 'typeList', '|']
['A26', ':', "'extends'", 'typeList', '|', 'empty']

	;
	'''
	pass

def p_A27(p):
	'''
	A27   :   ',' type | A27 ',' type
["','", 'type', '|', 'A27', "','"]
['A27', ':', "','", 'type', '|', 'A27', "','", 'type']

	;
	'''
	pass

def p_A28(p):
	'''
	A28   :   classBodyDeclaration | A28 classBodyDeclaration
['classBodyDeclaration', '|', 'A28']
['A28', ':', 'classBodyDeclaration', '|', 'A28', 'classBodyDeclaration']

	;
	'''
	pass

def p_A29(p):
	'''
	A29   :   interfaceBodyDeclaration | A29 interfaceBodyDeclaration
['interfaceBodyDeclaration', '|', 'A29']
['A29', ':', 'interfaceBodyDeclaration', '|', 'A29', 'interfaceBodyDeclaration']

	;
	'''
	pass

def p_A30(p):
	'''
	A30   :   'static' | empty
["'static'", '|']
['A30', ':', "'static'", '|', 'empty']

	;
	'''
	pass

def p_A31(p):
	'''
	A31   :   typeParameters | empty
['typeParameters', '|']
['A31', ':', 'typeParameters', '|', 'empty']

	;
	'''
	pass

def p_A32(p):
	'''
	A32   :   'throws' qualifiedNameList | empty
["'throws'", 'qualifiedNameList', '|']
['A32', ':', "'throws'", 'qualifiedNameList', '|', 'empty']

	;
	'''
	pass

def p_A33(p):
	'''
	A33   :   explicitConstructorInvocation | empty
['explicitConstructorInvocation', '|']
['A33', ':', 'explicitConstructorInvocation', '|', 'empty']

	;
	'''
	pass

def p_A34(p):
	'''
	A34   :   blockStatement | A34 blockStatement
['blockStatement', '|', 'A34']
['A34', ':', 'blockStatement', '|', 'A34', 'blockStatement']

	;
	'''
	pass

def p_A35(p):
	'''
	A35   :   typeParameters | empty
['typeParameters', '|']
['A35', ':', 'typeParameters', '|', 'empty']

	;
	'''
	pass

def p_A36(p):
	'''
	A36   :   '[' ']' | A36 '[' ']'
["'['", "']'", '|', 'A36', "'['"]
['A36', ':', "'['", "']'", '|', 'A36', "'['", "']'"]

	;
	'''
	pass

def p_A37(p):
	'''
	A37   :   'throws' qualifiedNameList | empty
["'throws'", 'qualifiedNameList', '|']
['A37', ':', "'throws'", 'qualifiedNameList', '|', 'empty']

	;
	'''
	pass

def p_A38(p):
	'''
	A38   :   ',' variableDeclarator | A38 ',' variableDeclarator
["','", 'variableDeclarator', '|', 'A38', "','"]
['A38', ':', "','", 'variableDeclarator', '|', 'A38', "','", 'variableDeclarator']

	;
	'''
	pass

def p_A39(p):
	'''
	A39   :   '[' ']' | A39 '[' ']'
["'['", "']'", '|', 'A39', "'['"]
['A39', ':', "'['", "']'", '|', 'A39', "'['", "']'"]

	;
	'''
	pass

def p_A40(p):
	'''
	A40   :   '=' variableInitializer | empty
["'='", 'variableInitializer', '|']
['A40', ':', "'='", 'variableInitializer', '|', 'empty']

	;
	'''
	pass

def p_A41(p):
	'''
	A41   :   typeParameters | empty
['typeParameters', '|']
['A41', ':', 'typeParameters', '|', 'empty']

	;
	'''
	pass

def p_A42(p):
	'''
	A42   :   '[' ']' | A42 '[' ']'
["'['", "']'", '|', 'A42', "'['"]
['A42', ':', "'['", "']'", '|', 'A42', "'['", "']'"]

	;
	'''
	pass

def p_A43(p):
	'''
	A43   :   'throws' qualifiedNameList | empty
["'throws'", 'qualifiedNameList', '|']
['A43', ':', "'throws'", 'qualifiedNameList', '|', 'empty']

	;
	'''
	pass

def p_A44(p):
	'''
	A44   :   ',' variableDeclarator | A44 ',' variableDeclarator
["','", 'variableDeclarator', '|', 'A44', "','"]
['A44', ':', "','", 'variableDeclarator', '|', 'A44', "','", 'variableDeclarator']

	;
	'''
	pass

def p_A45(p):
	'''
	A45   :   '[' ']' | A45 '[' ']'
["'['", "']'", '|', 'A45', "'['"]
['A45', ':', "'['", "']'", '|', 'A45', "'['", "']'"]

	;
	'''
	pass

def p_A46(p):
	'''
	A46   :   '[' ']' | A46 '[' ']'
["'['", "']'", '|', 'A46', "'['"]
['A46', ':', "'['", "']'", '|', 'A46', "'['", "']'"]

	;
	'''
	pass

def p_A47(p):
	'''
	A47   :   typeArguments | empty
['typeArguments', '|']
['A47', ':', 'typeArguments', '|', 'empty']

	;
	'''
	pass

def p_A48(p):
	'''
	A48   :   typeArguments | empty
['typeArguments', '|']
['A48', ':', 'typeArguments', '|', 'empty']

	;
	'''
	pass

def p_A49(p):
	'''
	A49   :   '.' A48 IDENTIFIER | A49 '.' A48 IDENTIFIER
["'.'", 'A48', 'IDENTIFIER', '|', 'A49', "'.'", 'A48']
['A49', ':', "'.'", 'A48', 'IDENTIFIER', '|', 'A49', "'.'", 'A48', 'IDENTIFIER']

	;
	'''
	pass

def p_A50(p):
	'''
	A50   :   ',' typeArgument | A50 ',' typeArgument
["','", 'typeArgument', '|', 'A50', "','"]
['A50', ':', "','", 'typeArgument', '|', 'A50', "','", 'typeArgument']

	;
	'''
	pass

def p_A51(p):
	'''
	A51   :   ( 'extends' | 'super' ) type | empty
['(', "'extends'", '|', "'super'", ')', 'type', '|']
['A51', ':', '(', "'extends'", '|', "'super'", ')', 'type', '|', 'empty']

	;
	'''
	pass

def p_A52(p):
	'''
	A52   :   ',' qualifiedName | A52 ',' qualifiedName
["','", 'qualifiedName', '|', 'A52', "','"]
['A52', ':', "','", 'qualifiedName', '|', 'A52', "','", 'qualifiedName']

	;
	'''
	pass

def p_A53(p):
	'''
	A53   :   formalParameterDecls | empty
['formalParameterDecls', '|']
['A53', ':', 'formalParameterDecls', '|', 'empty']

	;
	'''
	pass

def p_A54(p):
	'''
	A54   :   ',' normalParameterDecl | A54 ',' normalParameterDecl
["','", 'normalParameterDecl', '|', 'A54', "','"]
['A54', ':', "','", 'normalParameterDecl', '|', 'A54', "','", 'normalParameterDecl']

	;
	'''
	pass

def p_A55(p):
	'''
	A55   :   normalParameterDecl ',' | A55 normalParameterDecl ',' empty
['normalParameterDecl', "','", '|', 'A55', 'normalParameterDecl', "','"]
['A55', ':', 'normalParameterDecl', "','", '|', 'A55', 'normalParameterDecl', "','", 'empty']

	;
	'''
	pass

def p_A56(p):
	'''
	A56   :   '[' ']' | A56 '[' ']'
["'['", "']'", '|', 'A56', "'['"]
['A56', ':', "'['", "']'", '|', 'A56', "'['", "']'"]

	;
	'''
	pass

def p_A57(p):
	'''
	A57   :   nonWildcardTypeArguments | empty
['nonWildcardTypeArguments', '|']
['A57', ':', 'nonWildcardTypeArguments', '|', 'empty']

	;
	'''
	pass

def p_A58(p):
	'''
	A58   :   nonWildcardTypeArguments | empty
['nonWildcardTypeArguments', '|']
['A58', ':', 'nonWildcardTypeArguments', '|', 'empty']

	;
	'''
	pass

def p_A59(p):
	'''
	A59   :   '.' IDENTIFIER | A59 '.' IDENTIFIER
["'.'", 'IDENTIFIER', '|', 'A59', "'.'"]
['A59', ':', "'.'", 'IDENTIFIER', '|', 'A59', "'.'", 'IDENTIFIER']

	;
	'''
	pass

def p_A60(p):
	'''
	A60   :   annotation | A60 annotation empty
['annotation', '|', 'A60', 'annotation']
['A60', ':', 'annotation', '|', 'A60', 'annotation', 'empty']

	;
	'''
	pass

def p_A61(p):
	'''
	A61   :   elementValuePairs | elementValue | empty
['elementValuePairs', '|', 'elementValue', '|']
['A61', ':', 'elementValuePairs', '|', 'elementValue', '|', 'empty']

	;
	'''
	pass

def p_A62(p):
	'''
	A62   :   A61 '(' ')' | empty
['A61', "'('", "')'", '|']
['A62', ':', 'A61', "'('", "')'", '|', 'empty']

	;
	'''
	pass

def p_A63(p):
	'''
	A63   :   ',' elementValuePair | A63 ',' elementValuePair
["','", 'elementValuePair', '|', 'A63', "','"]
['A63', ':', "','", 'elementValuePair', '|', 'A63', "','", 'elementValuePair']

	;
	'''
	pass

def p_A64(p):
	'''
	A64   :   ',' elementValue | A64 ',' elementValue
["','", 'elementValue', '|', 'A64', "','"]
['A64', ':', "','", 'elementValue', '|', 'A64', "','", 'elementValue']

	;
	'''
	pass

def p_A65(p):
	'''
	A65   :   A64 elementValue | empty
['A64', 'elementValue', '|']
['A65', ':', 'A64', 'elementValue', '|', 'empty']

	;
	'''
	pass

def p_A66(p):
	'''
	A66   :   ',' | empty
["','", '|']
['A66', ':', "','", '|', 'empty']

	;
	'''
	pass

def p_A67(p):
	'''
	A67   :   annotationTypeElementDeclaration | A67 annotationTypeElementDeclaration
['annotationTypeElementDeclaration', '|', 'A67']
['A67', ':', 'annotationTypeElementDeclaration', '|', 'A67', 'annotationTypeElementDeclaration']

	;
	'''
	pass

def p_A68(p):
	'''
	A68   :   'default' elementValue | empty
["'default'", 'elementValue', '|']
['A68', ':', "'default'", 'elementValue', '|', 'empty']

	;
	'''
	pass

def p_A69(p):
	'''
	A69   :   blockStatement | A69 blockStatement
['blockStatement', '|', 'A69']
['A69', ':', 'blockStatement', '|', 'A69', 'blockStatement']

	;
	'''
	pass

def p_A70(p):
	'''
	A70   :   ',' variableDeclarator | A70 ',' variableDeclarator
["','", 'variableDeclarator', '|', 'A70', "','"]
['A70', ':', "','", 'variableDeclarator', '|', 'A70', "','", 'variableDeclarator']

	;
	'''
	pass

def p_A71(p):
	'''
	A71   :   ':' expression | empty
["':'", 'expression', '|']
['A71', ':', "':'", 'expression', '|', 'empty']

	;
	'''
	pass

def p_A72(p):
	'''
	A72   :   ':' expression | empty
["':'", 'expression', '|']
['A72', ':', "':'", 'expression', '|', 'empty']

	;
	'''
	pass

def p_A73(p):
	'''
	A73   :   'else' statement | empty
["'else'", 'statement', '|']
['A73', ':', "'else'", 'statement', '|', 'empty']

	;
	'''
	pass

def p_A74(p):
	'''
	A74   :   expression | empty
['expression', '|']
['A74', ':', 'expression', '|', 'empty']

	;
	'''
	pass

def p_A75(p):
	'''
	A75   :   IDENTIFIER | empty
['IDENTIFIER', '|']
['A75', ':', 'IDENTIFIER', '|', 'empty']

	;
	'''
	pass

def p_A76(p):
	'''
	A76   :   IDENTIFIER | empty
['IDENTIFIER', '|']
['A76', ':', 'IDENTIFIER', '|', 'empty']

	;
	'''
	pass

def p_A77(p):
	'''
	A77   :   switchBlockStatementGroup | A77 switchBlockStatementGroup
['switchBlockStatementGroup', '|', 'A77']
['A77', ':', 'switchBlockStatementGroup', '|', 'A77', 'switchBlockStatementGroup']

	;
	'''
	pass

def p_A78(p):
	'''
	A78   :   blockStatement | A78 blockStatement
['blockStatement', '|', 'A78']
['A78', ':', 'blockStatement', '|', 'A78', 'blockStatement']

	;
	'''
	pass

def p_A79(p):
	'''
	A79   :   catchClause | A79 catchClause
['catchClause', '|', 'A79']
['A79', ':', 'catchClause', '|', 'A79', 'catchClause']

	;
	'''
	pass

def p_A80(p):
	'''
	A80   :   '[' ']' | A80 '[' ']'
["'['", "']'", '|', 'A80', "'['"]
['A80', ':', "'['", "']'", '|', 'A80', "'['", "']'"]

	;
	'''
	pass

def p_A81(p):
	'''
	A81   :   forInit | empty
['forInit', '|']
['A81', ':', 'forInit', '|', 'empty']

	;
	'''
	pass

def p_A82(p):
	'''
	A82   :   expression | empty
['expression', '|']
['A82', ':', 'expression', '|', 'empty']

	;
	'''
	pass

def p_A83(p):
	'''
	A83   :   expressionList | empty
['expressionList', '|']
['A83', ':', 'expressionList', '|', 'empty']

	;
	'''
	pass

def p_A84(p):
	'''
	A84   :   ',' expression | A84 ',' expression
["','", 'expression', '|', 'A84', "','"]
['A84', ':', "','", 'expression', '|', 'A84', "','", 'expression']

	;
	'''
	pass

def p_A85(p):
	'''
	A85   :   assignmentOperator expression | empty
['assignmentOperator', 'expression', '|']
['A85', ':', 'assignmentOperator', 'expression', '|', 'empty']

	;
	'''
	pass

def p_A86(p):
	'''
	A86   :   '?' expression ':' conditionalExpression | empty
["'?'", 'expression', "':'", 'conditionalExpression', '|']
['A86', ':', "'?'", 'expression', "':'", 'conditionalExpression', '|', 'empty']

	;
	'''
	pass

def p_A87(p):
	'''
	A87   :   '||' conditionalAndExpression | A87 '||' conditionalAndExpression
["'||'", 'conditionalAndExpression', '|', 'A87', "'||'"]
['A87', ':', "'||'", 'conditionalAndExpression', '|', 'A87', "'||'", 'conditionalAndExpression']

	;
	'''
	pass

def p_A88(p):
	'''
	A88   :   '&amp;&amp;' inclusiveOrExpression | A88 '&amp;&amp;' inclusiveOrExpression
["'&amp;&amp;'", 'inclusiveOrExpression', '|', 'A88', "'&amp;&amp;'"]
['A88', ':', "'&amp;&amp;'", 'inclusiveOrExpression', '|', 'A88', "'&amp;&amp;'", 'inclusiveOrExpression']

	;
	'''
	pass

def p_A89(p):
	'''
	A89   :   '|' exclusiveOrExpression | A89 '|' exclusiveOrExpression
["'|'", 'exclusiveOrExpression', '|', 'A89', "'|'"]
['A89', ':', "'|'", 'exclusiveOrExpression', '|', 'A89', "'|'", 'exclusiveOrExpression']

	;
	'''
	pass

def p_A90(p):
	'''
	A90   :   '^' andExpression | A90 '^' andExpression
["'^'", 'andExpression', '|', 'A90', "'^'"]
['A90', ':', "'^'", 'andExpression', '|', 'A90', "'^'", 'andExpression']

	;
	'''
	pass

def p_A91(p):
	'''
	A91   :   '&amp;' equalityExpression | A91 '&amp;' equalityExpression
["'&amp;'", 'equalityExpression', '|', 'A91', "'&amp;'"]
['A91', ':', "'&amp;'", 'equalityExpression', '|', 'A91', "'&amp;'", 'equalityExpression']

	;
	'''
	pass

def p_A92(p):
	'''
	A92   :   ( '==' | '!=' ) instanceOfExpression | A92 ( '==' | '!=' ) instanceOfExpression
['(', "'=='", '|', "'!='", ')', 'instanceOfExpression', '|', 'A92', '(', "'=='", '|', "'!='", ')']
['A92', ':', '(', "'=='", '|', "'!='", ')', 'instanceOfExpression', '|', 'A92', '(', "'=='", '|', "'!='", ')', 'instanceOfExpression']

	;
	'''
	pass

def p_A93(p):
	'''
	A93   :   'instanceof' type | empty
["'instanceof'", 'type', '|']
['A93', ':', "'instanceof'", 'type', '|', 'empty']

	;
	'''
	pass

def p_A94(p):
	'''
	A94   :   relationalOp shiftExpression | A94 relationalOp shiftExpression
['relationalOp', 'shiftExpression', '|', 'A94', 'relationalOp']
['A94', ':', 'relationalOp', 'shiftExpression', '|', 'A94', 'relationalOp', 'shiftExpression']

	;
	'''
	pass

def p_A95(p):
	'''
	A95   :   shiftOp additiveExpression | A95 shiftOp additiveExpression
['shiftOp', 'additiveExpression', '|', 'A95', 'shiftOp']
['A95', ':', 'shiftOp', 'additiveExpression', '|', 'A95', 'shiftOp', 'additiveExpression']

	;
	'''
	pass

def p_A96(p):
	'''
	A96   :   ( '+' | '-' ) multiplicativeExpression | A96 ( '+' | '-' ) multiplicativeExpression
['(', "'+'", '|', "'-'", ')', 'multiplicativeExpression', '|', 'A96', '(', "'+'", '|', "'-'", ')']
['A96', ':', '(', "'+'", '|', "'-'", ')', 'multiplicativeExpression', '|', 'A96', '(', "'+'", '|', "'-'", ')', 'multiplicativeExpression']

	;
	'''
	pass

def p_A97(p):
	'''
	A97   :   ( '*' | '/' | '%' ) unaryExpression | A97 ( '*' | '/' | '%' ) unaryExpression
['(', "'*'", '|', "'/'", '|', "'%'", ')', 'unaryExpression', '|', 'A97', '(', "'*'", '|', "'/'", '|', "'%'", ')']
['A97', ':', '(', "'*'", '|', "'/'", '|', "'%'", ')', 'unaryExpression', '|', 'A97', '(', "'*'", '|', "'/'", '|', "'%'", ')', 'unaryExpression']

	;
	'''
	pass

def p_A98(p):
	'''
	A98   :   selector | A98 selector
['selector', '|', 'A98']
['A98', ':', 'selector', '|', 'A98', 'selector']

	;
	'''
	pass

def p_A99(p):
	'''
	A99   :   '++' | '--' | empty
["'++'", '|', "'--'", '|']
['A99', ':', "'++'", '|', "'--'", '|', 'empty']

	;
	'''
	pass

def p_A100(p):
	'''
	A100   :   '.' IDENTIFIER | A100 '.' IDENTIFIER
["'.'", 'IDENTIFIER', '|', 'A100', "'.'"]
['A100', ':', "'.'", 'IDENTIFIER', '|', 'A100', "'.'", 'IDENTIFIER']

	;
	'''
	pass

def p_A101(p):
	'''
	A101   :   identifierSuffix | empty
['identifierSuffix', '|']
['A101', ':', 'identifierSuffix', '|', 'empty']

	;
	'''
	pass

def p_A102(p):
	'''
	A102   :   '.' IDENTIFIER | A102 '.' IDENTIFIER
["'.'", 'IDENTIFIER', '|', 'A102', "'.'"]
['A102', ':', "'.'", 'IDENTIFIER', '|', 'A102', "'.'", 'IDENTIFIER']

	;
	'''
	pass

def p_A103(p):
	'''
	A103   :   identifierSuffix | empty
['identifierSuffix', '|']
['A103', ':', 'identifierSuffix', '|', 'empty']

	;
	'''
	pass

def p_A104(p):
	'''
	A104   :   '[' ']' | A104 '[' ']'
["'['", "']'", '|', 'A104', "'['"]
['A104', ':', "'['", "']'", '|', 'A104', "'['", "']'"]

	;
	'''
	pass

def p_A105(p):
	'''
	A105   :   typeArguments | empty
['typeArguments', '|']
['A105', ':', 'typeArguments', '|', 'empty']

	;
	'''
	pass

def p_A106(p):
	'''
	A106   :   arguments | empty
['arguments', '|']
['A106', ':', 'arguments', '|', 'empty']

	;
	'''
	pass

def p_A107(p):
	'''
	A107   :   '[' ']' | A107 '[' ']' empty
["'['", "']'", '|', 'A107', "'['", "']'"]
['A107', ':', "'['", "']'", '|', 'A107', "'['", "']'", 'empty']

	;
	'''
	pass

def p_A108(p):
	'''
	A108   :   '[' expression ']' | A108 '[' expression ']' empty
["'['", 'expression', "']'", '|', 'A108', "'['", 'expression', "']'"]
['A108', ':', "'['", 'expression', "']'", '|', 'A108', "'['", 'expression', "']'", 'empty']

	;
	'''
	pass

def p_A109(p):
	'''
	A109   :   arguments | empty
['arguments', '|']
['A109', ':', 'arguments', '|', 'empty']

	;
	'''
	pass

def p_A110(p):
	'''
	A110   :   '[' ']' | A110 '[' ']'
["'['", "']'", '|', 'A110', "'['"]
['A110', ':', "'['", "']'", '|', 'A110', "'['", "']'"]

	;
	'''
	pass

def p_A111(p):
	'''
	A111   :   '[' expression ']' | A111 '[' expression ']'
["'['", 'expression', "']'", '|', 'A111', "'['", 'expression']
['A111', ':', "'['", 'expression', "']'", '|', 'A111', "'['", 'expression', "']'"]

	;
	'''
	pass

def p_A112(p):
	'''
	A112   :   '[' ']' | A112 '[' ']'
["'['", "']'", '|', 'A112', "'['"]
['A112', ':', "'['", "']'", '|', 'A112', "'['", "']'"]

	;
	'''
	pass

def p_A113(p):
	'''
	A113   :   ',' variableInitializer | A113 ',' variableInitializer
["','", 'variableInitializer', '|', 'A113', "','"]
['A113', ':', "','", 'variableInitializer', '|', 'A113', "','", 'variableInitializer']

	;
	'''
	pass

def p_A114(p):
	'''
	A114   :   A113 variableInitializer | empty
['A113', 'variableInitializer', '|']
['A114', ':', 'A113', 'variableInitializer', '|', 'empty']

	;
	'''
	pass

def p_A115(p):
	'''
	A115   :   ',' | empty
["','", '|']
['A115', ':', "','", '|', 'empty']

	;
	'''
	pass

def p_A116(p):
	'''
	A116   :   nonWildcardTypeArguments | empty
['nonWildcardTypeArguments', '|']
['A116', ':', 'nonWildcardTypeArguments', '|', 'empty']

	;
	'''
	pass

def p_A117(p):
	'''
	A117   :   typeArguments | empty
['typeArguments', '|']
['A117', ':', 'typeArguments', '|', 'empty']

	;
	'''
	pass

def p_A118(p):
	'''
	A118   :   classBody | empty
['classBody', '|']
['A118', ':', 'classBody', '|', 'empty']

	;
	'''
	pass

def p_A119(p):
	'''
	A119   :   expressionList | empty
['expressionList', '|']
['A119', ':', 'expressionList', '|', 'empty']

	;
	'''
	pass

def p_A120(p):
	'''
	A120   :   type | 'void' | empty
['type', '|', "'void'", '|']
['A120', ':', 'type', '|', "'void'", '|', 'empty']

	;
	'''
	pass

def p_A121(p):
	'''
	A121   :   '[' ']' | A121 '[' ']'
["'['", "']'", '|', 'A121', "'['"]
['A121', ':', "'['", "']'", '|', 'A121', "'['", "']'"]

	;
	'''
	pass

def p_A122(p):
	'''
	A122   :   '[' ']' | A122 '[' ']'
["'['", "']'", '|', 'A122', "'['"]
['A122', ':', "'['", "']'", '|', 'A122', "'['", "']'"]

	;
	'''
	pass

